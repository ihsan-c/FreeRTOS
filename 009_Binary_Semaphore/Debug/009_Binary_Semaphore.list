
009_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006200  08006200  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006208  08006208  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001933c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200193b4  200193b4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139e2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d02  00000000  00000000  00033a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00036790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023458  00000000  00000000  00038918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014526  00000000  00000000  0005bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7429  00000000  00000000  00070296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001476bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c10  00000000  00000000  00147710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800611c 	.word	0x0800611c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800611c 	.word	0x0800611c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc57 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f847 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8d9 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8ad 	bl	80006f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg,"Initialized \r\n");
 800059a:	491a      	ldr	r1, [pc, #104]	; (8000604 <main+0x80>)
 800059c:	481a      	ldr	r0, [pc, #104]	; (8000608 <main+0x84>)
 800059e:	f005 f95d 	bl	800585c <siprintf>
  printmsg(msg);
 80005a2:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0x84>)
 80005a4:	f000 fa36 	bl	8000a14 <printmsg>
  vSemaphoreCreateBinary(handle_semaphore);
 80005a8:	2203      	movs	r2, #3
 80005aa:	2100      	movs	r1, #0
 80005ac:	2001      	movs	r0, #1
 80005ae:	f002 fb99 	bl	8002ce4 <xQueueGenericCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <main+0x88>)
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <main+0x88>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d006      	beq.n	80005ce <main+0x4a>
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <main+0x88>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 fc0d 	bl	8002de8 <xQueueGenericSend>

  status=xTaskCreate(task1, "masterTask", 500, NULL, 2, NULL);
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <main+0x8c>)
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x90>)
 80005e0:	f003 f9b8 	bl	8003954 <xTaskCreate>
 80005e4:	6078      	str	r0, [r7, #4]

  status=xTaskCreate(task_semaph, "slaveTask", 500, NULL, 2, NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f4:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0x94>)
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <main+0x98>)
 80005f8:	f003 f9ac 	bl	8003954 <xTaskCreate>
 80005fc:	6078      	str	r0, [r7, #4]

  vTaskStartScheduler();
 80005fe:	f003 fb23 	bl	8003c48 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x7e>
 8000604:	08006134 	.word	0x08006134
 8000608:	200000dc 	.word	0x200000dc
 800060c:	20000094 	.word	0x20000094
 8000610:	08006144 	.word	0x08006144
 8000614:	08000a59 	.word	0x08000a59
 8000618:	08006150 	.word	0x08006150
 800061c:	08000a81 	.word	0x08000a81

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 f90c 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000694:	2332      	movs	r3, #50	; 0x32
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000698:	2304      	movs	r3, #4
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fec7 	bl	8001438 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 fa12 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f928 	bl	8001928 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f9fb 	bl	8000ad8 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f001 fdfc 	bl	8002328 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f9cf 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000098 	.word	0x20000098
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4ba6      	ldr	r3, [pc, #664]	; (80009fc <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4aa5      	ldr	r2, [pc, #660]	; (80009fc <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4ba3      	ldr	r3, [pc, #652]	; (80009fc <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b9f      	ldr	r3, [pc, #636]	; (80009fc <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a9e      	ldr	r2, [pc, #632]	; (80009fc <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b9c      	ldr	r3, [pc, #624]	; (80009fc <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b98      	ldr	r3, [pc, #608]	; (80009fc <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a97      	ldr	r2, [pc, #604]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b95      	ldr	r3, [pc, #596]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b91      	ldr	r3, [pc, #580]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a90      	ldr	r2, [pc, #576]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b8e      	ldr	r3, [pc, #568]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a89      	ldr	r2, [pc, #548]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b87      	ldr	r3, [pc, #540]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b83      	ldr	r3, [pc, #524]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a82      	ldr	r2, [pc, #520]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b80      	ldr	r3, [pc, #512]	; (80009fc <MX_GPIO_Init+0x2b4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	487d      	ldr	r0, [pc, #500]	; (8000a00 <MX_GPIO_Init+0x2b8>)
 800080c:	f000 fdd6 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	487b      	ldr	r0, [pc, #492]	; (8000a04 <MX_GPIO_Init+0x2bc>)
 8000816:	f000 fdd1 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800081a:	2200      	movs	r2, #0
 800081c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000820:	4879      	ldr	r0, [pc, #484]	; (8000a08 <MX_GPIO_Init+0x2c0>)
 8000822:	f000 fdcb 	bl	80013bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4870      	ldr	r0, [pc, #448]	; (8000a00 <MX_GPIO_Init+0x2b8>)
 800083e:	f000 fc21 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	486a      	ldr	r0, [pc, #424]	; (8000a04 <MX_GPIO_Init+0x2bc>)
 800085a:	f000 fc13 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4862      	ldr	r0, [pc, #392]	; (8000a04 <MX_GPIO_Init+0x2bc>)
 800087a:	f000 fc03 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	485e      	ldr	r0, [pc, #376]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000894:	f000 fbf6 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000898:	2310      	movs	r3, #16
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a8:	2306      	movs	r3, #6
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4856      	ldr	r0, [pc, #344]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80008b4:	f000 fbe6 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b8:	23e0      	movs	r3, #224	; 0xe0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c8:	2305      	movs	r3, #5
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 80008d4:	f000 fbd6 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4849      	ldr	r0, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 80008ec:	f000 fbca 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4840      	ldr	r0, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 800090e:	f000 fbb9 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x2c0>)
 800092c:	f000 fbaa 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000930:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000942:	2306      	movs	r3, #6
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x2bc>)
 800094e:	f000 fb99 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4829      	ldr	r0, [pc, #164]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 8000968:	f000 fb8c 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800096c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097e:	230a      	movs	r3, #10
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4820      	ldr	r0, [pc, #128]	; (8000a0c <MX_GPIO_Init+0x2c4>)
 800098a:	f000 fb7b 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098e:	2320      	movs	r3, #32
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_GPIO_Init+0x2c0>)
 80009a2:	f000 fb6f 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b8:	2304      	movs	r3, #4
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x2c8>)
 80009c4:	f000 fb5e 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0x2b8>)
 80009de:	f000 fb51 	bl	8001084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2106      	movs	r1, #6
 80009e6:	2006      	movs	r0, #6
 80009e8:	f000 fb22 	bl	8001030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ec:	2006      	movs	r0, #6
 80009ee:	f000 fb3b 	bl	8001068 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f2:	bf00      	nop
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *msg)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    // Send each character in the message
    for(uint32_t i = 0; i < strlen(msg); i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e00b      	b.n	8000a3a <printmsg+0x26>
    {
        // Transmit each character using HAL_UART_Transmit
        HAL_UART_Transmit(&huart2, (uint8_t *)&msg[i], 1, HAL_MAX_DELAY);
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	18d1      	adds	r1, r2, r3
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <printmsg+0x40>)
 8000a30:	f001 fcc7 	bl	80023c2 <HAL_UART_Transmit>
    for(uint32_t i = 0; i < strlen(msg); i++)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fbc8 	bl	80001d0 <strlen>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d3ec      	bcc.n	8000a22 <printmsg+0xe>
    }

    // HAL_UART_Transmit blocks until transmission is complete, so no need for additional checks
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000098 	.word	0x20000098

08000a58 <task1>:
void task1(void*param)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

   while(1)
   {
	   Uart_Print("Task-1 running\r\n");
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	2210      	movs	r2, #16
 8000a66:	4904      	ldr	r1, [pc, #16]	; (8000a78 <task1+0x20>)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <task1+0x24>)
 8000a6a:	f001 fcaa 	bl	80023c2 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a72:	f003 f8b5 	bl	8003be0 <vTaskDelay>
	   Uart_Print("Task-1 running\r\n");
 8000a76:	e7f3      	b.n	8000a60 <task1+0x8>
 8000a78:	0800615c 	.word	0x0800615c
 8000a7c:	20000098 	.word	0x20000098

08000a80 <task_semaph>:
   }
}


void task_semaph(void*param)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

    /* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
    {
		 xSemaphoreTake(handle_semaphore,portMAX_DELAY);                                // If semaphore is not available, the task waits for the maximum time in the blocked state.
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <task_semaph+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fccd 	bl	8003430 <xQueueSemaphoreTake>
		 Uart_Print("Task semaph running\r\n");
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	2215      	movs	r2, #21
 8000a9c:	4903      	ldr	r1, [pc, #12]	; (8000aac <task_semaph+0x2c>)
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <task_semaph+0x30>)
 8000aa0:	f001 fc8f 	bl	80023c2 <HAL_UART_Transmit>
		 xSemaphoreTake(handle_semaphore,portMAX_DELAY);                                // If semaphore is not available, the task waits for the maximum time in the blocked state.
 8000aa4:	e7f0      	b.n	8000a88 <task_semaph+0x8>
 8000aa6:	bf00      	nop
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	08006170 	.word	0x08006170
 8000ab0:	20000098 	.word	0x20000098

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f9db 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12b      	bne.n	8000bae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x8c>)
 8000baa:	f000 fa6b 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_InitTick+0xe4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 0210 	add.w	r2, r7, #16
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f8b4 	bl	8001d68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c0a:	f001 f885 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8000c0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f881 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8000c16:	4603      	mov	r3, r0
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <HAL_InitTick+0xe8>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	0c9b      	lsrs	r3, r3, #18
 8000c26:	3b01      	subs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_InitTick+0xf0>)
 8000c2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c52:	f001 f8bb 	bl	8001dcc <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11b      	bne.n	8000c9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_InitTick+0xec>)
 8000c66:	f001 f90b 	bl	8001e80 <HAL_TIM_Base_Start_IT>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d111      	bne.n	8000c9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c78:	2036      	movs	r0, #54	; 0x36
 8000c7a:	f000 f9f5 	bl	8001068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d808      	bhi.n	8000c96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2036      	movs	r0, #54	; 0x36
 8000c8a:	f000 f9d1 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0xf4>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e002      	b.n	8000c9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3738      	adds	r7, #56	; 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	200001a4 	.word	0x200001a4
 8000cb4:	40001000 	.word	0x40001000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
	 Uart_Print("ISR is running\r\n");
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	490e      	ldr	r1, [pc, #56]	; (8000d34 <EXTI0_IRQHandler+0x4c>)
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <EXTI0_IRQHandler+0x50>)
 8000cfc:	f001 fb61 	bl	80023c2 <HAL_UART_Transmit>
	    xSemaphoreGiveFromISR(handle_semaphore,&xHigherPriorityTaskWoken);    // Give semaphore from ISR
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <EXTI0_IRQHandler+0x54>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	1d3a      	adds	r2, r7, #4
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fa15 	bl	8003138 <xQueueGiveFromISR>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fb6e 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);                                // if xHigherPriorityTaskWoken is equal pdTRUE then force the kernel to context switching
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <EXTI0_IRQHandler+0x42>
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <EXTI0_IRQHandler+0x58>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	08006188 	.word	0x08006188
 8000d38:	20000098 	.word	0x20000098
 8000d3c:	20000094 	.word	0x20000094
 8000d40:	e000ed04 	.word	0xe000ed04

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM6_DAC_IRQHandler+0x10>)
 8000d4a:	f001 f909 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001a4 	.word	0x200001a4

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f004 fd28 	bl	80057dc <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	200001ec 	.word	0x200001ec
 8000dc0:	200193b8 	.word	0x200193b8

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 fce7 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fbb3 	bl	8000584 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e2c:	08006210 	.word	0x08006210
  ldr r2, =_sbss
 8000e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e34:	200193b4 	.word	0x200193b4

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f8d8 	bl	800101a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff feaa 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe38 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200001f0 	.word	0x200001f0

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001f0 	.word	0x200001f0

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff4c 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff61 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb1 	bl	8000fb4 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff80 	bl	8000f60 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff54 	bl	8000f24 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e16b      	b.n	8001378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 815a 	bne.w	8001372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80b4 	beq.w	8001372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b60      	ldr	r3, [pc, #384]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <HAL_GPIO_Init+0x30c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a5b      	ldr	r2, [pc, #364]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x314>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d02b      	beq.n	80012aa <HAL_GPIO_Init+0x226>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x318>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d025      	beq.n	80012a6 <HAL_GPIO_Init+0x222>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d01f      	beq.n	80012a2 <HAL_GPIO_Init+0x21e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x21a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x216>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x328>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x212>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x32c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_GPIO_Init+0x330>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x20a>
 800128a:	2307      	movs	r3, #7
 800128c:	e00e      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800128e:	2308      	movs	r3, #8
 8001290:	e00c      	b.n	80012ac <HAL_GPIO_Init+0x228>
 8001292:	2306      	movs	r3, #6
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x228>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x228>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x228>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x310>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_GPIO_Init+0x334>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_GPIO_Init+0x334>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_GPIO_Init+0x334>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HAL_GPIO_Init+0x334>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f ae90 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021400 	.word	0x40021400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40021c00 	.word	0x40021c00
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f806 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e267      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d075      	beq.n	8001542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00c      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d112      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b82      	ldr	r3, [pc, #520]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05b      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d157      	bne.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e242      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x74>
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a75      	ldr	r2, [pc, #468]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6f      	ldr	r2, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6c      	ldr	r2, [pc, #432]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014d0:	4b69      	ldr	r3, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a68      	ldr	r2, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcda 	bl	8000ea8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fcd6 	bl	8000ea8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e207      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcc6 	bl	8000ea8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcc2 	bl	8000ea8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1f3      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b44      	ldr	r3, [pc, #272]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c7      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4937      	ldr	r1, [pc, #220]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_RCC_OscConfig+0x244>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc7b 	bl	8000ea8 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc77 	bl	8000ea8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a8      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4925      	ldr	r1, [pc, #148]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_OscConfig+0x244>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc5a 	bl	8000ea8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc56 	bl	8000ea8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e187      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d036      	beq.n	8001690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x248>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fc3a 	bl	8000ea8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc36 	bl	8000ea8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e167      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x200>
 8001656:	e01b      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_OscConfig+0x248>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fc23 	bl	8000ea8 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	e00e      	b.n	8001684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fc1f 	bl	8000ea8 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d907      	bls.n	8001684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e150      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	42470000 	.word	0x42470000
 8001680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ea      	bne.n	8001666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8097 	beq.w	80017cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b77      	ldr	r3, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b74      	ldr	r3, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a73      	ldr	r2, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbdf 	bl	8000ea8 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fbdb 	bl	8000ea8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e10c      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x2ea>
 8001714:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	e01c      	b.n	800175c <HAL_RCC_OscConfig+0x324>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x30c>
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a5b      	ldr	r2, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0x324>
 8001744:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a54      	ldr	r2, [pc, #336]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d015      	beq.n	8001790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fba0 	bl	8000ea8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fb9c 	bl	8000ea8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0cb      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0ee      	beq.n	800176c <HAL_RCC_OscConfig+0x334>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fb8a 	bl	8000ea8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fb86 	bl	8000ea8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0b5      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ee      	bne.n	8001798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a38      	ldr	r2, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80a1 	beq.w	8001918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d05c      	beq.n	800189c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d141      	bne.n	800186e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb5a 	bl	8000ea8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fb56 	bl	8000ea8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e087      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	3b01      	subs	r3, #1
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb2f 	bl	8000ea8 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fb2b 	bl	8000ea8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e05c      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x416>
 800186c:	e054      	b.n	8001918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb18 	bl	8000ea8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb14 	bl	8000ea8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e045      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x444>
 800189a:	e03d      	b.n	8001918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e038      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000
 80018b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x4ec>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d028      	beq.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d121      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0cc      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d044      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d119      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e067      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4934      	ldr	r1, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fa46 	bl	8000ea8 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff fa42 	bl	8000ea8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e04f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20c      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f821 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f878 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	080061b4 	.word	0x080061b4
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af8:	b094      	sub	sp, #80	; 0x50
 8001afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
 8001b00:	2300      	movs	r3, #0
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b04:	2300      	movs	r3, #0
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0c:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d00d      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x40>
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	f200 80e1 	bhi.w	8001ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b26:	e0db      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b2c:	e0db      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b32:	e0d8      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d063      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
 8001b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b66:	4622      	mov	r2, r4
 8001b68:	462b      	mov	r3, r5
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0159      	lsls	r1, r3, #5
 8001b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b78:	0150      	lsls	r0, r2, #5
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4621      	mov	r1, r4
 8001b80:	1a51      	subs	r1, r2, r1
 8001b82:	6139      	str	r1, [r7, #16]
 8001b84:	4629      	mov	r1, r5
 8001b86:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b98:	4659      	mov	r1, fp
 8001b9a:	018b      	lsls	r3, r1, #6
 8001b9c:	4651      	mov	r1, sl
 8001b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	018a      	lsls	r2, r1, #6
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bac:	4659      	mov	r1, fp
 8001bae:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc6:	4690      	mov	r8, r2
 8001bc8:	4699      	mov	r9, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	eb18 0303 	adds.w	r3, r8, r3
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	462b      	mov	r3, r5
 8001bd4:	eb49 0303 	adc.w	r3, r9, r3
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be6:	4629      	mov	r1, r5
 8001be8:	024b      	lsls	r3, r1, #9
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	024a      	lsls	r2, r1, #9
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c04:	f7fe fb3c 	bl	8000280 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c10:	e058      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c2c:	4642      	mov	r2, r8
 8001c2e:	464b      	mov	r3, r9
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	0159      	lsls	r1, r3, #5
 8001c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3e:	0150      	lsls	r0, r2, #5
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4641      	mov	r1, r8
 8001c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c64:	ebb2 040a 	subs.w	r4, r2, sl
 8001c68:	eb63 050b 	sbc.w	r5, r3, fp
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	00eb      	lsls	r3, r5, #3
 8001c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7a:	00e2      	lsls	r2, r4, #3
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4643      	mov	r3, r8
 8001c82:	18e3      	adds	r3, r4, r3
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	464b      	mov	r3, r9
 8001c88:	eb45 0303 	adc.w	r3, r5, r3
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	028b      	lsls	r3, r1, #10
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	028a      	lsls	r2, r1, #10
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	61fa      	str	r2, [r7, #28]
 8001cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb8:	f7fe fae2 	bl	8000280 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cde:	e002      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3750      	adds	r7, #80	; 0x50
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a9b      	lsrs	r3, r3, #10
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	080061c4 	.word	0x080061c4

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d44:	f7ff ffdc 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0b5b      	lsrs	r3, r3, #13
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	080061c4 	.word	0x080061c4

08001d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	220f      	movs	r2, #15
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_GetClockConfig+0x60>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0207 	and.w	r2, r3, #7
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f839 	bl	8001e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 f9d8 	bl	80021c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d001      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e04e      	b.n	8001f36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d01d      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d018      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00e      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d010      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	e007      	b.n	8001f34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40000c00 	.word	0x40000c00
 8001f54:	40010400 	.word	0x40010400
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40001800 	.word	0x40001800

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ee 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8e0 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8f1 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8c4 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8b6 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8c7 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f89a 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f88c 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f89d 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b10      	cmp	r3, #16
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f870 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f862 	bl	8002170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f873 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fce8 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f902 	bl	8002314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f838 	bl	80021ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8cc 	bl	8002300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d00f      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <TIM_Base_SetConfig+0x118>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <TIM_Base_SetConfig+0x11c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <TIM_Base_SetConfig+0x120>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d027      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <TIM_Base_SetConfig+0x118>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d023      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <TIM_Base_SetConfig+0x11c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <TIM_Base_SetConfig+0x120>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d017      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <TIM_Base_SetConfig+0x128>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <TIM_Base_SetConfig+0x12c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00f      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <TIM_Base_SetConfig+0x130>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <TIM_Base_SetConfig+0x134>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <TIM_Base_SetConfig+0x138>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a23      	ldr	r2, [pc, #140]	; (80022fc <TIM_Base_SetConfig+0x13c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <TIM_Base_SetConfig+0x114>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0xf8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <TIM_Base_SetConfig+0x124>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40000c00 	.word	0x40000c00
 80022e4:	40010400 	.word	0x40010400
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40014400 	.word	0x40014400
 80022f0:	40014800 	.word	0x40014800
 80022f4:	40001800 	.word	0x40001800
 80022f8:	40001c00 	.word	0x40001c00
 80022fc:	40002000 	.word	0x40002000

08002300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e03f      	b.n	80023ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fbf0 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800236a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f929 	bl	80025c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08a      	sub	sp, #40	; 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d17c      	bne.n	80024dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_Transmit+0x2c>
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e075      	b.n	80024de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Transmit+0x3e>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e06e      	b.n	80024de <HAL_UART_Transmit+0x11c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002416:	f7fe fd47 	bl	8000ea8 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d108      	bne.n	8002444 <HAL_UART_Transmit+0x82>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d104      	bne.n	8002444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e003      	b.n	800244c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002454:	e02a      	b.n	80024ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f840 	bl	80024e6 <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e036      	b.n	80024de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3302      	adds	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e007      	b.n	800249e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	3301      	adds	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1cf      	bne.n	8002456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f810 	bl	80024e6 <UART_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b090      	sub	sp, #64	; 0x40
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f6:	e050      	b.n	800259a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d04c      	beq.n	800259a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0x30>
 8002506:	f7fe fccf 	bl	8000ea8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002512:	429a      	cmp	r2, r3
 8002514:	d241      	bcs.n	800259a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002536:	637a      	str	r2, [r7, #52]	; 0x34
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800253c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e5      	bne.n	8002516 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3314      	adds	r3, #20
 8002550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	e853 3f00 	ldrex	r3, [r3]
 8002558:	613b      	str	r3, [r7, #16]
   return(result);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800256a:	623a      	str	r2, [r7, #32]
 800256c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256e:	69f9      	ldr	r1, [r7, #28]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	61bb      	str	r3, [r7, #24]
   return(result);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e5      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e00f      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d09f      	beq.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3740      	adds	r7, #64	; 0x40
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b0c0      	sub	sp, #256	; 0x100
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	ea40 0301 	orr.w	r3, r0, r1
 80025ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800261c:	f021 010c 	bic.w	r1, r1, #12
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800262a:	430b      	orrs	r3, r1
 800262c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	6999      	ldr	r1, [r3, #24]
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	ea40 0301 	orr.w	r3, r0, r1
 800264a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <UART_SetConfig+0x2cc>)
 8002654:	429a      	cmp	r2, r3
 8002656:	d005      	beq.n	8002664 <UART_SetConfig+0xa0>
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b8d      	ldr	r3, [pc, #564]	; (8002894 <UART_SetConfig+0x2d0>)
 8002660:	429a      	cmp	r2, r3
 8002662:	d104      	bne.n	800266e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002664:	f7ff fb6c 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800266c:	e003      	b.n	8002676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800266e:	f7ff fb53 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8002672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002680:	f040 810c 	bne.w	800289c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800268e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	1891      	adds	r1, r2, r2
 800269c:	65b9      	str	r1, [r7, #88]	; 0x58
 800269e:	415b      	adcs	r3, r3
 80026a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026a6:	4621      	mov	r1, r4
 80026a8:	eb12 0801 	adds.w	r8, r2, r1
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb43 0901 	adc.w	r9, r3, r1
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	eb18 0303 	adds.w	r3, r8, r3
 80026d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026d4:	462b      	mov	r3, r5
 80026d6:	eb49 0303 	adc.w	r3, r9, r3
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026f2:	460b      	mov	r3, r1
 80026f4:	18db      	adds	r3, r3, r3
 80026f6:	653b      	str	r3, [r7, #80]	; 0x50
 80026f8:	4613      	mov	r3, r2
 80026fa:	eb42 0303 	adc.w	r3, r2, r3
 80026fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002708:	f7fd fdba 	bl	8000280 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <UART_SetConfig+0x2d4>)
 8002712:	fba3 2302 	umull	r2, r3, r3, r2
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	011c      	lsls	r4, r3, #4
 800271a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800272c:	4642      	mov	r2, r8
 800272e:	464b      	mov	r3, r9
 8002730:	1891      	adds	r1, r2, r2
 8002732:	64b9      	str	r1, [r7, #72]	; 0x48
 8002734:	415b      	adcs	r3, r3
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800273c:	4641      	mov	r1, r8
 800273e:	eb12 0a01 	adds.w	sl, r2, r1
 8002742:	4649      	mov	r1, r9
 8002744:	eb43 0b01 	adc.w	fp, r3, r1
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800275c:	4692      	mov	sl, r2
 800275e:	469b      	mov	fp, r3
 8002760:	4643      	mov	r3, r8
 8002762:	eb1a 0303 	adds.w	r3, sl, r3
 8002766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800276a:	464b      	mov	r3, r9
 800276c:	eb4b 0303 	adc.w	r3, fp, r3
 8002770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002788:	460b      	mov	r3, r1
 800278a:	18db      	adds	r3, r3, r3
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
 800278e:	4613      	mov	r3, r2
 8002790:	eb42 0303 	adc.w	r3, r2, r3
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
 8002796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800279a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800279e:	f7fd fd6f 	bl	8000280 <__aeabi_uldivmod>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <UART_SetConfig+0x2d4>)
 80027aa:	fba3 2301 	umull	r2, r3, r3, r1
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2264      	movs	r2, #100	; 0x64
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	1acb      	subs	r3, r1, r3
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <UART_SetConfig+0x2d4>)
 80027c0:	fba3 2302 	umull	r2, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027cc:	441c      	add	r4, r3
 80027ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	1891      	adds	r1, r2, r2
 80027e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027e8:	415b      	adcs	r3, r3
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027f0:	4641      	mov	r1, r8
 80027f2:	1851      	adds	r1, r2, r1
 80027f4:	6339      	str	r1, [r7, #48]	; 0x30
 80027f6:	4649      	mov	r1, r9
 80027f8:	414b      	adcs	r3, r1
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002808:	4659      	mov	r1, fp
 800280a:	00cb      	lsls	r3, r1, #3
 800280c:	4651      	mov	r1, sl
 800280e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002812:	4651      	mov	r1, sl
 8002814:	00ca      	lsls	r2, r1, #3
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	4603      	mov	r3, r0
 800281c:	4642      	mov	r2, r8
 800281e:	189b      	adds	r3, r3, r2
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002824:	464b      	mov	r3, r9
 8002826:	460a      	mov	r2, r1
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800283c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002844:	460b      	mov	r3, r1
 8002846:	18db      	adds	r3, r3, r3
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	4613      	mov	r3, r2
 800284c:	eb42 0303 	adc.w	r3, r2, r3
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800285a:	f7fd fd11 	bl	8000280 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <UART_SetConfig+0x2d4>)
 8002864:	fba3 1302 	umull	r1, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <UART_SetConfig+0x2d4>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	f003 0207 	and.w	r2, r3, #7
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4422      	add	r2, r4
 800288a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800288c:	e105      	b.n	8002a9a <UART_SetConfig+0x4d6>
 800288e:	bf00      	nop
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800289c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028ae:	4642      	mov	r2, r8
 80028b0:	464b      	mov	r3, r9
 80028b2:	1891      	adds	r1, r2, r2
 80028b4:	6239      	str	r1, [r7, #32]
 80028b6:	415b      	adcs	r3, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028be:	4641      	mov	r1, r8
 80028c0:	1854      	adds	r4, r2, r1
 80028c2:	4649      	mov	r1, r9
 80028c4:	eb43 0501 	adc.w	r5, r3, r1
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	00eb      	lsls	r3, r5, #3
 80028d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d6:	00e2      	lsls	r2, r4, #3
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	18e3      	adds	r3, r4, r3
 80028e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028e4:	464b      	mov	r3, r9
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800290a:	4629      	mov	r1, r5
 800290c:	008b      	lsls	r3, r1, #2
 800290e:	4621      	mov	r1, r4
 8002910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002914:	4621      	mov	r1, r4
 8002916:	008a      	lsls	r2, r1, #2
 8002918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800291c:	f7fd fcb0 	bl	8000280 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <UART_SetConfig+0x4e4>)
 8002926:	fba3 2302 	umull	r2, r3, r3, r2
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	011c      	lsls	r4, r3, #4
 800292e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800293c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002940:	4642      	mov	r2, r8
 8002942:	464b      	mov	r3, r9
 8002944:	1891      	adds	r1, r2, r2
 8002946:	61b9      	str	r1, [r7, #24]
 8002948:	415b      	adcs	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002950:	4641      	mov	r1, r8
 8002952:	1851      	adds	r1, r2, r1
 8002954:	6139      	str	r1, [r7, #16]
 8002956:	4649      	mov	r1, r9
 8002958:	414b      	adcs	r3, r1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002968:	4659      	mov	r1, fp
 800296a:	00cb      	lsls	r3, r1, #3
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002972:	4651      	mov	r1, sl
 8002974:	00ca      	lsls	r2, r1, #3
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	4603      	mov	r3, r0
 800297c:	4642      	mov	r2, r8
 800297e:	189b      	adds	r3, r3, r2
 8002980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002984:	464b      	mov	r3, r9
 8002986:	460a      	mov	r2, r1
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
 800299a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029a8:	4649      	mov	r1, r9
 80029aa:	008b      	lsls	r3, r1, #2
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b2:	4641      	mov	r1, r8
 80029b4:	008a      	lsls	r2, r1, #2
 80029b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ba:	f7fd fc61 	bl	8000280 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <UART_SetConfig+0x4e4>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	3332      	adds	r3, #50	; 0x32
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <UART_SetConfig+0x4e4>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	441c      	add	r4, r3
 80029e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e8:	2200      	movs	r2, #0
 80029ea:	673b      	str	r3, [r7, #112]	; 0x70
 80029ec:	677a      	str	r2, [r7, #116]	; 0x74
 80029ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	415b      	adcs	r3, r3
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a02:	4641      	mov	r1, r8
 8002a04:	1851      	adds	r1, r2, r1
 8002a06:	6039      	str	r1, [r7, #0]
 8002a08:	4649      	mov	r1, r9
 8002a0a:	414b      	adcs	r3, r1
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a1a:	4659      	mov	r1, fp
 8002a1c:	00cb      	lsls	r3, r1, #3
 8002a1e:	4651      	mov	r1, sl
 8002a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a24:	4651      	mov	r1, sl
 8002a26:	00ca      	lsls	r2, r1, #3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4642      	mov	r2, r8
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a34:	464b      	mov	r3, r9
 8002a36:	460a      	mov	r2, r1
 8002a38:	eb42 0303 	adc.w	r3, r2, r3
 8002a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	663b      	str	r3, [r7, #96]	; 0x60
 8002a48:	667a      	str	r2, [r7, #100]	; 0x64
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a56:	4649      	mov	r1, r9
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a60:	4641      	mov	r1, r8
 8002a62:	008a      	lsls	r2, r1, #2
 8002a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a68:	f7fd fc0a 	bl	8000280 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <UART_SetConfig+0x4e4>)
 8002a72:	fba3 1302 	umull	r1, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2164      	movs	r1, #100	; 0x64
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	3332      	adds	r3, #50	; 0x32
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <UART_SetConfig+0x4e4>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4422      	add	r2, r4
 8002a98:	609a      	str	r2, [r3, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	51eb851f 	.word	0x51eb851f

08002aac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f103 0208 	add.w	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 0208 	add.w	r2, r3, #8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f103 0208 	add.w	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d103      	bne.n	8002b6e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e00c      	b.n	8002b88 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3308      	adds	r3, #8
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e002      	b.n	8002b7c <vListInsert+0x2e>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d2f6      	bcs.n	8002b76 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6852      	ldr	r2, [r2, #4]
 8002be0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d103      	bne.n	8002bf4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002c3e:	f002 fa63 	bl	8005108 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d114      	bne.n	8002cbe <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01a      	beq.n	8002cd2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3310      	adds	r3, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fa41 	bl	8004128 <xTaskRemoveFromEventList>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <xQueueGenericReset+0xcc>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	e009      	b.n	8002cd2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fef2 	bl	8002aac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3324      	adds	r3, #36	; 0x24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff feed 	bl	8002aac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002cd2:	f002 fa49 	bl	8005168 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61bb      	str	r3, [r7, #24]
    }
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <xQueueGenericCreate+0x48>
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d101      	bne.n	8002d30 <xQueueGenericCreate+0x4c>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <xQueueGenericCreate+0x4e>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <xQueueGenericCreate+0x68>
        __asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	617b      	str	r3, [r7, #20]
    }
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002d52:	d90a      	bls.n	8002d6a <xQueueGenericCreate+0x86>
        __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	613b      	str	r3, [r7, #16]
    }
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	3350      	adds	r3, #80	; 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 faec 	bl	800534c <pvPortMalloc>
 8002d74:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3350      	adds	r3, #80	; 0x50
 8002d84:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f805 	bl	8002da2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
    }
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e002      	b.n	8002dc4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	69b8      	ldr	r0, [r7, #24]
 8002dd4:	f7ff ff1e 	bl	8002c14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08e      	sub	sp, #56	; 0x38
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002df6:	2300      	movs	r3, #0
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericSend+0x32>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <xQueueGenericSend+0x40>
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <xQueueGenericSend+0x44>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <xQueueGenericSend+0x46>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <xQueueGenericSend+0x60>
        __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x6e>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <xQueueGenericSend+0x72>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueGenericSend+0x74>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueGenericSend+0x8e>
        __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	623b      	str	r3, [r7, #32]
    }
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e76:	f001 faf3 	bl	8004460 <xTaskGetSchedulerState>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <xQueueGenericSend+0x9e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSend+0xa2>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSend+0xa4>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericSend+0xbe>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ea6:	f002 f92f 	bl	8005108 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <xQueueGenericSend+0xd4>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d129      	bne.n	8002f10 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f000 fbd9 	bl	8003678 <prvCopyDataToQueue>
 8002ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	3324      	adds	r3, #36	; 0x24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f927 	bl	8004128 <xTaskRemoveFromEventList>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <xQueueGenericSend+0x1f8>)
 8002ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	e00a      	b.n	8002f08 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <xQueueGenericSend+0x1f8>)
 8002efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002f08:	f002 f92e 	bl	8005168 <vPortExitCritical>
                return pdPASS;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e063      	b.n	8002fd8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f16:	f002 f927 	bl	8005168 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e05c      	b.n	8002fd8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 f95f 	bl	80041ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f32:	f002 f919 	bl	8005168 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f36:	f000 fed9 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f3a:	f002 f8e5 	bl	8005108 <vPortEnterCritical>
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d103      	bne.n	8002f54 <xQueueGenericSend+0x16c>
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <xQueueGenericSend+0x182>
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f6a:	f002 f8fd 	bl	8005168 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f6e:	1d3a      	adds	r2, r7, #4
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 f94e 	bl	8004218 <xTaskCheckForTimeOut>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d124      	bne.n	8002fcc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f84:	f000 fc70 	bl	8003868 <prvIsQueueFull>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d018      	beq.n	8002fc0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	3310      	adds	r3, #16
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f876 	bl	8004088 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f9e:	f000 fbfb 	bl	8003798 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002fa2:	f000 feb1 	bl	8003d08 <xTaskResumeAll>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f af7c 	bne.w	8002ea6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <xQueueGenericSend+0x1f8>)
 8002fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	e772      	b.n	8002ea6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc2:	f000 fbe9 	bl	8003798 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002fc6:	f000 fe9f 	bl	8003d08 <xTaskResumeAll>
 8002fca:	e76c      	b.n	8002ea6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fce:	f000 fbe3 	bl	8003798 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002fd2:	f000 fe99 	bl	8003d08 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002fd6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3738      	adds	r7, #56	; 0x38
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b090      	sub	sp, #64	; 0x40
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800300e:	bf00      	nop
 8003010:	e7fe      	b.n	8003010 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <xQueueGenericSendFromISR+0x3c>
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <xQueueGenericSendFromISR+0x40>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <xQueueGenericSendFromISR+0x42>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d103      	bne.n	800304e <xQueueGenericSendFromISR+0x6a>
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <xQueueGenericSendFromISR+0x6e>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <xQueueGenericSendFromISR+0x70>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	623b      	str	r3, [r7, #32]
    }
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800306e:	f002 f92d 	bl	80052cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003072:	f3ef 8211 	mrs	r2, BASEPRI
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800308a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <xQueueGenericSendFromISR+0xbc>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d13e      	bne.n	800311e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030b6:	f000 fadf 	bl	8003678 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80030ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d112      	bne.n	80030ea <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d025      	beq.n	8003118 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	3324      	adds	r3, #36	; 0x24
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 f829 	bl	8004128 <xTaskRemoveFromEventList>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01d      	beq.n	8003118 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01a      	beq.n	8003118 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e016      	b.n	8003118 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80030ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030ee:	2b7f      	cmp	r3, #127	; 0x7f
 80030f0:	d10a      	bne.n	8003108 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	617b      	str	r3, [r7, #20]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800310c:	3301      	adds	r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	b25a      	sxtb	r2, r3
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003118:	2301      	movs	r3, #1
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800311c:	e001      	b.n	8003122 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800311e:	2300      	movs	r3, #0
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800312c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003130:	4618      	mov	r0, r3
 8003132:	3740      	adds	r7, #64	; 0x40
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08e      	sub	sp, #56	; 0x38
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xQueueGiveFromISR+0x2a>
        __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	623b      	str	r3, [r7, #32]
    }
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <xQueueGiveFromISR+0x48>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61fb      	str	r3, [r7, #28]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <xQueueGiveFromISR+0x58>
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <xQueueGiveFromISR+0x5c>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <xQueueGiveFromISR+0x5e>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <xQueueGiveFromISR+0x78>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	61bb      	str	r3, [r7, #24]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b0:	f002 f88c 	bl	80052cc <vPortValidateInterruptPriority>
        __asm volatile
 80031b4:	f3ef 8211 	mrs	r2, BASEPRI
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	617a      	str	r2, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80031cc:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031dc:	429a      	cmp	r2, r3
 80031de:	d23a      	bcs.n	8003256 <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80031f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d112      	bne.n	8003222 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d025      	beq.n	8003250 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	3324      	adds	r3, #36	; 0x24
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff8d 	bl	8004128 <xTaskRemoveFromEventList>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01d      	beq.n	8003250 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e016      	b.n	8003250 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003226:	2b7f      	cmp	r3, #127	; 0x7f
 8003228:	d10a      	bne.n	8003240 <xQueueGiveFromISR+0x108>
        __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60fb      	str	r3, [r7, #12]
    }
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003244:	3301      	adds	r3, #1
 8003246:	b2db      	uxtb	r3, r3
 8003248:	b25a      	sxtb	r2, r3
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
 8003254:	e001      	b.n	800325a <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003256:	2300      	movs	r3, #0
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f383 8811 	msr	BASEPRI, r3
    }
 8003264:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003268:	4618      	mov	r0, r3
 800326a:	3738      	adds	r7, #56	; 0x38
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <xQueueReceive+0x30>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	623b      	str	r3, [r7, #32]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <xQueueReceive+0x3e>
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueReceive+0x42>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueReceive+0x44>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xQueueReceive+0x5e>
        __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	61fb      	str	r3, [r7, #28]
    }
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ce:	f001 f8c7 	bl	8004460 <xTaskGetSchedulerState>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <xQueueReceive+0x6e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <xQueueReceive+0x72>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <xQueueReceive+0x74>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <xQueueReceive+0x8e>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	61bb      	str	r3, [r7, #24]
    }
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80032fe:	f001 ff03 	bl	8005108 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01f      	beq.n	800334e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003312:	f000 fa1b 	bl	800374c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	3310      	adds	r3, #16
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fefc 	bl	8004128 <xTaskRemoveFromEventList>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <xQueueReceive+0x1bc>)
 8003338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003346:	f001 ff0f 	bl	8005168 <vPortExitCritical>
                return pdPASS;
 800334a:	2301      	movs	r3, #1
 800334c:	e069      	b.n	8003422 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d103      	bne.n	800335c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003354:	f001 ff08 	bl	8005168 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003358:	2300      	movs	r3, #0
 800335a:	e062      	b.n	8003422 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	4618      	mov	r0, r3
 8003368:	f000 ff40 	bl	80041ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800336c:	2301      	movs	r3, #1
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003370:	f001 fefa 	bl	8005168 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003374:	f000 fcba 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003378:	f001 fec6 	bl	8005108 <vPortEnterCritical>
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003382:	b25b      	sxtb	r3, r3
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d103      	bne.n	8003392 <xQueueReceive+0x122>
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003398:	b25b      	sxtb	r3, r3
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d103      	bne.n	80033a8 <xQueueReceive+0x138>
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a8:	f001 fede 	bl	8005168 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ac:	1d3a      	adds	r2, r7, #4
 80033ae:	f107 0310 	add.w	r3, r7, #16
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 ff2f 	bl	8004218 <xTaskCheckForTimeOut>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d123      	bne.n	8003408 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c2:	f000 fa3b 	bl	800383c <prvIsQueueEmpty>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	3324      	adds	r3, #36	; 0x24
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fe57 	bl	8004088 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80033da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033dc:	f000 f9dc 	bl	8003798 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80033e0:	f000 fc92 	bl	8003d08 <xTaskResumeAll>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d189      	bne.n	80032fe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <xQueueReceive+0x1bc>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	e780      	b.n	80032fe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80033fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fe:	f000 f9cb 	bl	8003798 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003402:	f000 fc81 	bl	8003d08 <xTaskResumeAll>
 8003406:	e77a      	b.n	80032fe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800340a:	f000 f9c5 	bl	8003798 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800340e:	f000 fc7b 	bl	8003d08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003414:	f000 fa12 	bl	800383c <prvIsQueueEmpty>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f43f af6f 	beq.w	80032fe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003420:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003422:	4618      	mov	r0, r3
 8003424:	3730      	adds	r7, #48	; 0x30
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800343a:	2300      	movs	r3, #0
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	623b      	str	r3, [r7, #32]
    }
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	61fb      	str	r3, [r7, #28]
    }
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003480:	f000 ffee 	bl	8004460 <xTaskGetSchedulerState>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <xQueueSemaphoreTake+0x60>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <xQueueSemaphoreTake+0x64>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <xQueueSemaphoreTake+0x66>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	61bb      	str	r3, [r7, #24]
    }
 80034ac:	bf00      	nop
 80034ae:	e7fe      	b.n	80034ae <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80034b0:	f001 fe2a 	bl	8005108 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d024      	beq.n	800350a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034d0:	f001 f962 	bl	8004798 <pvTaskIncrementMutexHeldCount>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00f      	beq.n	8003502 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	3310      	adds	r3, #16
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fe1e 	bl	8004128 <xTaskRemoveFromEventList>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <xQueueSemaphoreTake+0x214>)
 80034f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003502:	f001 fe31 	bl	8005168 <vPortExitCritical>
                return pdPASS;
 8003506:	2301      	movs	r3, #1
 8003508:	e097      	b.n	800363a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	617b      	str	r3, [r7, #20]
    }
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800352c:	f001 fe1c 	bl	8005168 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003530:	2300      	movs	r3, #0
 8003532:	e082      	b.n	800363a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fe54 	bl	80041ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003548:	f001 fe0e 	bl	8005168 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800354c:	f000 fbce 	bl	8003cec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003550:	f001 fdda 	bl	8005108 <vPortEnterCritical>
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355a:	b25b      	sxtb	r3, r3
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d103      	bne.n	800356a <xQueueSemaphoreTake+0x13a>
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003570:	b25b      	sxtb	r3, r3
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d103      	bne.n	8003580 <xQueueSemaphoreTake+0x150>
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003580:	f001 fdf2 	bl	8005168 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003584:	463a      	mov	r2, r7
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe43 	bl	8004218 <xTaskCheckForTimeOut>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d132      	bne.n	80035fe <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359a:	f000 f94f 	bl	800383c <prvIsQueueEmpty>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d026      	beq.n	80035f2 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80035ac:	f001 fdac 	bl	8005108 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 ff71 	bl	800449c <xTaskPriorityInherit>
 80035ba:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80035bc:	f001 fdd4 	bl	8005168 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	3324      	adds	r3, #36	; 0x24
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd5d 	bl	8004088 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80035ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d0:	f000 f8e2 	bl	8003798 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80035d4:	f000 fb98 	bl	8003d08 <xTaskResumeAll>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f47f af68 	bne.w	80034b0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <xQueueSemaphoreTake+0x214>)
 80035e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	e75e      	b.n	80034b0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80035f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f4:	f000 f8d0 	bl	8003798 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80035f8:	f000 fb86 	bl	8003d08 <xTaskResumeAll>
 80035fc:	e758      	b.n	80034b0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80035fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003600:	f000 f8ca 	bl	8003798 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003604:	f000 fb80 	bl	8003d08 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800360a:	f000 f917 	bl	800383c <prvIsQueueEmpty>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f43f af4d 	beq.w	80034b0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 800361c:	f001 fd74 	bl	8005108 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003622:	f000 f811 	bl	8003648 <prvGetDisinheritPriorityAfterTimeout>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f824 	bl	800467c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003634:	f001 fd98 	bl	8005168 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003638:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800363a:	4618      	mov	r0, r3
 800363c:	3738      	adds	r7, #56	; 0x38
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1c3 0305 	rsb	r3, r3, #5
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e001      	b.n	800366a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800366a:	68fb      	ldr	r3, [r7, #12]
    }
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10d      	bne.n	80036b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d14d      	bne.n	800373a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 ff70 	bl	8004588 <xTaskPriorityDisinherit>
 80036a8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	e043      	b.n	800373a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d119      	bne.n	80036ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6858      	ldr	r0, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	461a      	mov	r2, r3
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	f002 f8b4 	bl	8005830 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	441a      	add	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d32b      	bcc.n	800373a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e026      	b.n	800373a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68d8      	ldr	r0, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	461a      	mov	r2, r3
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	f002 f89a 	bl	8005830 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	425b      	negs	r3, r3
 8003706:	441a      	add	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	425b      	negs	r3, r3
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d105      	bne.n	800373a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	3b01      	subs	r3, #1
 8003738:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003742:	697b      	ldr	r3, [r7, #20]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	441a      	add	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d303      	bcc.n	8003780 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68d9      	ldr	r1, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	461a      	mov	r2, r3
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	f002 f850 	bl	8005830 <memcpy>
    }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80037a0:	f001 fcb2 	bl	8005108 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ac:	e011      	b.n	80037d2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3324      	adds	r3, #36	; 0x24
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fcb4 	bl	8004128 <xTaskRemoveFromEventList>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80037c6:	f000 fd8d 	bl	80042e4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dce9      	bgt.n	80037ae <prvUnlockQueue+0x16>
 80037da:	e000      	b.n	80037de <prvUnlockQueue+0x46>
                        break;
 80037dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80037e6:	f001 fcbf 	bl	8005168 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80037ea:	f001 fc8d 	bl	8005108 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f6:	e011      	b.n	800381c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3310      	adds	r3, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fc8f 	bl	8004128 <xTaskRemoveFromEventList>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003810:	f000 fd68 	bl	80042e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003814:	7bbb      	ldrb	r3, [r7, #14]
 8003816:	3b01      	subs	r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800381c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003820:	2b00      	cmp	r3, #0
 8003822:	dce9      	bgt.n	80037f8 <prvUnlockQueue+0x60>
 8003824:	e000      	b.n	8003828 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003826:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	22ff      	movs	r2, #255	; 0xff
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003830:	f001 fc9a 	bl	8005168 <vPortExitCritical>
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003844:	f001 fc60 	bl	8005108 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e001      	b.n	800385a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800385a:	f001 fc85 	bl	8005168 <vPortExitCritical>

    return xReturn;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003870:	f001 fc4a 	bl	8005108 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	429a      	cmp	r2, r3
 800387e:	d102      	bne.n	8003886 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e001      	b.n	800388a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800388a:	f001 fc6d 	bl	8005168 <vPortExitCritical>

    return xReturn;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e014      	b.n	80038d2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <vQueueAddToRegistry+0x50>)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <vQueueAddToRegistry+0x50>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <vQueueAddToRegistry+0x50>)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80038ca:	e006      	b.n	80038da <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b07      	cmp	r3, #7
 80038d6:	d9e7      	bls.n	80038a8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	200001f4 	.word	0x200001f4

080038ec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80038fc:	f001 fc04 	bl	8005108 <vPortEnterCritical>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003906:	b25b      	sxtb	r3, r3
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d103      	bne.n	8003916 <vQueueWaitForMessageRestricted+0x2a>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391c:	b25b      	sxtb	r3, r3
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d103      	bne.n	800392c <vQueueWaitForMessageRestricted+0x40>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392c:	f001 fc1c 	bl	8005168 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3324      	adds	r3, #36	; 0x24
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fbc5 	bl	80040d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff26 	bl	8003798 <prvUnlockQueue>
    }
 800394c:	bf00      	nop
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af04      	add	r7, sp, #16
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fcef 	bl	800534c <pvPortMalloc>
 800396e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003976:	2058      	movs	r0, #88	; 0x58
 8003978:	f001 fce8 	bl	800534c <pvPortMalloc>
 800397c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
 800398a:	e005      	b.n	8003998 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800398c:	6978      	ldr	r0, [r7, #20]
 800398e:	f001 fdbd 	bl	800550c <vPortFree>
 8003992:	e001      	b.n	8003998 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f80e 	bl	80039d6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80039ba:	69f8      	ldr	r0, [r7, #28]
 80039bc:	f000 f8a2 	bl	8003b04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80039c0:	2301      	movs	r3, #1
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e002      	b.n	80039cc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80039cc:	69bb      	ldr	r3, [r7, #24]
    }
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b088      	sub	sp, #32
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	461a      	mov	r2, r3
 80039ee:	21a5      	movs	r1, #165	; 0xa5
 80039f0:	f001 ff2c 	bl	800584c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039fe:	3b01      	subs	r3, #1
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f023 0307 	bic.w	r3, r3, #7
 8003a0c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	617b      	str	r3, [r7, #20]
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01f      	beq.n	8003a74 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e012      	b.n	8003a60 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	7819      	ldrb	r1, [r3, #0]
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	3334      	adds	r3, #52	; 0x34
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d9e9      	bls.n	8003a3a <prvInitialiseNewTask+0x64>
 8003a66:	e000      	b.n	8003a6a <prvInitialiseNewTask+0x94>
            {
                break;
 8003a68:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a72:	e003      	b.n	8003a7c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d901      	bls.n	8003a86 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a82:	2304      	movs	r3, #4
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a90:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2200      	movs	r2, #0
 8003a96:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff f825 	bl	8002aec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff f820 	bl	8002aec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	f1c3 0205 	rsb	r2, r3, #5
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	3350      	adds	r3, #80	; 0x50
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 febe 	bl	800584c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	3354      	adds	r3, #84	; 0x54
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 feb7 	bl	800584c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	69b8      	ldr	r0, [r7, #24]
 8003ae4:	f001 f9e4 	bl	8004eb0 <pxPortInitialiseStack>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b0c:	f001 fafc 	bl	8005108 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003b30:	f000 fbfc 	bl	800432c <prvInitialiseTaskLists>
 8003b34:	e00d      	b.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d802      	bhi.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <prvAddNewTaskToReadyList+0xcc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <prvAddNewTaskToReadyList+0xcc>)
 8003b5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <prvAddNewTaskToReadyList+0xcc>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <prvAddNewTaskToReadyList+0xd0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <prvAddNewTaskToReadyList+0xd0>)
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <prvAddNewTaskToReadyList+0xd4>)
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fe ffba 	bl	8002b06 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003b92:	f001 fae9 	bl	8005168 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00e      	beq.n	8003bbc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d207      	bcs.n	8003bbc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <prvAddNewTaskToReadyList+0xd8>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2000030c 	.word	0x2000030c
 8003bc8:	20000234 	.word	0x20000234
 8003bcc:	20000318 	.word	0x20000318
 8003bd0:	20000328 	.word	0x20000328
 8003bd4:	20000314 	.word	0x20000314
 8003bd8:	20000238 	.word	0x20000238
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <vTaskDelay+0x60>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <vTaskDelay+0x30>
        __asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	60bb      	str	r3, [r7, #8]
    }
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003c10:	f000 f86c 	bl	8003cec <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c14:	2100      	movs	r1, #0
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fdd2 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003c1c:	f000 f874 	bl	8003d08 <xTaskResumeAll>
 8003c20:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <vTaskDelay+0x64>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000334 	.word	0x20000334
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <vTaskStartScheduler+0x88>)
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2300      	movs	r3, #0
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	2282      	movs	r2, #130	; 0x82
 8003c5a:	491e      	ldr	r1, [pc, #120]	; (8003cd4 <vTaskStartScheduler+0x8c>)
 8003c5c:	481e      	ldr	r0, [pc, #120]	; (8003cd8 <vTaskStartScheduler+0x90>)
 8003c5e:	f7ff fe79 	bl	8003954 <xTaskCreate>
 8003c62:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003c6a:	f000 fe0f 	bl	800488c <xTimerCreateTimerTask>
 8003c6e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d116      	bne.n	8003ca4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60bb      	str	r3, [r7, #8]
    }
 8003c88:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <vTaskStartScheduler+0x94>)
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <vTaskStartScheduler+0x98>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <vTaskStartScheduler+0x9c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003c9e:	f001 f991 	bl	8004fc4 <xPortStartScheduler>
 8003ca2:	e00e      	b.n	8003cc2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d10a      	bne.n	8003cc2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	607b      	str	r3, [r7, #4]
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <vTaskStartScheduler+0xa0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000330 	.word	0x20000330
 8003cd4:	0800619c 	.word	0x0800619c
 8003cd8:	080042fd 	.word	0x080042fd
 8003cdc:	2000032c 	.word	0x2000032c
 8003ce0:	20000318 	.word	0x20000318
 8003ce4:	20000310 	.word	0x20000310
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <vTaskSuspendAll+0x18>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <vTaskSuspendAll+0x18>)
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000334 	.word	0x20000334

08003d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <xTaskResumeAll+0x114>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <xTaskResumeAll+0x2c>
        __asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	603b      	str	r3, [r7, #0]
    }
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d34:	f001 f9e8 	bl	8005108 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d38:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <xTaskResumeAll+0x114>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	4a37      	ldr	r2, [pc, #220]	; (8003e1c <xTaskResumeAll+0x114>)
 8003d40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <xTaskResumeAll+0x114>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d161      	bne.n	8003e0e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <xTaskResumeAll+0x118>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d05d      	beq.n	8003e0e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d52:	e02e      	b.n	8003db2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d54:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <xTaskResumeAll+0x11c>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3318      	adds	r3, #24
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ff2d 	bl	8002bc0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff28 	bl	8002bc0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <xTaskResumeAll+0x120>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <xTaskResumeAll+0x120>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <xTaskResumeAll+0x124>)
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fe feb4 	bl	8002b06 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <xTaskResumeAll+0x128>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <xTaskResumeAll+0x12c>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db2:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <xTaskResumeAll+0x11c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cc      	bne.n	8003d54 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003dc0:	f000 fb32 	bl	8004428 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <xTaskResumeAll+0x130>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003dd0:	f000 f846 	bl	8003e60 <xTaskIncrementTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <xTaskResumeAll+0x12c>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f1      	bne.n	8003dd0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <xTaskResumeAll+0x130>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <xTaskResumeAll+0x12c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <xTaskResumeAll+0x134>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e0e:	f001 f9ab 	bl	8005168 <vPortExitCritical>

    return xAlreadyYielded;
 8003e12:	68bb      	ldr	r3, [r7, #8]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000334 	.word	0x20000334
 8003e20:	2000030c 	.word	0x2000030c
 8003e24:	200002cc 	.word	0x200002cc
 8003e28:	20000314 	.word	0x20000314
 8003e2c:	20000238 	.word	0x20000238
 8003e30:	20000234 	.word	0x20000234
 8003e34:	20000320 	.word	0x20000320
 8003e38:	2000031c 	.word	0x2000031c
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <xTaskGetTickCount+0x1c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000310 	.word	0x20000310

08003e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <xTaskIncrementTick+0x144>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 808e 	bne.w	8003f90 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e74:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <xTaskIncrementTick+0x148>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <xTaskIncrementTick+0x148>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d120      	bne.n	8003eca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003e88:	4b48      	ldr	r3, [pc, #288]	; (8003fac <xTaskIncrementTick+0x14c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <xTaskIncrementTick+0x48>
        __asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	603b      	str	r3, [r7, #0]
    }
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xTaskIncrementTick+0x46>
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <xTaskIncrementTick+0x14c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <xTaskIncrementTick+0x150>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <xTaskIncrementTick+0x14c>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4a3e      	ldr	r2, [pc, #248]	; (8003fb0 <xTaskIncrementTick+0x150>)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <xTaskIncrementTick+0x154>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	4a3c      	ldr	r2, [pc, #240]	; (8003fb4 <xTaskIncrementTick+0x154>)
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	f000 faaf 	bl	8004428 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003eca:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <xTaskIncrementTick+0x158>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d348      	bcc.n	8003f66 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <xTaskIncrementTick+0x14c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <xTaskIncrementTick+0x158>)
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	601a      	str	r2, [r3, #0]
                    break;
 8003ee6:	e03e      	b.n	8003f66 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <xTaskIncrementTick+0x14c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d203      	bcs.n	8003f08 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <xTaskIncrementTick+0x158>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f06:	e02e      	b.n	8003f66 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fe57 	bl	8002bc0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fe4e 	bl	8002bc0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	2201      	movs	r2, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <xTaskIncrementTick+0x15c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <xTaskIncrementTick+0x15c>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <xTaskIncrementTick+0x160>)
 8003f44:	441a      	add	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7fe fdda 	bl	8002b06 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <xTaskIncrementTick+0x164>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3b9      	bcc.n	8003ed4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f64:	e7b6      	b.n	8003ed4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <xTaskIncrementTick+0x164>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4914      	ldr	r1, [pc, #80]	; (8003fc0 <xTaskIncrementTick+0x160>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d901      	bls.n	8003f82 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <xTaskIncrementTick+0x168>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e004      	b.n	8003f9a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <xTaskIncrementTick+0x16c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <xTaskIncrementTick+0x16c>)
 8003f98:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003f9a:	697b      	ldr	r3, [r7, #20]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000334 	.word	0x20000334
 8003fa8:	20000310 	.word	0x20000310
 8003fac:	200002c4 	.word	0x200002c4
 8003fb0:	200002c8 	.word	0x200002c8
 8003fb4:	20000324 	.word	0x20000324
 8003fb8:	2000032c 	.word	0x2000032c
 8003fbc:	20000314 	.word	0x20000314
 8003fc0:	20000238 	.word	0x20000238
 8003fc4:	20000234 	.word	0x20000234
 8003fc8:	20000320 	.word	0x20000320
 8003fcc:	2000031c 	.word	0x2000031c

08003fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <vTaskSwitchContext+0xa4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <vTaskSwitchContext+0xa8>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003fe4:	e03f      	b.n	8004066 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <vTaskSwitchContext+0xa8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <vTaskSwitchContext+0xac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	f1c3 031f 	rsb	r3, r3, #31
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	491f      	ldr	r1, [pc, #124]	; (8004080 <vTaskSwitchContext+0xb0>)
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	607b      	str	r3, [r7, #4]
    }
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <vTaskSwitchContext+0x5a>
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <vTaskSwitchContext+0xb0>)
 8004038:	4413      	add	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3308      	adds	r3, #8
 800404e:	429a      	cmp	r2, r3
 8004050:	d104      	bne.n	800405c <vTaskSwitchContext+0x8c>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <vTaskSwitchContext+0xb4>)
 8004064:	6013      	str	r3, [r2, #0]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000334 	.word	0x20000334
 8004078:	20000320 	.word	0x20000320
 800407c:	20000314 	.word	0x20000314
 8004080:	20000238 	.word	0x20000238
 8004084:	20000234 	.word	0x20000234

08004088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60fb      	str	r3, [r7, #12]
    }
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <vTaskPlaceOnEventList+0x44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3318      	adds	r3, #24
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fe fd49 	bl	8002b4e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040bc:	2101      	movs	r1, #1
 80040be:	6838      	ldr	r0, [r7, #0]
 80040c0:	f000 fb7e 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000234 	.word	0x20000234

080040d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	617b      	str	r3, [r7, #20]
    }
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <vTaskPlaceOnEventListRestricted+0x54>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3318      	adds	r3, #24
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7fe fd00 	bl	8002b06 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	68b8      	ldr	r0, [r7, #8]
 8004116:	f000 fb53 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
    }
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000234 	.word	0x20000234

08004128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60fb      	str	r3, [r7, #12]
    }
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fd31 	bl	8002bc0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <xTaskRemoveFromEventList+0xac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11c      	bne.n	80041a0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd28 	bl	8002bc0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <xTaskRemoveFromEventList+0xb0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <xTaskRemoveFromEventList+0xb0>)
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4a13      	ldr	r2, [pc, #76]	; (80041dc <xTaskRemoveFromEventList+0xb4>)
 8004190:	441a      	add	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f7fe fcb4 	bl	8002b06 <vListInsertEnd>
 800419e:	e005      	b.n	80041ac <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3318      	adds	r3, #24
 80041a4:	4619      	mov	r1, r3
 80041a6:	480e      	ldr	r0, [pc, #56]	; (80041e0 <xTaskRemoveFromEventList+0xb8>)
 80041a8:	f7fe fcad 	bl	8002b06 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <xTaskRemoveFromEventList+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d905      	bls.n	80041c6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <xTaskRemoveFromEventList+0xc0>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e001      	b.n	80041ca <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000334 	.word	0x20000334
 80041d8:	20000314 	.word	0x20000314
 80041dc:	20000238 	.word	0x20000238
 80041e0:	200002cc 	.word	0x200002cc
 80041e4:	20000234 	.word	0x20000234
 80041e8:	20000320 	.word	0x20000320

080041ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <vTaskInternalSetTimeOutState+0x24>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <vTaskInternalSetTimeOutState+0x28>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	20000324 	.word	0x20000324
 8004214:	20000310 	.word	0x20000310

08004218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	613b      	str	r3, [r7, #16]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
    }
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800425a:	f000 ff55 	bl	8005108 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <xTaskCheckForTimeOut+0xc4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d102      	bne.n	800427e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e026      	b.n	80042cc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <xTaskCheckForTimeOut+0xc8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d00a      	beq.n	80042a0 <xTaskCheckForTimeOut+0x88>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d305      	bcc.n	80042a0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e015      	b.n	80042cc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d20b      	bcs.n	80042c2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff98 	bl	80041ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e004      	b.n	80042cc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80042cc:	f000 ff4c 	bl	8005168 <vPortExitCritical>

    return xReturn;
 80042d0:	69fb      	ldr	r3, [r7, #28]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000310 	.word	0x20000310
 80042e0:	20000324 	.word	0x20000324

080042e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <vTaskMissedYield+0x14>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000320 	.word	0x20000320

080042fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004304:	f000 f852 	bl	80043ac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvIdleTask+0x28>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d9f9      	bls.n	8004304 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <prvIdleTask+0x2c>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004320:	e7f0      	b.n	8004304 <prvIdleTask+0x8>
 8004322:	bf00      	nop
 8004324:	20000238 	.word	0x20000238
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e00c      	b.n	8004352 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <prvInitialiseTaskLists+0x60>)
 8004344:	4413      	add	r3, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fbb0 	bl	8002aac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d9ef      	bls.n	8004338 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004358:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800435a:	f7fe fba7 	bl	8002aac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800435e:	480d      	ldr	r0, [pc, #52]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004360:	f7fe fba4 	bl	8002aac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004364:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x6c>)
 8004366:	f7fe fba1 	bl	8002aac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800436a:	480c      	ldr	r0, [pc, #48]	; (800439c <prvInitialiseTaskLists+0x70>)
 800436c:	f7fe fb9e 	bl	8002aac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x74>)
 8004372:	f7fe fb9b 	bl	8002aac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <prvInitialiseTaskLists+0x78>)
 8004378:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x64>)
 800437a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <prvInitialiseTaskLists+0x7c>)
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <prvInitialiseTaskLists+0x68>)
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000238 	.word	0x20000238
 8004390:	2000029c 	.word	0x2000029c
 8004394:	200002b0 	.word	0x200002b0
 8004398:	200002cc 	.word	0x200002cc
 800439c:	200002e0 	.word	0x200002e0
 80043a0:	200002f8 	.word	0x200002f8
 80043a4:	200002c4 	.word	0x200002c4
 80043a8:	200002c8 	.word	0x200002c8

080043ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b2:	e019      	b.n	80043e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80043b4:	f000 fea8 	bl	8005108 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <prvCheckTasksWaitingTermination+0x50>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fbfb 	bl	8002bc0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <prvCheckTasksWaitingTermination+0x54>)
 80043d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80043de:	f000 fec3 	bl	8005168 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f810 	bl	8004408 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <prvCheckTasksWaitingTermination+0x58>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e1      	bne.n	80043b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200002e0 	.word	0x200002e0
 8004400:	2000030c 	.word	0x2000030c
 8004404:	200002f4 	.word	0x200002f4

08004408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f879 	bl	800550c <vPortFree>
                vPortFree( pxTCB );
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 f876 	bl	800550c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <prvResetNextTaskUnblockTime+0x30>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <prvResetNextTaskUnblockTime+0x34>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800443e:	e005      	b.n	800444c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <prvResetNextTaskUnblockTime+0x30>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <prvResetNextTaskUnblockTime+0x34>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	200002c4 	.word	0x200002c4
 800445c:	2000032c 	.word	0x2000032c

08004460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <xTaskGetSchedulerState+0x34>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800446e:	2301      	movs	r3, #1
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	e008      	b.n	8004486 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <xTaskGetSchedulerState+0x38>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800447c:	2302      	movs	r3, #2
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e001      	b.n	8004486 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004486:	687b      	ldr	r3, [r7, #4]
    }
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	20000318 	.word	0x20000318
 8004498:	20000334 	.word	0x20000334

0800449c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d05e      	beq.n	8004570 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <xTaskPriorityInherit+0xe0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d24e      	bcs.n	800455e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db06      	blt.n	80044d6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c8:	4b2c      	ldr	r3, [pc, #176]	; (800457c <xTaskPriorityInherit+0xe0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f1c3 0205 	rsb	r2, r3, #5
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a26      	ldr	r2, [pc, #152]	; (8004580 <xTaskPriorityInherit+0xe4>)
 80044e8:	4413      	add	r3, r2
 80044ea:	4299      	cmp	r1, r3
 80044ec:	d12f      	bne.n	800454e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fb64 	bl	8002bc0 <uxListRemove>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43da      	mvns	r2, r3
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <xTaskPriorityInherit+0xe8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4013      	ands	r3, r2
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <xTaskPriorityInherit+0xe8>)
 8004512:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <xTaskPriorityInherit+0xe0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <xTaskPriorityInherit+0xe8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <xTaskPriorityInherit+0xe8>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a10      	ldr	r2, [pc, #64]	; (8004580 <xTaskPriorityInherit+0xe4>)
 800453e:	441a      	add	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fadd 	bl	8002b06 <vListInsertEnd>
 800454c:	e004      	b.n	8004558 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <xTaskPriorityInherit+0xe0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e008      	b.n	8004570 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <xTaskPriorityInherit+0xe0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d201      	bcs.n	8004570 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004570:	68fb      	ldr	r3, [r7, #12]
    }
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000234 	.word	0x20000234
 8004580:	20000238 	.word	0x20000238
 8004584:	20000314 	.word	0x20000314

08004588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d063      	beq.n	8004666 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800459e:	4b34      	ldr	r3, [pc, #208]	; (8004670 <xTaskPriorityDisinherit+0xe8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d00a      	beq.n	80045be <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
    }
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60bb      	str	r3, [r7, #8]
    }
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d039      	beq.n	8004666 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d135      	bne.n	8004666 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fade 	bl	8002bc0 <uxListRemove>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43da      	mvns	r2, r3
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <xTaskPriorityDisinherit+0xec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4013      	ands	r3, r2
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <xTaskPriorityDisinherit+0xec>)
 800461e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f1c3 0205 	rsb	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <xTaskPriorityDisinherit+0xec>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <xTaskPriorityDisinherit+0xec>)
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <xTaskPriorityDisinherit+0xf0>)
 8004654:	441a      	add	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3304      	adds	r3, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7fe fa52 	bl	8002b06 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004666:	697b      	ldr	r3, [r7, #20]
    }
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000234 	.word	0x20000234
 8004674:	20000314 	.word	0x20000314
 8004678:	20000238 	.word	0x20000238

0800467c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d077      	beq.n	8004784 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
    }
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d902      	bls.n	80046c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e002      	b.n	80046c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d058      	beq.n	8004784 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d153      	bne.n	8004784 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80046dc:	4b2b      	ldr	r3, [pc, #172]	; (800478c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d10a      	bne.n	80046fc <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
    }
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	db04      	blt.n	800471a <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f1c3 0205 	rsb	r2, r3, #5
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	6959      	ldr	r1, [r3, #20]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800472a:	4413      	add	r3, r2
 800472c:	4299      	cmp	r1, r3
 800472e:	d129      	bne.n	8004784 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	3304      	adds	r3, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe fa43 	bl	8002bc0 <uxListRemove>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2201      	movs	r2, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4013      	ands	r3, r2
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004754:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	2201      	movs	r2, #1
 800475c:	409a      	lsls	r2, r3
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a06      	ldr	r2, [pc, #24]	; (8004790 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004776:	441a      	add	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe f9c1 	bl	8002b06 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004784:	bf00      	nop
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000234 	.word	0x20000234
 8004790:	20000238 	.word	0x20000238
 8004794:	20000314 	.word	0x20000314

08004798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <pvTaskIncrementMutexHeldCount+0x24>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <pvTaskIncrementMutexHeldCount+0x24>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047aa:	3201      	adds	r2, #1
 80047ac:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80047ae:	4b03      	ldr	r3, [pc, #12]	; (80047bc <pvTaskIncrementMutexHeldCount+0x24>)
 80047b0:	681b      	ldr	r3, [r3, #0]
    }
 80047b2:	4618      	mov	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	20000234 	.word	0x20000234

080047c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f9f2 	bl	8002bc0 <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d10a      	bne.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	481a      	ldr	r0, [pc, #104]	; (800487c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004812:	f7fe f978 	bl	8002b06 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004816:	e026      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7fe f986 	bl	8002b4e <vListInsert>
}
 8004842:	e010      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7fe f97c 	bl	8002b4e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d202      	bcs.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000310 	.word	0x20000310
 8004874:	20000234 	.word	0x20000234
 8004878:	20000314 	.word	0x20000314
 800487c:	200002f8 	.word	0x200002f8
 8004880:	200002c8 	.word	0x200002c8
 8004884:	200002c4 	.word	0x200002c4
 8004888:	2000032c 	.word	0x2000032c

0800488c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004896:	f000 fad5 	bl	8004e44 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <xTimerCreateTimerTask+0x54>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <xTimerCreateTimerTask+0x58>)
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	2302      	movs	r3, #2
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048b0:	490d      	ldr	r1, [pc, #52]	; (80048e8 <xTimerCreateTimerTask+0x5c>)
 80048b2:	480e      	ldr	r0, [pc, #56]	; (80048ec <xTimerCreateTimerTask+0x60>)
 80048b4:	f7ff f84e 	bl	8003954 <xTaskCreate>
 80048b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	603b      	str	r3, [r7, #0]
    }
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80048d6:	687b      	ldr	r3, [r7, #4]
    }
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000368 	.word	0x20000368
 80048e4:	2000036c 	.word	0x2000036c
 80048e8:	080061a4 	.word	0x080061a4
 80048ec:	08004a25 	.word	0x08004a25

080048f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <xTimerGenericCommand+0x98>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02a      	beq.n	800497c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b05      	cmp	r3, #5
 8004936:	dc18      	bgt.n	800496a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004938:	f7ff fd92 	bl	8004460 <xTaskGetSchedulerState>
 800493c:	4603      	mov	r3, r0
 800493e:	2b02      	cmp	r3, #2
 8004940:	d109      	bne.n	8004956 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <xTimerGenericCommand+0x98>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f107 0114 	add.w	r1, r7, #20
 800494a:	2300      	movs	r3, #0
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	f7fe fa4b 	bl	8002de8 <xQueueGenericSend>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24
 8004954:	e012      	b.n	800497c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xTimerGenericCommand+0x98>)
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	f107 0114 	add.w	r1, r7, #20
 800495e:	2300      	movs	r3, #0
 8004960:	2200      	movs	r2, #0
 8004962:	f7fe fa41 	bl	8002de8 <xQueueGenericSend>
 8004966:	6278      	str	r0, [r7, #36]	; 0x24
 8004968:	e008      	b.n	800497c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <xTimerGenericCommand+0x98>)
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f107 0114 	add.w	r1, r7, #20
 8004972:	2300      	movs	r3, #0
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	f7fe fb35 	bl	8002fe4 <xQueueGenericSendFromISR>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000368 	.word	0x20000368

0800498c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <prvProcessExpiredTimer+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe f90b 	bl	8002bc0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d022      	beq.n	80049fe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	f000 f8d1 	bl	8004b6c <prvInsertTimerInActiveList>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01f      	beq.n	8004a10 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	2100      	movs	r1, #0
 80049da:	6978      	ldr	r0, [r7, #20]
 80049dc:	f7ff ff88 	bl	80048f0 <xTimerGenericCommand>
 80049e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d113      	bne.n	8004a10 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
    }
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	4798      	blx	r3
    }
 8004a18:	bf00      	nop
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000360 	.word	0x20000360

08004a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f857 	bl	8004ae4 <prvGetNextExpireTime>
 8004a36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f803 	bl	8004a48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004a42:	f000 f8d5 	bl	8004bf0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a46:	e7f1      	b.n	8004a2c <prvTimerTask+0x8>

08004a48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004a52:	f7ff f94b 	bl	8003cec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f866 	bl	8004b2c <prvSampleTimeNow>
 8004a60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d130      	bne.n	8004aca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <prvProcessTimerOrBlockTask+0x3c>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d806      	bhi.n	8004a84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a76:	f7ff f947 	bl	8003d08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff85 	bl	800498c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a82:	e024      	b.n	8004ace <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <prvProcessTimerOrBlockTask+0x90>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <prvProcessTimerOrBlockTask+0x50>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <prvProcessTimerOrBlockTask+0x52>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <prvProcessTimerOrBlockTask+0x94>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f7fe ff1f 	bl	80038ec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004aae:	f7ff f92b 	bl	8003d08 <xTaskResumeAll>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <prvProcessTimerOrBlockTask+0x98>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
    }
 8004ac8:	e001      	b.n	8004ace <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004aca:	f7ff f91d 	bl	8003d08 <xTaskResumeAll>
    }
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000364 	.word	0x20000364
 8004adc:	20000368 	.word	0x20000368
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <prvGetNextExpireTime+0x44>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <prvGetNextExpireTime+0x16>
 8004af6:	2201      	movs	r2, #1
 8004af8:	e000      	b.n	8004afc <prvGetNextExpireTime+0x18>
 8004afa:	2200      	movs	r2, #0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvGetNextExpireTime+0x44>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e001      	b.n	8004b18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004b18:	68fb      	ldr	r3, [r7, #12]
    }
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000360 	.word	0x20000360

08004b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004b34:	f7ff f984 	bl	8003e40 <xTaskGetTickCount>
 8004b38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvSampleTimeNow+0x3c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d205      	bcs.n	8004b50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004b44:	f000 f91a 	bl	8004d7c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004b56:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <prvSampleTimeNow+0x3c>)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000370 	.word	0x20000370

08004b6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d812      	bhi.n	8004bb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	1ad2      	subs	r2, r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e01b      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <prvInsertTimerInActiveList+0x7c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fd ffcc 	bl	8002b4e <vListInsert>
 8004bb6:	e012      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d206      	bcs.n	8004bce <prvInsertTimerInActiveList+0x62>
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e007      	b.n	8004bde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <prvInsertTimerInActiveList+0x80>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fd ffb8 	bl	8002b4e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004bde:	697b      	ldr	r3, [r7, #20]
    }
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000364 	.word	0x20000364
 8004bec:	20000360 	.word	0x20000360

08004bf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bf6:	e0ae      	b.n	8004d56 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f2c0 80aa 	blt.w	8004d54 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd ffd5 	bl	8002bc0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff87 	bl	8004b2c <prvSampleTimeNow>
 8004c1e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b09      	cmp	r3, #9
 8004c24:	f200 8097 	bhi.w	8004d56 <prvProcessReceivedCommands+0x166>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <prvProcessReceivedCommands+0x40>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c59 	.word	0x08004c59
 8004c3c:	08004ccd 	.word	0x08004ccd
 8004c40:	08004ce1 	.word	0x08004ce1
 8004c44:	08004d2b 	.word	0x08004d2b
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c59 	.word	0x08004c59
 8004c50:	08004ccd 	.word	0x08004ccd
 8004c54:	08004ce1 	.word	0x08004ce1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	18d1      	adds	r1, r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c78:	f7ff ff78 	bl	8004b6c <prvInsertTimerInActiveList>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d069      	beq.n	8004d56 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c88:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05e      	beq.n	8004d56 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	441a      	add	r2, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004caa:	f7ff fe21 	bl	80048f0 <xTimerGenericCommand>
 8004cae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d14f      	bne.n	8004d56 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61bb      	str	r3, [r7, #24]
    }
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004cde:	e03a      	b.n	8004d56 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	617b      	str	r3, [r7, #20]
    }
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	18d1      	adds	r1, r2, r3
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d24:	f7ff ff22 	bl	8004b6c <prvInsertTimerInActiveList>
                        break;
 8004d28:	e015      	b.n	8004d56 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d3a:	f000 fbe7 	bl	800550c <vPortFree>
 8004d3e:	e00a      	b.n	8004d56 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004d52:	e000      	b.n	8004d56 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004d54:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <prvProcessReceivedCommands+0x188>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f107 0108 	add.w	r1, r7, #8
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fa85 	bl	8003270 <xQueueReceive>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f47f af45 	bne.w	8004bf8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000368 	.word	0x20000368

08004d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d82:	e048      	b.n	8004e16 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fd ff0f 	bl	8002bc0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d02e      	beq.n	8004e16 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d90e      	bls.n	8004de8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fd feb4 	bl	8002b4e <vListInsert>
 8004de6:	e016      	b.n	8004e16 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	2100      	movs	r1, #0
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fd7c 	bl	80048f0 <xTimerGenericCommand>
 8004df8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	603b      	str	r3, [r7, #0]
    }
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1b1      	bne.n	8004d84 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <prvSwitchTimerLists+0xc4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <prvSwitchTimerLists+0xc0>)
 8004e2c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <prvSwitchTimerLists+0xc4>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6013      	str	r3, [r2, #0]
    }
 8004e34:	bf00      	nop
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000360 	.word	0x20000360
 8004e40:	20000364 	.word	0x20000364

08004e44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e48:	f000 f95e 	bl	8005108 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <prvCheckForValidListAndQueue+0x54>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11d      	bne.n	8004e90 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e54:	4811      	ldr	r0, [pc, #68]	; (8004e9c <prvCheckForValidListAndQueue+0x58>)
 8004e56:	f7fd fe29 	bl	8002aac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e5a:	4811      	ldr	r0, [pc, #68]	; (8004ea0 <prvCheckForValidListAndQueue+0x5c>)
 8004e5c:	f7fd fe26 	bl	8002aac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <prvCheckForValidListAndQueue+0x60>)
 8004e62:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <prvCheckForValidListAndQueue+0x58>)
 8004e64:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <prvCheckForValidListAndQueue+0x64>)
 8004e68:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <prvCheckForValidListAndQueue+0x5c>)
 8004e6a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	210c      	movs	r1, #12
 8004e70:	200a      	movs	r0, #10
 8004e72:	f7fd ff37 	bl	8002ce4 <xQueueGenericCreate>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <prvCheckForValidListAndQueue+0x54>)
 8004e7a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <prvCheckForValidListAndQueue+0x54>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <prvCheckForValidListAndQueue+0x54>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4908      	ldr	r1, [pc, #32]	; (8004eac <prvCheckForValidListAndQueue+0x68>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fd04 	bl	8003898 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e90:	f000 f96a 	bl	8005168 <vPortExitCritical>
    }
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000368 	.word	0x20000368
 8004e9c:	20000338 	.word	0x20000338
 8004ea0:	2000034c 	.word	0x2000034c
 8004ea4:	20000360 	.word	0x20000360
 8004ea8:	20000364 	.word	0x20000364
 8004eac:	080061ac 	.word	0x080061ac

08004eb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ec8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3b04      	subs	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <pxPortInitialiseStack+0x64>)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b14      	subs	r3, #20
 8004eea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f06f 0202 	mvn.w	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b20      	subs	r3, #32
 8004f04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	08004f19 	.word	0x08004f19

08004f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f22:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <prvTaskExitError+0x54>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d00a      	beq.n	8004f42 <prvTaskExitError+0x2a>
        __asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60fb      	str	r3, [r7, #12]
    }
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <prvTaskExitError+0x28>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60bb      	str	r3, [r7, #8]
    }
 8004f54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f56:	bf00      	nop
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0fc      	beq.n	8004f58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	20000010 	.word	0x20000010

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	4770      	bx	lr
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst2>:
 8004f90:	20000234 	.word	0x20000234
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <prvPortStartFirstTask+0x24>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8814 	msr	CONTROL, r0
 8004faa:	b662      	cpsie	i
 8004fac:	b661      	cpsie	f
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	df00      	svc	0
 8004fb8:	bf00      	nop
 8004fba:	0000      	.short	0x0000
 8004fbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop

08004fc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fca:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <xPortStartScheduler+0x120>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a46      	ldr	r2, [pc, #280]	; (80050e8 <xPortStartScheduler+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10a      	bne.n	8004fea <xPortStartScheduler+0x26>
        __asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	613b      	str	r3, [r7, #16]
    }
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fea:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <xPortStartScheduler+0x120>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3f      	ldr	r2, [pc, #252]	; (80050ec <xPortStartScheduler+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10a      	bne.n	800500a <xPortStartScheduler+0x46>
        __asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60fb      	str	r3, [r7, #12]
    }
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <xPortStartScheduler+0x12c>)
 800500c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <xPortStartScheduler+0x130>)
 8005030:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005032:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <xPortStartScheduler+0x134>)
 8005034:	2207      	movs	r2, #7
 8005036:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005038:	e009      	b.n	800504e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <xPortStartScheduler+0x134>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <xPortStartScheduler+0x134>)
 8005042:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b80      	cmp	r3, #128	; 0x80
 8005058:	d0ef      	beq.n	800503a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800505a:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <xPortStartScheduler+0x134>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1c3 0307 	rsb	r3, r3, #7
 8005062:	2b04      	cmp	r3, #4
 8005064:	d00a      	beq.n	800507c <xPortStartScheduler+0xb8>
        __asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60bb      	str	r3, [r7, #8]
    }
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <xPortStartScheduler+0x134>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <xPortStartScheduler+0x134>)
 8005084:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005086:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <xPortStartScheduler+0x134>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800508e:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <xPortStartScheduler+0x134>)
 8005090:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <xPortStartScheduler+0x138>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <xPortStartScheduler+0x138>)
 80050a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <xPortStartScheduler+0x138>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <xPortStartScheduler+0x138>)
 80050ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80050b2:	f000 f8db 	bl	800526c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <xPortStartScheduler+0x13c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80050bc:	f000 f8fa 	bl	80052b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <xPortStartScheduler+0x140>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <xPortStartScheduler+0x140>)
 80050c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80050cc:	f7ff ff64 	bl	8004f98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80050d0:	f7fe ff7e 	bl	8003fd0 <vTaskSwitchContext>
    prvTaskExitError();
 80050d4:	f7ff ff20 	bl	8004f18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	e000ed00 	.word	0xe000ed00
 80050e8:	410fc271 	.word	0x410fc271
 80050ec:	410fc270 	.word	0x410fc270
 80050f0:	e000e400 	.word	0xe000e400
 80050f4:	20000374 	.word	0x20000374
 80050f8:	20000378 	.word	0x20000378
 80050fc:	e000ed20 	.word	0xe000ed20
 8005100:	20000010 	.word	0x20000010
 8005104:	e000ef34 	.word	0xe000ef34

08005108 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
        __asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	607b      	str	r3, [r7, #4]
    }
 8005120:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <vPortEnterCritical+0x58>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <vPortEnterCritical+0x58>)
 800512a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <vPortEnterCritical+0x58>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10f      	bne.n	8005154 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <vPortEnterCritical+0x5c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <vPortEnterCritical+0x4c>
        __asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
    }
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortEnterCritical+0x4a>
    }
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000010 	.word	0x20000010
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <vPortExitCritical+0x50>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vPortExitCritical+0x24>
        __asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	607b      	str	r3, [r7, #4]
    }
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vPortExitCritical+0x50>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3b01      	subs	r3, #1
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <vPortExitCritical+0x50>)
 8005194:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <vPortExitCritical+0x50>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <vPortExitCritical+0x42>
 800519e:	2300      	movs	r3, #0
 80051a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f383 8811 	msr	BASEPRI, r3
    }
 80051a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000010 	.word	0x20000010
 80051bc:	00000000 	.word	0x00000000

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f01e 0f10 	tst.w	lr, #16
 80051d0:	bf08      	it	eq
 80051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051e4:	f380 8811 	msr	BASEPRI, r0
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f7fe feee 	bl	8003fd0 <vTaskSwitchContext>
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	bc09      	pop	{r0, r3}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005206:	f01e 0f10 	tst.w	lr, #16
 800520a:	bf08      	it	eq
 800520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005210:	f380 8809 	msr	PSP, r0
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst>:
 8005220:	20000234 	.word	0x20000234
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
        __asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
    }
 8005240:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7fe fe0d 	bl	8003e60 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <SysTick_Handler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
    }
 800525e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vPortSetupTimerInterrupt+0x38>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <vPortSetupTimerInterrupt+0x3c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <vPortSetupTimerInterrupt+0x40>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <vPortSetupTimerInterrupt+0x44>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e010 	.word	0xe000e010
 80052a4:	e000e018 	.word	0xe000e018
 80052a8:	20000000 	.word	0x20000000
 80052ac:	10624dd3 	.word	0x10624dd3
 80052b0:	e000e014 	.word	0xe000e014

080052b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80052b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052c4 <vPortEnableVFP+0x10>
 80052b8:	6801      	ldr	r1, [r0, #0]
 80052ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052be:	6001      	str	r1, [r0, #0]
 80052c0:	4770      	bx	lr
 80052c2:	0000      	.short	0x0000
 80052c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop

080052cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80052d2:	f3ef 8305 	mrs	r3, IPSR
 80052d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	d914      	bls.n	8005308 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <vPortValidateInterruptPriority+0x70>)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <vPortValidateInterruptPriority+0x74>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	7afa      	ldrb	r2, [r7, #11]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d20a      	bcs.n	8005308 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	607b      	str	r3, [r7, #4]
    }
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <vPortValidateInterruptPriority+0x78>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <vPortValidateInterruptPriority+0x7c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d90a      	bls.n	800532e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	603b      	str	r3, [r7, #0]
    }
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <vPortValidateInterruptPriority+0x60>
    }
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	e000e3f0 	.word	0xe000e3f0
 8005340:	20000374 	.word	0x20000374
 8005344:	e000ed0c 	.word	0xe000ed0c
 8005348:	20000378 	.word	0x20000378

0800534c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005358:	f7fe fcc8 	bl	8003cec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800535c:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <pvPortMalloc+0x1a8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005364:	f000 f934 	bl	80055d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005368:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <pvPortMalloc+0x1ac>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 80a7 	bne.w	80054c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02d      	beq.n	80053d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800537c:	2208      	movs	r2, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d227      	bcs.n	80053d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005388:	2208      	movs	r2, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4413      	add	r3, r2
 800538e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	3308      	adds	r3, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d214      	bcs.n	80053d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	3308      	adds	r3, #8
 80053b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d010      	beq.n	80053de <pvPortMalloc+0x92>
        __asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	617b      	str	r3, [r7, #20]
    }
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053d6:	e002      	b.n	80053de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	e000      	b.n	80053e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d06e      	beq.n	80054c4 <pvPortMalloc+0x178>
 80053e6:	4b45      	ldr	r3, [pc, #276]	; (80054fc <pvPortMalloc+0x1b0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d869      	bhi.n	80054c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80053f0:	4b43      	ldr	r3, [pc, #268]	; (8005500 <pvPortMalloc+0x1b4>)
 80053f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80053f4:	4b42      	ldr	r3, [pc, #264]	; (8005500 <pvPortMalloc+0x1b4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053fa:	e004      	b.n	8005406 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d903      	bls.n	8005418 <pvPortMalloc+0xcc>
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f1      	bne.n	80053fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005418:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <pvPortMalloc+0x1a8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541e:	429a      	cmp	r2, r3
 8005420:	d050      	beq.n	80054c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2208      	movs	r2, #8
 8005428:	4413      	add	r3, r2
 800542a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	2308      	movs	r3, #8
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	429a      	cmp	r2, r3
 8005442:	d91f      	bls.n	8005484 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <pvPortMalloc+0x120>
        __asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	613b      	str	r3, [r7, #16]
    }
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800547e:	69b8      	ldr	r0, [r7, #24]
 8005480:	f000 f908 	bl	8005694 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <pvPortMalloc+0x1b0>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <pvPortMalloc+0x1b0>)
 8005490:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005492:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <pvPortMalloc+0x1b0>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <pvPortMalloc+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d203      	bcs.n	80054a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <pvPortMalloc+0x1b0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <pvPortMalloc+0x1b8>)
 80054a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <pvPortMalloc+0x1ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <pvPortMalloc+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3301      	adds	r3, #1
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <pvPortMalloc+0x1bc>)
 80054c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054c4:	f7fe fc20 	bl	8003d08 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <pvPortMalloc+0x19c>
        __asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
    }
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80054e8:	69fb      	ldr	r3, [r7, #28]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3728      	adds	r7, #40	; 0x28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20019384 	.word	0x20019384
 80054f8:	20019398 	.word	0x20019398
 80054fc:	20019388 	.word	0x20019388
 8005500:	2001937c 	.word	0x2001937c
 8005504:	2001938c 	.word	0x2001938c
 8005508:	20019390 	.word	0x20019390

0800550c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04d      	beq.n	80055ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800551e:	2308      	movs	r3, #8
 8005520:	425b      	negs	r3, r3
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <vPortFree+0xb8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <vPortFree+0x44>
        __asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
    }
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <vPortFree+0x62>
        __asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60bb      	str	r3, [r7, #8]
    }
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <vPortFree+0xb8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11a      	bne.n	80055ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <vPortFree+0xb8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005594:	f7fe fbaa 	bl	8003cec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <vPortFree+0xbc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortFree+0xbc>)
 80055a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055a6:	6938      	ldr	r0, [r7, #16]
 80055a8:	f000 f874 	bl	8005694 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80055ac:	4b07      	ldr	r3, [pc, #28]	; (80055cc <vPortFree+0xc0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	4a06      	ldr	r2, [pc, #24]	; (80055cc <vPortFree+0xc0>)
 80055b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80055b6:	f7fe fba7 	bl	8003d08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80055ba:	bf00      	nop
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20019398 	.word	0x20019398
 80055c8:	20019388 	.word	0x20019388
 80055cc:	20019394 	.word	0x20019394

080055d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80055da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <prvHeapInit+0xac>)
 80055de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3307      	adds	r3, #7
 80055ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	4a1f      	ldr	r2, [pc, #124]	; (800567c <prvHeapInit+0xac>)
 8005600:	4413      	add	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <prvHeapInit+0xb0>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <prvHeapInit+0xb0>)
 8005610:	2200      	movs	r2, #0
 8005612:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800561c:	2208      	movs	r2, #8
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <prvHeapInit+0xb4>)
 8005630:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <prvHeapInit+0xb4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <prvHeapInit+0xb4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <prvHeapInit+0xb4>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <prvHeapInit+0xb8>)
 800565e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <prvHeapInit+0xbc>)
 8005666:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <prvHeapInit+0xc0>)
 800566a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	2000037c 	.word	0x2000037c
 8005680:	2001937c 	.word	0x2001937c
 8005684:	20019384 	.word	0x20019384
 8005688:	2001938c 	.word	0x2001938c
 800568c:	20019388 	.word	0x20019388
 8005690:	20019398 	.word	0x20019398

08005694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800569c:	4b28      	ldr	r3, [pc, #160]	; (8005740 <prvInsertBlockIntoFreeList+0xac>)
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e002      	b.n	80056a8 <prvInsertBlockIntoFreeList+0x14>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d8f7      	bhi.n	80056a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4413      	add	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d108      	bne.n	80056d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d118      	bne.n	800571c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <prvInsertBlockIntoFreeList+0xb0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d00d      	beq.n	8005712 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e008      	b.n	8005724 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <prvInsertBlockIntoFreeList+0xb0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e003      	b.n	8005724 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d002      	beq.n	8005732 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	2001937c 	.word	0x2001937c
 8005744:	20019384 	.word	0x20019384

08005748 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800574e:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <USART2_IRQHandler+0x80>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d011      	beq.n	8005782 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <USART2_IRQHandler+0x84>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 030b 	and.w	r3, r3, #11
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <USART2_IRQHandler+0x88>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <USART2_IRQHandler+0x88>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	79fa      	ldrb	r2, [r7, #7]
 800577e:	4610      	mov	r0, r2
 8005780:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <USART2_IRQHandler+0x8c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <USART2_IRQHandler+0x8c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1dfa      	adds	r2, r7, #7
 800579a:	4610      	mov	r0, r2
 800579c:	4798      	blx	r3
 800579e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <USART2_IRQHandler+0x90>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <USART2_IRQHandler+0x90>)
 80057ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e006      	b.n	80057c2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <USART2_IRQHandler+0x80>)
 80057b6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80057b8:	79fa      	ldrb	r2, [r7, #7]
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <USART2_IRQHandler+0x84>)
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e000      	b.n	80057c2 <USART2_IRQHandler+0x7a>
      return;
 80057c0:	bf00      	nop
    }
  }
}
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004404 	.word	0x40004404
 80057d0:	2001939c 	.word	0x2001939c
 80057d4:	200193a0 	.word	0x200193a0
 80057d8:	4000440c 	.word	0x4000440c

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000014 	.word	0x20000014

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	; (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	; (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	; (800582c <__libc_init_array+0x44>)
 80057fc:	f000 fc8e 	bl	800611c <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08006208 	.word	0x08006208
 8005824:	08006208 	.word	0x08006208
 8005828:	08006208 	.word	0x08006208
 800582c:	0800620c 	.word	0x0800620c

08005830 <memcpy>:
 8005830:	440a      	add	r2, r1
 8005832:	4291      	cmp	r1, r2
 8005834:	f100 33ff 	add.w	r3, r0, #4294967295
 8005838:	d100      	bne.n	800583c <memcpy+0xc>
 800583a:	4770      	bx	lr
 800583c:	b510      	push	{r4, lr}
 800583e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005846:	4291      	cmp	r1, r2
 8005848:	d1f9      	bne.n	800583e <memcpy+0xe>
 800584a:	bd10      	pop	{r4, pc}

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	b500      	push	{lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	9006      	str	r0, [sp, #24]
 8005868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <siprintf+0x38>)
 800586e:	9107      	str	r1, [sp, #28]
 8005870:	9104      	str	r1, [sp, #16]
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	a902      	add	r1, sp, #8
 8005880:	f000 f868 	bl	8005954 <_svfiprintf_r>
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	; 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	20000014 	.word	0x20000014
 8005898:	ffff0208 	.word	0xffff0208

0800589c <__ssputs_r>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	688e      	ldr	r6, [r1, #8]
 80058a2:	429e      	cmp	r6, r3
 80058a4:	4682      	mov	sl, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4690      	mov	r8, r2
 80058aa:	461f      	mov	r7, r3
 80058ac:	d838      	bhi.n	8005920 <__ssputs_r+0x84>
 80058ae:	898a      	ldrh	r2, [r1, #12]
 80058b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058b4:	d032      	beq.n	800591c <__ssputs_r+0x80>
 80058b6:	6825      	ldr	r5, [r4, #0]
 80058b8:	6909      	ldr	r1, [r1, #16]
 80058ba:	eba5 0901 	sub.w	r9, r5, r1
 80058be:	6965      	ldr	r5, [r4, #20]
 80058c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058c8:	3301      	adds	r3, #1
 80058ca:	444b      	add	r3, r9
 80058cc:	106d      	asrs	r5, r5, #1
 80058ce:	429d      	cmp	r5, r3
 80058d0:	bf38      	it	cc
 80058d2:	461d      	movcc	r5, r3
 80058d4:	0553      	lsls	r3, r2, #21
 80058d6:	d531      	bpl.n	800593c <__ssputs_r+0xa0>
 80058d8:	4629      	mov	r1, r5
 80058da:	f000 fb55 	bl	8005f88 <_malloc_r>
 80058de:	4606      	mov	r6, r0
 80058e0:	b950      	cbnz	r0, 80058f8 <__ssputs_r+0x5c>
 80058e2:	230c      	movs	r3, #12
 80058e4:	f8ca 3000 	str.w	r3, [sl]
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	6921      	ldr	r1, [r4, #16]
 80058fa:	464a      	mov	r2, r9
 80058fc:	f7ff ff98 	bl	8005830 <memcpy>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	6126      	str	r6, [r4, #16]
 800590e:	6165      	str	r5, [r4, #20]
 8005910:	444e      	add	r6, r9
 8005912:	eba5 0509 	sub.w	r5, r5, r9
 8005916:	6026      	str	r6, [r4, #0]
 8005918:	60a5      	str	r5, [r4, #8]
 800591a:	463e      	mov	r6, r7
 800591c:	42be      	cmp	r6, r7
 800591e:	d900      	bls.n	8005922 <__ssputs_r+0x86>
 8005920:	463e      	mov	r6, r7
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	4632      	mov	r2, r6
 8005926:	4641      	mov	r1, r8
 8005928:	f000 faa8 	bl	8005e7c <memmove>
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	1b9b      	subs	r3, r3, r6
 8005930:	60a3      	str	r3, [r4, #8]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	4433      	add	r3, r6
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	2000      	movs	r0, #0
 800593a:	e7db      	b.n	80058f4 <__ssputs_r+0x58>
 800593c:	462a      	mov	r2, r5
 800593e:	f000 fb97 	bl	8006070 <_realloc_r>
 8005942:	4606      	mov	r6, r0
 8005944:	2800      	cmp	r0, #0
 8005946:	d1e1      	bne.n	800590c <__ssputs_r+0x70>
 8005948:	6921      	ldr	r1, [r4, #16]
 800594a:	4650      	mov	r0, sl
 800594c:	f000 fab0 	bl	8005eb0 <_free_r>
 8005950:	e7c7      	b.n	80058e2 <__ssputs_r+0x46>
	...

08005954 <_svfiprintf_r>:
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4698      	mov	r8, r3
 800595a:	898b      	ldrh	r3, [r1, #12]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	b09d      	sub	sp, #116	; 0x74
 8005960:	4607      	mov	r7, r0
 8005962:	460d      	mov	r5, r1
 8005964:	4614      	mov	r4, r2
 8005966:	d50e      	bpl.n	8005986 <_svfiprintf_r+0x32>
 8005968:	690b      	ldr	r3, [r1, #16]
 800596a:	b963      	cbnz	r3, 8005986 <_svfiprintf_r+0x32>
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	f000 fb0b 	bl	8005f88 <_malloc_r>
 8005972:	6028      	str	r0, [r5, #0]
 8005974:	6128      	str	r0, [r5, #16]
 8005976:	b920      	cbnz	r0, 8005982 <_svfiprintf_r+0x2e>
 8005978:	230c      	movs	r3, #12
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e0d1      	b.n	8005b26 <_svfiprintf_r+0x1d2>
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	616b      	str	r3, [r5, #20]
 8005986:	2300      	movs	r3, #0
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	2320      	movs	r3, #32
 800598c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005990:	f8cd 800c 	str.w	r8, [sp, #12]
 8005994:	2330      	movs	r3, #48	; 0x30
 8005996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b40 <_svfiprintf_r+0x1ec>
 800599a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800599e:	f04f 0901 	mov.w	r9, #1
 80059a2:	4623      	mov	r3, r4
 80059a4:	469a      	mov	sl, r3
 80059a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059aa:	b10a      	cbz	r2, 80059b0 <_svfiprintf_r+0x5c>
 80059ac:	2a25      	cmp	r2, #37	; 0x25
 80059ae:	d1f9      	bne.n	80059a4 <_svfiprintf_r+0x50>
 80059b0:	ebba 0b04 	subs.w	fp, sl, r4
 80059b4:	d00b      	beq.n	80059ce <_svfiprintf_r+0x7a>
 80059b6:	465b      	mov	r3, fp
 80059b8:	4622      	mov	r2, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff ff6d 	bl	800589c <__ssputs_r>
 80059c2:	3001      	adds	r0, #1
 80059c4:	f000 80aa 	beq.w	8005b1c <_svfiprintf_r+0x1c8>
 80059c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ca:	445a      	add	r2, fp
 80059cc:	9209      	str	r2, [sp, #36]	; 0x24
 80059ce:	f89a 3000 	ldrb.w	r3, [sl]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80a2 	beq.w	8005b1c <_svfiprintf_r+0x1c8>
 80059d8:	2300      	movs	r3, #0
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e2:	f10a 0a01 	add.w	sl, sl, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ee:	931a      	str	r3, [sp, #104]	; 0x68
 80059f0:	4654      	mov	r4, sl
 80059f2:	2205      	movs	r2, #5
 80059f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f8:	4851      	ldr	r0, [pc, #324]	; (8005b40 <_svfiprintf_r+0x1ec>)
 80059fa:	f7fa fbf1 	bl	80001e0 <memchr>
 80059fe:	9a04      	ldr	r2, [sp, #16]
 8005a00:	b9d8      	cbnz	r0, 8005a3a <_svfiprintf_r+0xe6>
 8005a02:	06d0      	lsls	r0, r2, #27
 8005a04:	bf44      	itt	mi
 8005a06:	2320      	movmi	r3, #32
 8005a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0c:	0711      	lsls	r1, r2, #28
 8005a0e:	bf44      	itt	mi
 8005a10:	232b      	movmi	r3, #43	; 0x2b
 8005a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a16:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	d015      	beq.n	8005a4a <_svfiprintf_r+0xf6>
 8005a1e:	9a07      	ldr	r2, [sp, #28]
 8005a20:	4654      	mov	r4, sl
 8005a22:	2000      	movs	r0, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a2e:	3b30      	subs	r3, #48	; 0x30
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d94e      	bls.n	8005ad2 <_svfiprintf_r+0x17e>
 8005a34:	b1b0      	cbz	r0, 8005a64 <_svfiprintf_r+0x110>
 8005a36:	9207      	str	r2, [sp, #28]
 8005a38:	e014      	b.n	8005a64 <_svfiprintf_r+0x110>
 8005a3a:	eba0 0308 	sub.w	r3, r0, r8
 8005a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	46a2      	mov	sl, r4
 8005a48:	e7d2      	b.n	80059f0 <_svfiprintf_r+0x9c>
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	9103      	str	r1, [sp, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfbb      	ittet	lt
 8005a56:	425b      	neglt	r3, r3
 8005a58:	f042 0202 	orrlt.w	r2, r2, #2
 8005a5c:	9307      	strge	r3, [sp, #28]
 8005a5e:	9307      	strlt	r3, [sp, #28]
 8005a60:	bfb8      	it	lt
 8005a62:	9204      	strlt	r2, [sp, #16]
 8005a64:	7823      	ldrb	r3, [r4, #0]
 8005a66:	2b2e      	cmp	r3, #46	; 0x2e
 8005a68:	d10c      	bne.n	8005a84 <_svfiprintf_r+0x130>
 8005a6a:	7863      	ldrb	r3, [r4, #1]
 8005a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6e:	d135      	bne.n	8005adc <_svfiprintf_r+0x188>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	9203      	str	r2, [sp, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a80:	3402      	adds	r4, #2
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b50 <_svfiprintf_r+0x1fc>
 8005a88:	7821      	ldrb	r1, [r4, #0]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	f7fa fba7 	bl	80001e0 <memchr>
 8005a92:	b140      	cbz	r0, 8005aa6 <_svfiprintf_r+0x152>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	eba0 000a 	sub.w	r0, r0, sl
 8005a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	4303      	orrs	r3, r0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aaa:	4826      	ldr	r0, [pc, #152]	; (8005b44 <_svfiprintf_r+0x1f0>)
 8005aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ab0:	2206      	movs	r2, #6
 8005ab2:	f7fa fb95 	bl	80001e0 <memchr>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d038      	beq.n	8005b2c <_svfiprintf_r+0x1d8>
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <_svfiprintf_r+0x1f4>)
 8005abc:	bb1b      	cbnz	r3, 8005b06 <_svfiprintf_r+0x1b2>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	3307      	adds	r3, #7
 8005ac2:	f023 0307 	bic.w	r3, r3, #7
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	9303      	str	r3, [sp, #12]
 8005aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005acc:	4433      	add	r3, r6
 8005ace:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad0:	e767      	b.n	80059a2 <_svfiprintf_r+0x4e>
 8005ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	2001      	movs	r0, #1
 8005ada:	e7a5      	b.n	8005a28 <_svfiprintf_r+0xd4>
 8005adc:	2300      	movs	r3, #0
 8005ade:	3401      	adds	r4, #1
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f04f 0c0a 	mov.w	ip, #10
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aee:	3a30      	subs	r2, #48	; 0x30
 8005af0:	2a09      	cmp	r2, #9
 8005af2:	d903      	bls.n	8005afc <_svfiprintf_r+0x1a8>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0c5      	beq.n	8005a84 <_svfiprintf_r+0x130>
 8005af8:	9105      	str	r1, [sp, #20]
 8005afa:	e7c3      	b.n	8005a84 <_svfiprintf_r+0x130>
 8005afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b00:	4604      	mov	r4, r0
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7f0      	b.n	8005ae8 <_svfiprintf_r+0x194>
 8005b06:	ab03      	add	r3, sp, #12
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <_svfiprintf_r+0x1f8>)
 8005b0e:	a904      	add	r1, sp, #16
 8005b10:	4638      	mov	r0, r7
 8005b12:	f3af 8000 	nop.w
 8005b16:	1c42      	adds	r2, r0, #1
 8005b18:	4606      	mov	r6, r0
 8005b1a:	d1d6      	bne.n	8005aca <_svfiprintf_r+0x176>
 8005b1c:	89ab      	ldrh	r3, [r5, #12]
 8005b1e:	065b      	lsls	r3, r3, #25
 8005b20:	f53f af2c 	bmi.w	800597c <_svfiprintf_r+0x28>
 8005b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b26:	b01d      	add	sp, #116	; 0x74
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	462a      	mov	r2, r5
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <_svfiprintf_r+0x1f8>)
 8005b34:	a904      	add	r1, sp, #16
 8005b36:	4638      	mov	r0, r7
 8005b38:	f000 f87a 	bl	8005c30 <_printf_i>
 8005b3c:	e7eb      	b.n	8005b16 <_svfiprintf_r+0x1c2>
 8005b3e:	bf00      	nop
 8005b40:	080061cc 	.word	0x080061cc
 8005b44:	080061d6 	.word	0x080061d6
 8005b48:	00000000 	.word	0x00000000
 8005b4c:	0800589d 	.word	0x0800589d
 8005b50:	080061d2 	.word	0x080061d2

08005b54 <_printf_common>:
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	4616      	mov	r6, r2
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	688a      	ldr	r2, [r1, #8]
 8005b5e:	690b      	ldr	r3, [r1, #16]
 8005b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bfb8      	it	lt
 8005b68:	4613      	movlt	r3, r2
 8005b6a:	6033      	str	r3, [r6, #0]
 8005b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b70:	4607      	mov	r7, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b10a      	cbz	r2, 8005b7a <_printf_common+0x26>
 8005b76:	3301      	adds	r3, #1
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	0699      	lsls	r1, r3, #26
 8005b7e:	bf42      	ittt	mi
 8005b80:	6833      	ldrmi	r3, [r6, #0]
 8005b82:	3302      	addmi	r3, #2
 8005b84:	6033      	strmi	r3, [r6, #0]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	f015 0506 	ands.w	r5, r5, #6
 8005b8c:	d106      	bne.n	8005b9c <_printf_common+0x48>
 8005b8e:	f104 0a19 	add.w	sl, r4, #25
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	6832      	ldr	r2, [r6, #0]
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	dc26      	bgt.n	8005bea <_printf_common+0x96>
 8005b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba0:	1e13      	subs	r3, r2, #0
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	0692      	lsls	r2, r2, #26
 8005baa:	d42b      	bmi.n	8005c04 <_printf_common+0xb0>
 8005bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d01e      	beq.n	8005bf8 <_printf_common+0xa4>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	68e5      	ldr	r5, [r4, #12]
 8005bbe:	6832      	ldr	r2, [r6, #0]
 8005bc0:	f003 0306 	and.w	r3, r3, #6
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	bf08      	it	eq
 8005bc8:	1aad      	subeq	r5, r5, r2
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	6922      	ldr	r2, [r4, #16]
 8005bce:	bf0c      	ite	eq
 8005bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd4:	2500      	movne	r5, #0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bfc4      	itt	gt
 8005bda:	1a9b      	subgt	r3, r3, r2
 8005bdc:	18ed      	addgt	r5, r5, r3
 8005bde:	2600      	movs	r6, #0
 8005be0:	341a      	adds	r4, #26
 8005be2:	42b5      	cmp	r5, r6
 8005be4:	d11a      	bne.n	8005c1c <_printf_common+0xc8>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e008      	b.n	8005bfc <_printf_common+0xa8>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4652      	mov	r2, sl
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d103      	bne.n	8005c00 <_printf_common+0xac>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	3501      	adds	r5, #1
 8005c02:	e7c6      	b.n	8005b92 <_printf_common+0x3e>
 8005c04:	18e1      	adds	r1, r4, r3
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	2030      	movs	r0, #48	; 0x30
 8005c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0e:	4422      	add	r2, r4
 8005c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c18:	3302      	adds	r3, #2
 8005c1a:	e7c7      	b.n	8005bac <_printf_common+0x58>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4649      	mov	r1, r9
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d0e6      	beq.n	8005bf8 <_printf_common+0xa4>
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7d9      	b.n	8005be2 <_printf_common+0x8e>
	...

08005c30 <_printf_i>:
 8005c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	7e0f      	ldrb	r7, [r1, #24]
 8005c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c38:	2f78      	cmp	r7, #120	; 0x78
 8005c3a:	4691      	mov	r9, r2
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	469a      	mov	sl, r3
 8005c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c46:	d807      	bhi.n	8005c58 <_printf_i+0x28>
 8005c48:	2f62      	cmp	r7, #98	; 0x62
 8005c4a:	d80a      	bhi.n	8005c62 <_printf_i+0x32>
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	f000 80d8 	beq.w	8005e02 <_printf_i+0x1d2>
 8005c52:	2f58      	cmp	r7, #88	; 0x58
 8005c54:	f000 80a3 	beq.w	8005d9e <_printf_i+0x16e>
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c60:	e03a      	b.n	8005cd8 <_printf_i+0xa8>
 8005c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c66:	2b15      	cmp	r3, #21
 8005c68:	d8f6      	bhi.n	8005c58 <_printf_i+0x28>
 8005c6a:	a101      	add	r1, pc, #4	; (adr r1, 8005c70 <_printf_i+0x40>)
 8005c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c70:	08005cc9 	.word	0x08005cc9
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005c59 	.word	0x08005c59
 8005c7c:	08005c59 	.word	0x08005c59
 8005c80:	08005c59 	.word	0x08005c59
 8005c84:	08005c59 	.word	0x08005c59
 8005c88:	08005cdd 	.word	0x08005cdd
 8005c8c:	08005c59 	.word	0x08005c59
 8005c90:	08005c59 	.word	0x08005c59
 8005c94:	08005c59 	.word	0x08005c59
 8005c98:	08005c59 	.word	0x08005c59
 8005c9c:	08005de9 	.word	0x08005de9
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005dcb 	.word	0x08005dcb
 8005ca8:	08005c59 	.word	0x08005c59
 8005cac:	08005c59 	.word	0x08005c59
 8005cb0:	08005e0b 	.word	0x08005e0b
 8005cb4:	08005c59 	.word	0x08005c59
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005c59 	.word	0x08005c59
 8005cc0:	08005c59 	.word	0x08005c59
 8005cc4:	08005dd3 	.word	0x08005dd3
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0a3      	b.n	8005e24 <_printf_i+0x1f4>
 8005cdc:	6820      	ldr	r0, [r4, #0]
 8005cde:	6829      	ldr	r1, [r5, #0]
 8005ce0:	0606      	lsls	r6, r0, #24
 8005ce2:	f101 0304 	add.w	r3, r1, #4
 8005ce6:	d50a      	bpl.n	8005cfe <_printf_i+0xce>
 8005ce8:	680e      	ldr	r6, [r1, #0]
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	da03      	bge.n	8005cf8 <_printf_i+0xc8>
 8005cf0:	232d      	movs	r3, #45	; 0x2d
 8005cf2:	4276      	negs	r6, r6
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	485e      	ldr	r0, [pc, #376]	; (8005e74 <_printf_i+0x244>)
 8005cfa:	230a      	movs	r3, #10
 8005cfc:	e019      	b.n	8005d32 <_printf_i+0x102>
 8005cfe:	680e      	ldr	r6, [r1, #0]
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d06:	bf18      	it	ne
 8005d08:	b236      	sxthne	r6, r6
 8005d0a:	e7ef      	b.n	8005cec <_printf_i+0xbc>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	1d19      	adds	r1, r3, #4
 8005d12:	6029      	str	r1, [r5, #0]
 8005d14:	0601      	lsls	r1, r0, #24
 8005d16:	d501      	bpl.n	8005d1c <_printf_i+0xec>
 8005d18:	681e      	ldr	r6, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <_printf_i+0xf2>
 8005d1c:	0646      	lsls	r6, r0, #25
 8005d1e:	d5fb      	bpl.n	8005d18 <_printf_i+0xe8>
 8005d20:	881e      	ldrh	r6, [r3, #0]
 8005d22:	4854      	ldr	r0, [pc, #336]	; (8005e74 <_printf_i+0x244>)
 8005d24:	2f6f      	cmp	r7, #111	; 0x6f
 8005d26:	bf0c      	ite	eq
 8005d28:	2308      	moveq	r3, #8
 8005d2a:	230a      	movne	r3, #10
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d32:	6865      	ldr	r5, [r4, #4]
 8005d34:	60a5      	str	r5, [r4, #8]
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	bfa2      	ittt	ge
 8005d3a:	6821      	ldrge	r1, [r4, #0]
 8005d3c:	f021 0104 	bicge.w	r1, r1, #4
 8005d40:	6021      	strge	r1, [r4, #0]
 8005d42:	b90e      	cbnz	r6, 8005d48 <_printf_i+0x118>
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	d04d      	beq.n	8005de4 <_printf_i+0x1b4>
 8005d48:	4615      	mov	r5, r2
 8005d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d52:	5dc7      	ldrb	r7, [r0, r7]
 8005d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d58:	4637      	mov	r7, r6
 8005d5a:	42bb      	cmp	r3, r7
 8005d5c:	460e      	mov	r6, r1
 8005d5e:	d9f4      	bls.n	8005d4a <_printf_i+0x11a>
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d10b      	bne.n	8005d7c <_printf_i+0x14c>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	07de      	lsls	r6, r3, #31
 8005d68:	d508      	bpl.n	8005d7c <_printf_i+0x14c>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	6861      	ldr	r1, [r4, #4]
 8005d6e:	4299      	cmp	r1, r3
 8005d70:	bfde      	ittt	le
 8005d72:	2330      	movle	r3, #48	; 0x30
 8005d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d7c:	1b52      	subs	r2, r2, r5
 8005d7e:	6122      	str	r2, [r4, #16]
 8005d80:	f8cd a000 	str.w	sl, [sp]
 8005d84:	464b      	mov	r3, r9
 8005d86:	aa03      	add	r2, sp, #12
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	f7ff fee2 	bl	8005b54 <_printf_common>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d14c      	bne.n	8005e2e <_printf_i+0x1fe>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	b004      	add	sp, #16
 8005d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9e:	4835      	ldr	r0, [pc, #212]	; (8005e74 <_printf_i+0x244>)
 8005da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005da4:	6829      	ldr	r1, [r5, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dac:	6029      	str	r1, [r5, #0]
 8005dae:	061d      	lsls	r5, r3, #24
 8005db0:	d514      	bpl.n	8005ddc <_printf_i+0x1ac>
 8005db2:	07df      	lsls	r7, r3, #31
 8005db4:	bf44      	itt	mi
 8005db6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dba:	6023      	strmi	r3, [r4, #0]
 8005dbc:	b91e      	cbnz	r6, 8005dc6 <_printf_i+0x196>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f023 0320 	bic.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	e7b0      	b.n	8005d2c <_printf_i+0xfc>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f043 0320 	orr.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	2378      	movs	r3, #120	; 0x78
 8005dd4:	4828      	ldr	r0, [pc, #160]	; (8005e78 <_printf_i+0x248>)
 8005dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dda:	e7e3      	b.n	8005da4 <_printf_i+0x174>
 8005ddc:	0659      	lsls	r1, r3, #25
 8005dde:	bf48      	it	mi
 8005de0:	b2b6      	uxthmi	r6, r6
 8005de2:	e7e6      	b.n	8005db2 <_printf_i+0x182>
 8005de4:	4615      	mov	r5, r2
 8005de6:	e7bb      	b.n	8005d60 <_printf_i+0x130>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	6826      	ldr	r6, [r4, #0]
 8005dec:	6961      	ldr	r1, [r4, #20]
 8005dee:	1d18      	adds	r0, r3, #4
 8005df0:	6028      	str	r0, [r5, #0]
 8005df2:	0635      	lsls	r5, r6, #24
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	d501      	bpl.n	8005dfc <_printf_i+0x1cc>
 8005df8:	6019      	str	r1, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <_printf_i+0x1d2>
 8005dfc:	0670      	lsls	r0, r6, #25
 8005dfe:	d5fb      	bpl.n	8005df8 <_printf_i+0x1c8>
 8005e00:	8019      	strh	r1, [r3, #0]
 8005e02:	2300      	movs	r3, #0
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	4615      	mov	r5, r2
 8005e08:	e7ba      	b.n	8005d80 <_printf_i+0x150>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	2100      	movs	r1, #0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7fa f9e2 	bl	80001e0 <memchr>
 8005e1c:	b108      	cbz	r0, 8005e22 <_printf_i+0x1f2>
 8005e1e:	1b40      	subs	r0, r0, r5
 8005e20:	6060      	str	r0, [r4, #4]
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	2300      	movs	r3, #0
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	e7a8      	b.n	8005d80 <_printf_i+0x150>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d0ab      	beq.n	8005d94 <_printf_i+0x164>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	079b      	lsls	r3, r3, #30
 8005e40:	d413      	bmi.n	8005e6a <_printf_i+0x23a>
 8005e42:	68e0      	ldr	r0, [r4, #12]
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	4298      	cmp	r0, r3
 8005e48:	bfb8      	it	lt
 8005e4a:	4618      	movlt	r0, r3
 8005e4c:	e7a4      	b.n	8005d98 <_printf_i+0x168>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4632      	mov	r2, r6
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d09b      	beq.n	8005d94 <_printf_i+0x164>
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	9903      	ldr	r1, [sp, #12]
 8005e62:	1a5b      	subs	r3, r3, r1
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dcf2      	bgt.n	8005e4e <_printf_i+0x21e>
 8005e68:	e7eb      	b.n	8005e42 <_printf_i+0x212>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	f104 0619 	add.w	r6, r4, #25
 8005e70:	e7f5      	b.n	8005e5e <_printf_i+0x22e>
 8005e72:	bf00      	nop
 8005e74:	080061dd 	.word	0x080061dd
 8005e78:	080061ee 	.word	0x080061ee

08005e7c <memmove>:
 8005e7c:	4288      	cmp	r0, r1
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	eb01 0402 	add.w	r4, r1, r2
 8005e84:	d902      	bls.n	8005e8c <memmove+0x10>
 8005e86:	4284      	cmp	r4, r0
 8005e88:	4623      	mov	r3, r4
 8005e8a:	d807      	bhi.n	8005e9c <memmove+0x20>
 8005e8c:	1e43      	subs	r3, r0, #1
 8005e8e:	42a1      	cmp	r1, r4
 8005e90:	d008      	beq.n	8005ea4 <memmove+0x28>
 8005e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e9a:	e7f8      	b.n	8005e8e <memmove+0x12>
 8005e9c:	4402      	add	r2, r0
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	428a      	cmp	r2, r1
 8005ea2:	d100      	bne.n	8005ea6 <memmove+0x2a>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eae:	e7f7      	b.n	8005ea0 <memmove+0x24>

08005eb0 <_free_r>:
 8005eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d044      	beq.n	8005f40 <_free_r+0x90>
 8005eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eba:	9001      	str	r0, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8005ec2:	bfb8      	it	lt
 8005ec4:	18e4      	addlt	r4, r4, r3
 8005ec6:	f000 f913 	bl	80060f0 <__malloc_lock>
 8005eca:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <_free_r+0x94>)
 8005ecc:	9801      	ldr	r0, [sp, #4]
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	b933      	cbnz	r3, 8005ee0 <_free_r+0x30>
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	6014      	str	r4, [r2, #0]
 8005ed6:	b003      	add	sp, #12
 8005ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005edc:	f000 b90e 	b.w	80060fc <__malloc_unlock>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d908      	bls.n	8005ef6 <_free_r+0x46>
 8005ee4:	6825      	ldr	r5, [r4, #0]
 8005ee6:	1961      	adds	r1, r4, r5
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf01      	itttt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	1949      	addeq	r1, r1, r5
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	e7ed      	b.n	8005ed2 <_free_r+0x22>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b10b      	cbz	r3, 8005f00 <_free_r+0x50>
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d9fa      	bls.n	8005ef6 <_free_r+0x46>
 8005f00:	6811      	ldr	r1, [r2, #0]
 8005f02:	1855      	adds	r5, r2, r1
 8005f04:	42a5      	cmp	r5, r4
 8005f06:	d10b      	bne.n	8005f20 <_free_r+0x70>
 8005f08:	6824      	ldr	r4, [r4, #0]
 8005f0a:	4421      	add	r1, r4
 8005f0c:	1854      	adds	r4, r2, r1
 8005f0e:	42a3      	cmp	r3, r4
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	d1e0      	bne.n	8005ed6 <_free_r+0x26>
 8005f14:	681c      	ldr	r4, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	6053      	str	r3, [r2, #4]
 8005f1a:	4421      	add	r1, r4
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	e7da      	b.n	8005ed6 <_free_r+0x26>
 8005f20:	d902      	bls.n	8005f28 <_free_r+0x78>
 8005f22:	230c      	movs	r3, #12
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	e7d6      	b.n	8005ed6 <_free_r+0x26>
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1961      	adds	r1, r4, r5
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf04      	itt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	bf04      	itt	eq
 8005f38:	1949      	addeq	r1, r1, r5
 8005f3a:	6021      	streq	r1, [r4, #0]
 8005f3c:	6054      	str	r4, [r2, #4]
 8005f3e:	e7ca      	b.n	8005ed6 <_free_r+0x26>
 8005f40:	b003      	add	sp, #12
 8005f42:	bd30      	pop	{r4, r5, pc}
 8005f44:	200193a4 	.word	0x200193a4

08005f48 <sbrk_aligned>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4e0e      	ldr	r6, [pc, #56]	; (8005f84 <sbrk_aligned+0x3c>)
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	6831      	ldr	r1, [r6, #0]
 8005f50:	4605      	mov	r5, r0
 8005f52:	b911      	cbnz	r1, 8005f5a <sbrk_aligned+0x12>
 8005f54:	f000 f8bc 	bl	80060d0 <_sbrk_r>
 8005f58:	6030      	str	r0, [r6, #0]
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f8b7 	bl	80060d0 <_sbrk_r>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d00a      	beq.n	8005f7c <sbrk_aligned+0x34>
 8005f66:	1cc4      	adds	r4, r0, #3
 8005f68:	f024 0403 	bic.w	r4, r4, #3
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d007      	beq.n	8005f80 <sbrk_aligned+0x38>
 8005f70:	1a21      	subs	r1, r4, r0
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f8ac 	bl	80060d0 <_sbrk_r>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d101      	bne.n	8005f80 <sbrk_aligned+0x38>
 8005f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f80:	4620      	mov	r0, r4
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	200193a8 	.word	0x200193a8

08005f88 <_malloc_r>:
 8005f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8c:	1ccd      	adds	r5, r1, #3
 8005f8e:	f025 0503 	bic.w	r5, r5, #3
 8005f92:	3508      	adds	r5, #8
 8005f94:	2d0c      	cmp	r5, #12
 8005f96:	bf38      	it	cc
 8005f98:	250c      	movcc	r5, #12
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	db01      	blt.n	8005fa4 <_malloc_r+0x1c>
 8005fa0:	42a9      	cmp	r1, r5
 8005fa2:	d905      	bls.n	8005fb0 <_malloc_r+0x28>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	2600      	movs	r6, #0
 8005faa:	4630      	mov	r0, r6
 8005fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb0:	4e2e      	ldr	r6, [pc, #184]	; (800606c <_malloc_r+0xe4>)
 8005fb2:	f000 f89d 	bl	80060f0 <__malloc_lock>
 8005fb6:	6833      	ldr	r3, [r6, #0]
 8005fb8:	461c      	mov	r4, r3
 8005fba:	bb34      	cbnz	r4, 800600a <_malloc_r+0x82>
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f7ff ffc2 	bl	8005f48 <sbrk_aligned>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	d14d      	bne.n	8006066 <_malloc_r+0xde>
 8005fca:	6834      	ldr	r4, [r6, #0]
 8005fcc:	4626      	mov	r6, r4
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d140      	bne.n	8006054 <_malloc_r+0xcc>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	eb04 0803 	add.w	r8, r4, r3
 8005fdc:	f000 f878 	bl	80060d0 <_sbrk_r>
 8005fe0:	4580      	cmp	r8, r0
 8005fe2:	d13a      	bne.n	800605a <_malloc_r+0xd2>
 8005fe4:	6821      	ldr	r1, [r4, #0]
 8005fe6:	3503      	adds	r5, #3
 8005fe8:	1a6d      	subs	r5, r5, r1
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7ff ffa5 	bl	8005f48 <sbrk_aligned>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d02b      	beq.n	800605a <_malloc_r+0xd2>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	442b      	add	r3, r5
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	e00e      	b.n	8006028 <_malloc_r+0xa0>
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	1b52      	subs	r2, r2, r5
 800600e:	d41e      	bmi.n	800604e <_malloc_r+0xc6>
 8006010:	2a0b      	cmp	r2, #11
 8006012:	d916      	bls.n	8006042 <_malloc_r+0xba>
 8006014:	1961      	adds	r1, r4, r5
 8006016:	42a3      	cmp	r3, r4
 8006018:	6025      	str	r5, [r4, #0]
 800601a:	bf18      	it	ne
 800601c:	6059      	strne	r1, [r3, #4]
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	bf08      	it	eq
 8006022:	6031      	streq	r1, [r6, #0]
 8006024:	5162      	str	r2, [r4, r5]
 8006026:	604b      	str	r3, [r1, #4]
 8006028:	4638      	mov	r0, r7
 800602a:	f104 060b 	add.w	r6, r4, #11
 800602e:	f000 f865 	bl	80060fc <__malloc_unlock>
 8006032:	f026 0607 	bic.w	r6, r6, #7
 8006036:	1d23      	adds	r3, r4, #4
 8006038:	1af2      	subs	r2, r6, r3
 800603a:	d0b6      	beq.n	8005faa <_malloc_r+0x22>
 800603c:	1b9b      	subs	r3, r3, r6
 800603e:	50a3      	str	r3, [r4, r2]
 8006040:	e7b3      	b.n	8005faa <_malloc_r+0x22>
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	bf0c      	ite	eq
 8006048:	6032      	streq	r2, [r6, #0]
 800604a:	605a      	strne	r2, [r3, #4]
 800604c:	e7ec      	b.n	8006028 <_malloc_r+0xa0>
 800604e:	4623      	mov	r3, r4
 8006050:	6864      	ldr	r4, [r4, #4]
 8006052:	e7b2      	b.n	8005fba <_malloc_r+0x32>
 8006054:	4634      	mov	r4, r6
 8006056:	6876      	ldr	r6, [r6, #4]
 8006058:	e7b9      	b.n	8005fce <_malloc_r+0x46>
 800605a:	230c      	movs	r3, #12
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4638      	mov	r0, r7
 8006060:	f000 f84c 	bl	80060fc <__malloc_unlock>
 8006064:	e7a1      	b.n	8005faa <_malloc_r+0x22>
 8006066:	6025      	str	r5, [r4, #0]
 8006068:	e7de      	b.n	8006028 <_malloc_r+0xa0>
 800606a:	bf00      	nop
 800606c:	200193a4 	.word	0x200193a4

08006070 <_realloc_r>:
 8006070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006074:	4680      	mov	r8, r0
 8006076:	4614      	mov	r4, r2
 8006078:	460e      	mov	r6, r1
 800607a:	b921      	cbnz	r1, 8006086 <_realloc_r+0x16>
 800607c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	4611      	mov	r1, r2
 8006082:	f7ff bf81 	b.w	8005f88 <_malloc_r>
 8006086:	b92a      	cbnz	r2, 8006094 <_realloc_r+0x24>
 8006088:	f7ff ff12 	bl	8005eb0 <_free_r>
 800608c:	4625      	mov	r5, r4
 800608e:	4628      	mov	r0, r5
 8006090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006094:	f000 f838 	bl	8006108 <_malloc_usable_size_r>
 8006098:	4284      	cmp	r4, r0
 800609a:	4607      	mov	r7, r0
 800609c:	d802      	bhi.n	80060a4 <_realloc_r+0x34>
 800609e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060a2:	d812      	bhi.n	80060ca <_realloc_r+0x5a>
 80060a4:	4621      	mov	r1, r4
 80060a6:	4640      	mov	r0, r8
 80060a8:	f7ff ff6e 	bl	8005f88 <_malloc_r>
 80060ac:	4605      	mov	r5, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d0ed      	beq.n	800608e <_realloc_r+0x1e>
 80060b2:	42bc      	cmp	r4, r7
 80060b4:	4622      	mov	r2, r4
 80060b6:	4631      	mov	r1, r6
 80060b8:	bf28      	it	cs
 80060ba:	463a      	movcs	r2, r7
 80060bc:	f7ff fbb8 	bl	8005830 <memcpy>
 80060c0:	4631      	mov	r1, r6
 80060c2:	4640      	mov	r0, r8
 80060c4:	f7ff fef4 	bl	8005eb0 <_free_r>
 80060c8:	e7e1      	b.n	800608e <_realloc_r+0x1e>
 80060ca:	4635      	mov	r5, r6
 80060cc:	e7df      	b.n	800608e <_realloc_r+0x1e>
	...

080060d0 <_sbrk_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	; (80060ec <_sbrk_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fa fe3c 	bl	8000d58 <_sbrk>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_sbrk_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_sbrk_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	200193ac 	.word	0x200193ac

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	; (80060f8 <__malloc_lock+0x8>)
 80060f2:	f000 b811 	b.w	8006118 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	200193b0 	.word	0x200193b0

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__malloc_unlock+0x8>)
 80060fe:	f000 b80c 	b.w	800611a <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	200193b0 	.word	0x200193b0

08006108 <_malloc_usable_size_r>:
 8006108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610c:	1f18      	subs	r0, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfbc      	itt	lt
 8006112:	580b      	ldrlt	r3, [r1, r0]
 8006114:	18c0      	addlt	r0, r0, r3
 8006116:	4770      	bx	lr

08006118 <__retarget_lock_acquire_recursive>:
 8006118:	4770      	bx	lr

0800611a <__retarget_lock_release_recursive>:
 800611a:	4770      	bx	lr

0800611c <_init>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr

08006128 <_fini>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr
