
Task002_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c8  080076c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d0  080076d0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001a890  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a8ac  2001a8ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015471  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb8  00000000  00000000  000354bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00038478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002300a  00000000  00000000  0003aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c01  00000000  00000000  0005da5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d746f  00000000  00000000  0007365b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014aaca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005254  00000000  00000000  0014ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007510 	.word	0x08007510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007510 	.word	0x08007510

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192d0 	.word	0x200192d0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb93 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f006 fe98 	bl	80072b0 <SEGGER_UART_init>

  //CYCLCNT enable for SEGGER view
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 faca 	bl	8004b24 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2303      	movs	r3, #3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f002 fc03 	bl	8002dac <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f002 fbe9 	bl	8002dac <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f002 fbd0 	bl	8002dac <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 fd23 	bl	8003074 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0007a120 	.word	0x0007a120
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08007528 	.word	0x08007528
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08007538 	.word	0x08007538
 8000644:	08000a39 	.word	0x08000a39
 8000648:	08007548 	.word	0x08007548
 800064c:	08000a0d 	.word	0x08000a0d

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 ff4e 	bl	8007500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdf7 	bl	80012c8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9d2 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f858 	bl	80017b8 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9bb 	bl	8000a88 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd3a 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd35 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd2f 	bl	8001260 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb85 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb77 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb67 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb5a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb4a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb3a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb2e 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb1d 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fb0e 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fafd 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 faf0 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fadf 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fad3 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fac2 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fab5 	bl	8000f28 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <led_green_handler+0x24>)
 80009ea:	f006 fb19 	bl	8007020 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <led_green_handler+0x28>)
 80009f4:	f000 fc4d 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 f98e 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a00:	e7f2      	b.n	80009e8 <led_green_handler+0x8>
 8000a02:	bf00      	nop
 8000a04:	08007558 	.word	0x08007558
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <led_orange_handler+0x24>)
 8000a16:	f006 fb03 	bl	8007020 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <led_orange_handler+0x28>)
 8000a20:	f000 fc37 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a24:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a28:	f000 f978 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a2c:	e7f2      	b.n	8000a14 <led_orange_handler+0x8>
 8000a2e:	bf00      	nop
 8000a30:	0800756c 	.word	0x0800756c
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <led_red_handler+0x24>)
 8000a42:	f006 faed 	bl	8007020 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <led_red_handler+0x28>)
 8000a4c:	f000 fc21 	bl	8001292 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a54:	f000 f962 	bl	8000d1c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a58:	e7f2      	b.n	8000a40 <led_red_handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	08007580 	.word	0x08007580
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f931 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ad6:	f003 fc6f 	bl	80043b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_InitTick+0xe4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f856 	bl	8001bd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2e:	f001 f83b 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000b32:	6378      	str	r0, [r7, #52]	; 0x34
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 f837 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	0c9b      	lsrs	r3, r3, #18
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_InitTick+0xf0>)
 8000b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b76:	f001 f85d 	bl	8001c34 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11b      	bne.n	8000bc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b8a:	f001 f8ad 	bl	8001ce8 <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d111      	bne.n	8000bc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b9c:	2036      	movs	r0, #54	; 0x36
 8000b9e:	f000 f9b5 	bl	8000f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d808      	bhi.n	8000bba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2036      	movs	r0, #54	; 0x36
 8000bae:	f000 f991 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0xf4>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e002      	b.n	8000bc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	431bde83 	.word	0x431bde83
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	40001000 	.word	0x40001000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f001 f8d9 	bl	8001dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000038 	.word	0x20000038

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f006 fc03 	bl	800747c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc77 	bl	8000568 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c88:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8000c8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c90:	2001a8ac 	.word	0x2001a8ac

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8fc 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ff0e 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fee4 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000080 	.word	0x20000080

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000080 	.word	0x20000080

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff61 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb1 	bl	8000e58 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff80 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e16b      	b.n	800121c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 815a 	bne.w	8001216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d005      	beq.n	8000f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d130      	bne.n	8000fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	f003 0201 	and.w	r2, r3, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d017      	beq.n	8001018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80b4 	beq.w	8001216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a5f      	ldr	r2, [pc, #380]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <HAL_GPIO_Init+0x310>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a51      	ldr	r2, [pc, #324]	; (8001240 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_GPIO_Init+0x324>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x328>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x32c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x20e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <HAL_GPIO_Init+0x330>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x20a>
 800112e:	2307      	movs	r3, #7
 8001130:	e00e      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001132:	2308      	movs	r3, #8
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001136:	2306      	movs	r3, #6
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x310>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_GPIO_Init+0x334>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_GPIO_Init+0x334>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_GPIO_Init+0x334>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_GPIO_Init+0x334>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_GPIO_Init+0x334>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_GPIO_Init+0x334>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae90 	bls.w	8000f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40021c00 	.word	0x40021c00
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	400b      	ands	r3, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcc0 	bl	8000d04 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fcbc 	bl	8000d04 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcac 	bl	8000d04 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fca8 	bl	8000d04 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fc61 	bl	8000d04 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fc5d 	bl	8000d04 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc40 	bl	8000d04 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fc3c 	bl	8000d04 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fc20 	bl	8000d04 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc1c 	bl	8000d04 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc09 	bl	8000d04 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc05 	bl	8000d04 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbc5 	bl	8000d04 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fbc1 	bl	8000d04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb86 	bl	8000d04 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb82 	bl	8000d04 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb70 	bl	8000d04 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb6c 	bl	8000d04 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb40 	bl	8000d04 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb15 	bl	8000d04 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb11 	bl	8000d04 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fafe 	bl	8000d04 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fafa 	bl	8000d04 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff fa2c 	bl	8000d04 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff fa28 	bl	8000d04 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f8c2 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	08007674 	.word	0x08007674
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fbe6 	bl	8000264 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb8c 	bl	8000264 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08007684 	.word	0x08007684

08001bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	220f      	movs	r2, #15
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCC_GetClockConfig+0x60>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0207 	and.w	r2, r3, #7
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e041      	b.n	8001cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f839 	bl	8001cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 f9d8 	bl	8002028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d001      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e04e      	b.n	8001d9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <HAL_TIM_Base_Start_IT+0xc4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d022      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d01d      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d018      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00e      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d111      	bne.n	8001d8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d010      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8a:	e007      	b.n	8001d9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40000800 	.word	0x40000800
 8001db8:	40000c00 	.word	0x40000c00
 8001dbc:	40010400 	.word	0x40010400
 8001dc0:	40014000 	.word	0x40014000
 8001dc4:	40001800 	.word	0x40001800

08001dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0202 	mvn.w	r2, #2
 8001df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8ee 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8e0 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8f1 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0204 	mvn.w	r2, #4
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8c4 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8b6 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f8c7 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f89a 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f88c 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f89d 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0210 	mvn.w	r2, #16
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f870 	bl	8001fec <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f862 	bl	8001fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f873 	bl	8002000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0201 	mvn.w	r2, #1
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fd8c 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f902 	bl	800217c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f838 	bl	8002014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0220 	mvn.w	r2, #32
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8cc 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <TIM_Base_SetConfig+0x114>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <TIM_Base_SetConfig+0x124>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2f      	ldr	r2, [pc, #188]	; (800213c <TIM_Base_SetConfig+0x114>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d027      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <TIM_Base_SetConfig+0x118>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d023      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2b      	ldr	r2, [pc, #172]	; (8002144 <TIM_Base_SetConfig+0x11c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <TIM_Base_SetConfig+0x120>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <TIM_Base_SetConfig+0x124>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d017      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <TIM_Base_SetConfig+0x128>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <TIM_Base_SetConfig+0x12c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00f      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <TIM_Base_SetConfig+0x130>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00b      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <TIM_Base_SetConfig+0x134>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a24      	ldr	r2, [pc, #144]	; (8002160 <TIM_Base_SetConfig+0x138>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <TIM_Base_SetConfig+0x13c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0xf8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <TIM_Base_SetConfig+0x124>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40001800 	.word	0x40001800
 8002160:	40001c00 	.word	0x40001c00
 8002164:	40002000 	.word	0x40002000

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0208 	add.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f103 0208 	add.w	r2, r3, #8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0208 	add.w	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d103      	bne.n	8002252 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00c      	b.n	800226c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3308      	adds	r3, #8
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e002      	b.n	8002260 <vListInsert+0x2e>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d2f6      	bcs.n	800225a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6892      	ldr	r2, [r2, #8]
 80022ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6852      	ldr	r2, [r2, #4]
 80022c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d103      	bne.n	80022d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <xQueueGenericReset+0x2a>
        __asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	60bb      	str	r3, [r7, #8]
    }
 800231e:	bf00      	nop
 8002320:	e7fe      	b.n	8002320 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002322:	f002 f8c7 	bl	80044b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	441a      	add	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	3b01      	subs	r3, #1
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	441a      	add	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	22ff      	movs	r2, #255	; 0xff
 8002366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01a      	beq.n	80023b6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3310      	adds	r3, #16
 8002384:	4618      	mov	r0, r3
 8002386:	f001 f91f 	bl	80035c8 <xTaskRemoveFromEventList>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <xQueueGenericReset+0xcc>)
 8002392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	e009      	b.n	80023b6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3310      	adds	r3, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fef2 	bl	8002190 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3324      	adds	r3, #36	; 0x24
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff feed 	bl	8002190 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023b6:	f002 f8ad 	bl	8004514 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
    }
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <xQueueGenericCreate+0x48>
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d101      	bne.n	8002414 <xQueueGenericCreate+0x4c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <xQueueGenericCreate+0x4e>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <xQueueGenericCreate+0x68>
        __asm volatile
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	617b      	str	r3, [r7, #20]
    }
 800242c:	bf00      	nop
 800242e:	e7fe      	b.n	800242e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002436:	d90a      	bls.n	800244e <xQueueGenericCreate+0x86>
        __asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	613b      	str	r3, [r7, #16]
    }
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3350      	adds	r3, #80	; 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f002 f95a 	bl	800470c <pvPortMalloc>
 8002458:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3350      	adds	r3, #80	; 0x50
 8002468:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f805 	bl	8002486 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800247c:	6a3b      	ldr	r3, [r7, #32]
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e002      	b.n	80024a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b4:	2101      	movs	r1, #1
 80024b6:	69b8      	ldr	r0, [r7, #24]
 80024b8:	f7ff ff1e 	bl	80022f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	2073      	movs	r0, #115	; 0x73
 80024cc:	f003 ff24 	bl	8006318 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <xQueueGenericSend+0x32>
        __asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <xQueueGenericSend+0x40>
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <xQueueGenericSend+0x44>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <xQueueGenericSend+0x46>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <xQueueGenericSend+0x60>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <xQueueGenericSend+0x6e>
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <xQueueGenericSend+0x72>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <xQueueGenericSend+0x74>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xQueueGenericSend+0x8e>
        __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	623b      	str	r3, [r7, #32]
    }
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002566:	f001 f9cf 	bl	8003908 <xTaskGetSchedulerState>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <xQueueGenericSend+0x9e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <xQueueGenericSend+0xa2>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueGenericSend+0xa4>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueGenericSend+0xbe>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	61fb      	str	r3, [r7, #28]
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002596:	f001 ff8d 	bl	80044b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <xQueueGenericSend+0xd4>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d136      	bne.n	800261a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fc40 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	4601      	mov	r1, r0
 80025c0:	205a      	movs	r0, #90	; 0x5a
 80025c2:	f003 ff1f 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025cc:	f000 fa78 	bl	8002ac0 <prvCopyDataToQueue>
 80025d0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	3324      	adds	r3, #36	; 0x24
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fff2 	bl	80035c8 <xTaskRemoveFromEventList>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d013      	beq.n	8002612 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <xQueueGenericSend+0x248>)
 80025ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	e00a      	b.n	8002612 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <xQueueGenericSend+0x248>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002612:	f001 ff7f 	bl	8004514 <vPortExitCritical>
                return pdPASS;
 8002616:	2301      	movs	r3, #1
 8002618:	e07d      	b.n	8002716 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d110      	bne.n	8002642 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002620:	f001 ff78 	bl	8004514 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fc04 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	460b      	mov	r3, r1
 8002636:	4601      	mov	r1, r0
 8002638:	205a      	movs	r0, #90	; 0x5a
 800263a:	f003 fee3 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800263e:	2300      	movs	r3, #0
 8002640:	e069      	b.n	8002716 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f821 	bl	8003694 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002652:	2301      	movs	r3, #1
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002656:	f001 ff5d 	bl	8004514 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800265a:	f000 fd6d 	bl	8003138 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800265e:	f001 ff29 	bl	80044b4 <vPortEnterCritical>
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002668:	b25b      	sxtb	r3, r3
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d103      	bne.n	8002678 <xQueueGenericSend+0x1a0>
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267e:	b25b      	sxtb	r3, r3
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d103      	bne.n	800268e <xQueueGenericSend+0x1b6>
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800268e:	f001 ff41 	bl	8004514 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002692:	1d3a      	adds	r2, r7, #4
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f001 f810 	bl	80036c0 <xTaskCheckForTimeOut>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d124      	bne.n	80026f0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a8:	f000 fb02 	bl	8002cb0 <prvIsQueueFull>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	3310      	adds	r3, #16
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 ff32 	bl	8003524 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c2:	f000 fa8d 	bl	8002be0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026c6:	f000 fd45 	bl	8003154 <xTaskResumeAll>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f af62 	bne.w	8002596 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <xQueueGenericSend+0x248>)
 80026d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	e758      	b.n	8002596 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e6:	f000 fa7b 	bl	8002be0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ea:	f000 fd33 	bl	8003154 <xTaskResumeAll>
 80026ee:	e752      	b.n	8002596 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f2:	f000 fa75 	bl	8002be0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026f6:	f000 fd2d 	bl	8003154 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fb99 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	460b      	mov	r3, r1
 800270c:	4601      	mov	r1, r0
 800270e:	205a      	movs	r0, #90	; 0x5a
 8002710:	f003 fe78 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002714:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002716:	4618      	mov	r0, r3
 8002718:	3738      	adds	r7, #56	; 0x38
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000ed04 	.word	0xe000ed04

08002724 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	; 0x40
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <xQueueGenericSendFromISR+0x3c>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <xQueueGenericSendFromISR+0x40>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <xQueueGenericSendFromISR+0x42>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <xQueueGenericSendFromISR+0x6a>
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <xQueueGenericSendFromISR+0x6e>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueGenericSendFromISR+0x70>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	623b      	str	r3, [r7, #32]
    }
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027ae:	f001 ff6d 	bl	800468c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80027b2:	f3ef 8211 	mrs	r2, BASEPRI
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	61fa      	str	r2, [r7, #28]
 80027c8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027ca:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <xQueueGenericSendFromISR+0xbc>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d148      	bne.n	8002872 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fb1e 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 80027f8:	4601      	mov	r1, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	461a      	mov	r2, r3
 80027fe:	2060      	movs	r0, #96	; 0x60
 8002800:	f003 fd30 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800280a:	f000 f959 	bl	8002ac0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800280e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d112      	bne.n	800283e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d025      	beq.n	800286c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	3324      	adds	r3, #36	; 0x24
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fecf 	bl	80035c8 <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01d      	beq.n	800286c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01a      	beq.n	800286c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e016      	b.n	800286c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800283e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002842:	2b7f      	cmp	r3, #127	; 0x7f
 8002844:	d10a      	bne.n	800285c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	617b      	str	r3, [r7, #20]
    }
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800285c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002860:	3301      	adds	r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	b25a      	sxtb	r2, r3
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800286c:	2301      	movs	r3, #1
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002870:	e00b      	b.n	800288a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fadd 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 800287a:	4601      	mov	r1, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	2060      	movs	r0, #96	; 0x60
 8002882:	f003 fcef 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002886:	2300      	movs	r3, #0
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002894:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002898:	4618      	mov	r0, r3
 800289a:	3740      	adds	r7, #64	; 0x40
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b08f      	sub	sp, #60	; 0x3c
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <xQueueReceive+0x30>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	623b      	str	r3, [r7, #32]
    }
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <xQueueReceive+0x3e>
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <xQueueReceive+0x42>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <xQueueReceive+0x44>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueReceive+0x5e>
        __asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	61fb      	str	r3, [r7, #28]
    }
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028fe:	f001 f803 	bl	8003908 <xTaskGetSchedulerState>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <xQueueReceive+0x6e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <xQueueReceive+0x72>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <xQueueReceive+0x74>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueReceive+0x8e>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	61bb      	str	r3, [r7, #24]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800292e:	f001 fdc1 	bl	80044b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02f      	beq.n	800299e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002942:	f000 f927 	bl	8002b94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fa73 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 800294e:	4604      	mov	r4, r0
 8002950:	2000      	movs	r0, #0
 8002952:	f004 fa6f 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2101      	movs	r1, #1
 800295c:	9100      	str	r1, [sp, #0]
 800295e:	4621      	mov	r1, r4
 8002960:	205c      	movs	r0, #92	; 0x5c
 8002962:	f003 fd4f 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00f      	beq.n	8002996 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	3310      	adds	r3, #16
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fe24 	bl	80035c8 <xTaskRemoveFromEventList>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <xQueueReceive+0x21c>)
 8002988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002996:	f001 fdbd 	bl	8004514 <vPortExitCritical>
                return pdPASS;
 800299a:	2301      	movs	r3, #1
 800299c:	e08a      	b.n	8002ab4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80029a4:	f001 fdb6 	bl	8004514 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fa42 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 80029b0:	4604      	mov	r4, r0
 80029b2:	2000      	movs	r0, #0
 80029b4:	f004 fa3e 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2101      	movs	r1, #1
 80029be:	9100      	str	r1, [sp, #0]
 80029c0:	4621      	mov	r1, r4
 80029c2:	205c      	movs	r0, #92	; 0x5c
 80029c4:	f003 fd1e 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e073      	b.n	8002ab4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029d2:	f107 0310 	add.w	r3, r7, #16
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe5c 	bl	8003694 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029e0:	f001 fd98 	bl	8004514 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029e4:	f000 fba8 	bl	8003138 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029e8:	f001 fd64 	bl	80044b4 <vPortEnterCritical>
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d103      	bne.n	8002a02 <xQueueReceive+0x162>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <xQueueReceive+0x178>
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a18:	f001 fd7c 	bl	8004514 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a1c:	1d3a      	adds	r2, r7, #4
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fe4b 	bl	80036c0 <xTaskCheckForTimeOut>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d124      	bne.n	8002a7a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a32:	f000 f927 	bl	8002c84 <prvIsQueueEmpty>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fd6d 	bl	8003524 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4c:	f000 f8c8 	bl	8002be0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a50:	f000 fb80 	bl	8003154 <xTaskResumeAll>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f47f af69 	bne.w	800292e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <xQueueReceive+0x21c>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	e75f      	b.n	800292e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a70:	f000 f8b6 	bl	8002be0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a74:	f000 fb6e 	bl	8003154 <xTaskResumeAll>
 8002a78:	e759      	b.n	800292e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7c:	f000 f8b0 	bl	8002be0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a80:	f000 fb68 	bl	8003154 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a86:	f000 f8fd 	bl	8002c84 <prvIsQueueEmpty>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f43f af4e 	beq.w	800292e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 f9cd 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f004 f9c9 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	9100      	str	r1, [sp, #0]
 8002aaa:	4621      	mov	r1, r4
 8002aac:	205c      	movs	r0, #92	; 0x5c
 8002aae:	f003 fca9 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ab2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3734      	adds	r7, #52	; 0x34
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d14d      	bne.n	8002b82 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 ff2a 	bl	8003944 <xTaskPriorityDisinherit>
 8002af0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e043      	b.n	8002b82 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d119      	bne.n	8002b34 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6858      	ldr	r0, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	f004 fcea 	bl	80074e4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d32b      	bcc.n	8002b82 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e026      	b.n	8002b82 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68d8      	ldr	r0, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	f004 fcd0 	bl	80074e4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	425b      	negs	r3, r3
 8002b4e:	441a      	add	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	425b      	negs	r3, r3
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d105      	bne.n	8002b82 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b8a:	697b      	ldr	r3, [r7, #20]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d018      	beq.n	8002bd8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	441a      	add	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d303      	bcc.n	8002bc8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68d9      	ldr	r1, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6838      	ldr	r0, [r7, #0]
 8002bd4:	f004 fc86 	bl	80074e4 <memcpy>
    }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002be8:	f001 fc64 	bl	80044b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf4:	e011      	b.n	8002c1a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3324      	adds	r3, #36	; 0x24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fce0 	bl	80035c8 <xTaskRemoveFromEventList>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c0e:	f000 fdbd 	bl	800378c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	dce9      	bgt.n	8002bf6 <prvUnlockQueue+0x16>
 8002c22:	e000      	b.n	8002c26 <prvUnlockQueue+0x46>
                        break;
 8002c24:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c2e:	f001 fc71 	bl	8004514 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c32:	f001 fc3f 	bl	80044b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c3e:	e011      	b.n	8002c64 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d012      	beq.n	8002c6e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3310      	adds	r3, #16
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fcbb 	bl	80035c8 <xTaskRemoveFromEventList>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c58:	f000 fd98 	bl	800378c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	dce9      	bgt.n	8002c40 <prvUnlockQueue+0x60>
 8002c6c:	e000      	b.n	8002c70 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c6e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c78:	f001 fc4c 	bl	8004514 <vPortExitCritical>
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c8c:	f001 fc12 	bl	80044b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e001      	b.n	8002ca2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ca2:	f001 fc37 	bl	8004514 <vPortExitCritical>

    return xReturn;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002cb8:	f001 fbfc 	bl	80044b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d102      	bne.n	8002cce <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e001      	b.n	8002cd2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cd2:	f001 fc1f 	bl	8004514 <vPortExitCritical>

    return xReturn;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e01e      	b.n	8002d2e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <vQueueAddToRegistry+0x60>)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d115      	bne.n	8002d28 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cfc:	4910      	ldr	r1, [pc, #64]	; (8002d40 <vQueueAddToRegistry+0x60>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <vQueueAddToRegistry+0x60>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f88d 	bl	8006e34 <SEGGER_SYSVIEW_ShrinkId>
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2071      	movs	r0, #113	; 0x71
 8002d22:	f003 fa9f 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d26:	e006      	b.n	8002d36 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d9dd      	bls.n	8002cf0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000084 	.word	0x20000084

08002d44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d54:	f001 fbae 	bl	80044b4 <vPortEnterCritical>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d103      	bne.n	8002d6e <vQueueWaitForMessageRestricted+0x2a>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d103      	bne.n	8002d84 <vQueueWaitForMessageRestricted+0x40>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	f001 fbc6 	bl	8004514 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3324      	adds	r3, #36	; 0x24
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fbe7 	bl	800356c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff ff1e 	bl	8002be0 <prvUnlockQueue>
    }
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fca3 	bl	800470c <pvPortMalloc>
 8002dc6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dce:	2058      	movs	r0, #88	; 0x58
 8002dd0:	f001 fc9c 	bl	800470c <pvPortMalloc>
 8002dd4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
 8002de2:	e005      	b.n	8002df0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f001 fd71 	bl	80048cc <vPortFree>
 8002dea:	e001      	b.n	8002df0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9303      	str	r3, [sp, #12]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f80e 	bl	8002e2e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e12:	69f8      	ldr	r0, [r7, #28]
 8002e14:	f000 f8a2 	bl	8002f5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e002      	b.n	8002e24 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e24:	69bb      	ldr	r3, [r7, #24]
    }
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	21a5      	movs	r1, #165	; 0xa5
 8002e48:	f004 fb5a 	bl	8007500 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e56:	3b01      	subs	r3, #1
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f023 0307 	bic.w	r3, r3, #7
 8002e64:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	617b      	str	r3, [r7, #20]
    }
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e012      	b.n	8002eb8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	7819      	ldrb	r1, [r3, #0]
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3334      	adds	r3, #52	; 0x34
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	d9e9      	bls.n	8002e92 <prvInitialiseNewTask+0x64>
 8002ebe:	e000      	b.n	8002ec2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002ec0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eca:	e003      	b.n	8002ed4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d901      	bls.n	8002ede <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eda:	2304      	movs	r3, #4
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	2200      	movs	r2, #0
 8002eee:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f96b 	bl	80021d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	3318      	adds	r3, #24
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f966 	bl	80021d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	f1c3 0205 	rsb	r2, r3, #5
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	3350      	adds	r3, #80	; 0x50
 8002f1e:	2204      	movs	r2, #4
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 faec 	bl	8007500 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	3354      	adds	r3, #84	; 0x54
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fae5 	bl	8007500 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	69b8      	ldr	r0, [r7, #24]
 8002f3c:	f001 f90c 	bl	8004158 <pxPortInitialiseStack>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f52:	bf00      	nop
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f64:	f001 faa6 	bl	80044b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <prvAddNewTaskToReadyList+0xfc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <prvAddNewTaskToReadyList+0xfc>)
 8002f70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <prvAddNewTaskToReadyList+0x100>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f7a:	4a38      	ldr	r2, [pc, #224]	; (800305c <prvAddNewTaskToReadyList+0x100>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f80:	4b35      	ldr	r3, [pc, #212]	; (8003058 <prvAddNewTaskToReadyList+0xfc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d110      	bne.n	8002faa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f88:	f000 fc24 	bl	80037d4 <prvInitialiseTaskLists>
 8002f8c:	e00d      	b.n	8002faa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f8e:	4b34      	ldr	r3, [pc, #208]	; (8003060 <prvAddNewTaskToReadyList+0x104>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <prvAddNewTaskToReadyList+0x100>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d802      	bhi.n	8002faa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002fa4:	4a2d      	ldr	r2, [pc, #180]	; (800305c <prvAddNewTaskToReadyList+0x100>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <prvAddNewTaskToReadyList+0x108>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <prvAddNewTaskToReadyList+0x108>)
 8002fb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <prvAddNewTaskToReadyList+0x108>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <prvAddNewTaskToReadyList+0x94>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 fe0f 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	461d      	mov	r5, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	1ae3      	subs	r3, r4, r3
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	462b      	mov	r3, r5
 8002fec:	f001 fe3c 	bl	8004c68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fe7c 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <prvAddNewTaskToReadyList+0x10c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4313      	orrs	r3, r2
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <prvAddNewTaskToReadyList+0x10c>)
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <prvAddNewTaskToReadyList+0x110>)
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7ff f8e2 	bl	80021ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003026:	f001 fa75 	bl	8004514 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <prvAddNewTaskToReadyList+0x104>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00e      	beq.n	8003050 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <prvAddNewTaskToReadyList+0x100>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	429a      	cmp	r2, r3
 800303e:	d207      	bcs.n	8003050 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <prvAddNewTaskToReadyList+0x114>)
 8003042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bdb0      	pop	{r4, r5, r7, pc}
 8003058:	2000019c 	.word	0x2000019c
 800305c:	200000c4 	.word	0x200000c4
 8003060:	200001a8 	.word	0x200001a8
 8003064:	200001b8 	.word	0x200001b8
 8003068:	200001a4 	.word	0x200001a4
 800306c:	200000c8 	.word	0x200000c8
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <vTaskStartScheduler+0xa4>)
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	2282      	movs	r2, #130	; 0x82
 8003086:	4925      	ldr	r1, [pc, #148]	; (800311c <vTaskStartScheduler+0xa8>)
 8003088:	4825      	ldr	r0, [pc, #148]	; (8003120 <vTaskStartScheduler+0xac>)
 800308a:	f7ff fe8f 	bl	8002dac <xTaskCreate>
 800308e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003096:	f000 fd4d 	bl	8003b34 <xTimerCreateTimerTask>
 800309a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d124      	bne.n	80030ec <vTaskStartScheduler+0x78>
        __asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	60bb      	str	r3, [r7, #8]
    }
 80030b4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <vTaskStartScheduler+0xb0>)
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <vTaskStartScheduler+0xb4>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <vTaskStartScheduler+0xb8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <vTaskStartScheduler+0xbc>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <vTaskStartScheduler+0xa4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <vTaskStartScheduler+0x68>
 80030d6:	f003 fd6b 	bl	8006bb0 <SEGGER_SYSVIEW_OnIdle>
 80030da:	e004      	b.n	80030e6 <vTaskStartScheduler+0x72>
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <vTaskStartScheduler+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fdc3 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80030e6:	f001 f8c5 	bl	8004274 <xPortStartScheduler>
 80030ea:	e00e      	b.n	800310a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d10a      	bne.n	800310a <vTaskStartScheduler+0x96>
        __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	607b      	str	r3, [r7, #4]
    }
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <vTaskStartScheduler+0xc0>)
 800310c:	681b      	ldr	r3, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200001c0 	.word	0x200001c0
 800311c:	08007594 	.word	0x08007594
 8003120:	080037a5 	.word	0x080037a5
 8003124:	200001bc 	.word	0x200001bc
 8003128:	200001a8 	.word	0x200001a8
 800312c:	200001a0 	.word	0x200001a0
 8003130:	200000c4 	.word	0x200000c4
 8003134:	2000000c 	.word	0x2000000c

08003138 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <vTaskSuspendAll+0x18>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	4a03      	ldr	r2, [pc, #12]	; (8003150 <vTaskSuspendAll+0x18>)
 8003144:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	200001c4 	.word	0x200001c4

08003154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <xTaskResumeAll+0x11c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <xTaskResumeAll+0x2c>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	603b      	str	r3, [r7, #0]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003180:	f001 f998 	bl	80044b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <xTaskResumeAll+0x11c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3b01      	subs	r3, #1
 800318a:	4a39      	ldr	r2, [pc, #228]	; (8003270 <xTaskResumeAll+0x11c>)
 800318c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <xTaskResumeAll+0x11c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d165      	bne.n	8003262 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <xTaskResumeAll+0x120>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d061      	beq.n	8003262 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800319e:	e032      	b.n	8003206 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <xTaskResumeAll+0x124>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3318      	adds	r3, #24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f879 	bl	80022a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f874 	bl	80022a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fd96 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <xTaskResumeAll+0x128>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	4a2a      	ldr	r2, [pc, #168]	; (800327c <xTaskResumeAll+0x128>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <xTaskResumeAll+0x12c>)
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7fe fffc 	bl	80021ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <xTaskResumeAll+0x130>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <xTaskResumeAll+0x134>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <xTaskResumeAll+0x124>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1c8      	bne.n	80031a0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003214:	f000 fb5c 	bl	80038d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <xTaskResumeAll+0x138>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003224:	f000 f858 	bl	80032d8 <xTaskIncrementTick>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <xTaskResumeAll+0x134>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <xTaskResumeAll+0x138>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <xTaskResumeAll+0x134>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800324e:	2301      	movs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <xTaskResumeAll+0x13c>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003262:	f001 f957 	bl	8004514 <vPortExitCritical>

    return xAlreadyYielded;
 8003266:	68bb      	ldr	r3, [r7, #8]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200001c4 	.word	0x200001c4
 8003274:	2000019c 	.word	0x2000019c
 8003278:	2000015c 	.word	0x2000015c
 800327c:	200001a4 	.word	0x200001a4
 8003280:	200000c8 	.word	0x200000c8
 8003284:	200000c4 	.word	0x200000c4
 8003288:	200001b0 	.word	0x200001b0
 800328c:	200001ac 	.word	0x200001ac
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskGetTickCount+0x1c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	200001a0 	.word	0x200001a0

080032b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ba:	f001 f9e7 	bl	800468c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <xTaskGetTickCountFromISR+0x20>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032c8:	683b      	ldr	r3, [r7, #0]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200001a0 	.word	0x200001a0

080032d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <xTaskIncrementTick+0x14c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 8092 	bne.w	8003410 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032ec:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <xTaskIncrementTick+0x150>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032f4:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <xTaskIncrementTick+0x150>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d120      	bne.n	8003342 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003300:	4b4a      	ldr	r3, [pc, #296]	; (800342c <xTaskIncrementTick+0x154>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <xTaskIncrementTick+0x48>
        __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	603b      	str	r3, [r7, #0]
    }
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xTaskIncrementTick+0x46>
 8003320:	4b42      	ldr	r3, [pc, #264]	; (800342c <xTaskIncrementTick+0x154>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b42      	ldr	r3, [pc, #264]	; (8003430 <xTaskIncrementTick+0x158>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a40      	ldr	r2, [pc, #256]	; (800342c <xTaskIncrementTick+0x154>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4a40      	ldr	r2, [pc, #256]	; (8003430 <xTaskIncrementTick+0x158>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <xTaskIncrementTick+0x15c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a3e      	ldr	r2, [pc, #248]	; (8003434 <xTaskIncrementTick+0x15c>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	f000 fac7 	bl	80038d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <xTaskIncrementTick+0x160>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d34c      	bcc.n	80033e6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <xTaskIncrementTick+0x154>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <xTaskIncrementTick+0x160>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	601a      	str	r2, [r3, #0]
                    break;
 800335e:	e042      	b.n	80033e6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <xTaskIncrementTick+0x154>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d203      	bcs.n	8003380 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003378:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <xTaskIncrementTick+0x160>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800337e:	e032      	b.n	80033e6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff8d 	bl	80022a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3318      	adds	r3, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff84 	bl	80022a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fca6 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <xTaskIncrementTick+0x164>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	4a22      	ldr	r2, [pc, #136]	; (800343c <xTaskIncrementTick+0x164>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <xTaskIncrementTick+0x168>)
 80033c4:	441a      	add	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f7fe ff0c 	bl	80021ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <xTaskIncrementTick+0x16c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3b5      	bcc.n	800334c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e4:	e7b2      	b.n	800334c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <xTaskIncrementTick+0x16c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	4914      	ldr	r1, [pc, #80]	; (8003440 <xTaskIncrementTick+0x168>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d901      	bls.n	8003402 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <xTaskIncrementTick+0x170>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e004      	b.n	800341a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <xTaskIncrementTick+0x174>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	4a0d      	ldr	r2, [pc, #52]	; (800344c <xTaskIncrementTick+0x174>)
 8003418:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200001c4 	.word	0x200001c4
 8003428:	200001a0 	.word	0x200001a0
 800342c:	20000154 	.word	0x20000154
 8003430:	20000158 	.word	0x20000158
 8003434:	200001b4 	.word	0x200001b4
 8003438:	200001bc 	.word	0x200001bc
 800343c:	200001a4 	.word	0x200001a4
 8003440:	200000c8 	.word	0x200000c8
 8003444:	200000c4 	.word	0x200000c4
 8003448:	200001b0 	.word	0x200001b0
 800344c:	200001ac 	.word	0x200001ac

08003450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <vTaskSwitchContext+0xbc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <vTaskSwitchContext+0xc0>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003464:	e04d      	b.n	8003502 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <vTaskSwitchContext+0xc0>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <vTaskSwitchContext+0xc4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	f1c3 031f 	rsb	r3, r3, #31
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	4925      	ldr	r1, [pc, #148]	; (8003518 <vTaskSwitchContext+0xc8>)
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <vTaskSwitchContext+0x5c>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	607b      	str	r3, [r7, #4]
    }
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <vTaskSwitchContext+0x5a>
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <vTaskSwitchContext+0xc8>)
 80034b8:	4413      	add	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3308      	adds	r3, #8
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d104      	bne.n	80034dc <vTaskSwitchContext+0x8c>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a0e      	ldr	r2, [pc, #56]	; (800351c <vTaskSwitchContext+0xcc>)
 80034e4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <vTaskSwitchContext+0xcc>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <vTaskSwitchContext+0xd0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d102      	bne.n	80034f8 <vTaskSwitchContext+0xa8>
 80034f2:	f003 fb5d 	bl	8006bb0 <SEGGER_SYSVIEW_OnIdle>
}
 80034f6:	e004      	b.n	8003502 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <vTaskSwitchContext+0xcc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fbb5 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200001c4 	.word	0x200001c4
 8003510:	200001b0 	.word	0x200001b0
 8003514:	200001a4 	.word	0x200001a4
 8003518:	200000c8 	.word	0x200000c8
 800351c:	200000c4 	.word	0x200000c4
 8003520:	200001c0 	.word	0x200001c0

08003524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	60fb      	str	r3, [r7, #12]
    }
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <vTaskPlaceOnEventList+0x44>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3318      	adds	r3, #24
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fe6d 	bl	8002232 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003558:	2101      	movs	r1, #1
 800355a:	6838      	ldr	r0, [r7, #0]
 800355c:	f000 fa72 	bl	8003a44 <prvAddCurrentTaskToDelayedList>
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200000c4 	.word	0x200000c4

0800356c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	617b      	str	r3, [r7, #20]
    }
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <vTaskPlaceOnEventListRestricted+0x58>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3318      	adds	r3, #24
 800359a:	4619      	mov	r1, r3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7fe fe24 	bl	80021ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035ae:	2024      	movs	r0, #36	; 0x24
 80035b0:	f002 fdfe 	bl	80061b0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	68b8      	ldr	r0, [r7, #8]
 80035b8:	f000 fa44 	bl	8003a44 <prvAddCurrentTaskToDelayedList>
    }
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200000c4 	.word	0x200000c4

080035c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	60fb      	str	r3, [r7, #12]
    }
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3318      	adds	r3, #24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe fe53 	bl	80022a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <xTaskRemoveFromEventList+0xb4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d120      	bne.n	8003648 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe4a 	bl	80022a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fb6c 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2201      	movs	r2, #1
 800361e:	409a      	lsls	r2, r3
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <xTaskRemoveFromEventList+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <xTaskRemoveFromEventList+0xb8>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <xTaskRemoveFromEventList+0xbc>)
 8003638:	441a      	add	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7fe fdd2 	bl	80021ea <vListInsertEnd>
 8003646:	e005      	b.n	8003654 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3318      	adds	r3, #24
 800364c:	4619      	mov	r1, r3
 800364e:	480e      	ldr	r0, [pc, #56]	; (8003688 <xTaskRemoveFromEventList+0xc0>)
 8003650:	f7fe fdcb 	bl	80021ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <xTaskRemoveFromEventList+0xc4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	429a      	cmp	r2, r3
 8003660:	d905      	bls.n	800366e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003662:	2301      	movs	r3, #1
 8003664:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <xTaskRemoveFromEventList+0xc8>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e001      	b.n	8003672 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003672:	697b      	ldr	r3, [r7, #20]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200001c4 	.word	0x200001c4
 8003680:	200001a4 	.word	0x200001a4
 8003684:	200000c8 	.word	0x200000c8
 8003688:	2000015c 	.word	0x2000015c
 800368c:	200000c4 	.word	0x200000c4
 8003690:	200001b0 	.word	0x200001b0

08003694 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <vTaskInternalSetTimeOutState+0x24>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <vTaskInternalSetTimeOutState+0x28>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	605a      	str	r2, [r3, #4]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	200001b4 	.word	0x200001b4
 80036bc:	200001a0 	.word	0x200001a0

080036c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	613b      	str	r3, [r7, #16]
    }
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60fb      	str	r3, [r7, #12]
    }
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003702:	f000 fed7 	bl	80044b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <xTaskCheckForTimeOut+0xc4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d102      	bne.n	8003726 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	e026      	b.n	8003774 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <xTaskCheckForTimeOut+0xc8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d00a      	beq.n	8003748 <xTaskCheckForTimeOut+0x88>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	429a      	cmp	r2, r3
 800373a:	d305      	bcc.n	8003748 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e015      	b.n	8003774 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20b      	bcs.n	800376a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad2      	subs	r2, r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff98 	bl	8003694 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e004      	b.n	8003774 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003774:	f000 fece 	bl	8004514 <vPortExitCritical>

    return xReturn;
 8003778:	69fb      	ldr	r3, [r7, #28]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200001a0 	.word	0x200001a0
 8003788:	200001b4 	.word	0x200001b4

0800378c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <vTaskMissedYield+0x14>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	200001b0 	.word	0x200001b0

080037a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037ac:	f000 f852 	bl	8003854 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <prvIdleTask+0x28>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d9f9      	bls.n	80037ac <prvIdleTask+0x8>
                {
                    taskYIELD();
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <prvIdleTask+0x2c>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037c8:	e7f0      	b.n	80037ac <prvIdleTask+0x8>
 80037ca:	bf00      	nop
 80037cc:	200000c8 	.word	0x200000c8
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	e00c      	b.n	80037fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <prvInitialiseTaskLists+0x60>)
 80037ec:	4413      	add	r3, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fcce 	bl	8002190 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d9ef      	bls.n	80037e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <prvInitialiseTaskLists+0x64>)
 8003802:	f7fe fcc5 	bl	8002190 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003806:	480d      	ldr	r0, [pc, #52]	; (800383c <prvInitialiseTaskLists+0x68>)
 8003808:	f7fe fcc2 	bl	8002190 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <prvInitialiseTaskLists+0x6c>)
 800380e:	f7fe fcbf 	bl	8002190 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <prvInitialiseTaskLists+0x70>)
 8003814:	f7fe fcbc 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <prvInitialiseTaskLists+0x74>)
 800381a:	f7fe fcb9 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <prvInitialiseTaskLists+0x78>)
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <prvInitialiseTaskLists+0x64>)
 8003822:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvInitialiseTaskLists+0x7c>)
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <prvInitialiseTaskLists+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200000c8 	.word	0x200000c8
 8003838:	2000012c 	.word	0x2000012c
 800383c:	20000140 	.word	0x20000140
 8003840:	2000015c 	.word	0x2000015c
 8003844:	20000170 	.word	0x20000170
 8003848:	20000188 	.word	0x20000188
 800384c:	20000154 	.word	0x20000154
 8003850:	20000158 	.word	0x20000158

08003854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800385a:	e019      	b.n	8003890 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800385c:	f000 fe2a 	bl	80044b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <prvCheckTasksWaitingTermination+0x50>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fd19 	bl	80022a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <prvCheckTasksWaitingTermination+0x54>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <prvCheckTasksWaitingTermination+0x54>)
 800387a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3b01      	subs	r3, #1
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 8003884:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003886:	f000 fe45 	bl	8004514 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f810 	bl	80038b0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e1      	bne.n	800385c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000170 	.word	0x20000170
 80038a8:	2000019c 	.word	0x2000019c
 80038ac:	20000184 	.word	0x20000184

080038b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f805 	bl	80048cc <vPortFree>
                vPortFree( pxTCB );
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f802 	bl	80048cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <prvResetNextTaskUnblockTime+0x30>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <prvResetNextTaskUnblockTime+0x34>)
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038e6:	e005      	b.n	80038f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <prvResetNextTaskUnblockTime+0x30>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <prvResetNextTaskUnblockTime+0x34>)
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000154 	.word	0x20000154
 8003904:	200001bc 	.word	0x200001bc

08003908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <xTaskGetSchedulerState+0x34>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003916:	2301      	movs	r3, #1
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	e008      	b.n	800392e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <xTaskGetSchedulerState+0x38>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003924:	2302      	movs	r3, #2
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	e001      	b.n	800392e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800392e:	687b      	ldr	r3, [r7, #4]
    }
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	200001a8 	.word	0x200001a8
 8003940:	200001c4 	.word	0x200001c4

08003944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d068      	beq.n	8003a2c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <xTaskPriorityDisinherit+0xf4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d00a      	beq.n	800397a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
    }
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60bb      	str	r3, [r7, #8]
    }
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d03e      	beq.n	8003a2c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d13a      	bne.n	8003a2c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fc72 	bl	80022a4 <uxListRemove>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43da      	mvns	r2, r3
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <xTaskPriorityDisinherit+0xf8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4013      	ands	r3, r2
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <xTaskPriorityDisinherit+0xf8>)
 80039da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4619      	mov	r1, r3
 80039e0:	204a      	movs	r0, #74	; 0x4a
 80039e2:	f002 fc03 	bl	80061ec <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f1c3 0205 	rsb	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <xTaskPriorityDisinherit+0xf8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <xTaskPriorityDisinherit+0xf8>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <xTaskPriorityDisinherit+0xfc>)
 8003a1a:	441a      	add	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7fe fbe1 	bl	80021ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a2c:	697b      	ldr	r3, [r7, #20]
    }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200000c4 	.word	0x200000c4
 8003a3c:	200001a4 	.word	0x200001a4
 8003a40:	200000c8 	.word	0x200000c8

08003a44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a4e:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a54:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fc22 	bl	80022a4 <uxListRemove>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d110      	bne.n	8003aa8 <prvAddCurrentTaskToDelayedList+0x64>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	211b      	movs	r1, #27
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 f96e 	bl	8006d74 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4820      	ldr	r0, [pc, #128]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003aa2:	f7fe fba2 	bl	80021ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003aa6:	e032      	b.n	8003b0e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d20f      	bcs.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 f954 	bl	8006d74 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7fe fbaa 	bl	8002232 <vListInsert>
}
 8003ade:	e016      	b.n	8003b0e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f944 	bl	8006d74 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7fe fb9a 	bl	8002232 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d202      	bcs.n	8003b0e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200001a0 	.word	0x200001a0
 8003b1c:	200000c4 	.word	0x200000c4
 8003b20:	200001a4 	.word	0x200001a4
 8003b24:	20000188 	.word	0x20000188
 8003b28:	20000158 	.word	0x20000158
 8003b2c:	20000154 	.word	0x20000154
 8003b30:	200001bc 	.word	0x200001bc

08003b34 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b3e:	f000 fad5 	bl	80040ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <xTimerCreateTimerTask+0x54>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <xTimerCreateTimerTask+0x58>)
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	2302      	movs	r3, #2
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b58:	490d      	ldr	r1, [pc, #52]	; (8003b90 <xTimerCreateTimerTask+0x5c>)
 8003b5a:	480e      	ldr	r0, [pc, #56]	; (8003b94 <xTimerCreateTimerTask+0x60>)
 8003b5c:	f7ff f926 	bl	8002dac <xTaskCreate>
 8003b60:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	603b      	str	r3, [r7, #0]
    }
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b7e:	687b      	ldr	r3, [r7, #4]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200001f8 	.word	0x200001f8
 8003b8c:	200001fc 	.word	0x200001fc
 8003b90:	0800759c 	.word	0x0800759c
 8003b94:	08003ccd 	.word	0x08003ccd

08003b98 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	623b      	str	r3, [r7, #32]
    }
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <xTimerGenericCommand+0x98>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02a      	beq.n	8003c24 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	dc18      	bgt.n	8003c12 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003be0:	f7ff fe92 	bl	8003908 <xTaskGetSchedulerState>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d109      	bne.n	8003bfe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <xTimerGenericCommand+0x98>)
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	f107 0114 	add.w	r1, r7, #20
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf6:	f7fe fc6f 	bl	80024d8 <xQueueGenericSend>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8003bfc:	e012      	b.n	8003c24 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <xTimerGenericCommand+0x98>)
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f107 0114 	add.w	r1, r7, #20
 8003c06:	2300      	movs	r3, #0
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f7fe fc65 	bl	80024d8 <xQueueGenericSend>
 8003c0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c10:	e008      	b.n	8003c24 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <xTimerGenericCommand+0x98>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	f107 0114 	add.w	r1, r7, #20
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	f7fe fd81 	bl	8002724 <xQueueGenericSendFromISR>
 8003c22:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c26:	4618      	mov	r0, r3
 8003c28:	3728      	adds	r7, #40	; 0x28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200001f8 	.word	0x200001f8

08003c34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <prvProcessExpiredTimer+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fb29 	bl	80022a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	18d1      	adds	r1, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f000 f8d1 	bl	8003e14 <prvInsertTimerInActiveList>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01f      	beq.n	8003cb8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	2100      	movs	r1, #0
 8003c82:	6978      	ldr	r0, [r7, #20]
 8003c84:	f7ff ff88 	bl	8003b98 <xTimerGenericCommand>
 8003c88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
    }
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	6978      	ldr	r0, [r7, #20]
 8003cbe:	4798      	blx	r3
    }
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200001f0 	.word	0x200001f0

08003ccc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f857 	bl	8003d8c <prvGetNextExpireTime>
 8003cde:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f803 	bl	8003cf0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cea:	f000 f8d5 	bl	8003e98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cee:	e7f1      	b.n	8003cd4 <prvTimerTask+0x8>

08003cf0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cfa:	f7ff fa1d 	bl	8003138 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f866 	bl	8003dd4 <prvSampleTimeNow>
 8003d08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d130      	bne.n	8003d72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <prvProcessTimerOrBlockTask+0x3c>
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d806      	bhi.n	8003d2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d1e:	f7ff fa19 	bl	8003154 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff85 	bl	8003c34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d2a:	e024      	b.n	8003d76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <prvProcessTimerOrBlockTask+0x90>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <prvProcessTimerOrBlockTask+0x50>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <prvProcessTimerOrBlockTask+0x52>
 8003d40:	2300      	movs	r3, #0
 8003d42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <prvProcessTimerOrBlockTask+0x94>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7fe fff7 	bl	8002d44 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d56:	f7ff f9fd 	bl	8003154 <xTaskResumeAll>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <prvProcessTimerOrBlockTask+0x98>)
 8003d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
    }
 8003d70:	e001      	b.n	8003d76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d72:	f7ff f9ef 	bl	8003154 <xTaskResumeAll>
    }
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200001f4 	.word	0x200001f4
 8003d84:	200001f8 	.word	0x200001f8
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <prvGetNextExpireTime+0x44>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <prvGetNextExpireTime+0x16>
 8003d9e:	2201      	movs	r2, #1
 8003da0:	e000      	b.n	8003da4 <prvGetNextExpireTime+0x18>
 8003da2:	2200      	movs	r2, #0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <prvGetNextExpireTime+0x44>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e001      	b.n	8003dc0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
    }
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	200001f0 	.word	0x200001f0

08003dd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ddc:	f7ff fa5a 	bl	8003294 <xTaskGetTickCount>
 8003de0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvSampleTimeNow+0x3c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d205      	bcs.n	8003df8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003dec:	f000 f91a 	bl	8004024 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <prvSampleTimeNow+0x3c>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e04:	68fb      	ldr	r3, [r7, #12]
    }
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000200 	.word	0x20000200

08003e14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d812      	bhi.n	8003e60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e01b      	b.n	8003e86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <prvInsertTimerInActiveList+0x7c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7fe f9ea 	bl	8002232 <vListInsert>
 8003e5e:	e012      	b.n	8003e86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d206      	bcs.n	8003e76 <prvInsertTimerInActiveList+0x62>
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d302      	bcc.n	8003e76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	e007      	b.n	8003e86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <prvInsertTimerInActiveList+0x80>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe f9d6 	bl	8002232 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e86:	697b      	ldr	r3, [r7, #20]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200001f4 	.word	0x200001f4
 8003e94:	200001f0 	.word	0x200001f0

08003e98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e9e:	e0ae      	b.n	8003ffe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f2c0 80aa 	blt.w	8003ffc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f9f3 	bl	80022a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff87 	bl	8003dd4 <prvSampleTimeNow>
 8003ec6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	f200 8097 	bhi.w	8003ffe <prvProcessReceivedCommands+0x166>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <prvProcessReceivedCommands+0x40>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f01 	.word	0x08003f01
 8003ee4:	08003f75 	.word	0x08003f75
 8003ee8:	08003f89 	.word	0x08003f89
 8003eec:	08003fd3 	.word	0x08003fd3
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f01 	.word	0x08003f01
 8003ef8:	08003f75 	.word	0x08003f75
 8003efc:	08003f89 	.word	0x08003f89
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	18d1      	adds	r1, r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f20:	f7ff ff78 	bl	8003e14 <prvInsertTimerInActiveList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d069      	beq.n	8003ffe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f30:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05e      	beq.n	8003ffe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	441a      	add	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f52:	f7ff fe21 	bl	8003b98 <xTimerGenericCommand>
 8003f56:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d14f      	bne.n	8003ffe <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	61bb      	str	r3, [r7, #24]
    }
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f86:	e03a      	b.n	8003ffe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	617b      	str	r3, [r7, #20]
    }
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	18d1      	adds	r1, r2, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fcc:	f7ff ff22 	bl	8003e14 <prvInsertTimerInActiveList>
                        break;
 8003fd0:	e015      	b.n	8003ffe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe2:	f000 fc73 	bl	80048cc <vPortFree>
 8003fe6:	e00a      	b.n	8003ffe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ffa:	e000      	b.n	8003ffe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ffc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <prvProcessReceivedCommands+0x188>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f107 0108 	add.w	r1, r7, #8
 8004006:	2200      	movs	r2, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fc49 	bl	80028a0 <xQueueReceive>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f af45 	bne.w	8003ea0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200001f8 	.word	0x200001f8

08004024 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800402a:	e048      	b.n	80040be <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe f92d 	bl	80022a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02e      	beq.n	80040be <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d90e      	bls.n	8004090 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fe f8d2 	bl	8002232 <vListInsert>
 800408e:	e016      	b.n	80040be <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004090:	2300      	movs	r3, #0
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2300      	movs	r3, #0
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	2100      	movs	r1, #0
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff fd7c 	bl	8003b98 <xTimerGenericCommand>
 80040a0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <prvSwitchTimerLists+0x9a>
        __asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	603b      	str	r3, [r7, #0]
    }
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1b1      	bne.n	800402c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <prvSwitchTimerLists+0xc4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <prvSwitchTimerLists+0xc0>)
 80040d4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <prvSwitchTimerLists+0xc4>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	6013      	str	r3, [r2, #0]
    }
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200001f0 	.word	0x200001f0
 80040e8:	200001f4 	.word	0x200001f4

080040ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80040f0:	f000 f9e0 	bl	80044b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <prvCheckForValidListAndQueue+0x54>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11d      	bne.n	8004138 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040fc:	4811      	ldr	r0, [pc, #68]	; (8004144 <prvCheckForValidListAndQueue+0x58>)
 80040fe:	f7fe f847 	bl	8002190 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004102:	4811      	ldr	r0, [pc, #68]	; (8004148 <prvCheckForValidListAndQueue+0x5c>)
 8004104:	f7fe f844 	bl	8002190 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <prvCheckForValidListAndQueue+0x60>)
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <prvCheckForValidListAndQueue+0x58>)
 800410c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <prvCheckForValidListAndQueue+0x64>)
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <prvCheckForValidListAndQueue+0x5c>)
 8004112:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004114:	2200      	movs	r2, #0
 8004116:	210c      	movs	r1, #12
 8004118:	200a      	movs	r0, #10
 800411a:	f7fe f955 	bl	80023c8 <xQueueGenericCreate>
 800411e:	4603      	mov	r3, r0
 8004120:	4a07      	ldr	r2, [pc, #28]	; (8004140 <prvCheckForValidListAndQueue+0x54>)
 8004122:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <prvCheckForValidListAndQueue+0x54>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <prvCheckForValidListAndQueue+0x54>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4908      	ldr	r1, [pc, #32]	; (8004154 <prvCheckForValidListAndQueue+0x68>)
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fdd4 	bl	8002ce0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004138:	f000 f9ec 	bl	8004514 <vPortExitCritical>
    }
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200001f8 	.word	0x200001f8
 8004144:	200001c8 	.word	0x200001c8
 8004148:	200001dc 	.word	0x200001dc
 800414c:	200001f0 	.word	0x200001f0
 8004150:	200001f4 	.word	0x200001f4
 8004154:	080075a4 	.word	0x080075a4

08004158 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3b04      	subs	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004170:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3b04      	subs	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004188:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <pxPortInitialiseStack+0x64>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3b14      	subs	r3, #20
 8004192:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b04      	subs	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f06f 0202 	mvn.w	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b20      	subs	r3, #32
 80041ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	080041c1 	.word	0x080041c1

080041c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <prvTaskExitError+0x54>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d00a      	beq.n	80041ea <prvTaskExitError+0x2a>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <prvTaskExitError+0x28>
        __asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	60bb      	str	r3, [r7, #8]
    }
 80041fc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041fe:	bf00      	nop
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0fc      	beq.n	8004200 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000010 	.word	0x20000010
	...

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
 800426a:	0000      	.short	0x0000
 800426c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop

08004274 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800427a:	4b46      	ldr	r3, [pc, #280]	; (8004394 <xPortStartScheduler+0x120>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a46      	ldr	r2, [pc, #280]	; (8004398 <xPortStartScheduler+0x124>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10a      	bne.n	800429a <xPortStartScheduler+0x26>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	613b      	str	r3, [r7, #16]
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <xPortStartScheduler+0x120>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3f      	ldr	r2, [pc, #252]	; (800439c <xPortStartScheduler+0x128>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10a      	bne.n	80042ba <xPortStartScheduler+0x46>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	60fb      	str	r3, [r7, #12]
    }
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <xPortStartScheduler+0x12c>)
 80042bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <xPortStartScheduler+0x130>)
 80042e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <xPortStartScheduler+0x134>)
 80042e4:	2207      	movs	r2, #7
 80042e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e8:	e009      	b.n	80042fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <xPortStartScheduler+0x134>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <xPortStartScheduler+0x134>)
 80042f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d0ef      	beq.n	80042ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <xPortStartScheduler+0x134>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00a      	beq.n	800432c <xPortStartScheduler+0xb8>
        __asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60bb      	str	r3, [r7, #8]
    }
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <xPortStartScheduler+0x134>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <xPortStartScheduler+0x134>)
 8004334:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <xPortStartScheduler+0x134>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <xPortStartScheduler+0x134>)
 8004340:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800434a:	4b18      	ldr	r3, [pc, #96]	; (80043ac <xPortStartScheduler+0x138>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <xPortStartScheduler+0x138>)
 8004350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004354:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <xPortStartScheduler+0x138>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a14      	ldr	r2, [pc, #80]	; (80043ac <xPortStartScheduler+0x138>)
 800435c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004360:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004362:	f000 f963 	bl	800462c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <xPortStartScheduler+0x13c>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800436c:	f000 f982 	bl	8004674 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <xPortStartScheduler+0x140>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <xPortStartScheduler+0x140>)
 8004376:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800437a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800437c:	f7ff ff64 	bl	8004248 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004380:	f7ff f866 	bl	8003450 <vTaskSwitchContext>
    prvTaskExitError();
 8004384:	f7ff ff1c 	bl	80041c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	e000ed00 	.word	0xe000ed00
 8004398:	410fc271 	.word	0x410fc271
 800439c:	410fc270 	.word	0x410fc270
 80043a0:	e000e400 	.word	0xe000e400
 80043a4:	20000204 	.word	0x20000204
 80043a8:	20000208 	.word	0x20000208
 80043ac:	e000ed20 	.word	0xe000ed20
 80043b0:	20000010 	.word	0x20000010
 80043b4:	e000ef34 	.word	0xe000ef34

080043b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <vInitPrioGroupValue+0xe4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <vInitPrioGroupValue+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10a      	bne.n	80043de <vInitPrioGroupValue+0x26>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	613b      	str	r3, [r7, #16]
    }
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <vInitPrioGroupValue+0xe4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <vInitPrioGroupValue+0xec>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d10a      	bne.n	80043fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
    }
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <vInitPrioGroupValue+0xf0>)
 8004400:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <vInitPrioGroupValue+0xf4>)
 8004424:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442c:	e009      	b.n	8004442 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004436:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b80      	cmp	r3, #128	; 0x80
 800444c:	d0ef      	beq.n	800442e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00a      	beq.n	8004470 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004478:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004482:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <vInitPrioGroupValue+0xf8>)
 8004484:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000ed00 	.word	0xe000ed00
 80044a0:	410fc271 	.word	0x410fc271
 80044a4:	410fc270 	.word	0x410fc270
 80044a8:	e000e400 	.word	0xe000e400
 80044ac:	20000204 	.word	0x20000204
 80044b0:	20000208 	.word	0x20000208

080044b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	607b      	str	r3, [r7, #4]
    }
 80044cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <vPortEnterCritical+0x58>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a0d      	ldr	r2, [pc, #52]	; (800450c <vPortEnterCritical+0x58>)
 80044d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <vPortEnterCritical+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10f      	bne.n	8004500 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <vPortEnterCritical+0x5c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <vPortEnterCritical+0x4c>
        __asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	603b      	str	r3, [r7, #0]
    }
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vPortEnterCritical+0x4a>
    }
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000010 	.word	0x20000010
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <vPortExitCritical+0x50>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <vPortExitCritical+0x24>
        __asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
    }
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <vPortExitCritical+0x50>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3b01      	subs	r3, #1
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <vPortExitCritical+0x50>)
 8004540:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <vPortExitCritical+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <vPortExitCritical+0x42>
 800454a:	2300      	movs	r3, #0
 800454c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f383 8811 	msr	BASEPRI, r3
    }
 8004554:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000010 	.word	0x20000010
	...

08004570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004570:	f3ef 8009 	mrs	r0, PSP
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <pxCurrentTCBConst>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f01e 0f10 	tst.w	lr, #16
 8004580:	bf08      	it	eq
 8004582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458a:	6010      	str	r0, [r2, #0]
 800458c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004594:	f380 8811 	msr	BASEPRI, r0
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f7fe ff56 	bl	8003450 <vTaskSwitchContext>
 80045a4:	f04f 0000 	mov.w	r0, #0
 80045a8:	f380 8811 	msr	BASEPRI, r0
 80045ac:	bc09      	pop	{r0, r3}
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	6808      	ldr	r0, [r1, #0]
 80045b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b6:	f01e 0f10 	tst.w	lr, #16
 80045ba:	bf08      	it	eq
 80045bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045c0:	f380 8809 	msr	PSP, r0
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst>:
 80045d0:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
        __asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
    }
 80045f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045f2:	f002 fa63 	bl	8006abc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045f6:	f7fe fe6f 	bl	80032d8 <xTaskIncrementTick>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004600:	f002 faba 	bl	8006b78 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <SysTick_Handler+0x50>)
 8004606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e001      	b.n	8004612 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800460e:	f002 fa97 	bl	8006b40 <SEGGER_SYSVIEW_RecordExitISR>
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f383 8811 	msr	BASEPRI, r3
    }
 800461c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <vPortSetupTimerInterrupt+0x38>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <vPortSetupTimerInterrupt+0x3c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0a      	ldr	r2, [pc, #40]	; (800466c <vPortSetupTimerInterrupt+0x40>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <vPortSetupTimerInterrupt+0x44>)
 800464a:	3b01      	subs	r3, #1
 800464c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010
 8004664:	e000e018 	.word	0xe000e018
 8004668:	20000000 	.word	0x20000000
 800466c:	10624dd3 	.word	0x10624dd3
 8004670:	e000e014 	.word	0xe000e014

08004674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004684 <vPortEnableVFP+0x10>
 8004678:	6801      	ldr	r1, [r0, #0]
 800467a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800467e:	6001      	str	r1, [r0, #0]
 8004680:	4770      	bx	lr
 8004682:	0000      	.short	0x0000
 8004684:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop

0800468c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004692:	f3ef 8305 	mrs	r3, IPSR
 8004696:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	d914      	bls.n	80046c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <vPortValidateInterruptPriority+0x70>)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <vPortValidateInterruptPriority+0x74>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	7afa      	ldrb	r2, [r7, #11]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d20a      	bcs.n	80046c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
    }
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <vPortValidateInterruptPriority+0x78>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <vPortValidateInterruptPriority+0x7c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d90a      	bls.n	80046ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	603b      	str	r3, [r7, #0]
    }
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <vPortValidateInterruptPriority+0x60>
    }
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	e000e3f0 	.word	0xe000e3f0
 8004700:	20000204 	.word	0x20000204
 8004704:	e000ed0c 	.word	0xe000ed0c
 8004708:	20000208 	.word	0x20000208

0800470c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004718:	f7fe fd0e 	bl	8003138 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800471c:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <pvPortMalloc+0x1a8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004724:	f000 f934 	bl	8004990 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004728:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <pvPortMalloc+0x1ac>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 80a7 	bne.w	8004884 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02d      	beq.n	8004798 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800473c:	2208      	movs	r2, #8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d227      	bcs.n	8004798 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004748:	2208      	movs	r2, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	2b00      	cmp	r3, #0
 8004758:	d021      	beq.n	800479e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f023 0307 	bic.w	r3, r3, #7
 8004760:	3308      	adds	r3, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d214      	bcs.n	8004792 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	3308      	adds	r3, #8
 8004770:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <pvPortMalloc+0x92>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	617b      	str	r3, [r7, #20]
    }
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004796:	e002      	b.n	800479e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	e000      	b.n	80047a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800479e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d06e      	beq.n	8004884 <pvPortMalloc+0x178>
 80047a6:	4b45      	ldr	r3, [pc, #276]	; (80048bc <pvPortMalloc+0x1b0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d869      	bhi.n	8004884 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <pvPortMalloc+0x1b4>)
 80047b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047b4:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <pvPortMalloc+0x1b4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ba:	e004      	b.n	80047c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <pvPortMalloc+0xcc>
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f1      	bne.n	80047bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <pvPortMalloc+0x1a8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d050      	beq.n	8004884 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2208      	movs	r2, #8
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	2308      	movs	r3, #8
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	429a      	cmp	r2, r3
 8004802:	d91f      	bls.n	8004844 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <pvPortMalloc+0x120>
        __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	613b      	str	r3, [r7, #16]
    }
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800483e:	69b8      	ldr	r0, [r7, #24]
 8004840:	f000 f908 	bl	8004a54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <pvPortMalloc+0x1b0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <pvPortMalloc+0x1b0>)
 8004850:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <pvPortMalloc+0x1b0>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <pvPortMalloc+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d203      	bcs.n	8004866 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <pvPortMalloc+0x1b0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <pvPortMalloc+0x1b8>)
 8004864:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <pvPortMalloc+0x1ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	431a      	orrs	r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <pvPortMalloc+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <pvPortMalloc+0x1bc>)
 8004882:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004884:	f7fe fc66 	bl	8003154 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <pvPortMalloc+0x19c>
        __asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
    }
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80048a8:	69fb      	ldr	r3, [r7, #28]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20019214 	.word	0x20019214
 80048b8:	20019228 	.word	0x20019228
 80048bc:	20019218 	.word	0x20019218
 80048c0:	2001920c 	.word	0x2001920c
 80048c4:	2001921c 	.word	0x2001921c
 80048c8:	20019220 	.word	0x20019220

080048cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d04d      	beq.n	800497a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048de:	2308      	movs	r3, #8
 80048e0:	425b      	negs	r3, r3
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <vPortFree+0xb8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <vPortFree+0x44>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60fb      	str	r3, [r7, #12]
    }
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <vPortFree+0x62>
        __asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60bb      	str	r3, [r7, #8]
    }
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <vPortFree+0xb8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01e      	beq.n	800497a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11a      	bne.n	800497a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <vPortFree+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004954:	f7fe fbf0 	bl	8003138 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortFree+0xbc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4413      	add	r3, r2
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <vPortFree+0xbc>)
 8004964:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f000 f874 	bl	8004a54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <vPortFree+0xc0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a06      	ldr	r2, [pc, #24]	; (800498c <vPortFree+0xc0>)
 8004974:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004976:	f7fe fbed 	bl	8003154 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20019228 	.word	0x20019228
 8004988:	20019218 	.word	0x20019218
 800498c:	20019224 	.word	0x20019224

08004990 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004996:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800499a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <prvHeapInit+0xac>)
 800499e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3307      	adds	r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <prvHeapInit+0xac>)
 80049c0:	4413      	add	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <prvHeapInit+0xb0>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <prvHeapInit+0xb0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049dc:	2208      	movs	r2, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0307 	bic.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <prvHeapInit+0xb4>)
 80049f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <prvHeapInit+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <prvHeapInit+0xb4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvHeapInit+0xb4>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <prvHeapInit+0xb8>)
 8004a1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <prvHeapInit+0xbc>)
 8004a26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <prvHeapInit+0xc0>)
 8004a2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	2000020c 	.word	0x2000020c
 8004a40:	2001920c 	.word	0x2001920c
 8004a44:	20019214 	.word	0x20019214
 8004a48:	2001921c 	.word	0x2001921c
 8004a4c:	20019218 	.word	0x20019218
 8004a50:	20019228 	.word	0x20019228

08004a54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <prvInsertBlockIntoFreeList+0xac>)
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e002      	b.n	8004a68 <prvInsertBlockIntoFreeList+0x14>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d8f7      	bhi.n	8004a62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d108      	bne.n	8004a96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d118      	bne.n	8004adc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d00d      	beq.n	8004ad2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e008      	b.n	8004ae4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e003      	b.n	8004ae4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d002      	beq.n	8004af2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2001920c 	.word	0x2001920c
 8004b04:	20019214 	.word	0x20019214

08004b08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b0c:	4803      	ldr	r0, [pc, #12]	; (8004b1c <_cbSendSystemDesc+0x14>)
 8004b0e:	f001 ff7f 	bl	8006a10 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b12:	4803      	ldr	r0, [pc, #12]	; (8004b20 <_cbSendSystemDesc+0x18>)
 8004b14:	f001 ff7c 	bl	8006a10 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	080075ac 	.word	0x080075ac
 8004b20:	080075f0 	.word	0x080075f0

08004b24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b32:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b34:	f001 fae8 	bl	8006108 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b3c:	f001 fb28 	bl	8006190 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000000 	.word	0x20000000
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	0800768c 	.word	0x0800768c

08004b50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	e033      	b.n	8004bc4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b5c:	491e      	ldr	r1, [pc, #120]	; (8004bd8 <_cbSendTaskList+0x88>)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	491a      	ldr	r1, [pc, #104]	; (8004bd8 <_cbSendTaskList+0x88>)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	4c16      	ldr	r4, [pc, #88]	; (8004bd8 <_cbSendTaskList+0x88>)
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4423      	add	r3, r4
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	4d11      	ldr	r5, [pc, #68]	; (8004bd8 <_cbSendTaskList+0x88>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	442b      	add	r3, r5
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	4e0d      	ldr	r6, [pc, #52]	; (8004bd8 <_cbSendTaskList+0x88>)
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4433      	add	r3, r6
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	4622      	mov	r2, r4
 8004bba:	f000 f8bd 	bl	8004d38 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <_cbSendTaskList+0x8c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3c6      	bcc.n	8004b5c <_cbSendTaskList+0xc>
  }
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd8:	2001922c 	.word	0x2001922c
 8004bdc:	200192cc 	.word	0x200192cc

08004be0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004be8:	f7fe fb64 	bl	80032b4 <xTaskGetTickCountFromISR>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2200      	movs	r2, #0
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	4693      	mov	fp, r2
 8004bf4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	f04f 0a00 	mov.w	sl, #0
 8004c04:	f04f 0b00 	mov.w	fp, #0
 8004c08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c14:	4652      	mov	r2, sl
 8004c16:	465b      	mov	r3, fp
 8004c18:	1a14      	subs	r4, r2, r0
 8004c1a:	eb63 0501 	sbc.w	r5, r3, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	00ab      	lsls	r3, r5, #2
 8004c28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c2c:	00a2      	lsls	r2, r4, #2
 8004c2e:	4614      	mov	r4, r2
 8004c30:	461d      	mov	r5, r3
 8004c32:	eb14 0800 	adds.w	r8, r4, r0
 8004c36:	eb45 0901 	adc.w	r9, r5, r1
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4e:	4690      	mov	r8, r2
 8004c50:	4699      	mov	r9, r3
 8004c52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c76:	2205      	movs	r2, #5
 8004c78:	492b      	ldr	r1, [pc, #172]	; (8004d28 <SYSVIEW_AddTask+0xc0>)
 8004c7a:	68b8      	ldr	r0, [r7, #8]
 8004c7c:	f002 fc22 	bl	80074c4 <memcmp>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d04b      	beq.n	8004d1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c86:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	d903      	bls.n	8004c96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c8e:	4828      	ldr	r0, [pc, #160]	; (8004d30 <SYSVIEW_AddTask+0xc8>)
 8004c90:	f002 f9da 	bl	8007048 <SEGGER_SYSVIEW_Warn>
    return;
 8004c94:	e044      	b.n	8004d20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c96:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4926      	ldr	r1, [pc, #152]	; (8004d34 <SYSVIEW_AddTask+0xcc>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004caa:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4921      	ldr	r1, [pc, #132]	; (8004d34 <SYSVIEW_AddTask+0xcc>)
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	3304      	adds	r3, #4
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	491b      	ldr	r1, [pc, #108]	; (8004d34 <SYSVIEW_AddTask+0xcc>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4916      	ldr	r1, [pc, #88]	; (8004d34 <SYSVIEW_AddTask+0xcc>)
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4910      	ldr	r1, [pc, #64]	; (8004d34 <SYSVIEW_AddTask+0xcc>)
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <SYSVIEW_AddTask+0xc4>)
 8004d0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f80e 	bl	8004d38 <SYSVIEW_SendTaskInfo>
 8004d1c:	e000      	b.n	8004d20 <SYSVIEW_AddTask+0xb8>
    return;
 8004d1e:	bf00      	nop

}
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	08007600 	.word	0x08007600
 8004d2c:	200192cc 	.word	0x200192cc
 8004d30:	08007608 	.word	0x08007608
 8004d34:	2001922c 	.word	0x2001922c

08004d38 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	2218      	movs	r2, #24
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f002 fbd6 	bl	8007500 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 fd57 	bl	8006820 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d72:	bf00      	nop
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <_DoInit+0xa0>)
 8004d84:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d86:	22a8      	movs	r2, #168	; 0xa8
 8004d88:	2100      	movs	r1, #0
 8004d8a:	6838      	ldr	r0, [r7, #0]
 8004d8c:	f002 fbb8 	bl	8007500 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2203      	movs	r2, #3
 8004d94:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <_DoInit+0xa4>)
 8004da0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <_DoInit+0xa8>)
 8004da6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <_DoInit+0xa4>)
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <_DoInit+0xac>)
 8004dcc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004de6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e00c      	b.n	8004e0a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1c3 030f 	rsb	r3, r3, #15
 8004df6:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <_DoInit+0xb0>)
 8004df8:	5cd1      	ldrb	r1, [r2, r3]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	460a      	mov	r2, r1
 8004e02:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d9ef      	bls.n	8004df0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e10:	f3bf 8f5f 	dmb	sy
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200192d0 	.word	0x200192d0
 8004e20:	08007658 	.word	0x08007658
 8004e24:	20019378 	.word	0x20019378
 8004e28:	20019778 	.word	0x20019778
 8004e2c:	08007694 	.word	0x08007694

08004e30 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d905      	bls.n	8004e60 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e007      	b.n	8004e70 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	69b9      	ldr	r1, [r7, #24]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1acb      	subs	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bf28      	it	cs
 8004e7e:	4613      	movcs	r3, r2
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bf28      	it	cs
 8004e8a:	4613      	movcs	r3, r2
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	6978      	ldr	r0, [r7, #20]
 8004e9e:	f002 fb21 	bl	80074e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	4413      	add	r3, r2
 8004ea8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	4413      	add	r3, r2
 8004eb0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	4413      	add	r3, r2
 8004ec0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d101      	bne.n	8004ed0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ed0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1b2      	bne.n	8004e46 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b088      	sub	sp, #32
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d911      	bls.n	8004f32 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6938      	ldr	r0, [r7, #16]
 8004f1e:	f002 fae1 	bl	80074e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f22:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	441a      	add	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f30:	e01f      	b.n	8004f72 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	6938      	ldr	r0, [r7, #16]
 8004f46:	f002 facd 	bl	80074e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	f002 fabe 	bl	80074e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	60da      	str	r2, [r3, #12]
}
 8004f72:	bf00      	nop
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f7a:	b480      	push	{r7}
 8004f7c:	b087      	sub	sp, #28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d808      	bhi.n	8004fa8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad2      	subs	r2, r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e004      	b.n	8004fb2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004fb2:	697b      	ldr	r3, [r7, #20]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b53      	cmp	r3, #83	; 0x53
 8004fd8:	d001      	beq.n	8004fde <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fda:	f7ff fecf 	bl	8004d7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005000:	2300      	movs	r3, #0
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d92b      	bls.n	8005064 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4293      	cmp	r3, r2
 800501c:	bf28      	it	cs
 800501e:	4613      	movcs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	4413      	add	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6939      	ldr	r1, [r7, #16]
 8005030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005032:	f002 fa57 	bl	80074e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800504e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505c:	429a      	cmp	r2, r3
 800505e:	d101      	bne.n	8005064 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005060:	2300      	movs	r3, #0
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4293      	cmp	r3, r2
 8005072:	bf28      	it	cs
 8005074:	4613      	movcs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d019      	beq.n	80050b2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	4413      	add	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	6939      	ldr	r1, [r7, #16]
 800508c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508e:	f002 fa29 	bl	80074e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	200192d0 	.word	0x200192d0

080050cc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050d8:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b53      	cmp	r3, #83	; 0x53
 80050e4:	d001      	beq.n	80050ea <SEGGER_RTT_ReadNoLock+0x1e>
 80050e6:	f7ff fe49 	bl	8004d7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	3360      	adds	r3, #96	; 0x60
 80050f6:	4a37      	ldr	r2, [pc, #220]	; (80051d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80050f8:	4413      	add	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d92b      	bls.n	8005170 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4293      	cmp	r3, r2
 8005128:	bf28      	it	cs
 800512a:	4613      	movcs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	4413      	add	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800513e:	f002 f9d1 	bl	80074e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800515a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	429a      	cmp	r2, r3
 800516a:	d101      	bne.n	8005170 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800516c:	2300      	movs	r3, #0
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4293      	cmp	r3, r2
 800517e:	bf28      	it	cs
 8005180:	4613      	movcs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	4413      	add	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	6939      	ldr	r1, [r7, #16]
 8005198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519a:	f002 f9a3 	bl	80074e4 <memcpy>
    NumBytesRead += NumBytesRem;
 800519e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4413      	add	r3, r2
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3730      	adds	r7, #48	; 0x30
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	200192d0 	.word	0x200192d0

080051d8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	3360      	adds	r3, #96	; 0x60
 80051f4:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80051f6:	4413      	add	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d029      	beq.n	8005256 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005202:	2b02      	cmp	r3, #2
 8005204:	d82e      	bhi.n	8005264 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800520a:	2b01      	cmp	r3, #1
 800520c:	d013      	beq.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800520e:	e029      	b.n	8005264 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005210:	6978      	ldr	r0, [r7, #20]
 8005212:	f7ff feb2 	bl	8004f7a <_GetAvailWriteSpace>
 8005216:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d202      	bcs.n	8005226 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005224:	e021      	b.n	800526a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	6978      	ldr	r0, [r7, #20]
 8005230:	f7ff fe5b 	bl	8004eea <_WriteNoCheck>
    break;
 8005234:	e019      	b.n	800526a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7ff fe9f 	bl	8004f7a <_GetAvailWriteSpace>
 800523c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4293      	cmp	r3, r2
 8005244:	bf28      	it	cs
 8005246:	4613      	movcs	r3, r2
 8005248:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	6978      	ldr	r0, [r7, #20]
 8005250:	f7ff fe4b 	bl	8004eea <_WriteNoCheck>
    break;
 8005254:	e009      	b.n	800526a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	6978      	ldr	r0, [r7, #20]
 800525c:	f7ff fde8 	bl	8004e30 <_WriteBlocking>
 8005260:	61f8      	str	r0, [r7, #28]
    break;
 8005262:	e002      	b.n	800526a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
    break;
 8005268:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800526a:	69fb      	ldr	r3, [r7, #28]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200192d0 	.word	0x200192d0

08005278 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b53      	cmp	r3, #83	; 0x53
 8005290:	d001      	beq.n	8005296 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005292:	f7ff fd73 	bl	8004d7c <_DoInit>
  SEGGER_RTT_LOCK();
 8005296:	f3ef 8311 	mrs	r3, BASEPRI
 800529a:	f04f 0120 	mov.w	r1, #32
 800529e:	f381 8811 	msr	BASEPRI, r1
 80052a2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff ff95 	bl	80051d8 <SEGGER_RTT_WriteDownBufferNoLock>
 80052ae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80052b6:	697b      	ldr	r3, [r7, #20]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	200192d0 	.word	0x200192d0

080052c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052d2:	4b3d      	ldr	r3, [pc, #244]	; (80053c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b53      	cmp	r3, #83	; 0x53
 80052de:	d001      	beq.n	80052e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052e0:	f7ff fd4c 	bl	8004d7c <_DoInit>
  SEGGER_RTT_LOCK();
 80052e4:	f3ef 8311 	mrs	r3, BASEPRI
 80052e8:	f04f 0120 	mov.w	r1, #32
 80052ec:	f381 8811 	msr	BASEPRI, r1
 80052f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052fa:	6939      	ldr	r1, [r7, #16]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	3304      	adds	r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3301      	adds	r3, #1
 8005316:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	429a      	cmp	r2, r3
 8005320:	dbeb      	blt.n	80052fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8005322:	e000      	b.n	8005326 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005324:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	429a      	cmp	r2, r3
 800532e:	da3f      	bge.n	80053b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005330:	6939      	ldr	r1, [r7, #16]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005344:	6939      	ldr	r1, [r7, #16]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	3304      	adds	r3, #4
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	3320      	adds	r3, #32
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800536e:	6939      	ldr	r1, [r7, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	440b      	add	r3, r1
 800537c:	3328      	adds	r3, #40	; 0x28
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	3324      	adds	r3, #36	; 0x24
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	332c      	adds	r3, #44	; 0x2c
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053aa:	f3bf 8f5f 	dmb	sy
 80053ae:	e002      	b.n	80053b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80053b0:	f04f 33ff 	mov.w	r3, #4294967295
 80053b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053bc:	69fb      	ldr	r3, [r7, #28]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200192d0 	.word	0x200192d0

080053cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	; 0x28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b53      	cmp	r3, #83	; 0x53
 80053e6:	d001      	beq.n	80053ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053e8:	f7ff fcc8 	bl	8004d7c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053ec:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053ee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d82c      	bhi.n	8005450 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053f6:	f3ef 8311 	mrs	r3, BASEPRI
 80053fa:	f04f 0120 	mov.w	r1, #32
 80053fe:	f381 8811 	msr	BASEPRI, r1
 8005402:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	3360      	adds	r3, #96	; 0x60
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2200      	movs	r2, #0
 8005438:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005440:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	e002      	b.n	8005456 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	; 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200192d0 	.word	0x200192d0

08005464 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	60fa      	str	r2, [r7, #12]
 800547a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d90a      	bls.n	8005498 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005486:	e007      	b.n	8005498 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	1c53      	adds	r3, r2, #1
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	60f9      	str	r1, [r7, #12]
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	1e5a      	subs	r2, r3, #1
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <_EncodeStr+0x46>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ee      	bne.n	8005488 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3307      	adds	r3, #7
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <_HandleIncomingPacket+0xdc>)
 80054e4:	7e1b      	ldrb	r3, [r3, #24]
 80054e6:	4618      	mov	r0, r3
 80054e8:	1cfb      	adds	r3, r7, #3
 80054ea:	2201      	movs	r2, #1
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7ff fded 	bl	80050cc <SEGGER_RTT_ReadNoLock>
 80054f2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d052      	beq.n	80055a0 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d031      	beq.n	8005564 <_HandleIncomingPacket+0x88>
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	dc40      	bgt.n	8005586 <_HandleIncomingPacket+0xaa>
 8005504:	2b07      	cmp	r3, #7
 8005506:	dc15      	bgt.n	8005534 <_HandleIncomingPacket+0x58>
 8005508:	2b00      	cmp	r3, #0
 800550a:	dd3c      	ble.n	8005586 <_HandleIncomingPacket+0xaa>
 800550c:	3b01      	subs	r3, #1
 800550e:	2b06      	cmp	r3, #6
 8005510:	d839      	bhi.n	8005586 <_HandleIncomingPacket+0xaa>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <_HandleIncomingPacket+0x3c>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553b 	.word	0x0800553b
 800551c:	08005541 	.word	0x08005541
 8005520:	08005547 	.word	0x08005547
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005553 	.word	0x08005553
 800552c:	08005559 	.word	0x08005559
 8005530:	0800555f 	.word	0x0800555f
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	d035      	beq.n	80055a4 <_HandleIncomingPacket+0xc8>
 8005538:	e025      	b.n	8005586 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800553a:	f000 fff5 	bl	8006528 <SEGGER_SYSVIEW_Start>
      break;
 800553e:	e036      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005540:	f001 f8ae 	bl	80066a0 <SEGGER_SYSVIEW_Stop>
      break;
 8005544:	e033      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005546:	f001 fa87 	bl	8006a58 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800554a:	e030      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800554c:	f001 fa4c 	bl	80069e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005550:	e02d      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005552:	f001 f8cb 	bl	80066ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005556:	e02a      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005558:	f001 fd24 	bl	8006fa4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800555c:	e027      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800555e:	f001 fd03 	bl	8006f68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005562:	e024      	b.n	80055ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <_HandleIncomingPacket+0xdc>)
 8005566:	7e1b      	ldrb	r3, [r3, #24]
 8005568:	4618      	mov	r0, r3
 800556a:	1cfb      	adds	r3, r7, #3
 800556c:	2201      	movs	r2, #1
 800556e:	4619      	mov	r1, r3
 8005570:	f7ff fdac 	bl	80050cc <SEGGER_RTT_ReadNoLock>
 8005574:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fc68 	bl	8006e54 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005584:	e010      	b.n	80055a8 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	b25b      	sxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	da0e      	bge.n	80055ac <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <_HandleIncomingPacket+0xdc>)
 8005590:	7e1b      	ldrb	r3, [r3, #24]
 8005592:	4618      	mov	r0, r3
 8005594:	1cfb      	adds	r3, r7, #3
 8005596:	2201      	movs	r2, #1
 8005598:	4619      	mov	r1, r3
 800559a:	f7ff fd97 	bl	80050cc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800559e:	e005      	b.n	80055ac <_HandleIncomingPacket+0xd0>
    }
  }
 80055a0:	bf00      	nop
 80055a2:	e004      	b.n	80055ae <_HandleIncomingPacket+0xd2>
      break;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <_HandleIncomingPacket+0xd2>
      break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <_HandleIncomingPacket+0xd2>
      break;
 80055ac:	bf00      	nop
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2001a790 	.word	0x2001a790

080055bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08c      	sub	sp, #48	; 0x30
 80055c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055c2:	2301      	movs	r3, #1
 80055c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	3301      	adds	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d0:	4b32      	ldr	r3, [pc, #200]	; (800569c <_TrySendOverflowPacket+0xe0>)
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d6:	e00b      	b.n	80055f0 <_TrySendOverflowPacket+0x34>
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	09db      	lsrs	r3, r3, #7
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	2b7f      	cmp	r3, #127	; 0x7f
 80055f4:	d8f0      	bhi.n	80055d8 <_TrySendOverflowPacket+0x1c>
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <_TrySendOverflowPacket+0xe4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <_TrySendOverflowPacket+0xe0>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	e00b      	b.n	8005638 <_TrySendOverflowPacket+0x7c>
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	6279      	str	r1, [r7, #36]	; 0x24
 800562a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	2b7f      	cmp	r3, #127	; 0x7f
 800563c:	d8f0      	bhi.n	8005620 <_TrySendOverflowPacket+0x64>
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	627a      	str	r2, [r7, #36]	; 0x24
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <_TrySendOverflowPacket+0xe0>)
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	4618      	mov	r0, r3
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	461a      	mov	r2, r3
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	4619      	mov	r1, r3
 8005660:	f7fa fdb6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005664:	4603      	mov	r3, r0
 8005666:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005668:	f001 fe7e 	bl	8007368 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <_TrySendOverflowPacket+0xe0>)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <_TrySendOverflowPacket+0xe0>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b06      	ldr	r3, [pc, #24]	; (800569c <_TrySendOverflowPacket+0xe0>)
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e004      	b.n	8005690 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <_TrySendOverflowPacket+0xe0>)
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	4a03      	ldr	r2, [pc, #12]	; (800569c <_TrySendOverflowPacket+0xe0>)
 800568e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005690:	693b      	ldr	r3, [r7, #16]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3730      	adds	r7, #48	; 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2001a790 	.word	0x2001a790
 80056a0:	e0001004 	.word	0xe0001004

080056a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056b0:	4b96      	ldr	r3, [pc, #600]	; (800590c <_SendPacket+0x268>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d010      	beq.n	80056da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056b8:	4b94      	ldr	r3, [pc, #592]	; (800590c <_SendPacket+0x268>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8130 	beq.w	8005922 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056c2:	4b92      	ldr	r3, [pc, #584]	; (800590c <_SendPacket+0x268>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d109      	bne.n	80056de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056ca:	f7ff ff77 	bl	80055bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056ce:	4b8f      	ldr	r3, [pc, #572]	; (800590c <_SendPacket+0x268>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 8127 	bne.w	8005926 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056d8:	e001      	b.n	80056de <_SendPacket+0x3a>
    goto Send;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <_SendPacket+0x3c>
Send:
 80056de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b1f      	cmp	r3, #31
 80056e4:	d809      	bhi.n	80056fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056e6:	4b89      	ldr	r3, [pc, #548]	; (800590c <_SendPacket+0x268>)
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 8118 	bne.w	800592a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b17      	cmp	r3, #23
 80056fe:	d807      	bhi.n	8005710 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3b01      	subs	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e0c4      	b.n	800589a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b7f      	cmp	r3, #127	; 0x7f
 800571c:	d912      	bls.n	8005744 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	09da      	lsrs	r2, r3, #7
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b01      	subs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	3a01      	subs	r2, #1
 8005736:	60fa      	str	r2, [r7, #12]
 8005738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e006      	b.n	8005752 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b7e      	cmp	r3, #126	; 0x7e
 8005756:	d807      	bhi.n	8005768 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e098      	b.n	800589a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576e:	d212      	bcs.n	8005796 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	09da      	lsrs	r2, r3, #7
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	3a01      	subs	r2, #1
 8005788:	60fa      	str	r2, [r7, #12]
 800578a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e081      	b.n	800589a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579c:	d21d      	bcs.n	80057da <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0b9a      	lsrs	r2, r3, #14
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	09db      	lsrs	r3, r3, #7
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	3a01      	subs	r2, #1
 80057b8:	60fa      	str	r2, [r7, #12]
 80057ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	3a01      	subs	r2, #1
 80057cc:	60fa      	str	r2, [r7, #12]
 80057ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e05f      	b.n	800589a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e0:	d228      	bcs.n	8005834 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	0d5a      	lsrs	r2, r3, #21
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0b9b      	lsrs	r3, r3, #14
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	3a01      	subs	r2, #1
 80057fc:	60fa      	str	r2, [r7, #12]
 80057fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005802:	b2da      	uxtb	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	09db      	lsrs	r3, r3, #7
 800580c:	b2db      	uxtb	r3, r3
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	3a01      	subs	r2, #1
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	3a01      	subs	r2, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e032      	b.n	800589a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0f1a      	lsrs	r2, r3, #28
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3b01      	subs	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0d5b      	lsrs	r3, r3, #21
 8005848:	b2db      	uxtb	r3, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	3a01      	subs	r2, #1
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0b9b      	lsrs	r3, r3, #14
 800585e:	b2db      	uxtb	r3, r3
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	3a01      	subs	r2, #1
 8005864:	60fa      	str	r2, [r7, #12]
 8005866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	b2db      	uxtb	r3, r3
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	3a01      	subs	r2, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	3a01      	subs	r2, #1
 800588e:	60fa      	str	r2, [r7, #12]
 8005890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800589a:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <_SendPacket+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058a0:	4b1a      	ldr	r3, [pc, #104]	; (800590c <_SendPacket+0x268>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	e00b      	b.n	80058cc <_SendPacket+0x228>
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	6279      	str	r1, [r7, #36]	; 0x24
 80058be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b7f      	cmp	r3, #127	; 0x7f
 80058d0:	d8f0      	bhi.n	80058b4 <_SendPacket+0x210>
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	627a      	str	r2, [r7, #36]	; 0x24
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <_SendPacket+0x268>)
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	4618      	mov	r0, r3
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	f7fa fc6d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058f6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058f8:	f001 fd36 	bl	8007368 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005902:	4a02      	ldr	r2, [pc, #8]	; (800590c <_SendPacket+0x268>)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	60d3      	str	r3, [r2, #12]
 8005908:	e010      	b.n	800592c <_SendPacket+0x288>
 800590a:	bf00      	nop
 800590c:	2001a790 	.word	0x2001a790
 8005910:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <_SendPacket+0x2d8>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <_SendPacket+0x2d8>)
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e004      	b.n	800592c <_SendPacket+0x288>
    goto SendDone;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <_SendPacket+0x288>
      goto SendDone;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <_SendPacket+0x288>
      goto SendDone;
 800592a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <_SendPacket+0x2d8>)
 800592e:	7e1b      	ldrb	r3, [r3, #24]
 8005930:	4619      	mov	r1, r3
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <_SendPacket+0x2dc>)
 8005934:	460b      	mov	r3, r1
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	440b      	add	r3, r1
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	336c      	adds	r3, #108	; 0x6c
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b0e      	ldr	r3, [pc, #56]	; (800597c <_SendPacket+0x2d8>)
 8005944:	7e1b      	ldrb	r3, [r3, #24]
 8005946:	4618      	mov	r0, r3
 8005948:	490d      	ldr	r1, [pc, #52]	; (8005980 <_SendPacket+0x2dc>)
 800594a:	4603      	mov	r3, r0
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4403      	add	r3, r0
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	440b      	add	r3, r1
 8005954:	3370      	adds	r3, #112	; 0x70
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d00b      	beq.n	8005974 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <_SendPacket+0x2d8>)
 800595e:	789b      	ldrb	r3, [r3, #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <_SendPacket+0x2d8>)
 8005966:	2201      	movs	r2, #1
 8005968:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800596a:	f7ff fdb7 	bl	80054dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <_SendPacket+0x2d8>)
 8005970:	2200      	movs	r2, #0
 8005972:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005974:	bf00      	nop
 8005976:	3728      	adds	r7, #40	; 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2001a790 	.word	0x2001a790
 8005980:	200192d0 	.word	0x200192d0

08005984 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	3301      	adds	r3, #1
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d80a      	bhi.n	80059b4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	1c59      	adds	r1, r3, #1
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6051      	str	r1, [r2, #4]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d15a      	bne.n	8005a72 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	e00b      	b.n	80059f6 <_StoreChar+0x72>
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1c59      	adds	r1, r3, #1
 80059e6:	6279      	str	r1, [r7, #36]	; 0x24
 80059e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	09db      	lsrs	r3, r3, #7
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	2b7f      	cmp	r3, #127	; 0x7f
 80059fa:	d8f0      	bhi.n	80059de <_StoreChar+0x5a>
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	627a      	str	r2, [r7, #36]	; 0x24
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	e00b      	b.n	8005a2e <_StoreChar+0xaa>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	61f9      	str	r1, [r7, #28]
 8005a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	09db      	lsrs	r3, r3, #7
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b7f      	cmp	r3, #127	; 0x7f
 8005a32:	d8f0      	bhi.n	8005a16 <_StoreChar+0x92>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	61fa      	str	r2, [r7, #28]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	221a      	movs	r2, #26
 8005a4a:	6939      	ldr	r1, [r7, #16]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fe29 	bl	80056a4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fd34 	bl	80054c4 <_PreparePacket>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	611a      	str	r2, [r3, #16]
  }
}
 8005a72:	bf00      	nop
 8005a74:	3728      	adds	r7, #40	; 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a92:	2301      	movs	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a96:	e007      	b.n	8005aa8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	623b      	str	r3, [r7, #32]
    Width++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d2f3      	bcs.n	8005a98 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d901      	bls.n	8005abc <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11f      	bne.n	8005b06 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01c      	beq.n	8005b06 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <_PrintUnsigned+0x66>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <_PrintUnsigned+0x66>
        c = '0';
 8005adc:	2330      	movs	r3, #48	; 0x30
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e001      	b.n	8005ae6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae6:	e007      	b.n	8005af8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	3b01      	subs	r3, #1
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005aee:	7efb      	ldrb	r3, [r7, #27]
 8005af0:	4619      	mov	r1, r3
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ff46 	bl	8005984 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <_PrintUnsigned+0x8a>
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d3f0      	bcc.n	8005ae8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d903      	bls.n	8005b14 <_PrintUnsigned+0x98>
      NumDigits--;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	e009      	b.n	8005b28 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d200      	bcs.n	8005b28 <_PrintUnsigned+0xac>
        break;
 8005b26:	e005      	b.n	8005b34 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	fb02 f303 	mul.w	r3, r2, r3
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b32:	e7e8      	b.n	8005b06 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b4c:	4a15      	ldr	r2, [pc, #84]	; (8005ba4 <_PrintUnsigned+0x128>)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	4413      	add	r3, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	4619      	mov	r1, r3
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff14 	bl	8005984 <_StoreChar>
    Digit /= Base;
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e3      	bne.n	8005b34 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d011      	beq.n	8005b9a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b7c:	e006      	b.n	8005b8c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	3b01      	subs	r3, #1
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b84:	2120      	movs	r1, #32
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff fefc 	bl	8005984 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <_PrintUnsigned+0x11e>
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3f1      	bcc.n	8005b7e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b9a:	bf00      	nop
 8005b9c:	3728      	adds	r7, #40	; 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	080076b4 	.word	0x080076b4

08005ba8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bfb8      	it	lt
 8005bbc:	425b      	neglt	r3, r3
 8005bbe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bc4:	e007      	b.n	8005bd6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bce:	613b      	str	r3, [r7, #16]
    Width++;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	daf3      	bge.n	8005bc6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d901      	bls.n	8005bea <_PrintInt+0x42>
    Width = NumDigits;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <_PrintInt+0x5e>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	db04      	blt.n	8005c00 <_PrintInt+0x58>
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <_PrintInt+0x5e>
    FieldWidth--;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <_PrintInt+0x6e>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d016      	beq.n	8005c44 <_PrintInt+0x9c>
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c26:	e006      	b.n	8005c36 <_PrintInt+0x8e>
        FieldWidth--;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c2e:	2120      	movs	r1, #32
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fea7 	bl	8005984 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <_PrintInt+0x9c>
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3f1      	bcc.n	8005c28 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da07      	bge.n	8005c5a <_PrintInt+0xb2>
    v = -v;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c50:	212d      	movs	r1, #45	; 0x2d
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fe96 	bl	8005984 <_StoreChar>
 8005c58:	e008      	b.n	8005c6c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c64:	212b      	movs	r1, #43	; 0x2b
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe8c 	bl	8005984 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d019      	beq.n	8005caa <_PrintInt+0x102>
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d114      	bne.n	8005caa <_PrintInt+0x102>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d111      	bne.n	8005caa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00e      	beq.n	8005caa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c8c:	e006      	b.n	8005c9c <_PrintInt+0xf4>
        FieldWidth--;
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c94:	2130      	movs	r1, #48	; 0x30
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fe74 	bl	8005984 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <_PrintInt+0x102>
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3f1      	bcc.n	8005c8e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fedf 	bl	8005a7c <_PrintUnsigned>
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b098      	sub	sp, #96	; 0x60
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd8:	f04f 0120 	mov.w	r1, #32
 8005cdc:	f381 8811 	msr	BASEPRI, r1
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce2:	48b7      	ldr	r0, [pc, #732]	; (8005fc0 <_VPrintTarget+0x2f8>)
 8005ce4:	f7ff fbee 	bl	80054c4 <_PreparePacket>
 8005ce8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cea:	4bb5      	ldr	r3, [pc, #724]	; (8005fc0 <_VPrintTarget+0x2f8>)
 8005cec:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 81a8 	beq.w	8006068 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1c:	2b25      	cmp	r3, #37	; 0x25
 8005d1e:	f040 8195 	bne.w	800604c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d22:	2300      	movs	r3, #0
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d36:	3b23      	subs	r3, #35	; 0x23
 8005d38:	2b0d      	cmp	r3, #13
 8005d3a:	d83f      	bhi.n	8005dbc <_VPrintTarget+0xf4>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <_VPrintTarget+0x7c>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005dad 	.word	0x08005dad
 8005d48:	08005dbd 	.word	0x08005dbd
 8005d4c:	08005dbd 	.word	0x08005dbd
 8005d50:	08005dbd 	.word	0x08005dbd
 8005d54:	08005dbd 	.word	0x08005dbd
 8005d58:	08005dbd 	.word	0x08005dbd
 8005d5c:	08005dbd 	.word	0x08005dbd
 8005d60:	08005dbd 	.word	0x08005dbd
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005dbd 	.word	0x08005dbd
 8005d78:	08005d8d 	.word	0x08005d8d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e01a      	b.n	8005dc2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8e:	f043 0302 	orr.w	r3, r3, #2
 8005d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e012      	b.n	8005dc2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e00a      	b.n	8005dc2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dae:	f043 0308 	orr.w	r3, r3, #8
 8005db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e002      	b.n	8005dc2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc0:	bf00      	nop
        }
      } while (v);
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1b0      	bne.n	8005d2a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dda:	d912      	bls.n	8005e02 <_VPrintTarget+0x13a>
 8005ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de0:	2b39      	cmp	r3, #57	; 0x39
 8005de2:	d80e      	bhi.n	8005e02 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	461a      	mov	r2, r3
 8005df6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3b30      	subs	r3, #48	; 0x30
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005e00:	e7e4      	b.n	8005dcc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005e02:	2300      	movs	r3, #0
 8005e04:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e12:	2b2e      	cmp	r3, #46	; 0x2e
 8005e14:	d11d      	bne.n	8005e52 <_VPrintTarget+0x18a>
        sFormat++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e28:	2b2f      	cmp	r3, #47	; 0x2f
 8005e2a:	d912      	bls.n	8005e52 <_VPrintTarget+0x18a>
 8005e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e30:	2b39      	cmp	r3, #57	; 0x39
 8005e32:	d80e      	bhi.n	8005e52 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	461a      	mov	r2, r3
 8005e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3b30      	subs	r3, #48	; 0x30
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e50:	e7e4      	b.n	8005e1c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e5e:	2b6c      	cmp	r3, #108	; 0x6c
 8005e60:	d003      	beq.n	8005e6a <_VPrintTarget+0x1a2>
 8005e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e66:	2b68      	cmp	r3, #104	; 0x68
 8005e68:	d107      	bne.n	8005e7a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e78:	e7ef      	b.n	8005e5a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e7e:	2b25      	cmp	r3, #37	; 0x25
 8005e80:	f000 80d8 	beq.w	8006034 <_VPrintTarget+0x36c>
 8005e84:	2b25      	cmp	r3, #37	; 0x25
 8005e86:	f2c0 80dc 	blt.w	8006042 <_VPrintTarget+0x37a>
 8005e8a:	2b78      	cmp	r3, #120	; 0x78
 8005e8c:	f300 80d9 	bgt.w	8006042 <_VPrintTarget+0x37a>
 8005e90:	2b58      	cmp	r3, #88	; 0x58
 8005e92:	f2c0 80d6 	blt.w	8006042 <_VPrintTarget+0x37a>
 8005e96:	3b58      	subs	r3, #88	; 0x58
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	f200 80d2 	bhi.w	8006042 <_VPrintTarget+0x37a>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <_VPrintTarget+0x1dc>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005f9b 	.word	0x08005f9b
 8005ea8:	08006043 	.word	0x08006043
 8005eac:	08006043 	.word	0x08006043
 8005eb0:	08006043 	.word	0x08006043
 8005eb4:	08006043 	.word	0x08006043
 8005eb8:	08006043 	.word	0x08006043
 8005ebc:	08006043 	.word	0x08006043
 8005ec0:	08006043 	.word	0x08006043
 8005ec4:	08006043 	.word	0x08006043
 8005ec8:	08006043 	.word	0x08006043
 8005ecc:	08006043 	.word	0x08006043
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08006043 	.word	0x08006043
 8005edc:	08006043 	.word	0x08006043
 8005ee0:	08006043 	.word	0x08006043
 8005ee4:	08006043 	.word	0x08006043
 8005ee8:	08006043 	.word	0x08006043
 8005eec:	08006043 	.word	0x08006043
 8005ef0:	08006043 	.word	0x08006043
 8005ef4:	08006043 	.word	0x08006043
 8005ef8:	08006043 	.word	0x08006043
 8005efc:	08006043 	.word	0x08006043
 8005f00:	08006043 	.word	0x08006043
 8005f04:	0800600f 	.word	0x0800600f
 8005f08:	08006043 	.word	0x08006043
 8005f0c:	08006043 	.word	0x08006043
 8005f10:	08005fc5 	.word	0x08005fc5
 8005f14:	08006043 	.word	0x08006043
 8005f18:	08005f75 	.word	0x08005f75
 8005f1c:	08006043 	.word	0x08006043
 8005f20:	08006043 	.word	0x08006043
 8005f24:	08005f9b 	.word	0x08005f9b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fd1c 	bl	8005984 <_StoreChar>
        break;
 8005f4c:	e07a      	b.n	8006044 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1d19      	adds	r1, r3, #4
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6011      	str	r1, [r2, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f5c:	f107 0010 	add.w	r0, r7, #16
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	220a      	movs	r2, #10
 8005f6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f6e:	f7ff fe1b 	bl	8005ba8 <_PrintInt>
        break;
 8005f72:	e067      	b.n	8006044 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6011      	str	r1, [r2, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f84:	f107 0010 	add.w	r0, r7, #16
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	220a      	movs	r2, #10
 8005f94:	f7ff fd72 	bl	8005a7c <_PrintUnsigned>
        break;
 8005f98:	e054      	b.n	8006044 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1d19      	adds	r1, r3, #4
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6011      	str	r1, [r2, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005fa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005faa:	f107 0010 	add.w	r0, r7, #16
 8005fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb8:	2210      	movs	r2, #16
 8005fba:	f7ff fd5f 	bl	8005a7c <_PrintUnsigned>
        break;
 8005fbe:	e041      	b.n	8006044 <_VPrintTarget+0x37c>
 8005fc0:	2001a7c0 	.word	0x2001a7c0
      case 's':
        s = va_arg(*pParamList, const char*);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <_VPrintTarget+0x314>
          s = "(null)";
 8005fd8:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <_VPrintTarget+0x43c>)
 8005fda:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005ff2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ff6:	f107 0310 	add.w	r3, r7, #16
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fcc1 	bl	8005984 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d9e9      	bls.n	8005fdc <_VPrintTarget+0x314>
        break;
 8006008:	e01c      	b.n	8006044 <_VPrintTarget+0x37c>
            break;
 800600a:	bf00      	nop
        break;
 800600c:	e01a      	b.n	8006044 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1d19      	adds	r1, r3, #4
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6011      	str	r1, [r2, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800601c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800601e:	f107 0010 	add.w	r0, r7, #16
 8006022:	2300      	movs	r3, #0
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	2308      	movs	r3, #8
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2308      	movs	r3, #8
 800602c:	2210      	movs	r2, #16
 800602e:	f7ff fd25 	bl	8005a7c <_PrintUnsigned>
        break;
 8006032:	e007      	b.n	8006044 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	2125      	movs	r1, #37	; 0x25
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fca2 	bl	8005984 <_StoreChar>
        break;
 8006040:	e000      	b.n	8006044 <_VPrintTarget+0x37c>
      default:
        break;
 8006042:	bf00      	nop
      }
      sFormat++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e007      	b.n	800605c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800604c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006050:	f107 0310 	add.w	r3, r7, #16
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fc94 	bl	8005984 <_StoreChar>
    }
  } while (*sFormat);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f ae4d 	bne.w	8005d00 <_VPrintTarget+0x38>
 8006066:	e000      	b.n	800606a <_VPrintTarget+0x3a2>
      break;
 8006068:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d041      	beq.n	80060f4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006080:	e00b      	b.n	800609a <_VPrintTarget+0x3d2>
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800608c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d8f0      	bhi.n	8006082 <_VPrintTarget+0x3ba>
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
 80060b4:	2300      	movs	r3, #0
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
 80060b8:	e00b      	b.n	80060d2 <_VPrintTarget+0x40a>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	6379      	str	r1, [r7, #52]	; 0x34
 80060c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	633b      	str	r3, [r7, #48]	; 0x30
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d8f0      	bhi.n	80060ba <_VPrintTarget+0x3f2>
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	637a      	str	r2, [r7, #52]	; 0x34
 80060de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	221a      	movs	r2, #26
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fad8 	bl	80056a4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060fa:	bf00      	nop
 80060fc:	3758      	adds	r7, #88	; 0x58
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	08007664 	.word	0x08007664

08006108 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006116:	2300      	movs	r3, #0
 8006118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800611c:	4917      	ldr	r1, [pc, #92]	; (800617c <SEGGER_SYSVIEW_Init+0x74>)
 800611e:	4818      	ldr	r0, [pc, #96]	; (8006180 <SEGGER_SYSVIEW_Init+0x78>)
 8006120:	f7ff f8d0 	bl	80052c4 <SEGGER_RTT_AllocUpBuffer>
 8006124:	4603      	mov	r3, r0
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b16      	ldr	r3, [pc, #88]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 800612a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800612c:	4b15      	ldr	r3, [pc, #84]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 800612e:	785a      	ldrb	r2, [r3, #1]
 8006130:	4b14      	ldr	r3, [pc, #80]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006132:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006136:	7e1b      	ldrb	r3, [r3, #24]
 8006138:	4618      	mov	r0, r3
 800613a:	2300      	movs	r3, #0
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	2308      	movs	r3, #8
 8006140:	4a11      	ldr	r2, [pc, #68]	; (8006188 <SEGGER_SYSVIEW_Init+0x80>)
 8006142:	490f      	ldr	r1, [pc, #60]	; (8006180 <SEGGER_SYSVIEW_Init+0x78>)
 8006144:	f7ff f942 	bl	80053cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 800614a:	2200      	movs	r2, #0
 800614c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <SEGGER_SYSVIEW_Init+0x84>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006154:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006156:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006162:	4a08      	ldr	r2, [pc, #32]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006168:	4a06      	ldr	r2, [pc, #24]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <SEGGER_SYSVIEW_Init+0x7c>)
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20019788 	.word	0x20019788
 8006180:	0800766c 	.word	0x0800766c
 8006184:	2001a790 	.word	0x2001a790
 8006188:	2001a788 	.word	0x2001a788
 800618c:	e0001004 	.word	0xe0001004

08006190 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6113      	str	r3, [r2, #16]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	2001a790 	.word	0x2001a790

080061b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061b8:	f3ef 8311 	mrs	r3, BASEPRI
 80061bc:	f04f 0120 	mov.w	r1, #32
 80061c0:	f381 8811 	msr	BASEPRI, r1
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	4808      	ldr	r0, [pc, #32]	; (80061e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061c8:	f7ff f97c 	bl	80054c4 <_PreparePacket>
 80061cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68b8      	ldr	r0, [r7, #8]
 80061d4:	f7ff fa66 	bl	80056a4 <_SendPacket>
  RECORD_END();
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2001a7c0 	.word	0x2001a7c0

080061ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	4816      	ldr	r0, [pc, #88]	; (8006260 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006206:	f7ff f95d 	bl	80054c4 <_PreparePacket>
 800620a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_RecordU32+0x46>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	61f9      	str	r1, [r7, #28]
 8006224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b7f      	cmp	r3, #127	; 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	61fa      	str	r2, [r7, #28]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	6938      	ldr	r0, [r7, #16]
 800624e:	f7ff fa29 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f383 8811 	msr	BASEPRI, r3
}
 8006258:	bf00      	nop
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2001a7c0 	.word	0x2001a7c0

08006264 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	; 0x30
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006270:	f3ef 8311 	mrs	r3, BASEPRI
 8006274:	f04f 0120 	mov.w	r1, #32
 8006278:	f381 8811 	msr	BASEPRI, r1
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	4825      	ldr	r0, [pc, #148]	; (8006314 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006280:	f7ff f920 	bl	80054c4 <_PreparePacket>
 8006284:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	e00b      	b.n	80062ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800629e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	09db      	lsrs	r3, r3, #7
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	2b7f      	cmp	r3, #127	; 0x7f
 80062b0:	d8f0      	bhi.n	8006294 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	623b      	str	r3, [r7, #32]
 80062ca:	e00b      	b.n	80062e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	6279      	str	r1, [r7, #36]	; 0x24
 80062d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	09db      	lsrs	r3, r3, #7
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b7f      	cmp	r3, #127	; 0x7f
 80062e8:	d8f0      	bhi.n	80062cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	627a      	str	r2, [r7, #36]	; 0x24
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	6979      	ldr	r1, [r7, #20]
 80062fe:	69b8      	ldr	r0, [r7, #24]
 8006300:	f7ff f9d0 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f383 8811 	msr	BASEPRI, r3
}
 800630a:	bf00      	nop
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	2001a7c0 	.word	0x2001a7c0

08006318 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006326:	f3ef 8311 	mrs	r3, BASEPRI
 800632a:	f04f 0120 	mov.w	r1, #32
 800632e:	f381 8811 	msr	BASEPRI, r1
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	4832      	ldr	r0, [pc, #200]	; (8006400 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006336:	f7ff f8c5 	bl	80054c4 <_PreparePacket>
 800633a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
 8006348:	e00b      	b.n	8006362 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	1c59      	adds	r1, r3, #1
 8006352:	6379      	str	r1, [r7, #52]	; 0x34
 8006354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	09db      	lsrs	r3, r3, #7
 8006360:	633b      	str	r3, [r7, #48]	; 0x30
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	2b7f      	cmp	r3, #127	; 0x7f
 8006366:	d8f0      	bhi.n	800634a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	637a      	str	r2, [r7, #52]	; 0x34
 800636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006380:	e00b      	b.n	800639a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800638c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b7f      	cmp	r3, #127	; 0x7f
 800639e:	d8f0      	bhi.n	8006382 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	6279      	str	r1, [r7, #36]	; 0x24
 80063c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	2b7f      	cmp	r3, #127	; 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	627a      	str	r2, [r7, #36]	; 0x24
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	69b8      	ldr	r0, [r7, #24]
 80063ee:	f7ff f959 	bl	80056a4 <_SendPacket>
  RECORD_END();
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f383 8811 	msr	BASEPRI, r3
}
 80063f8:	bf00      	nop
 80063fa:	3738      	adds	r7, #56	; 0x38
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	2001a7c0 	.word	0x2001a7c0

08006404 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b090      	sub	sp, #64	; 0x40
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006412:	f3ef 8311 	mrs	r3, BASEPRI
 8006416:	f04f 0120 	mov.w	r1, #32
 800641a:	f381 8811 	msr	BASEPRI, r1
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	4840      	ldr	r0, [pc, #256]	; (8006524 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006422:	f7ff f84f 	bl	80054c4 <_PreparePacket>
 8006426:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38
 8006434:	e00b      	b.n	800644e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	b2da      	uxtb	r2, r3
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	09db      	lsrs	r3, r3, #7
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b7f      	cmp	r3, #127	; 0x7f
 8006452:	d8f0      	bhi.n	8006436 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	63fa      	str	r2, [r7, #60]	; 0x3c
 800645a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
 800646c:	e00b      	b.n	8006486 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	1c59      	adds	r1, r3, #1
 8006476:	6379      	str	r1, [r7, #52]	; 0x34
 8006478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	09db      	lsrs	r3, r3, #7
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2b7f      	cmp	r3, #127	; 0x7f
 800648a:	d8f0      	bhi.n	800646e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	637a      	str	r2, [r7, #52]	; 0x34
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a4:	e00b      	b.n	80064be <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	1c59      	adds	r1, r3, #1
 80064ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	09db      	lsrs	r3, r3, #7
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	2b7f      	cmp	r3, #127	; 0x7f
 80064c2:	d8f0      	bhi.n	80064a6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	6279      	str	r1, [r7, #36]	; 0x24
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	627a      	str	r2, [r7, #36]	; 0x24
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	69b8      	ldr	r0, [r7, #24]
 8006512:	f7ff f8c7 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f383 8811 	msr	BASEPRI, r3
}
 800651c:	bf00      	nop
 800651e:	3740      	adds	r7, #64	; 0x40
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	2001a7c0 	.word	0x2001a7c0

08006528 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800652e:	4b59      	ldr	r3, [pc, #356]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006534:	f3ef 8311 	mrs	r3, BASEPRI
 8006538:	f04f 0120 	mov.w	r1, #32
 800653c:	f381 8811 	msr	BASEPRI, r1
 8006540:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006542:	4b54      	ldr	r3, [pc, #336]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	220a      	movs	r2, #10
 8006548:	4953      	ldr	r1, [pc, #332]	; (8006698 <SEGGER_SYSVIEW_Start+0x170>)
 800654a:	4618      	mov	r0, r3
 800654c:	f7f9 fe40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006556:	f000 ff07 	bl	8007368 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800655a:	200a      	movs	r0, #10
 800655c:	f7ff fe28 	bl	80061b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006560:	f3ef 8311 	mrs	r3, BASEPRI
 8006564:	f04f 0120 	mov.w	r1, #32
 8006568:	f381 8811 	msr	BASEPRI, r1
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	484b      	ldr	r0, [pc, #300]	; (800669c <SEGGER_SYSVIEW_Start+0x174>)
 8006570:	f7fe ffa8 	bl	80054c4 <_PreparePacket>
 8006574:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657e:	4b45      	ldr	r3, [pc, #276]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_Start+0x76>
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_Start+0x5e>
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	4b36      	ldr	r3, [pc, #216]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_Start+0xb0>
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	6279      	str	r1, [r7, #36]	; 0x24
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	623b      	str	r3, [r7, #32]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_Start+0x98>
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	627a      	str	r2, [r7, #36]	; 0x24
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_Start+0xea>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	61f9      	str	r1, [r7, #28]
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_Start+0xd2>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_Start+0x122>
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	6179      	str	r1, [r7, #20]
 800663c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b7f      	cmp	r3, #127	; 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_Start+0x10a>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	617a      	str	r2, [r7, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006660:	2218      	movs	r2, #24
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff f81d 	bl	80056a4 <_SendPacket>
      RECORD_END();
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <SEGGER_SYSVIEW_Start+0x16c>)
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800667e:	f000 f9eb 	bl	8006a58 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006682:	f000 f9b1 	bl	80069e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006686:	f000 fc8d 	bl	8006fa4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800668a:	bf00      	nop
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2001a790 	.word	0x2001a790
 8006698:	080076a8 	.word	0x080076a8
 800669c:	2001a7c0 	.word	0x2001a7c0

080066a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066a6:	f3ef 8311 	mrs	r3, BASEPRI
 80066aa:	f04f 0120 	mov.w	r1, #32
 80066ae:	f381 8811 	msr	BASEPRI, r1
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	480b      	ldr	r0, [pc, #44]	; (80066e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80066b6:	f7fe ff05 	bl	80054c4 <_PreparePacket>
 80066ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066c4:	220b      	movs	r2, #11
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6838      	ldr	r0, [r7, #0]
 80066ca:	f7fe ffeb 	bl	80056a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066ce:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f383 8811 	msr	BASEPRI, r3
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2001a7c0 	.word	0x2001a7c0
 80066e8:	2001a790 	.word	0x2001a790

080066ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066f2:	f3ef 8311 	mrs	r3, BASEPRI
 80066f6:	f04f 0120 	mov.w	r1, #32
 80066fa:	f381 8811 	msr	BASEPRI, r1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4845      	ldr	r0, [pc, #276]	; (8006818 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006702:	f7fe fedf 	bl	80054c4 <_PreparePacket>
 8006706:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006710:	4b42      	ldr	r3, [pc, #264]	; (800681c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
 8006716:	e00b      	b.n	8006730 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	b2da      	uxtb	r2, r3
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	09db      	lsrs	r3, r3, #7
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	2b7f      	cmp	r3, #127	; 0x7f
 8006734:	d8f0      	bhi.n	8006718 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
 800674a:	4b34      	ldr	r3, [pc, #208]	; (800681c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	623b      	str	r3, [r7, #32]
 8006750:	e00b      	b.n	800676a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	1c59      	adds	r1, r3, #1
 800675a:	6279      	str	r1, [r7, #36]	; 0x24
 800675c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	09db      	lsrs	r3, r3, #7
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	2b7f      	cmp	r3, #127	; 0x7f
 800676e:	d8f0      	bhi.n	8006752 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	627a      	str	r2, [r7, #36]	; 0x24
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	61f9      	str	r1, [r7, #28]
 8006796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b7f      	cmp	r3, #127	; 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e00b      	b.n	80067dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1c59      	adds	r1, r3, #1
 80067cc:	6179      	str	r1, [r7, #20]
 80067ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	09db      	lsrs	r3, r3, #7
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d8f0      	bhi.n	80067c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	617a      	str	r2, [r7, #20]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067f2:	2218      	movs	r2, #24
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	68b8      	ldr	r0, [r7, #8]
 80067f8:	f7fe ff54 	bl	80056a4 <_SendPacket>
  RECORD_END();
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006802:	4b06      	ldr	r3, [pc, #24]	; (800681c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	4798      	blx	r3
  }
}
 8006810:	bf00      	nop
 8006812:	3730      	adds	r7, #48	; 0x30
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	2001a7c0 	.word	0x2001a7c0
 800681c:	2001a790 	.word	0x2001a790

08006820 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b092      	sub	sp, #72	; 0x48
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006828:	f3ef 8311 	mrs	r3, BASEPRI
 800682c:	f04f 0120 	mov.w	r1, #32
 8006830:	f381 8811 	msr	BASEPRI, r1
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	486a      	ldr	r0, [pc, #424]	; (80069e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006838:	f7fe fe44 	bl	80054c4 <_PreparePacket>
 800683c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	647b      	str	r3, [r7, #68]	; 0x44
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b66      	ldr	r3, [pc, #408]	; (80069e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	643b      	str	r3, [r7, #64]	; 0x40
 8006852:	e00b      	b.n	800686c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	6479      	str	r1, [r7, #68]	; 0x44
 800685e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006868:	09db      	lsrs	r3, r3, #7
 800686a:	643b      	str	r3, [r7, #64]	; 0x40
 800686c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d8f0      	bhi.n	8006854 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	647a      	str	r2, [r7, #68]	; 0x44
 8006878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006880:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38
 800688c:	e00b      	b.n	80068a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	b2da      	uxtb	r2, r3
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d8f0      	bhi.n	800688e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	4619      	mov	r1, r3
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7fe fdcd 	bl	8005464 <_EncodeStr>
 80068ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068cc:	2209      	movs	r2, #9
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	6938      	ldr	r0, [r7, #16]
 80068d2:	f7fe fee7 	bl	80056a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30
 80068ea:	e00b      	b.n	8006904 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	1c59      	adds	r1, r3, #1
 80068f4:	6379      	str	r1, [r7, #52]	; 0x34
 80068f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	09db      	lsrs	r3, r3, #7
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	2b7f      	cmp	r3, #127	; 0x7f
 8006908:	d8f0      	bhi.n	80068ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	637a      	str	r2, [r7, #52]	; 0x34
 8006910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	b2da      	uxtb	r2, r3
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	6279      	str	r1, [r7, #36]	; 0x24
 800696a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	627a      	str	r2, [r7, #36]	; 0x24
 8006984:	6a3a      	ldr	r2, [r7, #32]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e00b      	b.n	80069b2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	61f9      	str	r1, [r7, #28]
 80069a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b7f      	cmp	r3, #127	; 0x7f
 80069b6:	d8f0      	bhi.n	800699a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	61fa      	str	r2, [r7, #28]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069c8:	2215      	movs	r2, #21
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7fe fe69 	bl	80056a4 <_SendPacket>
  RECORD_END();
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f383 8811 	msr	BASEPRI, r3
}
 80069d8:	bf00      	nop
 80069da:	3748      	adds	r7, #72	; 0x48
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2001a7c0 	.word	0x2001a7c0
 80069e4:	2001a790 	.word	0x2001a790

080069e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069fe:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4798      	blx	r3
  }
}
 8006a06:	bf00      	nop
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2001a790 	.word	0x2001a790

08006a10 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a18:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1c:	f04f 0120 	mov.w	r1, #32
 8006a20:	f381 8811 	msr	BASEPRI, r1
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	480b      	ldr	r0, [pc, #44]	; (8006a54 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a28:	f7fe fd4c 	bl	80054c4 <_PreparePacket>
 8006a2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a2e:	2280      	movs	r2, #128	; 0x80
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	6938      	ldr	r0, [r7, #16]
 8006a34:	f7fe fd16 	bl	8005464 <_EncodeStr>
 8006a38:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a3a:	220e      	movs	r2, #14
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7fe fe30 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f383 8811 	msr	BASEPRI, r3
}
 8006a4a:	bf00      	nop
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2001a7c0 	.word	0x2001a7c0

08006a58 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01a      	beq.n	8006a9c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d015      	beq.n	8006a9c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a70:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4798      	blx	r3
 8006a78:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a7c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	000a      	movs	r2, r1
 8006a8c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a8e:	4613      	mov	r3, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4621      	mov	r1, r4
 8006a94:	200d      	movs	r0, #13
 8006a96:	f7ff fbe5 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x2>
 8006a9a:	e006      	b.n	8006aaa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	200c      	movs	r0, #12
 8006aa4:	f7ff fba2 	bl	80061ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2001a790 	.word	0x2001a790
 8006ab8:	e0001004 	.word	0xe0001004

08006abc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	f04f 0120 	mov.w	r1, #32
 8006aca:	f381 8811 	msr	BASEPRI, r1
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	4819      	ldr	r0, [pc, #100]	; (8006b38 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006ad2:	f7fe fcf7 	bl	80054c4 <_PreparePacket>
 8006ad6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006adc:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	e00b      	b.n	8006b08 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	6179      	str	r1, [r7, #20]
 8006afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	09db      	lsrs	r3, r3, #7
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0c:	d8f0      	bhi.n	8006af0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	617a      	str	r2, [r7, #20]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b1e:	2202      	movs	r2, #2
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68b8      	ldr	r0, [r7, #8]
 8006b24:	f7fe fdbe 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	2001a7c0 	.word	0x2001a7c0
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b46:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4a:	f04f 0120 	mov.w	r1, #32
 8006b4e:	f381 8811 	msr	BASEPRI, r1
 8006b52:	607b      	str	r3, [r7, #4]
 8006b54:	4807      	ldr	r0, [pc, #28]	; (8006b74 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b56:	f7fe fcb5 	bl	80054c4 <_PreparePacket>
 8006b5a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6838      	ldr	r0, [r7, #0]
 8006b62:	f7fe fd9f 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f383 8811 	msr	BASEPRI, r3
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	2001a7c0 	.word	0x2001a7c0

08006b78 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b82:	f04f 0120 	mov.w	r1, #32
 8006b86:	f381 8811 	msr	BASEPRI, r1
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	4807      	ldr	r0, [pc, #28]	; (8006bac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b8e:	f7fe fc99 	bl	80054c4 <_PreparePacket>
 8006b92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b94:	2212      	movs	r2, #18
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6838      	ldr	r0, [r7, #0]
 8006b9a:	f7fe fd83 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f383 8811 	msr	BASEPRI, r3
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2001a7c0 	.word	0x2001a7c0

08006bb0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bba:	f04f 0120 	mov.w	r1, #32
 8006bbe:	f381 8811 	msr	BASEPRI, r1
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	4807      	ldr	r0, [pc, #28]	; (8006be4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bc6:	f7fe fc7d 	bl	80054c4 <_PreparePacket>
 8006bca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006bcc:	2211      	movs	r2, #17
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6838      	ldr	r0, [r7, #0]
 8006bd2:	f7fe fd67 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	2001a7c0 	.word	0x2001a7c0

08006be8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf4:	f04f 0120 	mov.w	r1, #32
 8006bf8:	f381 8811 	msr	BASEPRI, r1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	4819      	ldr	r0, [pc, #100]	; (8006c64 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c00:	f7fe fc60 	bl	80054c4 <_PreparePacket>
 8006c04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0a:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7fe fd27 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	2001a7c0 	.word	0x2001a7c0
 8006c68:	2001a790 	.word	0x2001a790

08006c6c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c74:	f3ef 8311 	mrs	r3, BASEPRI
 8006c78:	f04f 0120 	mov.w	r1, #32
 8006c7c:	f381 8811 	msr	BASEPRI, r1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	4819      	ldr	r0, [pc, #100]	; (8006ce8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c84:	f7fe fc1e 	bl	80054c4 <_PreparePacket>
 8006c88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c8e:	4b17      	ldr	r3, [pc, #92]	; (8006cec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e00b      	b.n	8006cba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	61f9      	str	r1, [r7, #28]
 8006cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	09db      	lsrs	r3, r3, #7
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbe:	d8f0      	bhi.n	8006ca2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	61fa      	str	r2, [r7, #28]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	6938      	ldr	r0, [r7, #16]
 8006cd6:	f7fe fce5 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f383 8811 	msr	BASEPRI, r3
}
 8006ce0:	bf00      	nop
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	2001a7c0 	.word	0x2001a7c0
 8006cec:	2001a790 	.word	0x2001a790

08006cf0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfc:	f04f 0120 	mov.w	r1, #32
 8006d00:	f381 8811 	msr	BASEPRI, r1
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	4819      	ldr	r0, [pc, #100]	; (8006d6c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d08:	f7fe fbdc 	bl	80054c4 <_PreparePacket>
 8006d0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d12:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e00b      	b.n	8006d3e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	1c59      	adds	r1, r3, #1
 8006d2e:	61f9      	str	r1, [r7, #28]
 8006d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	09db      	lsrs	r3, r3, #7
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b7f      	cmp	r3, #127	; 0x7f
 8006d42:	d8f0      	bhi.n	8006d26 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	61fa      	str	r2, [r7, #28]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d54:	2206      	movs	r2, #6
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f7fe fca3 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f383 8811 	msr	BASEPRI, r3
}
 8006d64:	bf00      	nop
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	2001a7c0 	.word	0x2001a7c0
 8006d70:	2001a790 	.word	0x2001a790

08006d74 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d82:	f04f 0120 	mov.w	r1, #32
 8006d86:	f381 8811 	msr	BASEPRI, r1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	4827      	ldr	r0, [pc, #156]	; (8006e2c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d8e:	f7fe fb99 	bl	80054c4 <_PreparePacket>
 8006d92:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	e00b      	b.n	8006dc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	6279      	str	r1, [r7, #36]	; 0x24
 8006db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	09db      	lsrs	r3, r3, #7
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc8:	d8f0      	bhi.n	8006dac <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	627a      	str	r2, [r7, #36]	; 0x24
 8006dd0:	6a3a      	ldr	r2, [r7, #32]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e00b      	b.n	8006dfc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	61f9      	str	r1, [r7, #28]
 8006dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	09db      	lsrs	r3, r3, #7
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006e00:	d8f0      	bhi.n	8006de4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	61fa      	str	r2, [r7, #28]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006e12:	2207      	movs	r2, #7
 8006e14:	68f9      	ldr	r1, [r7, #12]
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f7fe fc44 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f383 8811 	msr	BASEPRI, r3
}
 8006e22:	bf00      	nop
 8006e24:	3728      	adds	r7, #40	; 0x28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2001a7c0 	.word	0x2001a7c0
 8006e30:	2001a790 	.word	0x2001a790

08006e34 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	2001a790 	.word	0x2001a790

08006e54 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08c      	sub	sp, #48	; 0x30
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e5e:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d077      	beq.n	8006f56 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006e66:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e70:	e008      	b.n	8006e84 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	3301      	adds	r3, #1
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d3f2      	bcc.n	8006e72 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e8c:	e000      	b.n	8006e90 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e8e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d055      	beq.n	8006f42 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e96:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9a:	f04f 0120 	mov.w	r1, #32
 8006e9e:	f381 8811 	msr	BASEPRI, r1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	482f      	ldr	r0, [pc, #188]	; (8006f64 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006ea6:	f7fe fb0d 	bl	80054c4 <_PreparePacket>
 8006eaa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	623b      	str	r3, [r7, #32]
 8006eb8:	e00b      	b.n	8006ed2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	1c59      	adds	r1, r3, #1
 8006ec2:	6279      	str	r1, [r7, #36]	; 0x24
 8006ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	09db      	lsrs	r3, r3, #7
 8006ed0:	623b      	str	r3, [r7, #32]
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed6:	d8f0      	bhi.n	8006eba <SEGGER_SYSVIEW_SendModule+0x66>
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	627a      	str	r2, [r7, #36]	; 0x24
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e00b      	b.n	8006f0c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	1c59      	adds	r1, r3, #1
 8006efc:	61f9      	str	r1, [r7, #28]
 8006efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	09db      	lsrs	r3, r3, #7
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f10:	d8f0      	bhi.n	8006ef4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	61fa      	str	r2, [r7, #28]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2280      	movs	r2, #128	; 0x80
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7fe fa9a 	bl	8005464 <_EncodeStr>
 8006f30:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f32:	2216      	movs	r2, #22
 8006f34:	68f9      	ldr	r1, [r7, #12]
 8006f36:	6938      	ldr	r0, [r7, #16]
 8006f38:	f7fe fbb4 	bl	80056a4 <_SendPacket>
      RECORD_END();
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <SEGGER_SYSVIEW_SendModule+0x102>
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4798      	blx	r3
    }
  }
}
 8006f56:	bf00      	nop
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	2001a7b8 	.word	0x2001a7b8
 8006f64:	2001a7c0 	.word	0x2001a7c0

08006f68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f2      	bne.n	8006f7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2001a7b8 	.word	0x2001a7b8

08006fa4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006faa:	f3ef 8311 	mrs	r3, BASEPRI
 8006fae:	f04f 0120 	mov.w	r1, #32
 8006fb2:	f381 8811 	msr	BASEPRI, r1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	4817      	ldr	r0, [pc, #92]	; (8007018 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006fba:	f7fe fa83 	bl	80054c4 <_PreparePacket>
 8006fbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	4b14      	ldr	r3, [pc, #80]	; (800701c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e00b      	b.n	8006fe8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	6179      	str	r1, [r7, #20]
 8006fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	09db      	lsrs	r3, r3, #7
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d8f0      	bhi.n	8006fd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	617a      	str	r2, [r7, #20]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ffe:	221b      	movs	r2, #27
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	68b8      	ldr	r0, [r7, #8]
 8007004:	f7fe fb4e 	bl	80056a4 <_SendPacket>
  RECORD_END();
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2001a7c0 	.word	0x2001a7c0
 800701c:	2001a7bc 	.word	0x2001a7bc

08007020 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007020:	b40f      	push	{r0, r1, r2, r3}
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007028:	f107 0314 	add.w	r3, r7, #20
 800702c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	461a      	mov	r2, r3
 8007032:	2100      	movs	r1, #0
 8007034:	6938      	ldr	r0, [r7, #16]
 8007036:	f7fe fe47 	bl	8005cc8 <_VPrintTarget>
  va_end(ParamList);
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007044:	b004      	add	sp, #16
 8007046:	4770      	bx	lr

08007048 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007050:	f3ef 8311 	mrs	r3, BASEPRI
 8007054:	f04f 0120 	mov.w	r1, #32
 8007058:	f381 8811 	msr	BASEPRI, r1
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	4827      	ldr	r0, [pc, #156]	; (80070fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007060:	f7fe fa30 	bl	80054c4 <_PreparePacket>
 8007064:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007066:	2280      	movs	r2, #128	; 0x80
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7fe f9fa 	bl	8005464 <_EncodeStr>
 8007070:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
 8007076:	2301      	movs	r3, #1
 8007078:	623b      	str	r3, [r7, #32]
 800707a:	e00b      	b.n	8007094 <SEGGER_SYSVIEW_Warn+0x4c>
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	6279      	str	r1, [r7, #36]	; 0x24
 8007086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	09db      	lsrs	r3, r3, #7
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b7f      	cmp	r3, #127	; 0x7f
 8007098:	d8f0      	bhi.n	800707c <SEGGER_SYSVIEW_Warn+0x34>
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	627a      	str	r2, [r7, #36]	; 0x24
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e00b      	b.n	80070cc <SEGGER_SYSVIEW_Warn+0x84>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	61f9      	str	r1, [r7, #28]
 80070be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	09db      	lsrs	r3, r3, #7
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b7f      	cmp	r3, #127	; 0x7f
 80070d0:	d8f0      	bhi.n	80070b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	61fa      	str	r2, [r7, #28]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070e2:	221a      	movs	r2, #26
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	6938      	ldr	r0, [r7, #16]
 80070e8:	f7fe fadc 	bl	80056a4 <_SendPacket>
  RECORD_END();
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f383 8811 	msr	BASEPRI, r3
}
 80070f2:	bf00      	nop
 80070f4:	3728      	adds	r7, #40	; 0x28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2001a7c0 	.word	0x2001a7c0

08007100 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007104:	4b13      	ldr	r3, [pc, #76]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007106:	7e1b      	ldrb	r3, [r3, #24]
 8007108:	4619      	mov	r1, r3
 800710a:	4a13      	ldr	r2, [pc, #76]	; (8007158 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800710c:	460b      	mov	r3, r1
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	440b      	add	r3, r1
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4413      	add	r3, r2
 8007116:	336c      	adds	r3, #108	; 0x6c
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800711c:	7e1b      	ldrb	r3, [r3, #24]
 800711e:	4618      	mov	r0, r3
 8007120:	490d      	ldr	r1, [pc, #52]	; (8007158 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007122:	4603      	mov	r3, r0
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4403      	add	r3, r0
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	3370      	adds	r3, #112	; 0x70
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d00b      	beq.n	800714c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007136:	789b      	ldrb	r3, [r3, #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d107      	bne.n	800714c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800713e:	2201      	movs	r2, #1
 8007140:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007142:	f7fe f9cb 	bl	80054dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007146:	4b03      	ldr	r3, [pc, #12]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007148:	2200      	movs	r2, #0
 800714a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800714e:	781b      	ldrb	r3, [r3, #0]
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	2001a790 	.word	0x2001a790
 8007158:	200192d0 	.word	0x200192d0

0800715c <__NVIC_EnableIRQ>:
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	2b00      	cmp	r3, #0
 800716c:	db0b      	blt.n	8007186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	f003 021f 	and.w	r2, r3, #31
 8007174:	4907      	ldr	r1, [pc, #28]	; (8007194 <__NVIC_EnableIRQ+0x38>)
 8007176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	2001      	movs	r0, #1
 800717e:	fa00 f202 	lsl.w	r2, r0, r2
 8007182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	e000e100 	.word	0xe000e100

08007198 <__NVIC_SetPriority>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db0a      	blt.n	80071c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	490c      	ldr	r1, [pc, #48]	; (80071e4 <__NVIC_SetPriority+0x4c>)
 80071b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b6:	0112      	lsls	r2, r2, #4
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	440b      	add	r3, r1
 80071bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071c0:	e00a      	b.n	80071d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	4908      	ldr	r1, [pc, #32]	; (80071e8 <__NVIC_SetPriority+0x50>)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	3b04      	subs	r3, #4
 80071d0:	0112      	lsls	r2, r2, #4
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	440b      	add	r3, r1
 80071d6:	761a      	strb	r2, [r3, #24]
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	e000e100 	.word	0xe000e100
 80071e8:	e000ed00 	.word	0xe000ed00

080071ec <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80071f2:	f7ff ff85 	bl	8007100 <SEGGER_SYSVIEW_IsStarted>
 80071f6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80071fe:	f7ff f993 	bl	8006528 <SEGGER_SYSVIEW_Start>
  }
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8007216:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <_cbOnUARTRx+0x3c>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d806      	bhi.n	800722c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800721e:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <_cbOnUARTRx+0x3c>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	b2da      	uxtb	r2, r3
 8007226:	4b08      	ldr	r3, [pc, #32]	; (8007248 <_cbOnUARTRx+0x3c>)
 8007228:	701a      	strb	r2, [r3, #0]
    goto Done;
 800722a:	e009      	b.n	8007240 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800722c:	f7ff ffde 	bl	80071ec <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <_cbOnUARTRx+0x3c>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4618      	mov	r0, r3
 8007236:	1dfb      	adds	r3, r7, #7
 8007238:	2201      	movs	r2, #1
 800723a:	4619      	mov	r1, r3
 800723c:	f7fe f81c 	bl	8005278 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007240:	bf00      	nop
}
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20000014 	.word	0x20000014

0800724c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007254:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <_cbOnUARTTx+0x5c>)
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d80f      	bhi.n	800727c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800725c:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <_cbOnUARTTx+0x5c>)
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	461a      	mov	r2, r3
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <_cbOnUARTTx+0x60>)
 8007264:	5c9a      	ldrb	r2, [r3, r2]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <_cbOnUARTTx+0x5c>)
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	3301      	adds	r3, #1
 8007270:	b2da      	uxtb	r2, r3
 8007272:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <_cbOnUARTTx+0x5c>)
 8007274:	705a      	strb	r2, [r3, #1]
    r = 1;
 8007276:	2301      	movs	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
    goto Done;
 800727a:	e00f      	b.n	800729c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <_cbOnUARTTx+0x5c>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4618      	mov	r0, r3
 8007286:	f7fd fe9b 	bl	8004fc0 <SEGGER_RTT_ReadUpBufferNoLock>
 800728a:	4603      	mov	r3, r0
 800728c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	da02      	bge.n	800729a <_cbOnUARTTx+0x4e>
    r = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e000      	b.n	800729c <_cbOnUARTTx+0x50>
  }
Done:
 800729a:	bf00      	nop
  return r;
 800729c:	68fb      	ldr	r3, [r7, #12]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000014 	.word	0x20000014
 80072ac:	080076c4 	.word	0x080076c4

080072b0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80072b8:	4a04      	ldr	r2, [pc, #16]	; (80072cc <SEGGER_UART_init+0x1c>)
 80072ba:	4905      	ldr	r1, [pc, #20]	; (80072d0 <SEGGER_UART_init+0x20>)
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f863 	bl	8007388 <HIF_UART_Init>
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	0800720d 	.word	0x0800720d
 80072d0:	0800724d 	.word	0x0800724d

080072d4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80072da:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <USART2_IRQHandler+0x80>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80072ea:	4b1b      	ldr	r3, [pc, #108]	; (8007358 <USART2_IRQHandler+0x84>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 030b 	and.w	r3, r3, #11
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <USART2_IRQHandler+0x88>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <USART2_IRQHandler+0x88>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	4610      	mov	r0, r2
 800730c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01a      	beq.n	800734e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <USART2_IRQHandler+0x8c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d015      	beq.n	800734c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <USART2_IRQHandler+0x8c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	1dfa      	adds	r2, r7, #7
 8007326:	4610      	mov	r0, r2
 8007328:	4798      	blx	r3
 800732a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <USART2_IRQHandler+0x90>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <USART2_IRQHandler+0x90>)
 8007338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e006      	b.n	800734e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007340:	4b04      	ldr	r3, [pc, #16]	; (8007354 <USART2_IRQHandler+0x80>)
 8007342:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007344:	79fa      	ldrb	r2, [r7, #7]
 8007346:	4b04      	ldr	r3, [pc, #16]	; (8007358 <USART2_IRQHandler+0x84>)
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e000      	b.n	800734e <USART2_IRQHandler+0x7a>
      return;
 800734c:	bf00      	nop
    }
  }
}
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40004400 	.word	0x40004400
 8007358:	40004404 	.word	0x40004404
 800735c:	2001a8a4 	.word	0x2001a8a4
 8007360:	2001a8a8 	.word	0x2001a8a8
 8007364:	4000440c 	.word	0x4000440c

08007368 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a04      	ldr	r2, [pc, #16]	; (8007384 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007376:	6013      	str	r3, [r2, #0]
}
 8007378:	bf00      	nop
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	4000440c 	.word	0x4000440c

08007388 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007394:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <HIF_UART_Init+0xc8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HIF_UART_Init+0xc8>)
 800739a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800739e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80073a0:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <HIF_UART_Init+0xcc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <HIF_UART_Init+0xcc>)
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80073ac:	4b2a      	ldr	r3, [pc, #168]	; (8007458 <HIF_UART_Init+0xd0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80073c0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80073c2:	4a25      	ldr	r2, [pc, #148]	; (8007458 <HIF_UART_Init+0xd0>)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80073c8:	4b24      	ldr	r3, [pc, #144]	; (800745c <HIF_UART_Init+0xd4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80073dc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80073de:	4a1f      	ldr	r2, [pc, #124]	; (800745c <HIF_UART_Init+0xd4>)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80073e4:	4b1e      	ldr	r3, [pc, #120]	; (8007460 <HIF_UART_Init+0xd8>)
 80073e6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80073ea:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80073ec:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <HIF_UART_Init+0xdc>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80073f2:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <HIF_UART_Init+0xe0>)
 80073f4:	2280      	movs	r2, #128	; 0x80
 80073f6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HIF_UART_Init+0xe4>)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	3301      	adds	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	d302      	bcc.n	800741e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8007418:	f640 73ff 	movw	r3, #4095	; 0xfff
 800741c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4a11      	ldr	r2, [pc, #68]	; (8007470 <HIF_UART_Init+0xe8>)
 800742a:	b29b      	uxth	r3, r3
 800742c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <HIF_UART_Init+0xec>)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8007434:	4a10      	ldr	r2, [pc, #64]	; (8007478 <HIF_UART_Init+0xf0>)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800743a:	2106      	movs	r1, #6
 800743c:	2026      	movs	r0, #38	; 0x26
 800743e:	f7ff feab 	bl	8007198 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007442:	2026      	movs	r0, #38	; 0x26
 8007444:	f7ff fe8a 	bl	800715c <__NVIC_EnableIRQ>
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40023840 	.word	0x40023840
 8007454:	40023830 	.word	0x40023830
 8007458:	40020020 	.word	0x40020020
 800745c:	40020000 	.word	0x40020000
 8007460:	4000440c 	.word	0x4000440c
 8007464:	40004410 	.word	0x40004410
 8007468:	40004414 	.word	0x40004414
 800746c:	0501bd00 	.word	0x0501bd00
 8007470:	40004408 	.word	0x40004408
 8007474:	2001a8a4 	.word	0x2001a8a4
 8007478:	2001a8a8 	.word	0x2001a8a8

0800747c <__libc_init_array>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4d0d      	ldr	r5, [pc, #52]	; (80074b4 <__libc_init_array+0x38>)
 8007480:	4c0d      	ldr	r4, [pc, #52]	; (80074b8 <__libc_init_array+0x3c>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	2600      	movs	r6, #0
 8007488:	42a6      	cmp	r6, r4
 800748a:	d109      	bne.n	80074a0 <__libc_init_array+0x24>
 800748c:	4d0b      	ldr	r5, [pc, #44]	; (80074bc <__libc_init_array+0x40>)
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <__libc_init_array+0x44>)
 8007490:	f000 f83e 	bl	8007510 <_init>
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	2600      	movs	r6, #0
 800749a:	42a6      	cmp	r6, r4
 800749c:	d105      	bne.n	80074aa <__libc_init_array+0x2e>
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a4:	4798      	blx	r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7ee      	b.n	8007488 <__libc_init_array+0xc>
 80074aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ae:	4798      	blx	r3
 80074b0:	3601      	adds	r6, #1
 80074b2:	e7f2      	b.n	800749a <__libc_init_array+0x1e>
 80074b4:	080076d0 	.word	0x080076d0
 80074b8:	080076d0 	.word	0x080076d0
 80074bc:	080076d0 	.word	0x080076d0
 80074c0:	080076d4 	.word	0x080076d4

080074c4 <memcmp>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	3901      	subs	r1, #1
 80074c8:	4402      	add	r2, r0
 80074ca:	4290      	cmp	r0, r2
 80074cc:	d101      	bne.n	80074d2 <memcmp+0xe>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e005      	b.n	80074de <memcmp+0x1a>
 80074d2:	7803      	ldrb	r3, [r0, #0]
 80074d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d001      	beq.n	80074e0 <memcmp+0x1c>
 80074dc:	1b18      	subs	r0, r3, r4
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	3001      	adds	r0, #1
 80074e2:	e7f2      	b.n	80074ca <memcmp+0x6>

080074e4 <memcpy>:
 80074e4:	440a      	add	r2, r1
 80074e6:	4291      	cmp	r1, r2
 80074e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ec:	d100      	bne.n	80074f0 <memcpy+0xc>
 80074ee:	4770      	bx	lr
 80074f0:	b510      	push	{r4, lr}
 80074f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074fa:	4291      	cmp	r1, r2
 80074fc:	d1f9      	bne.n	80074f2 <memcpy+0xe>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
