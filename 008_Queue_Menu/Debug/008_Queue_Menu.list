
008_Queue_Menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008528  08008528  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00019314  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001939c  2001939c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fc5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d4  00000000  00000000  0003707d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a0f  00000000  00000000  0003cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ae0  00000000  00000000  0006176f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8a1  00000000  00000000  0007a24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154af0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005558  00000000  00000000  00154b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008188 	.word	0x08008188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008188 	.word	0x08008188

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 f9f2 	bl	80069ac <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000012c 	.word	0x2000012c

080005e4 <led_effect>:

void led_effect(int n )
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 fad9 	bl	8005bb0 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 f9ce 	bl	80069ac <xTimerGenericCommand>

}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	2000012c 	.word	0x2000012c

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 fe2e 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 fe28 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 fe22 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 fe1c 	bl	8002288 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 fe10 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 fe0a 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 fe04 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 fdfe 	bl	8002288 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 fdf2 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 fdec 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 fde6 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 fde0 	bl	8002288 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 fdd4 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 fdce 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 fdc8 	bl	8002288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 fdc2 	bl	8002288 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fda5 	bl	8002288 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <LED_effect1>:


void LED_effect1(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <LED_effect1+0x28>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_effect1+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <LED_effect1+0x1e>
 8000770:	f7ff ff54 	bl	800061c <turn_off_all_leds>
}
 8000774:	e001      	b.n	800077a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000776:	f7ff ff6f 	bl	8000658 <turn_on_all_leds>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <LED_effect2>:


void LED_effect2(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <LED_effect2+0x28>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_effect2+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <LED_effect2+0x1e>
 800079c:	f7ff ff98 	bl	80006d0 <turn_on_even_leds>
}
 80007a0:	e001      	b.n	80007a6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007a2:	f7ff ff77 	bl	8000694 <turn_on_odd_leds>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff9a 	bl	800070c <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a4 	.word	0x200000a4

080007e0 <LED_effect4>:


void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff82 	bl	800070c <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000a8 	.word	0x200000a8

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 f9e5 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f8ff 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9b9 	bl	8000b94 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f967 	bl	8000af4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f98b 	bl	8000b40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   status=xTaskCreate(menu_task, "menuTask", 250, NULL, 2, &handle_menu_task);
 800082a:	4b66      	ldr	r3, [pc, #408]	; (80009c4 <main+0x1b4>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	4964      	ldr	r1, [pc, #400]	; (80009c8 <main+0x1b8>)
 8000838:	4864      	ldr	r0, [pc, #400]	; (80009cc <main+0x1bc>)
 800083a:	f004 ff77 	bl	800572c <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]
   /*ConfigASSERT() is set to trigger a breakpoint if the assertion fails.*/
   configASSERT(status==pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0x4a>

   status=xTaskCreate(led_task, "LEDTask", 250, NULL, 2, &handle_led_task);
 800085c:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <main+0x1c0>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	495a      	ldr	r1, [pc, #360]	; (80009d4 <main+0x1c4>)
 800086a:	485b      	ldr	r0, [pc, #364]	; (80009d8 <main+0x1c8>)
 800086c:	f004 ff5e 	bl	800572c <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]
   configASSERT(status==pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0x7e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0x7c>

   status=xTaskCreate(cmd_task, "cmdTask", 250, NULL, 2, &handle_cmd_task);
 800088e:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x1cc>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	4951      	ldr	r1, [pc, #324]	; (80009e0 <main+0x1d0>)
 800089c:	4851      	ldr	r0, [pc, #324]	; (80009e4 <main+0x1d4>)
 800089e:	f004 ff45 	bl	800572c <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]
   configASSERT(status==pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0xb0>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	617b      	str	r3, [r7, #20]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0xae>

   status=xTaskCreate(print_task, "printTask", 250, NULL, 2, &handle_print_task);
 80008c0:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <main+0x1d8>)
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2302      	movs	r3, #2
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	4947      	ldr	r1, [pc, #284]	; (80009ec <main+0x1dc>)
 80008ce:	4848      	ldr	r0, [pc, #288]	; (80009f0 <main+0x1e0>)
 80008d0:	f004 ff2c 	bl	800572c <xTaskCreate>
 80008d4:	6238      	str	r0, [r7, #32]
   configASSERT(status==pdPASS);
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00a      	beq.n	80008f2 <main+0xe2>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	613b      	str	r3, [r7, #16]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0xe0>

   status=xTaskCreate(rtc_task, "rtcTask", 250, NULL, 2, &handle_rtc_task);
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <main+0x1e4>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	493e      	ldr	r1, [pc, #248]	; (80009f8 <main+0x1e8>)
 8000900:	483e      	ldr	r0, [pc, #248]	; (80009fc <main+0x1ec>)
 8000902:	f004 ff13 	bl	800572c <xTaskCreate>
 8000906:	6238      	str	r0, [r7, #32]
   configASSERT(status==pdPASS);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00a      	beq.n	8000924 <main+0x114>
        __asm volatile
 800090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000912:	f383 8811 	msr	BASEPRI, r3
 8000916:	f3bf 8f6f 	isb	sy
 800091a:	f3bf 8f4f 	dsb	sy
 800091e:	60fb      	str	r3, [r7, #12]
    }
 8000920:	bf00      	nop
 8000922:	e7fe      	b.n	8000922 <main+0x112>

   q_data=xQueueCreate(10,sizeof(char));
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	200a      	movs	r0, #10
 800092a:	f004 f9b3 	bl	8004c94 <xQueueGenericCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <main+0x1f0>)
 8000932:	6013      	str	r3, [r2, #0]
   configASSERT(q_data!=NULL);
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <main+0x1f0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x142>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	60bb      	str	r3, [r7, #8]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x140>

   q_print=xQueueCreate(10,sizeof(size_t));
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	200a      	movs	r0, #10
 8000958:	f004 f99c 	bl	8004c94 <xQueueGenericCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <main+0x1f4>)
 8000960:	6013      	str	r3, [r2, #0]
   configASSERT(q_data!=NULL);
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <main+0x1f0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <main+0x170>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	607b      	str	r3, [r7, #4]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x16e>

   for(int i=0;i<4;i++){
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e012      	b.n	80009ac <main+0x19c>
	   handle_led_timer[i]= xTimerCreate("ledTimer", pdMS_TO_TICKS(250), pdTRUE, (void*)i+1, led_effect_callback);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <main+0x1f8>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	21fa      	movs	r1, #250	; 0xfa
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <main+0x1fc>)
 8000998:	f005 ffac 	bl	80068f4 <xTimerCreate>
 800099c:	4602      	mov	r2, r0
 800099e:	491c      	ldr	r1, [pc, #112]	; (8000a10 <main+0x200>)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(int i=0;i<4;i++){
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	3301      	adds	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	dde9      	ble.n	8000986 <main+0x176>
   }

   HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data,1 );
 80009b2:	2201      	movs	r2, #1
 80009b4:	4917      	ldr	r1, [pc, #92]	; (8000a14 <main+0x204>)
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <main+0x208>)
 80009b8:	f003 f8b7 	bl	8003b2a <HAL_UART_Receive_IT>

   vTaskStartScheduler();
 80009bc:	f004 fffc 	bl	80059b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x1b0>
 80009c2:	bf00      	nop
 80009c4:	20000110 	.word	0x20000110
 80009c8:	080081a0 	.word	0x080081a0
 80009cc:	08001411 	.word	0x08001411
 80009d0:	20000114 	.word	0x20000114
 80009d4:	080081ac 	.word	0x080081ac
 80009d8:	08001a5d 	.word	0x08001a5d
 80009dc:	20000120 	.word	0x20000120
 80009e0:	080081b4 	.word	0x080081b4
 80009e4:	08001941 	.word	0x08001941
 80009e8:	2000011c 	.word	0x2000011c
 80009ec:	080081bc 	.word	0x080081bc
 80009f0:	08001901 	.word	0x08001901
 80009f4:	20000118 	.word	0x20000118
 80009f8:	080081c8 	.word	0x080081c8
 80009fc:	08001541 	.word	0x08001541
 8000a00:	20000124 	.word	0x20000124
 8000a04:	20000128 	.word	0x20000128
 8000a08:	08000e51 	.word	0x08000e51
 8000a0c:	080081d0 	.word	0x080081d0
 8000a10:	2000012c 	.word	0x2000012c
 8000a14:	2000013c 	.word	0x2000013c
 8000a18:	200000cc 	.word	0x200000cc

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	; 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 ff44 	bl	80078b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xd0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a28      	ldr	r2, [pc, #160]	; (8000aec <SystemClock_Config+0xd0>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <SystemClock_Config+0xd0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a90:	2308      	movs	r3, #8
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a94:	2332      	movs	r3, #50	; 0x32
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fc09 	bl	80022bc <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ab0:	f000 fa52 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fe6a 	bl	80027ac <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ade:	f000 fa3b 	bl	8000f58 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_RTC_Init+0x44>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_RTC_Init+0x48>)
 8000afc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b06:	227f      	movs	r2, #127	; 0x7f
 8000b08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b0c:	22ff      	movs	r2, #255	; 0xff
 8000b0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_RTC_Init+0x44>)
 8000b24:	f002 f976 	bl	8002e14 <HAL_RTC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b2e:	f000 fa13 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	40002800 	.word	0x40002800

08000b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART2_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART2_UART_Init+0x4c>)
 8000b78:	f002 fef8 	bl	800396c <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f9e9 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000cc 	.word	0x200000cc
 8000b90:	40004400 	.word	0x40004400

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	4ba2      	ldr	r3, [pc, #648]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4aa1      	ldr	r2, [pc, #644]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b9f      	ldr	r3, [pc, #636]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	4b9b      	ldr	r3, [pc, #620]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a9a      	ldr	r2, [pc, #616]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b98      	ldr	r3, [pc, #608]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b94      	ldr	r3, [pc, #592]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a93      	ldr	r2, [pc, #588]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b91      	ldr	r3, [pc, #580]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b8d      	ldr	r3, [pc, #564]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a8c      	ldr	r2, [pc, #560]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b8a      	ldr	r3, [pc, #552]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b86      	ldr	r3, [pc, #536]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a85      	ldr	r2, [pc, #532]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b83      	ldr	r3, [pc, #524]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a7e      	ldr	r2, [pc, #504]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <MX_GPIO_Init+0x2a4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2108      	movs	r1, #8
 8000c56:	4879      	ldr	r0, [pc, #484]	; (8000e3c <MX_GPIO_Init+0x2a8>)
 8000c58:	f001 fb16 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4877      	ldr	r0, [pc, #476]	; (8000e40 <MX_GPIO_Init+0x2ac>)
 8000c62:	f001 fb11 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c66:	2200      	movs	r2, #0
 8000c68:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c6c:	4875      	ldr	r0, [pc, #468]	; (8000e44 <MX_GPIO_Init+0x2b0>)
 8000c6e:	f001 fb0b 	bl	8002288 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c72:	2308      	movs	r3, #8
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	486c      	ldr	r0, [pc, #432]	; (8000e3c <MX_GPIO_Init+0x2a8>)
 8000c8a:	f001 f961 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4866      	ldr	r0, [pc, #408]	; (8000e40 <MX_GPIO_Init+0x2ac>)
 8000ca6:	f001 f953 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	485e      	ldr	r0, [pc, #376]	; (8000e40 <MX_GPIO_Init+0x2ac>)
 8000cc6:	f001 f943 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	485a      	ldr	r0, [pc, #360]	; (8000e48 <MX_GPIO_Init+0x2b4>)
 8000ce0:	f001 f936 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4852      	ldr	r0, [pc, #328]	; (8000e48 <MX_GPIO_Init+0x2b4>)
 8000d00:	f001 f926 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d04:	23e0      	movs	r3, #224	; 0xe0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d14:	2305      	movs	r3, #5
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484a      	ldr	r0, [pc, #296]	; (8000e48 <MX_GPIO_Init+0x2b4>)
 8000d20:	f001 f916 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d24:	2304      	movs	r3, #4
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4845      	ldr	r0, [pc, #276]	; (8000e4c <MX_GPIO_Init+0x2b8>)
 8000d38:	f001 f90a 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	483c      	ldr	r0, [pc, #240]	; (8000e4c <MX_GPIO_Init+0x2b8>)
 8000d5a:	f001 f8f9 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d5e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d62:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4833      	ldr	r0, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x2b0>)
 8000d78:	f001 f8ea 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4829      	ldr	r0, [pc, #164]	; (8000e40 <MX_GPIO_Init+0x2ac>)
 8000d9a:	f001 f8d9 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4825      	ldr	r0, [pc, #148]	; (8000e48 <MX_GPIO_Init+0x2b4>)
 8000db4:	f001 f8cc 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000db8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x2b4>)
 8000dd6:	f001 f8bb 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_GPIO_Init+0x2b0>)
 8000dee:	f001 f8af 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000df2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e04:	2304      	movs	r3, #4
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <MX_GPIO_Init+0x2b8>)
 8000e10:	f001 f89e 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0x2a8>)
 8000e2a:	f001 f891 	bl	8001f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400

08000e50 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f006 f887 	bl	8006f6c <pvTimerGetTimerID>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d816      	bhi.n	8000e98 <led_effect_callback+0x48>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <led_effect_callback+0x20>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e87 	.word	0x08000e87
 8000e78:	08000e8d 	.word	0x08000e8d
 8000e7c:	08000e93 	.word	0x08000e93
	 {
	 case 1 :
		 LED_effect1();
 8000e80:	f7ff fc6a 	bl	8000758 <LED_effect1>
		 break;
 8000e84:	e008      	b.n	8000e98 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000e86:	f7ff fc7d 	bl	8000784 <LED_effect2>
		 break;
 8000e8a:	e005      	b.n	8000e98 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000e8c:	f7ff fc90 	bl	80007b0 <LED_effect3>
		 break;
 8000e90:	e002      	b.n	8000e98 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000e92:	f7ff fca5 	bl	80007e0 <LED_effect4>
	 }


}
 8000e96:	e7ff      	b.n	8000e98 <led_effect_callback+0x48>
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(!xQueueIsQueueFullFromISR(q_data))
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_UART_RxCpltCallback+0x84>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fbb8 	bl	8005622 <xQueueIsQueueFullFromISR>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <HAL_UART_RxCpltCallback+0x28>
	{
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_RxCpltCallback+0x84>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4919      	ldr	r1, [pc, #100]	; (8000f28 <HAL_UART_RxCpltCallback+0x88>)
 8000ec2:	f004 f867 	bl	8004f94 <xQueueGenericSendFromISR>
 8000ec6:	e013      	b.n	8000ef0 <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		if(user_data=='\n')
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_UART_RxCpltCallback+0x88>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	d10e      	bne.n	8000ef0 <HAL_UART_RxCpltCallback+0x50>
		{
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_RxCpltCallback+0x84>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f107 010f 	add.w	r1, r7, #15
 8000eda:	2200      	movs	r2, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f9e3 	bl	80052a8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_UART_RxCpltCallback+0x84>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	490f      	ldr	r1, [pc, #60]	; (8000f28 <HAL_UART_RxCpltCallback+0x88>)
 8000eec:	f004 f852 	bl	8004f94 <xQueueGenericSendFromISR>
		}
	}

	if(user_data=='\n')
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_UART_RxCpltCallback+0x88>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d10a      	bne.n	8000f10 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_UART_RxCpltCallback+0x8c>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f005 fb58 	bl	80065c0 <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart2,(uint8_t*)&user_data,1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	4905      	ldr	r1, [pc, #20]	; (8000f28 <HAL_UART_RxCpltCallback+0x88>)
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_UART_RxCpltCallback+0x90>)
 8000f16:	f002 fe08 	bl	8003b2a <HAL_UART_Receive_IT>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000124 	.word	0x20000124
 8000f28:	2000013c 	.word	0x2000013c
 8000f2c:	20000120 	.word	0x20000120
 8000f30:	200000cc 	.word	0x200000cc

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fe6f 	bl	8001c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <show_time_date>:
 *      Author: ihsan
 */
#include "main.h"

void show_time_date(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2204      	movs	r2, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fca0 	bl	80078b8 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 fc9a 	bl	80078b8 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4821      	ldr	r0, [pc, #132]	; (8001010 <show_time_date+0xac>)
 8000f8c:	f002 f852 	bl	8003034 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <show_time_date+0xac>)
 8000f9a:	f002 f92d 	bl	80031f8 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <show_time_date+0x44>
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <show_time_date+0xb0>)
 8000fa6:	e000      	b.n	8000faa <show_time_date+0x46>
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <show_time_date+0xb4>)
 8000faa:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000fac:	793b      	ldrb	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	797b      	ldrb	r3, [r7, #5]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	9101      	str	r1, [sp, #4]
 8000fbe:	9200      	str	r2, [sp, #0]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <show_time_date+0xb8>)
 8000fc4:	4916      	ldr	r1, [pc, #88]	; (8001020 <show_time_date+0xbc>)
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <show_time_date+0xc0>)
 8000fc8:	f006 fc7e 	bl	80078c8 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <show_time_date+0xc4>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <show_time_date+0xc8>)
 8000fd8:	f003 fede 	bl	8004d98 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000fdc:	7e7b      	ldrb	r3, [r7, #25]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7ebb      	ldrb	r3, [r7, #26]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	7efb      	ldrb	r3, [r7, #27]
 8000fe6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	460b      	mov	r3, r1
 8000fee:	4910      	ldr	r1, [pc, #64]	; (8001030 <show_time_date+0xcc>)
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <show_time_date+0xd0>)
 8000ff2:	f006 fc69 	bl	80078c8 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <show_time_date+0xc4>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	490d      	ldr	r1, [pc, #52]	; (8001038 <show_time_date+0xd4>)
 8001002:	f003 fec9 	bl	8004d98 <xQueueGenericSend>
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000ac 	.word	0x200000ac
 8001014:	080081dc 	.word	0x080081dc
 8001018:	080081e0 	.word	0x080081e0
 800101c:	080081e4 	.word	0x080081e4
 8001020:	080081f8 	.word	0x080081f8
 8001024:	20000140 	.word	0x20000140
 8001028:	20000128 	.word	0x20000128
 800102c:	20000008 	.word	0x20000008
 8001030:	08008210 	.word	0x08008210
 8001034:	20000168 	.word	0x20000168
 8001038:	2000000c 	.word	0x2000000c

0800103c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001056:	2200      	movs	r2, #0
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <rtc_configure_time+0x2c>)
 800105c:	f001 ff50 	bl	8002f00 <HAL_RTC_SetTime>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000ac 	.word	0x200000ac

0800106c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <rtc_configure_date+0x1c>)
 800107a:	f002 f839 	bl	80030f0 <HAL_RTC_SetDate>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000ac 	.word	0x200000ac

0800108c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	if(time){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00d      	beq.n	80010b8 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	d807      	bhi.n	80010b4 <validate_rtc_information+0x28>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	785b      	ldrb	r3, [r3, #1]
 80010a8:	2b3b      	cmp	r3, #59	; 0x3b
 80010aa:	d803      	bhi.n	80010b4 <validate_rtc_information+0x28>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	2b3b      	cmp	r3, #59	; 0x3b
 80010b2:	d901      	bls.n	80010b8 <validate_rtc_information+0x2c>
			return 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e015      	b.n	80010e4 <validate_rtc_information+0x58>
	}

	if(date){
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d011      	beq.n	80010e2 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	789b      	ldrb	r3, [r3, #2]
 80010c2:	2b1f      	cmp	r3, #31
 80010c4:	d80b      	bhi.n	80010de <validate_rtc_information+0x52>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d807      	bhi.n	80010de <validate_rtc_information+0x52>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	78db      	ldrb	r3, [r3, #3]
 80010d2:	2b63      	cmp	r3, #99	; 0x63
 80010d4:	d803      	bhi.n	80010de <validate_rtc_information+0x52>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d901      	bls.n	80010e2 <validate_rtc_information+0x56>
			return 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <validate_rtc_information+0x58>
	}

	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_MspInit+0x4c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x4c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_RTC_MspInit+0x4c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d111      	bne.n	8001184 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fd6e 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800117a:	f7ff feed 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RTC_MspInit+0x50>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40002800 	.word	0x40002800
 8001190:	42470e3c 	.word	0x42470e3c

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_UART_MspInit+0x94>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d133      	bne.n	800121e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_UART_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_UART_MspInit+0x98>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_UART_MspInit+0x9c>)
 800120a:	f000 fea1 	bl	8001f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2106      	movs	r1, #6
 8001212:	2026      	movs	r0, #38	; 0x26
 8001214:	f000 fde0 	bl	8001dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f000 fdf9 	bl	8001e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_InitTick+0xe4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_InitTick+0xe4>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_InitTick+0xe4>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001260:	f107 0210 	add.w	r2, r7, #16
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fcbe 	bl	8002bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800127a:	f001 fc8f 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 800127e:	6378      	str	r0, [r7, #52]	; 0x34
 8001280:	e004      	b.n	800128c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001282:	f001 fc8b 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8001286:	4603      	mov	r3, r0
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800128c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <HAL_InitTick+0xe8>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3b01      	subs	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_InitTick+0xec>)
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <HAL_InitTick+0xf0>)
 800129e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_InitTick+0xec>)
 80012a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_InitTick+0xec>)
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_InitTick+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_InitTick+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_InitTick+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <HAL_InitTick+0xec>)
 80012c2:	f002 f8a5 	bl	8003410 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d11b      	bne.n	800130c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012d4:	4812      	ldr	r0, [pc, #72]	; (8001320 <HAL_InitTick+0xec>)
 80012d6:	f002 f8f5 	bl	80034c4 <HAL_TIM_Base_Start_IT>
 80012da:	4603      	mov	r3, r0
 80012dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d111      	bne.n	800130c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012e8:	2036      	movs	r0, #54	; 0x36
 80012ea:	f000 fd91 	bl	8001e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d808      	bhi.n	8001306 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2036      	movs	r0, #54	; 0x36
 80012fa:	f000 fd6d 	bl	8001dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_InitTick+0xf4>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e002      	b.n	800130c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800130c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001310:	4618      	mov	r0, r3
 8001312:	3738      	adds	r7, #56	; 0x38
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	431bde83 	.word	0x431bde83
 8001320:	20000190 	.word	0x20000190
 8001324:	40001000 	.word	0x40001000
 8001328:	20000014 	.word	0x20000014

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <USART2_IRQHandler+0x10>)
 800135e:	f002 fc15 	bl	8003b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000cc 	.word	0x200000cc

0800136c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM6_DAC_IRQHandler+0x10>)
 8001372:	f002 f917 	bl	80035a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000190 	.word	0x20000190

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f006 fa4a 	bl	8007848 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20020000 	.word	0x20020000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	200001d8 	.word	0x200001d8
 80013e8:	200193a0 	.word	0x200193a0

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <menu_task>:
#include "main.h"

int extract_command(command_t *cmd);
void process_command(command_t *cmd);
void menu_task(void*parameter)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af02      	add	r7, sp, #8
 8001416:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t menu_choice;
	const char*msg_menu="\n--------------------\n"
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <menu_task+0xd0>)
 800141a:	613b      	str	r3, [r7, #16]
						"******  MENU  ******\n"
						"LED effect 	--->0\n"
						"Date and Time	--->1\n"
						"Exit		--->2\n"
						"--------------------\n";
	const char*msg_inv= "\n____Invalid Entry____\n";
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <menu_task+0xd4>)
 800141e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <menu_task+0xd8>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 0110 	add.w	r1, r7, #16
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	f003 fcb3 	bl	8004d98 <xQueueGenericSend>

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	f04f 32ff 	mov.w	r2, #4294967295
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f004 ff5d 	bl	8006300 <xTaskGenericNotifyWait>
		cmd=(command_t*)cmd_addr;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	61fb      	str	r3, [r7, #28]
		if(cmd->len==1)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d131      	bne.n	80014b6 <menu_task+0xa6>
		{
			menu_choice=(cmd->payload[0]-48);
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3b30      	subs	r3, #48	; 0x30
 8001458:	76fb      	strb	r3, [r7, #27]
			switch(menu_choice){
 800145a:	7efb      	ldrb	r3, [r7, #27]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d034      	beq.n	80014ca <menu_task+0xba>
 8001460:	2b02      	cmp	r3, #2
 8001462:	dc1e      	bgt.n	80014a2 <menu_task+0x92>
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <menu_task+0x5e>
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00d      	beq.n	8001488 <menu_task+0x78>
 800146c:	e019      	b.n	80014a2 <menu_task+0x92>
			case 0:
				currentState=ledEffect;
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <menu_task+0xdc>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <menu_task+0xe0>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	f004 ffbd 	bl	8006400 <xTaskGenericNotify>
				break;
 8001486:	e021      	b.n	80014cc <menu_task+0xbc>
			case 1:
				currentState=RTCMenu;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <menu_task+0xdc>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <menu_task+0xe4>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	f004 ffb0 	bl	8006400 <xTaskGenericNotify>
				break;
 80014a0:	e014      	b.n	80014cc <menu_task+0xbc>
			case 2:
			break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <menu_task+0xd8>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f107 010c 	add.w	r1, r7, #12
 80014aa:	2300      	movs	r3, #0
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	f003 fc72 	bl	8004d98 <xQueueGenericSend>
				continue;
 80014b4:	e013      	b.n	80014de <menu_task+0xce>

			}
		}
		else
		{
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <menu_task+0xd8>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	2300      	movs	r3, #0
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	f003 fc68 	bl	8004d98 <xQueueGenericSend>
			continue;
 80014c8:	e009      	b.n	80014de <menu_task+0xce>
			break;
 80014ca:	bf00      	nop
		}

		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f004 ff11 	bl	8006300 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80014de:	e79f      	b.n	8001420 <menu_task+0x10>
 80014e0:	08008220 	.word	0x08008220
 80014e4:	08008294 	.word	0x08008294
 80014e8:	20000128 	.word	0x20000128
 80014ec:	2000013d 	.word	0x2000013d
 80014f0:	20000114 	.word	0x20000114
 80014f4:	20000118 	.word	0x20000118

080014f8 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	dd0f      	ble.n	8001528 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3301      	adds	r3, #1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	3b30      	subs	r3, #48	; 0x30
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e003      	b.n	8001530 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b30      	subs	r3, #48	; 0x30
 800152e:	60fb      	str	r3, [r7, #12]

	return value;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	b2db      	uxtb	r3, r3

}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <rtc_task>:

void rtc_task(void *param)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b09a      	sub	sp, #104	; 0x68
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 =  "------------------------\n"
 8001548:	4baa      	ldr	r3, [pc, #680]	; (80017f4 <rtc_task+0x2b4>)
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"------------------------\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 800154c:	4baa      	ldr	r3, [pc, #680]	; (80017f8 <rtc_task+0x2b8>)
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
							"Configure Date            ----> 1\n"
							"Exit                      ----> 2\n"
							"Enter your choice here : ";

	const char*msg_inv= "\n____Invalid Entry____\n";
 8001550:	4baa      	ldr	r3, [pc, #680]	; (80017fc <rtc_task+0x2bc>)
 8001552:	647b      	str	r3, [r7, #68]	; 0x44


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001554:	4baa      	ldr	r3, [pc, #680]	; (8001800 <rtc_task+0x2c0>)
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001558:	4baa      	ldr	r3, [pc, #680]	; (8001804 <rtc_task+0x2c4>)
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 800155c:	4baa      	ldr	r3, [pc, #680]	; (8001808 <rtc_task+0x2c8>)
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001560:	4baa      	ldr	r3, [pc, #680]	; (800180c <rtc_task+0x2cc>)
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001564:	4baa      	ldr	r3, [pc, #680]	; (8001810 <rtc_task+0x2d0>)
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001568:	4baa      	ldr	r3, [pc, #680]	; (8001814 <rtc_task+0x2d4>)
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *msg_rtc_yr  = "Enter year(0-99):";
 800156c:	4baa      	ldr	r3, [pc, #680]	; (8001818 <rtc_task+0x2d8>)
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28

	const char *msg_conf = "Configuration successful\n";
 8001570:	4baa      	ldr	r3, [pc, #680]	; (800181c <rtc_task+0x2dc>)
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f004 febd 	bl	8006300 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001586:	4ba6      	ldr	r3, [pc, #664]	; (8001820 <rtc_task+0x2e0>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800158e:	2300      	movs	r3, #0
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	f003 fc00 	bl	8004d98 <xQueueGenericSend>
		show_time_date();
 8001598:	f7ff fce4 	bl	8000f64 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 800159c:	4ba0      	ldr	r3, [pc, #640]	; (8001820 <rtc_task+0x2e0>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80015a4:	2300      	movs	r3, #0
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	f003 fbf5 	bl	8004d98 <xQueueGenericSend>


		while(currentState != mainMenu){
 80015ae:	e18f      	b.n	80018d0 <rtc_task+0x390>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f004 fe9e 	bl	8006300 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(currentState)
 80015c8:	4b96      	ldr	r3, [pc, #600]	; (8001824 <rtc_task+0x2e4>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	f000 80cd 	beq.w	800176c <rtc_task+0x22c>
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	f300 817c 	bgt.w	80018d0 <rtc_task+0x390>
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d002      	beq.n	80015e2 <rtc_task+0xa2>
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d04d      	beq.n	800167c <rtc_task+0x13c>
 80015e0:	e176      	b.n	80018d0 <rtc_task+0x390>
			{
				case RTCMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 80015e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d13b      	bne.n	8001662 <rtc_task+0x122>
					{
						menu_code = cmd->payload[0] - 48;
 80015ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	3b30      	subs	r3, #48	; 0x30
 80015f0:	653b      	str	r3, [r7, #80]	; 0x50
 80015f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d023      	beq.n	8001640 <rtc_task+0x100>
 80015f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	dc24      	bgt.n	8001648 <rtc_task+0x108>
 80015fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <rtc_task+0xcc>
 8001604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001606:	2b01      	cmp	r3, #1
 8001608:	d00d      	beq.n	8001626 <rtc_task+0xe6>
 800160a:	e01d      	b.n	8001648 <rtc_task+0x108>
						switch(menu_code)
						{
						case 0:
							currentState = RTCTimeConfig;
 800160c:	4b85      	ldr	r3, [pc, #532]	; (8001824 <rtc_task+0x2e4>)
 800160e:	2203      	movs	r2, #3
 8001610:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001612:	4b83      	ldr	r3, [pc, #524]	; (8001820 <rtc_task+0x2e0>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800161a:	2300      	movs	r3, #0
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	f003 fbba 	bl	8004d98 <xQueueGenericSend>
							break;
 8001624:	e029      	b.n	800167a <rtc_task+0x13a>
						case 1:
							currentState = RTCDateConfig;
 8001626:	4b7f      	ldr	r3, [pc, #508]	; (8001824 <rtc_task+0x2e4>)
 8001628:	2204      	movs	r2, #4
 800162a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 800162c:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <rtc_task+0x2e0>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001634:	2300      	movs	r3, #0
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	f003 fbad 	bl	8004d98 <xQueueGenericSend>
							break;
 800163e:	e01c      	b.n	800167a <rtc_task+0x13a>
						case 2 :
							currentState = mainMenu;
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <rtc_task+0x2e4>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
							break;
 8001646:	e018      	b.n	800167a <rtc_task+0x13a>
						default:
							currentState = mainMenu;
 8001648:	4b76      	ldr	r3, [pc, #472]	; (8001824 <rtc_task+0x2e4>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800164e:	4b74      	ldr	r3, [pc, #464]	; (8001820 <rtc_task+0x2e0>)
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001656:	2300      	movs	r3, #0
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	f003 fb9c 	bl	8004d98 <xQueueGenericSend>
 8001660:	e136      	b.n	80018d0 <rtc_task+0x390>
						}

					}else{
						currentState = mainMenu;
 8001662:	4b70      	ldr	r3, [pc, #448]	; (8001824 <rtc_task+0x2e4>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001668:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <rtc_task+0x2e0>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001670:	2300      	movs	r3, #0
 8001672:	f04f 32ff 	mov.w	r2, #4294967295
 8001676:	f003 fb8f 	bl	8004d98 <xQueueGenericSend>
					}
					break;}
 800167a:	e129      	b.n	80018d0 <rtc_task+0x390>

				case RTCTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <rtc_task+0x2e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d03b      	beq.n	80016fc <rtc_task+0x1bc>
 8001684:	2b02      	cmp	r3, #2
 8001686:	f300 8123 	bgt.w	80018d0 <rtc_task+0x390>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <rtc_task+0x154>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d01a      	beq.n	80016c8 <rtc_task+0x188>
 8001692:	e11d      	b.n	80018d0 <rtc_task+0x390>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7ff ff2b 	bl	80014f8 <getnumber>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80016a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016ac:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80016ae:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <rtc_task+0x2e8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80016b4:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <rtc_task+0x2e0>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80016bc:	2300      	movs	r3, #0
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
 80016c2:	f003 fb69 	bl	8004d98 <xQueueGenericSend>
								break;}
 80016c6:	e050      	b.n	800176a <rtc_task+0x22a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80016c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f7ff ff11 	bl	80014f8 <getnumber>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 80016dc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016e0:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <rtc_task+0x2e8>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <rtc_task+0x2e0>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80016f0:	2300      	movs	r3, #0
 80016f2:	f04f 32ff 	mov.w	r2, #4294967295
 80016f6:	f003 fb4f 	bl	8004d98 <xQueueGenericSend>
								break;}
 80016fa:	e036      	b.n	800176a <rtc_task+0x22a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 80016fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fef7 	bl	80014f8 <getnumber>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001714:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fcb5 	bl	800108c <validate_rtc_information>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d110      	bne.n	800174a <rtc_task+0x20a>
								{
									rtc_configure_time(&time);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fc85 	bl	800103c <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <rtc_task+0x2e0>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800173a:	2300      	movs	r3, #0
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	f003 fb2a 	bl	8004d98 <xQueueGenericSend>
									show_time_date();
 8001744:	f7ff fc0e 	bl	8000f64 <show_time_date>
 8001748:	e008      	b.n	800175c <rtc_task+0x21c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <rtc_task+0x2e0>)
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001752:	2300      	movs	r3, #0
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	f003 fb1e 	bl	8004d98 <xQueueGenericSend>

								currentState = mainMenu;
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <rtc_task+0x2e4>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <rtc_task+0x2e8>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
								break;}
 8001768:	bf00      	nop
						}

					break;}
 800176a:	e0b1      	b.n	80018d0 <rtc_task+0x390>
				case RTCDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <rtc_task+0x2e8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	f200 80ac 	bhi.w	80018ce <rtc_task+0x38e>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <rtc_task+0x23c>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017c1 	.word	0x080017c1
 8001784:	08001861 	.word	0x08001861
 8001788:	0800182d 	.word	0x0800182d
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 800178c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800178e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff feaf 	bl	80014f8 <getnumber>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 80017a0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80017a4:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <rtc_task+0x2e8>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <rtc_task+0x2e0>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017b4:	2300      	movs	r3, #0
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	f003 faed 	bl	8004d98 <xQueueGenericSend>
								break;}
 80017be:	e086      	b.n	80018ce <rtc_task+0x38e>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 80017c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f7ff fe95 	bl	80014f8 <getnumber>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 80017d4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80017d8:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <rtc_task+0x2e8>)
 80017dc:	2203      	movs	r2, #3
 80017de:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <rtc_task+0x2e0>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80017e8:	2300      	movs	r3, #0
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	f003 fad3 	bl	8004d98 <xQueueGenericSend>
								break;}
 80017f2:	e06c      	b.n	80018ce <rtc_task+0x38e>
 80017f4:	080082ac 	.word	0x080082ac
 80017f8:	080082f8 	.word	0x080082f8
 80017fc:	08008294 	.word	0x08008294
 8001800:	08008378 	.word	0x08008378
 8001804:	0800838c 	.word	0x0800838c
 8001808:	080083a4 	.word	0x080083a4
 800180c:	080083bc 	.word	0x080083bc
 8001810:	080083d0 	.word	0x080083d0
 8001814:	080083e4 	.word	0x080083e4
 8001818:	080083fc 	.word	0x080083fc
 800181c:	08008410 	.word	0x08008410
 8001820:	20000128 	.word	0x20000128
 8001824:	2000013d 	.word	0x2000013d
 8001828:	200001dc 	.word	0x200001dc
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 800182c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800182e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4619      	mov	r1, r3
 8001834:	4610      	mov	r0, r2
 8001836:	f7ff fe5f 	bl	80014f8 <getnumber>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001840:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001844:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <rtc_task+0x3b0>)
 8001848:	2202      	movs	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <rtc_task+0x3b4>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001854:	2300      	movs	r3, #0
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	f003 fa9d 	bl	8004d98 <xQueueGenericSend>
								break;}
 800185e:	e036      	b.n	80018ce <rtc_task+0x38e>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff fe45 	bl	80014f8 <getnumber>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001874:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001878:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4619      	mov	r1, r3
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fc03 	bl	800108c <validate_rtc_information>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d110      	bne.n	80018ae <rtc_task+0x36e>
								{
									rtc_configure_date(&date);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbeb 	bl	800106c <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <rtc_task+0x3b4>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	f003 fa78 	bl	8004d98 <xQueueGenericSend>
									show_time_date();
 80018a8:	f7ff fb5c 	bl	8000f64 <show_time_date>
 80018ac:	e008      	b.n	80018c0 <rtc_task+0x380>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <rtc_task+0x3b4>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80018b6:	2300      	movs	r3, #0
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	f003 fa6c 	bl	8004d98 <xQueueGenericSend>

								currentState = mainMenu;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <rtc_task+0x3b8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <rtc_task+0x3b0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
								break;}
 80018cc:	bf00      	nop
						}


					break;}
 80018ce:	bf00      	nop
		while(currentState != mainMenu){
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <rtc_task+0x3b8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f47f ae6b 	bne.w	80015b0 <rtc_task+0x70>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <rtc_task+0x3bc>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	f004 fd8a 	bl	8006400 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018ec:	e642      	b.n	8001574 <rtc_task+0x34>
 80018ee:	bf00      	nop
 80018f0:	200001dc 	.word	0x200001dc
 80018f4:	20000128 	.word	0x20000128
 80018f8:	2000013d 	.word	0x2000013d
 80018fc:	20000110 	.word	0x20000110

08001900 <print_task>:
		}//while super loop end
}


void print_task(void*parameter)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	uint32_t*msg;
	while(1)
	{
		xQueueReceive(q_print, (void*)&msg,portMAX_DELAY);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <print_task+0x38>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f107 010c 	add.w	r1, r7, #12
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fbe7 	bl	80050e8 <xQueueReceive>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg , strlen((char*)msg), HAL_MAX_DELAY);
 800191a:	68fc      	ldr	r4, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc60 	bl	80001e4 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	4621      	mov	r1, r4
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <print_task+0x3c>)
 8001930:	f002 f869 	bl	8003a06 <HAL_UART_Transmit>
		xQueueReceive(q_print, (void*)&msg,portMAX_DELAY);
 8001934:	e7e8      	b.n	8001908 <print_task+0x8>
 8001936:	bf00      	nop
 8001938:	20000128 	.word	0x20000128
 800193c:	200000cc 	.word	0x200000cc

08001940 <cmd_task>:
	}
}

void cmd_task(void*parameter)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	while(1){
	status=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2000      	movs	r0, #0
 8001956:	f004 fcd3 	bl	8006300 <xTaskGenericNotifyWait>
 800195a:	61f8      	str	r0, [r7, #28]
		if(status==pdTRUE)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d1f2      	bne.n	8001948 <cmd_task+0x8>
		{
			process_command(&cmd);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f802 	bl	8001970 <process_command>
	status=xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800196c:	e7ec      	b.n	8001948 <cmd_task+0x8>
	...

08001970 <process_command>:

	}
}

void process_command(command_t* cmd)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f835 	bl	80019e8 <extract_command>
	switch(currentState)
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <process_command+0x68>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b04      	cmp	r3, #4
 8001984:	dc24      	bgt.n	80019d0 <process_command+0x60>
 8001986:	2b02      	cmp	r3, #2
 8001988:	da18      	bge.n	80019bc <process_command+0x4c>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <process_command+0x24>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d00a      	beq.n	80019a8 <process_command+0x38>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	break;
	}


}
 8001992:	e01d      	b.n	80019d0 <process_command+0x60>
		xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <process_command+0x6c>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2303      	movs	r3, #3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f004 fd2d 	bl	8006400 <xTaskGenericNotify>
		break;
 80019a6:	e013      	b.n	80019d0 <process_command+0x60>
		xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <process_command+0x70>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2303      	movs	r3, #3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f004 fd23 	bl	8006400 <xTaskGenericNotify>
		break;
 80019ba:	e009      	b.n	80019d0 <process_command+0x60>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <process_command+0x74>)
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2303      	movs	r3, #3
 80019c8:	2100      	movs	r1, #0
 80019ca:	f004 fd19 	bl	8006400 <xTaskGenericNotify>
	break;
 80019ce:	bf00      	nop
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000013d 	.word	0x2000013d
 80019dc:	20000110 	.word	0x20000110
 80019e0:	20000114 	.word	0x20000114
 80019e4:	20000118 	.word	0x20000118

080019e8 <extract_command>:
int extract_command(command_t *cmd)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint8_t item;
	uint8_t i=0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	75fb      	strb	r3, [r7, #23]

	status=uxQueueMessagesWaiting(q_data);
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <extract_command+0x70>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fce4 	bl	80053c6 <uxQueueMessagesWaiting>
 80019fe:	4603      	mov	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]
	if(!status)return -1;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <extract_command+0x26>
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	e020      	b.n	8001a50 <extract_command+0x68>
	do{
		status=xQueueReceive(q_data,&item,0);
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <extract_command+0x70>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f107 010f 	add.w	r1, r7, #15
 8001a16:	2200      	movs	r2, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fb65 	bl	80050e8 <xQueueReceive>
 8001a1e:	6138      	str	r0, [r7, #16]
		if(status==pdTRUE)cmd->payload[i++]=item;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d106      	bne.n	8001a34 <extract_command+0x4c>
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	75fa      	strb	r2, [r7, #23]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	7bf9      	ldrb	r1, [r7, #15]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	5499      	strb	r1, [r3, r2]
	}
	while(item!='\n');
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d1e9      	bne.n	8001a0e <extract_command+0x26>
	cmd->len=i-1;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	461a      	mov	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]
	cmd->payload[i-1]='\0';
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	54d1      	strb	r1, [r2, r3]
return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000124 	.word	0x20000124

08001a5c <led_task>:


void led_task(void *parameter)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "-----------------------\n"
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <led_task+0x10c>)
 8001a66:	60fb      	str	r3, [r7, #12]
						  "|      LED Effect     |\n"
						  "-----------------------\n"
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";
	const char*msg_inv= "\n____Invalid Entry____\n";
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <led_task+0x110>)
 8001a6a:	60bb      	str	r3, [r7, #8]

	while(1){
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f004 fc41 	bl	8006300 <xTaskGenericNotifyWait>
		/*TODO: Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <led_task+0x114>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f107 010c 	add.w	r1, r7, #12
 8001a86:	2300      	movs	r3, #0
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	f003 f984 	bl	8004d98 <xQueueGenericSend>
		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f004 fc2e 	bl	8006300 <xTaskGenericNotifyWait>
		cmd=(command_t*)cmd_addr;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d844      	bhi.n	8001b3a <led_task+0xde>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4930      	ldr	r1, [pc, #192]	; (8001b74 <led_task+0x118>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fb8b 	bl	80001d0 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <led_task+0x6a>
				led_effect_stop();
 8001ac0:	f7fe fd70 	bl	80005a4 <led_effect_stop>
 8001ac4:	e042      	b.n	8001b4c <led_task+0xf0>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	492b      	ldr	r1, [pc, #172]	; (8001b78 <led_task+0x11c>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fb80 	bl	80001d0 <strcmp>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <led_task+0x82>
				led_effect(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7fe fd84 	bl	80005e4 <led_effect>
 8001adc:	e036      	b.n	8001b4c <led_task+0xf0>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4926      	ldr	r1, [pc, #152]	; (8001b7c <led_task+0x120>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb74 	bl	80001d0 <strcmp>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <led_task+0x9a>
				led_effect(2);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7fe fd78 	bl	80005e4 <led_effect>
 8001af4:	e02a      	b.n	8001b4c <led_task+0xf0>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	4921      	ldr	r1, [pc, #132]	; (8001b80 <led_task+0x124>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fb68 	bl	80001d0 <strcmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <led_task+0xb2>
				led_effect(3);
 8001b06:	2003      	movs	r0, #3
 8001b08:	f7fe fd6c 	bl	80005e4 <led_effect>
 8001b0c:	e01e      	b.n	8001b4c <led_task+0xf0>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	491c      	ldr	r1, [pc, #112]	; (8001b84 <led_task+0x128>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb5c 	bl	80001d0 <strcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <led_task+0xca>
				led_effect(4);
 8001b1e:	2004      	movs	r0, #4
 8001b20:	f7fe fd60 	bl	80005e4 <led_effect>
 8001b24:	e012      	b.n	8001b4c <led_task+0xf0>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <led_task+0x114>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	f003 f930 	bl	8004d98 <xQueueGenericSend>
 8001b38:	e008      	b.n	8001b4c <led_task+0xf0>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <led_task+0x114>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f107 0108 	add.w	r1, r7, #8
 8001b42:	2300      	movs	r3, #0
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	f003 f926 	bl	8004d98 <xQueueGenericSend>

		currentState = mainMenu;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <led_task+0x12c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

		xTaskNotify(handle_menu_task,0,eNoAction);
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <led_task+0x130>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f004 fc4e 	bl	8006400 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001b64:	e782      	b.n	8001a6c <led_task+0x10>
 8001b66:	bf00      	nop
 8001b68:	0800842c 	.word	0x0800842c
 8001b6c:	08008294 	.word	0x08008294
 8001b70:	20000128 	.word	0x20000128
 8001b74:	080084a4 	.word	0x080084a4
 8001b78:	080084ac 	.word	0x080084ac
 8001b7c:	080084b0 	.word	0x080084b0
 8001b80:	080084b4 	.word	0x080084b4
 8001b84:	080084b8 	.word	0x080084b8
 8001b88:	2000013d 	.word	0x2000013d
 8001b8c:	20000110 	.word	0x20000110

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b96:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bac:	4c0b      	ldr	r4, [pc, #44]	; (8001bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bba:	f7ff fc17 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f005 fe49 	bl	8007854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7fe fe25 	bl	8000810 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bd4:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8001bd8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001bdc:	2001939c 	.word	0x2001939c

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f8d8 	bl	8001dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fb0e 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fa6a 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000018 	.word	0x20000018
 8001c4c:	200001e0 	.word	0x200001e0

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001e0 	.word	0x200001e0

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff4c 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dea:	f7ff ff61 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7ff ffb1 	bl	8001d5c <NVIC_EncodePriority>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff80 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff54 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e3a:	f7ff ff09 	bl	8001c50 <HAL_GetTick>
 8001e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e052      	b.n	8001f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0216 	bic.w	r2, r2, #22
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_DMA_Abort+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0208 	bic.w	r2, r2, #8
 8001e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eae:	e013      	b.n	8001ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb0:	f7ff fece 	bl	8001c50 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e015      	b.n	8001f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e4      	bne.n	8001eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00c      	b.n	8001f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e16b      	b.n	8002244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 815a 	bne.w	800223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d130      	bne.n	8002004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0201 	and.w	r2, r3, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b03      	cmp	r3, #3
 800200e:	d017      	beq.n	8002040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d123      	bne.n	8002094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b60      	ldr	r3, [pc, #384]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a5f      	ldr	r2, [pc, #380]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a5b      	ldr	r2, [pc, #364]	; (8002260 <HAL_GPIO_Init+0x310>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_GPIO_Init+0x314>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x226>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <HAL_GPIO_Init+0x318>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x222>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_GPIO_Init+0x31c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x21e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4f      	ldr	r2, [pc, #316]	; (8002270 <HAL_GPIO_Init+0x320>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_GPIO_Init+0x324>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <HAL_GPIO_Init+0x328>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4c      	ldr	r2, [pc, #304]	; (800227c <HAL_GPIO_Init+0x32c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4b      	ldr	r2, [pc, #300]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20a>
 8002156:	2307      	movs	r3, #7
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215a:	2308      	movs	r3, #8
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4935      	ldr	r1, [pc, #212]	; (8002260 <HAL_GPIO_Init+0x310>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002196:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_GPIO_Init+0x334>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ba:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_GPIO_Init+0x334>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_GPIO_Init+0x334>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_GPIO_Init+0x334>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_GPIO_Init+0x334>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_GPIO_Init+0x334>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_GPIO_Init+0x334>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_GPIO_Init+0x334>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae90 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40013800 	.word	0x40013800
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400
 800226c:	40020800 	.word	0x40020800
 8002270:	40020c00 	.word	0x40020c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40021400 	.word	0x40021400
 800227c:	40021800 	.word	0x40021800
 8002280:	40021c00 	.word	0x40021c00
 8002284:	40013c00 	.word	0x40013c00

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a4:	e003      	b.n	80022ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e267      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d075      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x108>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e242      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x74>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fc6c 	bl	8001c50 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fc68 	bl	8001c50 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e207      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xc0>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fc58 	bl	8001c50 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fc54 	bl	8001c50 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1f3      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0xe8>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1c7      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff fc0d 	bl	8001c50 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff fc09 	bl	8001c50 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1a8      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff fbec 	bl	8001c50 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fbe8 	bl	8001c50 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e187      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff fbcc 	bl	8001c50 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff fbc8 	bl	8001c50 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e167      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x200>
 80024da:	e01b      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fbb5 	bl	8001c50 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	e00e      	b.n	8002508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff fbb1 	bl	8001c50 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d907      	bls.n	8002508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e150      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	42470000 	.word	0x42470000
 8002504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ea      	bne.n	80024ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8097 	beq.w	8002650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b77      	ldr	r3, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7ff fb71 	bl	8001c50 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7ff fb6d 	bl	8001c50 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e10c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2ea>
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a63      	ldr	r2, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x30c>
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5e      	ldr	r2, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a5b      	ldr	r2, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025c8:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fb32 	bl	8001c50 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7ff fb2e 	bl	8001c50 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cb      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ee      	beq.n	80025f0 <HAL_RCC_OscConfig+0x334>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff fb1c 	bl	8001c50 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7ff fb18 	bl	8001c50 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b5      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a1 	beq.w	800279c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d05c      	beq.n	8002720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d141      	bne.n	80026f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff faec 	bl	8001c50 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff fae8 	bl	8001c50 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	491b      	ldr	r1, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7ff fac1 	bl	8001c50 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff fabd 	bl	8001c50 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x416>
 80026f0:	e054      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff faaa 	bl	8001c50 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff faa6 	bl	8001c50 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e045      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
 800271e:	e03d      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e038      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7ff f9d8 	bl	8001c50 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7ff f9d4 	bl	8001c50 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fc6e 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	080084d4 	.word	0x080084d4
 8002970:	20000010 	.word	0x20000010
 8002974:	20000014 	.word	0x20000014

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b094      	sub	sp, #80	; 0x50
 800297e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
 8002984:	2300      	movs	r3, #0
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002988:	2300      	movs	r3, #0
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002990:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d00d      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x40>
 800299c:	2b08      	cmp	r3, #8
 800299e:	f200 80e1 	bhi.w	8002b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x34>
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029aa:	e0db      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029b0:	e0db      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80029b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b6:	e0d8      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
 80029e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ea:	4622      	mov	r2, r4
 80029ec:	462b      	mov	r3, r5
 80029ee:	f04f 0000 	mov.w	r0, #0
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	0159      	lsls	r1, r3, #5
 80029f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fc:	0150      	lsls	r0, r2, #5
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4621      	mov	r1, r4
 8002a04:	1a51      	subs	r1, r2, r1
 8002a06:	6139      	str	r1, [r7, #16]
 8002a08:	4629      	mov	r1, r5
 8002a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	4651      	mov	r1, sl
 8002a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a26:	4651      	mov	r1, sl
 8002a28:	018a      	lsls	r2, r1, #6
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a30:	4659      	mov	r1, fp
 8002a32:	eb63 0901 	sbc.w	r9, r3, r1
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4a:	4690      	mov	r8, r2
 8002a4c:	4699      	mov	r9, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	eb18 0303 	adds.w	r3, r8, r3
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	462b      	mov	r3, r5
 8002a58:	eb49 0303 	adc.w	r3, r9, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	024b      	lsls	r3, r1, #9
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a74:	4621      	mov	r1, r4
 8002a76:	024a      	lsls	r2, r1, #9
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a88:	f7fd fc0a 	bl	80002a0 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4613      	mov	r3, r2
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a94:	e058      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0159      	lsls	r1, r3, #5
 8002abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac2:	0150      	lsls	r0, r2, #5
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4641      	mov	r1, r8
 8002aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ace:	4649      	mov	r1, r9
 8002ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8002aec:	eb63 050b 	sbc.w	r5, r3, fp
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	00eb      	lsls	r3, r5, #3
 8002afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afe:	00e2      	lsls	r2, r4, #3
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	18e3      	adds	r3, r4, r3
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	eb45 0303 	adc.w	r3, r5, r3
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	028b      	lsls	r3, r1, #10
 8002b22:	4621      	mov	r1, r4
 8002b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b28:	4621      	mov	r1, r4
 8002b2a:	028a      	lsls	r2, r1, #10
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b32:	2200      	movs	r2, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	61fa      	str	r2, [r7, #28]
 8002b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3c:	f7fd fbb0 	bl	80002a0 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4613      	mov	r3, r2
 8002b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3750      	adds	r7, #80	; 0x50
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	007a1200 	.word	0x007a1200

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000010 	.word	0x20000010

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba0:	f7ff fff0 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	080084e4 	.word	0x080084e4

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bc8:	f7ff ffdc 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0b5b      	lsrs	r3, r3, #13
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	080084e4 	.word	0x080084e4

08002bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_GetClockConfig+0x5c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_RCC_GetClockConfig+0x60>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0207 	and.w	r2, r3, #7
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d035      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe ffe7 	bl	8001c50 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c86:	f7fe ffe3 	bl	8001c50 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0b0      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	019a      	lsls	r2, r3, #6
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	071b      	lsls	r3, r3, #28
 8002cb0:	4955      	ldr	r1, [pc, #340]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe ffc7 	bl	8001c50 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cc6:	f7fe ffc3 	bl	8001c50 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e090      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8083 	beq.w	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3e      	ldr	r2, [pc, #248]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe ff99 	bl	8001c50 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe ff95 	bl	8001c50 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e062      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02f      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d028      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d68:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d114      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe ff63 	bl	8001c50 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ff5f 	bl	8001c50 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e02a      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dbc:	d10d      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	490d      	ldr	r1, [pc, #52]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
 8002dd8:	e005      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002de4:	6093      	str	r3, [r2, #8]
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df2:	4905      	ldr	r1, [pc, #20]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	42470068 	.word	0x42470068
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42470e40 	.word	0x42470e40

08002e14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e066      	b.n	8002ef8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7f5b      	ldrb	r3, [r3, #29]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe f980 	bl	8001140 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	22ca      	movs	r2, #202	; 0xca
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2253      	movs	r2, #83	; 0x53
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa45 	bl	80032e6 <RTC_EnterInitMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d12c      	bne.n	8002ec0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e78:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68d2      	ldr	r2, [r2, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6919      	ldr	r1, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	041a      	lsls	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa4c 	bl	8003354 <RTC_ExitInitMode>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d113      	bne.n	8002eee <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7f1b      	ldrb	r3, [r3, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_RTC_SetTime+0x1c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e087      	b.n	800302c <HAL_RTC_SetTime+0x12c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d126      	bne.n	8002f7c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa29 	bl	800339e <RTC_ByteToBcd2>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fa22 	bl	800339e <RTC_ByteToBcd2>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f5e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	789b      	ldrb	r3, [r3, #2]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fa1a 	bl	800339e <RTC_ByteToBcd2>
 8002f6a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e018      	b.n	8002fae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f9c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fa2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	22ca      	movs	r2, #202	; 0xca
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2253      	movs	r2, #83	; 0x53
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f991 	bl	80032e6 <RTC_EnterInitMode>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d120      	bne.n	8003010 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fd8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fdc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f9a4 	bl	8003354 <RTC_ExitInitMode>
 800300c:	4603      	mov	r3, r0
 800300e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	771a      	strb	r2, [r3, #28]

  return status;
 800302a:	7cfb      	ldrb	r3, [r7, #19]
}
 800302c:	4618      	mov	r0, r3
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003066:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800306a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	0d9b      	lsrs	r3, r3, #22
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11a      	bne.n	80030e6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f98f 	bl	80033d8 <RTC_Bcd2ToByte>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f986 	bl	80033d8 <RTC_Bcd2ToByte>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	789b      	ldrb	r3, [r3, #2]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f97d 	bl	80033d8 <RTC_Bcd2ToByte>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	7f1b      	ldrb	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_RTC_SetDate+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e071      	b.n	80031f0 <HAL_RTC_SetDate+0x100>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10e      	bne.n	800313c <HAL_RTC_SetDate+0x4c>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	f023 0310 	bic.w	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	330a      	adds	r3, #10
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11c      	bne.n	800317c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	78db      	ldrb	r3, [r3, #3]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f929 	bl	800339e <RTC_ByteToBcd2>
 800314c:	4603      	mov	r3, r0
 800314e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f922 	bl	800339e <RTC_ByteToBcd2>
 800315a:	4603      	mov	r3, r0
 800315c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800315e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	789b      	ldrb	r3, [r3, #2]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f91a 	bl	800339e <RTC_ByteToBcd2>
 800316a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800316c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e00e      	b.n	800319a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003188:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800318e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	22ca      	movs	r2, #202	; 0xca
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2253      	movs	r2, #83	; 0x53
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f89b 	bl	80032e6 <RTC_EnterInitMode>
 80031b0:	4603      	mov	r3, r0
 80031b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8c2 	bl	8003354 <RTC_ExitInitMode>
 80031d0:	4603      	mov	r3, r0
 80031d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	22ff      	movs	r2, #255	; 0xff
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]

  return status;
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}

080031f8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003216:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	0b5b      	lsrs	r3, r3, #13
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11a      	bne.n	800328c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8bc 	bl	80033d8 <RTC_Bcd2ToByte>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f8b3 	bl	80033d8 <RTC_Bcd2ToByte>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8aa 	bl	80033d8 <RTC_Bcd2ToByte>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032b0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b2:	f7fe fccd 	bl	8001c50 <HAL_GetTick>
 80032b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032b8:	e009      	b.n	80032ce <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ba:	f7fe fcc9 	bl	8001c50 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c8:	d901      	bls.n	80032ce <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e007      	b.n	80032de <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ee      	beq.n	80032ba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d122      	bne.n	800334a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003312:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe fc9c 	bl	8001c50 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800331a:	e00c      	b.n	8003336 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800331c:	f7fe fc98 	bl	8001c50 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332a:	d904      	bls.n	8003336 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2204      	movs	r2, #4
 8003330:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <RTC_EnterInitMode+0x64>
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d1e8      	bne.n	800331c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800336e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff89 	bl	8003296 <HAL_RTC_WaitForSynchro>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80033ac:	e005      	b.n	80033ba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	3301      	adds	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	3b0a      	subs	r3, #10
 80033b8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	2b09      	cmp	r3, #9
 80033be:	d8f6      	bhi.n	80033ae <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b2db      	uxtb	r3, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	4413      	add	r3, r2
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e041      	b.n	80034a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f839 	bl	80034ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f000 f9d8 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e04e      	b.n	800357a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_TIM_Base_Start_IT+0xc4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d01d      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_TIM_Base_Start_IT+0xc8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_TIM_Base_Start_IT+0xcc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_TIM_Base_Start_IT+0xd0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_TIM_Base_Start_IT+0xd4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_TIM_Base_Start_IT+0xd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d111      	bne.n	8003568 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d010      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	e007      	b.n	8003578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40010400 	.word	0x40010400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40001800 	.word	0x40001800

080035a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d122      	bne.n	8003600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d11b      	bne.n	8003600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0202 	mvn.w	r2, #2
 80035d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8ee 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8e0 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8f1 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b04      	cmp	r3, #4
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0204 	mvn.w	r2, #4
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8c4 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8b6 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8c7 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b08      	cmp	r3, #8
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0208 	mvn.w	r2, #8
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f89a 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f88c 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f89d 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0210 	mvn.w	r2, #16
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2208      	movs	r2, #8
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f870 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f862 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f873 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0201 	mvn.w	r2, #1
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fc06 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f902 	bl	8003958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f838 	bl	80037f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d10e      	bne.n	80037ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d107      	bne.n	80037ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0220 	mvn.w	r2, #32
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8cc 	bl	8003944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <TIM_Base_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00f      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <TIM_Base_SetConfig+0x118>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3c      	ldr	r2, [pc, #240]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <TIM_Base_SetConfig+0x120>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <TIM_Base_SetConfig+0x114>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d027      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2c      	ldr	r2, [pc, #176]	; (800391c <TIM_Base_SetConfig+0x118>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d023      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <TIM_Base_SetConfig+0x11c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <TIM_Base_SetConfig+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <TIM_Base_SetConfig+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d017      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <TIM_Base_SetConfig+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00f      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <TIM_Base_SetConfig+0x130>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0x134>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <TIM_Base_SetConfig+0x138>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0xf8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <TIM_Base_SetConfig+0x124>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40001800 	.word	0x40001800
 800393c:	40001c00 	.word	0x40001c00
 8003940:	40002000 	.word	0x40002000

08003944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e03f      	b.n	80039fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fbfe 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fddf 	bl	8004574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08a      	sub	sp, #40	; 0x28
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d17c      	bne.n	8003b20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_Transmit+0x2c>
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e075      	b.n	8003b22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x3e>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e06e      	b.n	8003b22 <HAL_UART_Transmit+0x11c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2221      	movs	r2, #33	; 0x21
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fe f8f9 	bl	8001c50 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	d108      	bne.n	8003a88 <HAL_UART_Transmit+0x82>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a98:	e02a      	b.n	8003af0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fb1f 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e036      	b.n	8003b22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3302      	adds	r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e007      	b.n	8003ae2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cf      	bne.n	8003a9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 faef 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d11d      	bne.n	8003b80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Receive_IT+0x26>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e016      	b.n	8003b82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_IT+0x38>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e00f      	b.n	8003b82 <HAL_UART_Receive_IT+0x58>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fb24 	bl	80041c4 <UART_Start_Receive_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b0ba      	sub	sp, #232	; 0xe8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x66>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fc07 	bl	80043fe <UART_Receive_IT>
      return;
 8003bf0:	e256      	b.n	80040a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80de 	beq.w	8003db8 <HAL_UART_IRQHandler+0x22c>
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80d1 	beq.w	8003db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_UART_IRQHandler+0xae>
 8003c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_UART_IRQHandler+0xd2>
 8003c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0xf6>
 8003c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0204 	orr.w	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d011      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x126>
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0208 	orr.w	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 81ed 	beq.w	8004096 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_UART_IRQHandler+0x14e>
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fb92 	bl	80043fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_UART_IRQHandler+0x17a>
 8003cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04f      	beq.n	8003da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa9a 	bl	8004240 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d141      	bne.n	8003d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1d9      	bne.n	8003d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d013      	beq.n	8003d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	4a7d      	ldr	r2, [pc, #500]	; (8003f68 <HAL_UART_IRQHandler+0x3dc>)
 8003d74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe f8c6 	bl	8001f0c <HAL_DMA_Abort_IT>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d90:	4610      	mov	r0, r2
 8003d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	e00e      	b.n	8003db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f990 	bl	80040bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	e00a      	b.n	8003db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f98c 	bl	80040bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	e006      	b.n	8003db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f988 	bl	80040bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003db2:	e170      	b.n	8004096 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	bf00      	nop
    return;
 8003db6:	e16e      	b.n	8004096 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	f040 814a 	bne.w	8004056 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8143 	beq.w	8004056 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 813c 	beq.w	8004056 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	f040 80b4 	bne.w	8003f6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8140 	beq.w	800409a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f080 8139 	bcs.w	800409a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	f000 8088 	beq.w	8003f4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d9      	bne.n	8003e3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3314      	adds	r3, #20
 8003e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e1      	bne.n	8003e8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f30:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e3      	bne.n	8003f0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fd ff6f 	bl	8001e2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8b6 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f64:	e099      	b.n	800409a <HAL_UART_IRQHandler+0x50e>
 8003f66:	bf00      	nop
 8003f68:	08004307 	.word	0x08004307
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 808b 	beq.w	800409e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8086 	beq.w	800409e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fb6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e3      	bne.n	8003f92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fee:	633a      	str	r2, [r7, #48]	; 0x30
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e3      	bne.n	8003fca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004034:	61fa      	str	r2, [r7, #28]
 8004036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	617b      	str	r3, [r7, #20]
   return(result);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e3      	bne.n	8004010 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f83e 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004054:	e023      	b.n	800409e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_UART_IRQHandler+0x4ea>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f95d 	bl	800432e <UART_Transmit_IT>
    return;
 8004074:	e014      	b.n	80040a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00e      	beq.n	80040a0 <HAL_UART_IRQHandler+0x514>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f99d 	bl	80043ce <UART_EndTransmit_IT>
    return;
 8004094:	e004      	b.n	80040a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_UART_IRQHandler+0x514>
      return;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_UART_IRQHandler+0x514>
      return;
 800409e:	bf00      	nop
  }
}
 80040a0:	37e8      	adds	r7, #232	; 0xe8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop

080040a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b090      	sub	sp, #64	; 0x40
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	e050      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d04c      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <UART_WaitOnFlagUntilTimeout+0x30>
 8004108:	f7fd fda2 	bl	8001c50 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004114:	429a      	cmp	r2, r3
 8004116:	d241      	bcs.n	800419c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004138:	637a      	str	r2, [r7, #52]	; 0x34
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800413e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	613b      	str	r3, [r7, #16]
   return(result);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416c:	623a      	str	r2, [r7, #32]
 800416e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	69f9      	ldr	r1, [r7, #28]
 8004172:	6a3a      	ldr	r2, [r7, #32]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	61bb      	str	r3, [r7, #24]
   return(result);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e00f      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d09f      	beq.n	80040fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3740      	adds	r7, #64	; 0x40
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2222      	movs	r2, #34	; 0x22
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004210:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b095      	sub	sp, #84	; 0x54
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004268:	643a      	str	r2, [r7, #64]	; 0x40
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	61fb      	str	r3, [r7, #28]
   return(result);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3314      	adds	r3, #20
 800429a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d119      	bne.n	80042ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	647b      	str	r3, [r7, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d8:	61ba      	str	r2, [r7, #24]
 80042da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	613b      	str	r3, [r7, #16]
   return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042fa:	bf00      	nop
 80042fc:	3754      	adds	r7, #84	; 0x54
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff fecb 	bl	80040bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b21      	cmp	r3, #33	; 0x21
 8004340:	d13e      	bne.n	80043c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d114      	bne.n	8004376 <UART_Transmit_IT+0x48>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	621a      	str	r2, [r3, #32]
 8004374:	e008      	b.n	8004388 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6211      	str	r1, [r2, #32]
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4619      	mov	r1, r3
 8004396:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fe5a 	bl	80040a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08c      	sub	sp, #48	; 0x30
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b22      	cmp	r3, #34	; 0x22
 8004410:	f040 80ab 	bne.w	800456a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	d117      	bne.n	800444e <UART_Receive_IT+0x50>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	b29a      	uxth	r2, r3
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	1c9a      	adds	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
 800444c:	e026      	b.n	800449c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004460:	d007      	beq.n	8004472 <UART_Receive_IT+0x74>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <UART_Receive_IT+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e008      	b.n	8004492 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448c:	b2da      	uxtb	r2, r3
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4619      	mov	r1, r3
 80044aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d15a      	bne.n	8004566 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0220 	bic.w	r2, r2, #32
 80044be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d135      	bne.n	800455c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	613b      	str	r3, [r7, #16]
   return(result);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	623a      	str	r2, [r7, #32]
 8004518:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	69f9      	ldr	r1, [r7, #28]
 800451c:	6a3a      	ldr	r2, [r7, #32]
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	61bb      	str	r3, [r7, #24]
   return(result);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d10a      	bne.n	800454e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fdbb 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
 800455a:	e002      	b.n	8004562 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fc fc9f 	bl	8000ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e002      	b.n	800456c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b0c0      	sub	sp, #256	; 0x100
 800457a:	af00      	add	r7, sp, #0
 800457c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	68d9      	ldr	r1, [r3, #12]
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	ea40 0301 	orr.w	r3, r0, r1
 800459c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045cc:	f021 010c 	bic.w	r1, r1, #12
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045da:	430b      	orrs	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	6999      	ldr	r1, [r3, #24]
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	ea40 0301 	orr.w	r3, r0, r1
 80045fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b8f      	ldr	r3, [pc, #572]	; (8004840 <UART_SetConfig+0x2cc>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0xa0>
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8d      	ldr	r3, [pc, #564]	; (8004844 <UART_SetConfig+0x2d0>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d104      	bne.n	800461e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fad6 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8004618:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800461c:	e003      	b.n	8004626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7fe fabd 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8004622:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	f040 810c 	bne.w	800484c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800463e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1891      	adds	r1, r2, r2
 800464c:	65b9      	str	r1, [r7, #88]	; 0x58
 800464e:	415b      	adcs	r3, r3
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004656:	4621      	mov	r1, r4
 8004658:	eb12 0801 	adds.w	r8, r2, r1
 800465c:	4629      	mov	r1, r5
 800465e:	eb43 0901 	adc.w	r9, r3, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004676:	4690      	mov	r8, r2
 8004678:	4699      	mov	r9, r3
 800467a:	4623      	mov	r3, r4
 800467c:	eb18 0303 	adds.w	r3, r8, r3
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004684:	462b      	mov	r3, r5
 8004686:	eb49 0303 	adc.w	r3, r9, r3
 800468a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800469a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800469e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046a2:	460b      	mov	r3, r1
 80046a4:	18db      	adds	r3, r3, r3
 80046a6:	653b      	str	r3, [r7, #80]	; 0x50
 80046a8:	4613      	mov	r3, r2
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
 80046b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046b8:	f7fb fdf2 	bl	80002a0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <UART_SetConfig+0x2d4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011c      	lsls	r4, r3, #4
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046e4:	415b      	adcs	r3, r3
 80046e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ec:	4641      	mov	r1, r8
 80046ee:	eb12 0a01 	adds.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0b01 	adc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470c:	4692      	mov	sl, r2
 800470e:	469b      	mov	fp, r3
 8004710:	4643      	mov	r3, r8
 8004712:	eb1a 0303 	adds.w	r3, sl, r3
 8004716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800471a:	464b      	mov	r3, r9
 800471c:	eb4b 0303 	adc.w	r3, fp, r3
 8004720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004730:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
 8004746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800474a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800474e:	f7fb fda7 	bl	80002a0 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <UART_SetConfig+0x2d4>)
 800475a:	fba3 2301 	umull	r2, r3, r3, r1
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1acb      	subs	r3, r1, r3
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <UART_SetConfig+0x2d4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800477c:	441c      	add	r4, r3
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004788:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800478c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	63b9      	str	r1, [r7, #56]	; 0x38
 8004798:	415b      	adcs	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6339      	str	r1, [r7, #48]	; 0x30
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047f4:	460b      	mov	r3, r1
 80047f6:	18db      	adds	r3, r3, r3
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	4613      	mov	r3, r2
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800480a:	f7fb fd49 	bl	80002a0 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <UART_SetConfig+0x2d4>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <UART_SetConfig+0x2d4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4422      	add	r2, r4
 800483a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800483c:	e105      	b.n	8004a4a <UART_SetConfig+0x4d6>
 800483e:	bf00      	nop
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004856:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800485a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	1891      	adds	r1, r2, r2
 8004864:	6239      	str	r1, [r7, #32]
 8004866:	415b      	adcs	r3, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486e:	4641      	mov	r1, r8
 8004870:	1854      	adds	r4, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb43 0501 	adc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004894:	464b      	mov	r3, r9
 8004896:	eb45 0303 	adc.w	r3, r5, r3
 800489a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ba:	4629      	mov	r1, r5
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c4:	4621      	mov	r1, r4
 80048c6:	008a      	lsls	r2, r1, #2
 80048c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048cc:	f7fb fce8 	bl	80002a0 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b60      	ldr	r3, [pc, #384]	; (8004a58 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	61b9      	str	r1, [r7, #24]
 80048f8:	415b      	adcs	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6139      	str	r1, [r7, #16]
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
 800494a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800496a:	f7fb fc99 	bl	80002a0 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004992:	441c      	add	r4, r3
 8004994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004998:	2200      	movs	r2, #0
 800499a:	673b      	str	r3, [r7, #112]	; 0x70
 800499c:	677a      	str	r2, [r7, #116]	; 0x74
 800499e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049a2:	4642      	mov	r2, r8
 80049a4:	464b      	mov	r3, r9
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	415b      	adcs	r3, r3
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b2:	4641      	mov	r1, r8
 80049b4:	1851      	adds	r1, r2, r1
 80049b6:	6039      	str	r1, [r7, #0]
 80049b8:	4649      	mov	r1, r9
 80049ba:	414b      	adcs	r3, r1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ca:	4659      	mov	r1, fp
 80049cc:	00cb      	lsls	r3, r1, #3
 80049ce:	4651      	mov	r1, sl
 80049d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d4:	4651      	mov	r1, sl
 80049d6:	00ca      	lsls	r2, r1, #3
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	4603      	mov	r3, r0
 80049de:	4642      	mov	r2, r8
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e4:	464b      	mov	r3, r9
 80049e6:	460a      	mov	r2, r1
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	663b      	str	r3, [r7, #96]	; 0x60
 80049f8:	667a      	str	r2, [r7, #100]	; 0x64
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a06:	4649      	mov	r1, r9
 8004a08:	008b      	lsls	r3, r1, #2
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a10:	4641      	mov	r1, r8
 8004a12:	008a      	lsls	r2, r1, #2
 8004a14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a18:	f7fb fc42 	bl	80002a0 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a22:	fba3 1302 	umull	r1, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2164      	movs	r1, #100	; 0x64
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	3332      	adds	r3, #50	; 0x32
 8004a34:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 020f 	and.w	r2, r3, #15
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4422      	add	r2, r4
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a56:	bf00      	nop
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f103 0208 	add.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 0208 	add.w	r2, r3, #8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 0208 	add.w	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d103      	bne.n	8004b1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e00c      	b.n	8004b38 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3308      	adds	r3, #8
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <vListInsert+0x2e>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d2f6      	bcs.n	8004b26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6892      	ldr	r2, [r2, #8]
 8004b86:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6852      	ldr	r2, [r2, #4]
 8004b90:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d103      	bne.n	8004ba4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1e5a      	subs	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericReset+0x2a>
        __asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60bb      	str	r3, [r7, #8]
    }
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004bee:	f002 fb0b 	bl	8007208 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	441a      	add	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	22ff      	movs	r2, #255	; 0xff
 8004c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d114      	bne.n	8004c6e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01a      	beq.n	8004c82 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3310      	adds	r3, #16
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f921 	bl	8005e98 <xTaskRemoveFromEventList>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <xQueueGenericReset+0xcc>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	e009      	b.n	8004c82 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3310      	adds	r3, #16
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fef2 	bl	8004a5c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3324      	adds	r3, #36	; 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff feed 	bl	8004a5c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004c82:	f002 faf1 	bl	8007268 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericCreate+0x2a>
        __asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61bb      	str	r3, [r7, #24]
    }
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d006      	beq.n	8004cdc <xQueueGenericCreate+0x48>
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d101      	bne.n	8004ce0 <xQueueGenericCreate+0x4c>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <xQueueGenericCreate+0x4e>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <xQueueGenericCreate+0x68>
        __asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	617b      	str	r3, [r7, #20]
    }
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d02:	d90a      	bls.n	8004d1a <xQueueGenericCreate+0x86>
        __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	613b      	str	r3, [r7, #16]
    }
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	3350      	adds	r3, #80	; 0x50
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 fb94 	bl	800744c <pvPortMalloc>
 8004d24:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3350      	adds	r3, #80	; 0x50
 8004d34:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d36:	79fa      	ldrb	r2, [r7, #7]
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f805 	bl	8004d52 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3728      	adds	r7, #40	; 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d80:	2101      	movs	r1, #1
 8004d82:	69b8      	ldr	r0, [r7, #24]
 8004d84:	f7ff ff1e 	bl	8004bc4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08e      	sub	sp, #56	; 0x38
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004da6:	2300      	movs	r3, #0
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xQueueGenericSend+0x32>
        __asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <xQueueGenericSend+0x40>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <xQueueGenericSend+0x44>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <xQueueGenericSend+0x46>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xQueueGenericSend+0x60>
        __asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSend+0x6e>
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <xQueueGenericSend+0x72>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueGenericSend+0x74>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <xQueueGenericSend+0x8e>
        __asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	623b      	str	r3, [r7, #32]
    }
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e26:	f001 f9d3 	bl	80061d0 <xTaskGetSchedulerState>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <xQueueGenericSend+0x9e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xQueueGenericSend+0xa2>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueGenericSend+0xa4>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueGenericSend+0xbe>
        __asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	61fb      	str	r3, [r7, #28]
    }
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e56:	f002 f9d7 	bl	8007208 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <xQueueGenericSend+0xd4>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d129      	bne.n	8004ec0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e72:	f000 fac6 	bl	8005402 <prvCopyDataToQueue>
 8004e76:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f807 	bl	8005e98 <xTaskRemoveFromEventList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004e90:	4b3f      	ldr	r3, [pc, #252]	; (8004f90 <xQueueGenericSend+0x1f8>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	e00a      	b.n	8004eb8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <xQueueGenericSend+0x1f8>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004eb8:	f002 f9d6 	bl	8007268 <vPortExitCritical>
                return pdPASS;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e063      	b.n	8004f88 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ec6:	f002 f9cf 	bl	8007268 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e05c      	b.n	8004f88 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f83f 	bl	8005f5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004ee2:	f002 f9c1 	bl	8007268 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004ee6:	f000 fdb9 	bl	8005a5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004eea:	f002 f98d 	bl	8007208 <vPortEnterCritical>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d103      	bne.n	8004f04 <xQueueGenericSend+0x16c>
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSend+0x182>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1a:	f002 f9a5 	bl	8007268 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1e:	1d3a      	adds	r2, r7, #4
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f82e 	bl	8005f88 <xTaskCheckForTimeOut>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d124      	bne.n	8004f7c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f34:	f000 fb5d 	bl	80055f2 <prvIsQueueFull>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	3310      	adds	r3, #16
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 ff56 	bl	8005df8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4e:	f000 fae8 	bl	8005522 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f52:	f000 fd91 	bl	8005a78 <xTaskResumeAll>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af7c 	bne.w	8004e56 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <xQueueGenericSend+0x1f8>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e772      	b.n	8004e56 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f72:	f000 fad6 	bl	8005522 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f76:	f000 fd7f 	bl	8005a78 <xTaskResumeAll>
 8004f7a:	e76c      	b.n	8004e56 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7e:	f000 fad0 	bl	8005522 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f82:	f000 fd79 	bl	8005a78 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004f86:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3738      	adds	r7, #56	; 0x38
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b090      	sub	sp, #64	; 0x40
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <xQueueGenericSendFromISR+0x3c>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <xQueueGenericSendFromISR+0x40>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <xQueueGenericSendFromISR+0x42>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSendFromISR+0x6a>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <xQueueGenericSendFromISR+0x6e>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueGenericSendFromISR+0x70>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	623b      	str	r3, [r7, #32]
    }
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800501e:	f002 f9d5 	bl	80073cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005022:	f3ef 8211 	mrs	r2, BASEPRI
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800503a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <xQueueGenericSendFromISR+0xbc>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d13e      	bne.n	80050ce <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005066:	f000 f9cc 	bl	8005402 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800506a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d112      	bne.n	800509a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	d025      	beq.n	80050c8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	4618      	mov	r0, r3
 8005082:	f000 ff09 	bl	8005e98 <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01d      	beq.n	80050c8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e016      	b.n	80050c8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800509a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800509e:	2b7f      	cmp	r3, #127	; 0x7f
 80050a0:	d10a      	bne.n	80050b8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	617b      	str	r3, [r7, #20]
    }
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050bc:	3301      	adds	r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	b25a      	sxtb	r2, r3
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80050c8:	2301      	movs	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80050cc:	e001      	b.n	80050d2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80050dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3740      	adds	r7, #64	; 0x40
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <xQueueReceive+0x30>
        __asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	623b      	str	r3, [r7, #32]
    }
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <xQueueReceive+0x3e>
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <xQueueReceive+0x42>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <xQueueReceive+0x44>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xQueueReceive+0x5e>
        __asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	61fb      	str	r3, [r7, #28]
    }
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005146:	f001 f843 	bl	80061d0 <xTaskGetSchedulerState>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <xQueueReceive+0x6e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <xQueueReceive+0x72>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueReceive+0x74>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <xQueueReceive+0x8e>
        __asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	61bb      	str	r3, [r7, #24]
    }
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005176:	f002 f847 	bl	8007208 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01f      	beq.n	80051c6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518a:	f000 f9a4 	bl	80054d6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00f      	beq.n	80051be <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	3310      	adds	r3, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fe78 	bl	8005e98 <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <xQueueReceive+0x1bc>)
 80051b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80051be:	f002 f853 	bl	8007268 <vPortExitCritical>
                return pdPASS;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e069      	b.n	800529a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80051cc:	f002 f84c 	bl	8007268 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e062      	b.n	800529a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 febc 	bl	8005f5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051e8:	f002 f83e 	bl	8007268 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051ec:	f000 fc36 	bl	8005a5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051f0:	f002 f80a 	bl	8007208 <vPortEnterCritical>
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d103      	bne.n	800520a <xQueueReceive+0x122>
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005210:	b25b      	sxtb	r3, r3
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d103      	bne.n	8005220 <xQueueReceive+0x138>
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005220:	f002 f822 	bl	8007268 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005224:	1d3a      	adds	r2, r7, #4
 8005226:	f107 0310 	add.w	r3, r7, #16
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f000 feab 	bl	8005f88 <xTaskCheckForTimeOut>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d123      	bne.n	8005280 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 f9c4 	bl	80055c6 <prvIsQueueEmpty>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	3324      	adds	r3, #36	; 0x24
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fdd3 	bl	8005df8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005254:	f000 f965 	bl	8005522 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005258:	f000 fc0e 	bl	8005a78 <xTaskResumeAll>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d189      	bne.n	8005176 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005262:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <xQueueReceive+0x1bc>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	e780      	b.n	8005176 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005276:	f000 f954 	bl	8005522 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800527a:	f000 fbfd 	bl	8005a78 <xTaskResumeAll>
 800527e:	e77a      	b.n	8005176 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005282:	f000 f94e 	bl	8005522 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005286:	f000 fbf7 	bl	8005a78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800528a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528c:	f000 f99b 	bl	80055c6 <prvIsQueueEmpty>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	f43f af6f 	beq.w	8005176 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005298:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800529a:	4618      	mov	r0, r3
 800529c:	3730      	adds	r7, #48	; 0x30
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b090      	sub	sp, #64	; 0x40
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <xQueueReceiveFromISR+0x3a>
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <xQueueReceiveFromISR+0x3e>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueReceiveFromISR+0x40>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005302:	f002 f863 	bl	80073cc <vPortValidateInterruptPriority>
        __asm volatile
 8005306:	f3ef 8211 	mrs	r2, BASEPRI
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	623a      	str	r2, [r7, #32]
 800531c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800531e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03e      	beq.n	80053ac <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800533c:	f000 f8cb 	bl	80054d6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d112      	bne.n	8005378 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d025      	beq.n	80053a6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	3310      	adds	r3, #16
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd9a 	bl	8005e98 <xTaskRemoveFromEventList>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01d      	beq.n	80053a6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01a      	beq.n	80053a6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e016      	b.n	80053a6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005378:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800537c:	2b7f      	cmp	r3, #127	; 0x7f
 800537e:	d10a      	bne.n	8005396 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61bb      	str	r3, [r7, #24]
    }
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800539a:	3301      	adds	r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	b25a      	sxtb	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053aa:	e001      	b.n	80053b0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f383 8811 	msr	BASEPRI, r3
    }
 80053ba:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3740      	adds	r7, #64	; 0x40
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60bb      	str	r3, [r7, #8]
    }
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80053ea:	f001 ff0d 	bl	8007208 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80053f4:	f001 ff38 	bl	8007268 <vPortExitCritical>

    return uxReturn;
 80053f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10d      	bne.n	800543c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d14d      	bne.n	80054c4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 feed 	bl	800620c <xTaskPriorityDisinherit>
 8005432:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	e043      	b.n	80054c4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6858      	ldr	r0, [r3, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	461a      	mov	r2, r3
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	f002 fa25 	bl	800789c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	441a      	add	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d32b      	bcc.n	80054c4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	e026      	b.n	80054c4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68d8      	ldr	r0, [r3, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	461a      	mov	r2, r3
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	f002 fa0b 	bl	800789c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	425b      	negs	r3, r3
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d207      	bcs.n	80054b2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	425b      	negs	r3, r3
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d105      	bne.n	80054c4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80054cc:	697b      	ldr	r3, [r7, #20]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d018      	beq.n	800551a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d303      	bcc.n	800550a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68d9      	ldr	r1, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	461a      	mov	r2, r3
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f002 f9c1 	bl	800789c <memcpy>
    }
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800552a:	f001 fe6d 	bl	8007208 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005534:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005536:	e011      	b.n	800555c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fca7 	bl	8005e98 <xTaskRemoveFromEventList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005550:	f000 fd80 	bl	8006054 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	3b01      	subs	r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800555c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dce9      	bgt.n	8005538 <prvUnlockQueue+0x16>
 8005564:	e000      	b.n	8005568 <prvUnlockQueue+0x46>
                        break;
 8005566:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	22ff      	movs	r2, #255	; 0xff
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005570:	f001 fe7a 	bl	8007268 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005574:	f001 fe48 	bl	8007208 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800557e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005580:	e011      	b.n	80055a6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3310      	adds	r3, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fc82 	bl	8005e98 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800559a:	f000 fd5b 	bl	8006054 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80055a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dce9      	bgt.n	8005582 <prvUnlockQueue+0x60>
 80055ae:	e000      	b.n	80055b2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80055b0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80055ba:	f001 fe55 	bl	8007268 <vPortExitCritical>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055ce:	f001 fe1b 	bl	8007208 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e001      	b.n	80055e4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80055e4:	f001 fe40 	bl	8007268 <vPortExitCritical>

    return xReturn;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055fa:	f001 fe05 	bl	8007208 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	429a      	cmp	r2, r3
 8005608:	d102      	bne.n	8005610 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800560a:	2301      	movs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e001      	b.n	8005614 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005614:	f001 fe28 	bl	8007268 <vPortExitCritical>

    return xReturn;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
    }
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	429a      	cmp	r2, r3
 8005654:	d102      	bne.n	800565c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005656:	2301      	movs	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e001      	b.n	8005660 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005660:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e014      	b.n	80056aa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005680:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <vQueueAddToRegistry+0x50>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800568c:	490c      	ldr	r1, [pc, #48]	; (80056c0 <vQueueAddToRegistry+0x50>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005696:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <vQueueAddToRegistry+0x50>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80056a2:	e006      	b.n	80056b2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3301      	adds	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b07      	cmp	r3, #7
 80056ae:	d9e7      	bls.n	8005680 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	200001e4 	.word	0x200001e4

080056c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80056d4:	f001 fd98 	bl	8007208 <vPortEnterCritical>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056de:	b25b      	sxtb	r3, r3
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d103      	bne.n	80056ee <vQueueWaitForMessageRestricted+0x2a>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f4:	b25b      	sxtb	r3, r3
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d103      	bne.n	8005704 <vQueueWaitForMessageRestricted+0x40>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005704:	f001 fdb0 	bl	8007268 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fb91 	bl	8005e40 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f7ff feff 	bl	8005522 <prvUnlockQueue>
    }
 8005724:	bf00      	nop
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af04      	add	r7, sp, #16
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fe83 	bl	800744c <pvPortMalloc>
 8005746:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800574e:	2058      	movs	r0, #88	; 0x58
 8005750:	f001 fe7c 	bl	800744c <pvPortMalloc>
 8005754:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
 8005762:	e005      	b.n	8005770 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005764:	6978      	ldr	r0, [r7, #20]
 8005766:	f001 ff51 	bl	800760c <vPortFree>
 800576a:	e001      	b.n	8005770 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d013      	beq.n	800579e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	2300      	movs	r3, #0
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f80e 	bl	80057ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005792:	69f8      	ldr	r0, [r7, #28]
 8005794:	f000 f8a2 	bl	80058dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e002      	b.n	80057a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80057a4:	69bb      	ldr	r3, [r7, #24]
    }
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b088      	sub	sp, #32
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	461a      	mov	r2, r3
 80057c6:	21a5      	movs	r1, #165	; 0xa5
 80057c8:	f002 f876 	bl	80078b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057d6:	3b01      	subs	r3, #1
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <prvInitialiseNewTask+0x58>
        __asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	617b      	str	r3, [r7, #20]
    }
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01f      	beq.n	800584c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e012      	b.n	8005838 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	3334      	adds	r3, #52	; 0x34
 8005822:	460a      	mov	r2, r1
 8005824:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d006      	beq.n	8005840 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b09      	cmp	r3, #9
 800583c:	d9e9      	bls.n	8005812 <prvInitialiseNewTask+0x64>
 800583e:	e000      	b.n	8005842 <prvInitialiseNewTask+0x94>
            {
                break;
 8005840:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800584a:	e003      	b.n	8005854 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b04      	cmp	r3, #4
 8005858:	d901      	bls.n	800585e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800585a:	2304      	movs	r3, #4
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005868:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff f911 	bl	8004a9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	3318      	adds	r3, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f90c 	bl	8004a9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005888:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	f1c3 0205 	rsb	r2, r3, #5
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	3350      	adds	r3, #80	; 0x50
 800589e:	2204      	movs	r2, #4
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f002 f808 	bl	80078b8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	3354      	adds	r3, #84	; 0x54
 80058ac:	2201      	movs	r2, #1
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f002 f801 	bl	80078b8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	69b8      	ldr	r0, [r7, #24]
 80058bc:	f001 fb76 	bl	8006fac <pxPortInitialiseStack>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058d2:	bf00      	nop
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80058e4:	f001 fc90 	bl	8007208 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80058e8:	4b2c      	ldr	r3, [pc, #176]	; (800599c <prvAddNewTaskToReadyList+0xc0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a2b      	ldr	r2, [pc, #172]	; (800599c <prvAddNewTaskToReadyList+0xc0>)
 80058f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80058f2:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <prvAddNewTaskToReadyList+0xc4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80058fa:	4a29      	ldr	r2, [pc, #164]	; (80059a0 <prvAddNewTaskToReadyList+0xc4>)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005900:	4b26      	ldr	r3, [pc, #152]	; (800599c <prvAddNewTaskToReadyList+0xc0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d110      	bne.n	800592a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005908:	f000 fbc8 	bl	800609c <prvInitialiseTaskLists>
 800590c:	e00d      	b.n	800592a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <prvAddNewTaskToReadyList+0xc8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005916:	4b22      	ldr	r3, [pc, #136]	; (80059a0 <prvAddNewTaskToReadyList+0xc4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	429a      	cmp	r2, r3
 8005922:	d802      	bhi.n	800592a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005924:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <prvAddNewTaskToReadyList+0xc4>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800592a:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <prvAddNewTaskToReadyList+0xcc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <prvAddNewTaskToReadyList+0xcc>)
 8005932:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <prvAddNewTaskToReadyList+0xcc>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2201      	movs	r2, #1
 8005942:	409a      	lsls	r2, r3
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <prvAddNewTaskToReadyList+0xd0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4313      	orrs	r3, r2
 800594a:	4a18      	ldr	r2, [pc, #96]	; (80059ac <prvAddNewTaskToReadyList+0xd0>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <prvAddNewTaskToReadyList+0xd4>)
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7ff f8a6 	bl	8004ab6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800596a:	f001 fc7d 	bl	8007268 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <prvAddNewTaskToReadyList+0xc8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvAddNewTaskToReadyList+0xc4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	429a      	cmp	r2, r3
 8005982:	d207      	bcs.n	8005994 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <prvAddNewTaskToReadyList+0xd8>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200002fc 	.word	0x200002fc
 80059a0:	20000224 	.word	0x20000224
 80059a4:	20000308 	.word	0x20000308
 80059a8:	20000318 	.word	0x20000318
 80059ac:	20000304 	.word	0x20000304
 80059b0:	20000228 	.word	0x20000228
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <vTaskStartScheduler+0x88>)
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	2282      	movs	r2, #130	; 0x82
 80059ca:	491e      	ldr	r1, [pc, #120]	; (8005a44 <vTaskStartScheduler+0x8c>)
 80059cc:	481e      	ldr	r0, [pc, #120]	; (8005a48 <vTaskStartScheduler+0x90>)
 80059ce:	f7ff fead 	bl	800572c <xTaskCreate>
 80059d2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d102      	bne.n	80059e0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80059da:	f000 ff59 	bl	8006890 <xTimerCreateTimerTask>
 80059de:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d116      	bne.n	8005a14 <vTaskStartScheduler+0x5c>
        __asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	60bb      	str	r3, [r7, #8]
    }
 80059f8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <vTaskStartScheduler+0x94>)
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <vTaskStartScheduler+0x98>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <vTaskStartScheduler+0x9c>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005a0e:	f001 fb59 	bl	80070c4 <xPortStartScheduler>
 8005a12:	e00e      	b.n	8005a32 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d10a      	bne.n	8005a32 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	607b      	str	r3, [r7, #4]
    }
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <vTaskStartScheduler+0xa0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000320 	.word	0x20000320
 8005a44:	080084bc 	.word	0x080084bc
 8005a48:	0800606d 	.word	0x0800606d
 8005a4c:	2000031c 	.word	0x2000031c
 8005a50:	20000308 	.word	0x20000308
 8005a54:	20000300 	.word	0x20000300
 8005a58:	2000001c 	.word	0x2000001c

08005a5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <vTaskSuspendAll+0x18>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	4a03      	ldr	r2, [pc, #12]	; (8005a74 <vTaskSuspendAll+0x18>)
 8005a68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005a6a:	bf00      	nop
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	20000324 	.word	0x20000324

08005a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005a86:	4b41      	ldr	r3, [pc, #260]	; (8005b8c <xTaskResumeAll+0x114>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <xTaskResumeAll+0x2c>
        __asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	603b      	str	r3, [r7, #0]
    }
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005aa4:	f001 fbb0 	bl	8007208 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005aa8:	4b38      	ldr	r3, [pc, #224]	; (8005b8c <xTaskResumeAll+0x114>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <xTaskResumeAll+0x114>)
 8005ab0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <xTaskResumeAll+0x114>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d161      	bne.n	8005b7e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <xTaskResumeAll+0x118>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d05d      	beq.n	8005b7e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ac2:	e02e      	b.n	8005b22 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac4:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <xTaskResumeAll+0x11c>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3318      	adds	r3, #24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff f84d 	bl	8004b70 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f848 	bl	8004b70 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <xTaskResumeAll+0x120>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <xTaskResumeAll+0x120>)
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <xTaskResumeAll+0x124>)
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7fe ffd4 	bl	8004ab6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <xTaskResumeAll+0x128>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005b1c:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <xTaskResumeAll+0x12c>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <xTaskResumeAll+0x11c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1cc      	bne.n	8005ac4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005b30:	f000 fb32 	bl	8006198 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b34:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <xTaskResumeAll+0x130>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005b40:	f000 f846 	bl	8005bd0 <xTaskIncrementTick>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005b4a:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <xTaskResumeAll+0x12c>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f1      	bne.n	8005b40 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <xTaskResumeAll+0x130>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <xTaskResumeAll+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005b6e:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <xTaskResumeAll+0x134>)
 8005b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005b7e:	f001 fb73 	bl	8007268 <vPortExitCritical>

    return xAlreadyYielded;
 8005b82:	68bb      	ldr	r3, [r7, #8]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000324 	.word	0x20000324
 8005b90:	200002fc 	.word	0x200002fc
 8005b94:	200002bc 	.word	0x200002bc
 8005b98:	20000304 	.word	0x20000304
 8005b9c:	20000228 	.word	0x20000228
 8005ba0:	20000224 	.word	0x20000224
 8005ba4:	20000310 	.word	0x20000310
 8005ba8:	2000030c 	.word	0x2000030c
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <xTaskGetTickCount+0x1c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005bbc:	687b      	ldr	r3, [r7, #4]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000300 	.word	0x20000300

08005bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bda:	4b4e      	ldr	r3, [pc, #312]	; (8005d14 <xTaskIncrementTick+0x144>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 808e 	bne.w	8005d00 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005be4:	4b4c      	ldr	r3, [pc, #304]	; (8005d18 <xTaskIncrementTick+0x148>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005bec:	4a4a      	ldr	r2, [pc, #296]	; (8005d18 <xTaskIncrementTick+0x148>)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d120      	bne.n	8005c3a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005bf8:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <xTaskIncrementTick+0x14c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <xTaskIncrementTick+0x48>
        __asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	603b      	str	r3, [r7, #0]
    }
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <xTaskIncrementTick+0x46>
 8005c18:	4b40      	ldr	r3, [pc, #256]	; (8005d1c <xTaskIncrementTick+0x14c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <xTaskIncrementTick+0x150>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a3e      	ldr	r2, [pc, #248]	; (8005d1c <xTaskIncrementTick+0x14c>)
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4a3e      	ldr	r2, [pc, #248]	; (8005d20 <xTaskIncrementTick+0x150>)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <xTaskIncrementTick+0x154>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <xTaskIncrementTick+0x154>)
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	f000 faaf 	bl	8006198 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005c3a:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <xTaskIncrementTick+0x158>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d348      	bcc.n	8005cd6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <xTaskIncrementTick+0x14c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4e:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <xTaskIncrementTick+0x158>)
 8005c50:	f04f 32ff 	mov.w	r2, #4294967295
 8005c54:	601a      	str	r2, [r3, #0]
                    break;
 8005c56:	e03e      	b.n	8005cd6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <xTaskIncrementTick+0x14c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d203      	bcs.n	8005c78 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005c70:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <xTaskIncrementTick+0x158>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c76:	e02e      	b.n	8005cd6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe ff77 	bl	8004b70 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe ff6e 	bl	8004b70 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	2201      	movs	r2, #1
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <xTaskIncrementTick+0x15c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <xTaskIncrementTick+0x15c>)
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <xTaskIncrementTick+0x160>)
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7fe fefa 	bl	8004ab6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <xTaskIncrementTick+0x164>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d3b9      	bcc.n	8005c44 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd4:	e7b6      	b.n	8005c44 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <xTaskIncrementTick+0x164>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4914      	ldr	r1, [pc, #80]	; (8005d30 <xTaskIncrementTick+0x160>)
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d901      	bls.n	8005cf2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <xTaskIncrementTick+0x168>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e004      	b.n	8005d0a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005d00:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <xTaskIncrementTick+0x16c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	4a0d      	ldr	r2, [pc, #52]	; (8005d3c <xTaskIncrementTick+0x16c>)
 8005d08:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005d0a:	697b      	ldr	r3, [r7, #20]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000324 	.word	0x20000324
 8005d18:	20000300 	.word	0x20000300
 8005d1c:	200002b4 	.word	0x200002b4
 8005d20:	200002b8 	.word	0x200002b8
 8005d24:	20000314 	.word	0x20000314
 8005d28:	2000031c 	.word	0x2000031c
 8005d2c:	20000304 	.word	0x20000304
 8005d30:	20000228 	.word	0x20000228
 8005d34:	20000224 	.word	0x20000224
 8005d38:	20000310 	.word	0x20000310
 8005d3c:	2000030c 	.word	0x2000030c

08005d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <vTaskSwitchContext+0xa4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005d4e:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <vTaskSwitchContext+0xa8>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005d54:	e03f      	b.n	8005dd6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005d56:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <vTaskSwitchContext+0xa8>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <vTaskSwitchContext+0xac>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	fab3 f383 	clz	r3, r3
 8005d68:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	f1c3 031f 	rsb	r3, r3, #31
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	491f      	ldr	r1, [pc, #124]	; (8005df0 <vTaskSwitchContext+0xb0>)
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	607b      	str	r3, [r7, #4]
    }
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <vTaskSwitchContext+0x5a>
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <vTaskSwitchContext+0xb0>)
 8005da8:	4413      	add	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d104      	bne.n	8005dcc <vTaskSwitchContext+0x8c>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	4a08      	ldr	r2, [pc, #32]	; (8005df4 <vTaskSwitchContext+0xb4>)
 8005dd4:	6013      	str	r3, [r2, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000324 	.word	0x20000324
 8005de8:	20000310 	.word	0x20000310
 8005dec:	20000304 	.word	0x20000304
 8005df0:	20000228 	.word	0x20000228
 8005df4:	20000224 	.word	0x20000224

08005df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60fb      	str	r3, [r7, #12]
    }
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <vTaskPlaceOnEventList+0x44>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3318      	adds	r3, #24
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fe fe69 	bl	8004afe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	f000 fcc8 	bl	80067c4 <prvAddCurrentTaskToDelayedList>
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000224 	.word	0x20000224

08005e40 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	617b      	str	r3, [r7, #20]
    }
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fe fe20 	bl	8004ab6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f000 fc9d 	bl	80067c4 <prvAddCurrentTaskToDelayedList>
    }
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000224 	.word	0x20000224

08005e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
    }
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fe51 	bl	8004b70 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <xTaskRemoveFromEventList+0xac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11c      	bne.n	8005f10 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fe48 	bl	8004b70 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <xTaskRemoveFromEventList+0xb0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <xTaskRemoveFromEventList+0xb0>)
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <xTaskRemoveFromEventList+0xb4>)
 8005f00:	441a      	add	r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7fe fdd4 	bl	8004ab6 <vListInsertEnd>
 8005f0e:	e005      	b.n	8005f1c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3318      	adds	r3, #24
 8005f14:	4619      	mov	r1, r3
 8005f16:	480e      	ldr	r0, [pc, #56]	; (8005f50 <xTaskRemoveFromEventList+0xb8>)
 8005f18:	f7fe fdcd 	bl	8004ab6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <xTaskRemoveFromEventList+0xbc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d905      	bls.n	8005f36 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <xTaskRemoveFromEventList+0xc0>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e001      	b.n	8005f3a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005f3a:	697b      	ldr	r3, [r7, #20]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000324 	.word	0x20000324
 8005f48:	20000304 	.word	0x20000304
 8005f4c:	20000228 	.word	0x20000228
 8005f50:	200002bc 	.word	0x200002bc
 8005f54:	20000224 	.word	0x20000224
 8005f58:	20000310 	.word	0x20000310

08005f5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <vTaskInternalSetTimeOutState+0x24>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <vTaskInternalSetTimeOutState+0x28>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	605a      	str	r2, [r3, #4]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000314 	.word	0x20000314
 8005f84:	20000300 	.word	0x20000300

08005f88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	613b      	str	r3, [r7, #16]
    }
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60fb      	str	r3, [r7, #12]
    }
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005fca:	f001 f91d 	bl	8007208 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <xTaskCheckForTimeOut+0xc4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d102      	bne.n	8005fee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	e026      	b.n	800603c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <xTaskCheckForTimeOut+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d00a      	beq.n	8006010 <xTaskCheckForTimeOut+0x88>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	429a      	cmp	r2, r3
 8006002:	d305      	bcc.n	8006010 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e015      	b.n	800603c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	429a      	cmp	r2, r3
 8006018:	d20b      	bcs.n	8006032 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff98 	bl	8005f5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	e004      	b.n	800603c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800603c:	f001 f914 	bl	8007268 <vPortExitCritical>

    return xReturn;
 8006040:	69fb      	ldr	r3, [r7, #28]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000300 	.word	0x20000300
 8006050:	20000314 	.word	0x20000314

08006054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <vTaskMissedYield+0x14>)
 800605a:	2201      	movs	r2, #1
 800605c:	601a      	str	r2, [r3, #0]
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000310 	.word	0x20000310

0800606c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006074:	f000 f852 	bl	800611c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <prvIdleTask+0x28>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d9f9      	bls.n	8006074 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <prvIdleTask+0x2c>)
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006090:	e7f0      	b.n	8006074 <prvIdleTask+0x8>
 8006092:	bf00      	nop
 8006094:	20000228 	.word	0x20000228
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	e00c      	b.n	80060c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a12      	ldr	r2, [pc, #72]	; (80060fc <prvInitialiseTaskLists+0x60>)
 80060b4:	4413      	add	r3, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fcd0 	bl	8004a5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3301      	adds	r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d9ef      	bls.n	80060a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80060c8:	480d      	ldr	r0, [pc, #52]	; (8006100 <prvInitialiseTaskLists+0x64>)
 80060ca:	f7fe fcc7 	bl	8004a5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80060ce:	480d      	ldr	r0, [pc, #52]	; (8006104 <prvInitialiseTaskLists+0x68>)
 80060d0:	f7fe fcc4 	bl	8004a5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80060d4:	480c      	ldr	r0, [pc, #48]	; (8006108 <prvInitialiseTaskLists+0x6c>)
 80060d6:	f7fe fcc1 	bl	8004a5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80060da:	480c      	ldr	r0, [pc, #48]	; (800610c <prvInitialiseTaskLists+0x70>)
 80060dc:	f7fe fcbe 	bl	8004a5c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80060e0:	480b      	ldr	r0, [pc, #44]	; (8006110 <prvInitialiseTaskLists+0x74>)
 80060e2:	f7fe fcbb 	bl	8004a5c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvInitialiseTaskLists+0x78>)
 80060e8:	4a05      	ldr	r2, [pc, #20]	; (8006100 <prvInitialiseTaskLists+0x64>)
 80060ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <prvInitialiseTaskLists+0x7c>)
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <prvInitialiseTaskLists+0x68>)
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000228 	.word	0x20000228
 8006100:	2000028c 	.word	0x2000028c
 8006104:	200002a0 	.word	0x200002a0
 8006108:	200002bc 	.word	0x200002bc
 800610c:	200002d0 	.word	0x200002d0
 8006110:	200002e8 	.word	0x200002e8
 8006114:	200002b4 	.word	0x200002b4
 8006118:	200002b8 	.word	0x200002b8

0800611c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006122:	e019      	b.n	8006158 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006124:	f001 f870 	bl	8007208 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <prvCheckTasksWaitingTermination+0x50>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe fd1b 	bl	8004b70 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <prvCheckTasksWaitingTermination+0x54>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	4a0b      	ldr	r2, [pc, #44]	; (8006170 <prvCheckTasksWaitingTermination+0x54>)
 8006142:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <prvCheckTasksWaitingTermination+0x58>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <prvCheckTasksWaitingTermination+0x58>)
 800614c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800614e:	f001 f88b 	bl	8007268 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f810 	bl	8006178 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <prvCheckTasksWaitingTermination+0x58>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e1      	bne.n	8006124 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200002d0 	.word	0x200002d0
 8006170:	200002fc 	.word	0x200002fc
 8006174:	200002e4 	.word	0x200002e4

08006178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fa41 	bl	800760c <vPortFree>
                vPortFree( pxTCB );
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fa3e 	bl	800760c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <prvResetNextTaskUnblockTime+0x30>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <prvResetNextTaskUnblockTime+0x34>)
 80061a8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80061ae:	e005      	b.n	80061bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <prvResetNextTaskUnblockTime+0x30>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a04      	ldr	r2, [pc, #16]	; (80061cc <prvResetNextTaskUnblockTime+0x34>)
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	200002b4 	.word	0x200002b4
 80061cc:	2000031c 	.word	0x2000031c

080061d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <xTaskGetSchedulerState+0x34>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80061de:	2301      	movs	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	e008      	b.n	80061f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e4:	4b08      	ldr	r3, [pc, #32]	; (8006208 <xTaskGetSchedulerState+0x38>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80061ec:	2302      	movs	r3, #2
 80061ee:	607b      	str	r3, [r7, #4]
 80061f0:	e001      	b.n	80061f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80061f6:	687b      	ldr	r3, [r7, #4]
    }
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20000308 	.word	0x20000308
 8006208:	20000324 	.word	0x20000324

0800620c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d063      	beq.n	80062ea <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006222:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <xTaskPriorityDisinherit+0xe8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	429a      	cmp	r2, r3
 800622a:	d00a      	beq.n	8006242 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
    }
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	60bb      	str	r3, [r7, #8]
    }
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	1e5a      	subs	r2, r3, #1
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	429a      	cmp	r2, r3
 8006274:	d039      	beq.n	80062ea <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d135      	bne.n	80062ea <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fc74 	bl	8004b70 <uxListRemove>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	2201      	movs	r2, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43da      	mvns	r2, r3
 800629a:	4b17      	ldr	r3, [pc, #92]	; (80062f8 <xTaskPriorityDisinherit+0xec>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4013      	ands	r3, r2
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <xTaskPriorityDisinherit+0xec>)
 80062a2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	f1c3 0205 	rsb	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	2201      	movs	r2, #1
 80062be:	409a      	lsls	r2, r3
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <xTaskPriorityDisinherit+0xec>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <xTaskPriorityDisinherit+0xec>)
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <xTaskPriorityDisinherit+0xf0>)
 80062d8:	441a      	add	r2, r3
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3304      	adds	r3, #4
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f7fe fbe8 	bl	8004ab6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80062e6:	2301      	movs	r3, #1
 80062e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062ea:	697b      	ldr	r3, [r7, #20]
    }
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000224 	.word	0x20000224
 80062f8:	20000304 	.word	0x20000304
 80062fc:	20000228 	.word	0x20000228

08006300 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
    }
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800632a:	f000 ff6d 	bl	8007208 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800632e:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	3354      	adds	r3, #84	; 0x54
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d022      	beq.n	8006386 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	3214      	adds	r2, #20
 8006348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	43d2      	mvns	r2, r2
 8006350:	4011      	ands	r1, r2
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	3214      	adds	r2, #20
 8006356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	3354      	adds	r3, #84	; 0x54
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800636e:	2101      	movs	r1, #1
 8006370:	6a38      	ldr	r0, [r7, #32]
 8006372:	f000 fa27 	bl	80067c4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <xTaskGenericNotifyWait+0xfc>)
 8006378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006386:	f000 ff6f 	bl	8007268 <vPortExitCritical>

        taskENTER_CRITICAL();
 800638a:	f000 ff3d 	bl	8007208 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006394:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	3214      	adds	r2, #20
 800639c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80063a4:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	3354      	adds	r3, #84	; 0x54
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d002      	beq.n	80063bc <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e00e      	b.n	80063da <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80063bc:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	3214      	adds	r2, #20
 80063c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	43d2      	mvns	r2, r2
 80063cc:	4011      	ands	r1, r2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	3214      	adds	r2, #20
 80063d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <xTaskGenericNotifyWait+0xf8>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	3354      	adds	r3, #84	; 0x54
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80063e8:	f000 ff3e 	bl	8007268 <vPortExitCritical>

        return xReturn;
 80063ec:	697b      	ldr	r3, [r7, #20]
    }
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000224 	.word	0x20000224
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800640e:	2301      	movs	r3, #1
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <xTaskGenericNotify+0x2e>
        __asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	623b      	str	r3, [r7, #32]
    }
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	61fb      	str	r3, [r7, #28]
    }
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800644e:	f000 fedb 	bl	8007208 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	3214      	adds	r2, #20
 800645e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4413      	add	r3, r2
 800646c:	3354      	adds	r3, #84	; 0x54
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	3354      	adds	r3, #84	; 0x54
 800647c:	2202      	movs	r2, #2
 800647e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d83b      	bhi.n	80064fe <xTaskGenericNotify+0xfe>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <xTaskGenericNotify+0x8c>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	0800651d 	.word	0x0800651d
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064d5 	.word	0x080064d5
 800649c:	080064e3 	.word	0x080064e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	3214      	adds	r2, #20
 80064a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	ea42 0103 	orr.w	r1, r2, r3
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	3214      	adds	r2, #20
 80064b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064ba:	e032      	b.n	8006522 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	3214      	adds	r2, #20
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	3214      	adds	r2, #20
 80064ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064d2:	e026      	b.n	8006522 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	3214      	adds	r2, #20
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064e0:	e01f      	b.n	8006522 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d006      	beq.n	80064f8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	3214      	adds	r2, #20
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80064f6:	e014      	b.n	8006522 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80064fc:	e011      	b.n	8006522 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80064fe:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <xTaskGenericNotify+0x1ac>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <xTaskGenericNotify+0x120>
        __asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	61bb      	str	r3, [r7, #24]
    }
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <xTaskGenericNotify+0x11a>
                    break;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <xTaskGenericNotify+0x122>

                    break;
 8006520:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006526:	2b01      	cmp	r3, #1
 8006528:	d139      	bne.n	800659e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fb1e 	bl	8004b70 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <xTaskGenericNotify+0x1b0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4313      	orrs	r3, r2
 8006542:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <xTaskGenericNotify+0x1b0>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <xTaskGenericNotify+0x1b4>)
 8006554:	441a      	add	r2, r3
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe faaa 	bl	8004ab6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <xTaskGenericNotify+0x180>
        __asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	617b      	str	r3, [r7, #20]
    }
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <xTaskGenericNotify+0x1b8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	429a      	cmp	r2, r3
 800658c:	d907      	bls.n	800659e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <xTaskGenericNotify+0x1bc>)
 8006590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800659e:	f000 fe63 	bl	8007268 <vPortExitCritical>

        return xReturn;
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80065a4:	4618      	mov	r0, r3
 80065a6:	3730      	adds	r7, #48	; 0x30
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000300 	.word	0x20000300
 80065b0:	20000304 	.word	0x20000304
 80065b4:	20000228 	.word	0x20000228
 80065b8:	20000224 	.word	0x20000224
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b090      	sub	sp, #64	; 0x40
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80065ce:	2301      	movs	r3, #1
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800660a:	f000 fedf 	bl	80073cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006612:	f3ef 8211 	mrs	r2, BASEPRI
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	627a      	str	r2, [r7, #36]	; 0x24
 8006628:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800662e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006630:	2b00      	cmp	r3, #0
 8006632:	d006      	beq.n	8006642 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	3214      	adds	r2, #20
 800663a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006640:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4413      	add	r3, r2
 8006648:	3354      	adds	r3, #84	; 0x54
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4413      	add	r3, r2
 8006656:	3354      	adds	r3, #84	; 0x54
 8006658:	2202      	movs	r2, #2
 800665a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d83b      	bhi.n	80066da <xTaskGenericNotifyFromISR+0x11a>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <xTaskGenericNotifyFromISR+0xa8>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	080066f9 	.word	0x080066f9
 800666c:	0800667d 	.word	0x0800667d
 8006670:	08006699 	.word	0x08006699
 8006674:	080066b1 	.word	0x080066b1
 8006678:	080066bf 	.word	0x080066bf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	3214      	adds	r2, #20
 8006682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	ea42 0103 	orr.w	r1, r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	3214      	adds	r2, #20
 8006692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006696:	e032      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	3214      	adds	r2, #20
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	3214      	adds	r2, #20
 80066aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066ae:	e026      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	3214      	adds	r2, #20
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066bc:	e01f      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80066be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d006      	beq.n	80066d4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	3214      	adds	r2, #20
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80066d2:	e014      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80066d8:	e011      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80066da:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <xTaskGenericNotifyFromISR+0x1e8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	61fb      	str	r3, [r7, #28]
    }
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80066fc:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80066fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006702:	2b01      	cmp	r3, #1
 8006704:	d145      	bne.n	8006792 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	61bb      	str	r3, [r7, #24]
    }
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006724:	4b21      	ldr	r3, [pc, #132]	; (80067ac <xTaskGenericNotifyFromISR+0x1ec>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11c      	bne.n	8006766 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fa1d 	bl	8004b70 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	2201      	movs	r2, #1
 800673c:	409a      	lsls	r2, r3
 800673e:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <xTaskGenericNotifyFromISR+0x1f0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4313      	orrs	r3, r2
 8006744:	4a1a      	ldr	r2, [pc, #104]	; (80067b0 <xTaskGenericNotifyFromISR+0x1f0>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <xTaskGenericNotifyFromISR+0x1f4>)
 8006756:	441a      	add	r2, r3
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7fe f9a9 	bl	8004ab6 <vListInsertEnd>
 8006764:	e005      	b.n	8006772 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	3318      	adds	r3, #24
 800676a:	4619      	mov	r1, r3
 800676c:	4812      	ldr	r0, [pc, #72]	; (80067b8 <xTaskGenericNotifyFromISR+0x1f8>)
 800676e:	f7fe f9a2 	bl	8004ab6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	4b11      	ldr	r3, [pc, #68]	; (80067bc <xTaskGenericNotifyFromISR+0x1fc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	429a      	cmp	r2, r3
 800677e:	d908      	bls.n	8006792 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <xTaskGenericNotifyFromISR+0x200>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f383 8811 	msr	BASEPRI, r3
    }
 800679c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80067a0:	4618      	mov	r0, r3
 80067a2:	3740      	adds	r7, #64	; 0x40
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000300 	.word	0x20000300
 80067ac:	20000324 	.word	0x20000324
 80067b0:	20000304 	.word	0x20000304
 80067b4:	20000228 	.word	0x20000228
 80067b8:	200002bc 	.word	0x200002bc
 80067bc:	20000224 	.word	0x20000224
 80067c0:	20000310 	.word	0x20000310

080067c4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d4:	4b28      	ldr	r3, [pc, #160]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe f9c8 	bl	8004b70 <uxListRemove>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	2201      	movs	r2, #1
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	43da      	mvns	r2, r3
 80067f4:	4b21      	ldr	r3, [pc, #132]	; (800687c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4013      	ands	r3, r2
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d10a      	bne.n	800681c <prvAddCurrentTaskToDelayedList+0x58>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680c:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	481a      	ldr	r0, [pc, #104]	; (8006880 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006816:	f7fe f94e 	bl	8004ab6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800681a:	e026      	b.n	800686a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d209      	bcs.n	8006848 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe f95c 	bl	8004afe <vListInsert>
}
 8006846:	e010      	b.n	800686a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <prvAddCurrentTaskToDelayedList+0xc4>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fe f952 	bl	8004afe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <prvAddCurrentTaskToDelayedList+0xc8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d202      	bcs.n	800686a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6013      	str	r3, [r2, #0]
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000300 	.word	0x20000300
 8006878:	20000224 	.word	0x20000224
 800687c:	20000304 	.word	0x20000304
 8006880:	200002e8 	.word	0x200002e8
 8006884:	200002b8 	.word	0x200002b8
 8006888:	200002b4 	.word	0x200002b4
 800688c:	2000031c 	.word	0x2000031c

08006890 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800689a:	f000 fb31 	bl	8006f00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <xTimerCreateTimerTask+0x54>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <xTimerCreateTimerTask+0x58>)
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2302      	movs	r3, #2
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80068b4:	490d      	ldr	r1, [pc, #52]	; (80068ec <xTimerCreateTimerTask+0x5c>)
 80068b6:	480e      	ldr	r0, [pc, #56]	; (80068f0 <xTimerCreateTimerTask+0x60>)
 80068b8:	f7fe ff38 	bl	800572c <xTaskCreate>
 80068bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	603b      	str	r3, [r7, #0]
    }
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80068da:	687b      	ldr	r3, [r7, #4]
    }
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000358 	.word	0x20000358
 80068e8:	2000035c 	.word	0x2000035c
 80068ec:	080084c4 	.word	0x080084c4
 80068f0:	08006ae1 	.word	0x08006ae1

080068f4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006902:	202c      	movs	r0, #44	; 0x2c
 8006904:	f000 fda2 	bl	800744c <pvPortMalloc>
 8006908:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f805 	bl	8006936 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800692c:	697b      	ldr	r3, [r7, #20]
        }
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	617b      	str	r3, [r7, #20]
    }
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01e      	beq.n	80069a4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006966:	f000 facb 	bl	8006f00 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	6a3a      	ldr	r2, [r7, #32]
 8006980:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	3304      	adds	r3, #4
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe f888 	bl	8004a9c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80069a4:	bf00      	nop
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xTimerGenericCommand+0x2e>
        __asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	623b      	str	r3, [r7, #32]
    }
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <xTimerGenericCommand+0x98>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02a      	beq.n	8006a38 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	dc18      	bgt.n	8006a26 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069f4:	f7ff fbec 	bl	80061d0 <xTaskGetSchedulerState>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d109      	bne.n	8006a12 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069fe:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <xTimerGenericCommand+0x98>)
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	f107 0114 	add.w	r1, r7, #20
 8006a06:	2300      	movs	r3, #0
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	f7fe f9c5 	bl	8004d98 <xQueueGenericSend>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a10:	e012      	b.n	8006a38 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <xTimerGenericCommand+0x98>)
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	f107 0114 	add.w	r1, r7, #20
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f7fe f9bb 	bl	8004d98 <xQueueGenericSend>
 8006a22:	6278      	str	r0, [r7, #36]	; 0x24
 8006a24:	e008      	b.n	8006a38 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <xTimerGenericCommand+0x98>)
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	f107 0114 	add.w	r1, r7, #20
 8006a2e:	2300      	movs	r3, #0
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	f7fe faaf 	bl	8004f94 <xQueueGenericSendFromISR>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3728      	adds	r7, #40	; 0x28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000358 	.word	0x20000358

08006a48 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <prvProcessExpiredTimer+0x94>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe f885 	bl	8004b70 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d022      	beq.n	8006aba <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	18d1      	adds	r1, r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	6978      	ldr	r0, [r7, #20]
 8006a82:	f000 f8d1 	bl	8006c28 <prvInsertTimerInActiveList>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01f      	beq.n	8006acc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	2100      	movs	r1, #0
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f7ff ff88 	bl	80069ac <xTimerGenericCommand>
 8006a9c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d113      	bne.n	8006acc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
    }
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	6978      	ldr	r0, [r7, #20]
 8006ad2:	4798      	blx	r3
    }
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000350 	.word	0x20000350

08006ae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f857 	bl	8006ba0 <prvGetNextExpireTime>
 8006af2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4619      	mov	r1, r3
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f803 	bl	8006b04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006afe:	f000 f8d5 	bl	8006cac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b02:	e7f1      	b.n	8006ae8 <prvTimerTask+0x8>

08006b04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b0e:	f7fe ffa5 	bl	8005a5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b12:	f107 0308 	add.w	r3, r7, #8
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f866 	bl	8006be8 <prvSampleTimeNow>
 8006b1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d130      	bne.n	8006b86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <prvProcessTimerOrBlockTask+0x3c>
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d806      	bhi.n	8006b40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b32:	f7fe ffa1 	bl	8005a78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ff85 	bl	8006a48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b3e:	e024      	b.n	8006b8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <prvProcessTimerOrBlockTask+0x90>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <prvProcessTimerOrBlockTask+0x50>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <prvProcessTimerOrBlockTask+0x52>
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <prvProcessTimerOrBlockTask+0x94>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	f7fe fdad 	bl	80056c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006b6a:	f7fe ff85 	bl	8005a78 <xTaskResumeAll>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <prvProcessTimerOrBlockTask+0x98>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
    }
 8006b84:	e001      	b.n	8006b8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006b86:	f7fe ff77 	bl	8005a78 <xTaskResumeAll>
    }
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000354 	.word	0x20000354
 8006b98:	20000358 	.word	0x20000358
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <prvGetNextExpireTime+0x44>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <prvGetNextExpireTime+0x16>
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	e000      	b.n	8006bb8 <prvGetNextExpireTime+0x18>
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d105      	bne.n	8006bd0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc4:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvGetNextExpireTime+0x44>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e001      	b.n	8006bd4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
    }
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000350 	.word	0x20000350

08006be8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006bf0:	f7fe ffde 	bl	8005bb0 <xTaskGetTickCount>
 8006bf4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <prvSampleTimeNow+0x3c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d205      	bcs.n	8006c0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c00:	f000 f91a 	bl	8006e38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c12:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <prvSampleTimeNow+0x3c>)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c18:	68fb      	ldr	r3, [r7, #12]
    }
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000360 	.word	0x20000360

08006c28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d812      	bhi.n	8006c74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d302      	bcc.n	8006c62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e01b      	b.n	8006c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <prvInsertTimerInActiveList+0x7c>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fd ff46 	bl	8004afe <vListInsert>
 8006c72:	e012      	b.n	8006c9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d206      	bcs.n	8006c8a <prvInsertTimerInActiveList+0x62>
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d302      	bcc.n	8006c8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e007      	b.n	8006c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c8a:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <prvInsertTimerInActiveList+0x80>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7fd ff32 	bl	8004afe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006c9a:	697b      	ldr	r3, [r7, #20]
    }
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000354 	.word	0x20000354
 8006ca8:	20000350 	.word	0x20000350

08006cac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cb2:	e0ae      	b.n	8006e12 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f2c0 80aa 	blt.w	8006e10 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fd ff4f 	bl	8004b70 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff ff87 	bl	8006be8 <prvSampleTimeNow>
 8006cda:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	f200 8097 	bhi.w	8006e12 <prvProcessReceivedCommands+0x166>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <prvProcessReceivedCommands+0x40>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d15 	.word	0x08006d15
 8006cf8:	08006d89 	.word	0x08006d89
 8006cfc:	08006d9d 	.word	0x08006d9d
 8006d00:	08006de7 	.word	0x08006de7
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d15 	.word	0x08006d15
 8006d0c:	08006d89 	.word	0x08006d89
 8006d10:	08006d9d 	.word	0x08006d9d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	18d1      	adds	r1, r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d34:	f7ff ff78 	bl	8006c28 <prvInsertTimerInActiveList>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d069      	beq.n	8006e12 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d44:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05e      	beq.n	8006e12 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2300      	movs	r3, #0
 8006d62:	2100      	movs	r1, #0
 8006d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d66:	f7ff fe21 	bl	80069ac <xTimerGenericCommand>
 8006d6a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d14f      	bne.n	8006e12 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61bb      	str	r3, [r7, #24]
    }
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006d9a:	e03a      	b.n	8006e12 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	617b      	str	r3, [r7, #20]
    }
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	18d1      	adds	r1, r2, r3
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de0:	f7ff ff22 	bl	8006c28 <prvInsertTimerInActiveList>
                        break;
 8006de4:	e015      	b.n	8006e12 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df6:	f000 fc09 	bl	800760c <vPortFree>
 8006dfa:	e00a      	b.n	8006e12 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e0e:	e000      	b.n	8006e12 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006e10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <prvProcessReceivedCommands+0x188>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f107 0108 	add.w	r1, r7, #8
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe f963 	bl	80050e8 <xQueueReceive>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f47f af45 	bne.w	8006cb4 <prvProcessReceivedCommands+0x8>
        }
    }
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	3728      	adds	r7, #40	; 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000358 	.word	0x20000358

08006e38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e3e:	e048      	b.n	8006ed2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e40:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fd fe89 	bl	8004b70 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02e      	beq.n	8006ed2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d90e      	bls.n	8006ea4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e92:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7fd fe2e 	bl	8004afe <vListInsert>
 8006ea2:	e016      	b.n	8006ed2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	2100      	movs	r1, #0
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff fd7c 	bl	80069ac <xTimerGenericCommand>
 8006eb4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	603b      	str	r3, [r7, #0]
    }
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1b1      	bne.n	8006e40 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <prvSwitchTimerLists+0xc4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a04      	ldr	r2, [pc, #16]	; (8006ef8 <prvSwitchTimerLists+0xc0>)
 8006ee8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006eea:	4a04      	ldr	r2, [pc, #16]	; (8006efc <prvSwitchTimerLists+0xc4>)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6013      	str	r3, [r2, #0]
    }
 8006ef0:	bf00      	nop
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000350 	.word	0x20000350
 8006efc:	20000354 	.word	0x20000354

08006f00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006f04:	f000 f980 	bl	8007208 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <prvCheckForValidListAndQueue+0x54>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11d      	bne.n	8006f4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006f10:	4811      	ldr	r0, [pc, #68]	; (8006f58 <prvCheckForValidListAndQueue+0x58>)
 8006f12:	f7fd fda3 	bl	8004a5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006f16:	4811      	ldr	r0, [pc, #68]	; (8006f5c <prvCheckForValidListAndQueue+0x5c>)
 8006f18:	f7fd fda0 	bl	8004a5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <prvCheckForValidListAndQueue+0x60>)
 8006f1e:	4a0e      	ldr	r2, [pc, #56]	; (8006f58 <prvCheckForValidListAndQueue+0x58>)
 8006f20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <prvCheckForValidListAndQueue+0x64>)
 8006f24:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <prvCheckForValidListAndQueue+0x5c>)
 8006f26:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006f28:	2200      	movs	r2, #0
 8006f2a:	210c      	movs	r1, #12
 8006f2c:	200a      	movs	r0, #10
 8006f2e:	f7fd feb1 	bl	8004c94 <xQueueGenericCreate>
 8006f32:	4603      	mov	r3, r0
 8006f34:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <prvCheckForValidListAndQueue+0x54>)
 8006f36:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <prvCheckForValidListAndQueue+0x54>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <prvCheckForValidListAndQueue+0x54>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4908      	ldr	r1, [pc, #32]	; (8006f68 <prvCheckForValidListAndQueue+0x68>)
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fb92 	bl	8005670 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f4c:	f000 f98c 	bl	8007268 <vPortExitCritical>
    }
 8006f50:	bf00      	nop
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000358 	.word	0x20000358
 8006f58:	20000328 	.word	0x20000328
 8006f5c:	2000033c 	.word	0x2000033c
 8006f60:	20000350 	.word	0x20000350
 8006f64:	20000354 	.word	0x20000354
 8006f68:	080084cc 	.word	0x080084cc

08006f6c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
    }
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006f94:	f000 f938 	bl	8007208 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006f9e:	f000 f963 	bl	8007268 <vPortExitCritical>

        return pvReturn;
 8006fa2:	693b      	ldr	r3, [r7, #16]
    }
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3b04      	subs	r3, #4
 8006fbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006fdc:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <pxPortInitialiseStack+0x64>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b14      	subs	r3, #20
 8006fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f06f 0202 	mvn.w	r2, #2
 8006ffa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3b20      	subs	r3, #32
 8007000:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007002:	68fb      	ldr	r3, [r7, #12]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	08007015 	.word	0x08007015

08007014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <prvTaskExitError+0x54>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d00a      	beq.n	800703e <prvTaskExitError+0x2a>
        __asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	60fb      	str	r3, [r7, #12]
    }
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <prvTaskExitError+0x28>
        __asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60bb      	str	r3, [r7, #8]
    }
 8007050:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007052:	bf00      	nop
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0fc      	beq.n	8007054 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000020 	.word	0x20000020
 800706c:	00000000 	.word	0x00000000

08007070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <pxCurrentTCBConst2>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	6808      	ldr	r0, [r1, #0]
 8007076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	f380 8809 	msr	PSP, r0
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	4770      	bx	lr
 800708c:	f3af 8000 	nop.w

08007090 <pxCurrentTCBConst2>:
 8007090:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop

08007098 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <prvPortStartFirstTask+0x24>)
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f380 8808 	msr	MSP, r0
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8814 	msr	CONTROL, r0
 80070aa:	b662      	cpsie	i
 80070ac:	b661      	cpsie	f
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	df00      	svc	0
 80070b8:	bf00      	nop
 80070ba:	0000      	.short	0x0000
 80070bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop

080070c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070ca:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <xPortStartScheduler+0x120>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a46      	ldr	r2, [pc, #280]	; (80071e8 <xPortStartScheduler+0x124>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10a      	bne.n	80070ea <xPortStartScheduler+0x26>
        __asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	613b      	str	r3, [r7, #16]
    }
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070ea:	4b3e      	ldr	r3, [pc, #248]	; (80071e4 <xPortStartScheduler+0x120>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3f      	ldr	r2, [pc, #252]	; (80071ec <xPortStartScheduler+0x128>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10a      	bne.n	800710a <xPortStartScheduler+0x46>
        __asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
    }
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <xPortStartScheduler+0x12c>)
 800710c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800712c:	b2da      	uxtb	r2, r3
 800712e:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xPortStartScheduler+0x130>)
 8007130:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <xPortStartScheduler+0x134>)
 8007134:	2207      	movs	r2, #7
 8007136:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007138:	e009      	b.n	800714e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800713a:	4b2f      	ldr	r3, [pc, #188]	; (80071f8 <xPortStartScheduler+0x134>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3b01      	subs	r3, #1
 8007140:	4a2d      	ldr	r2, [pc, #180]	; (80071f8 <xPortStartScheduler+0x134>)
 8007142:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d0ef      	beq.n	800713a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800715a:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <xPortStartScheduler+0x134>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1c3 0307 	rsb	r3, r3, #7
 8007162:	2b04      	cmp	r3, #4
 8007164:	d00a      	beq.n	800717c <xPortStartScheduler+0xb8>
        __asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	60bb      	str	r3, [r7, #8]
    }
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800717c:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <xPortStartScheduler+0x134>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <xPortStartScheduler+0x134>)
 8007184:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007186:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <xPortStartScheduler+0x134>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <xPortStartScheduler+0x134>)
 8007190:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <xPortStartScheduler+0x138>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <xPortStartScheduler+0x138>)
 80071a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <xPortStartScheduler+0x138>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a14      	ldr	r2, [pc, #80]	; (80071fc <xPortStartScheduler+0x138>)
 80071ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80071b2:	f000 f8db 	bl	800736c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <xPortStartScheduler+0x13c>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80071bc:	f000 f8fa 	bl	80073b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071c0:	4b10      	ldr	r3, [pc, #64]	; (8007204 <xPortStartScheduler+0x140>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0f      	ldr	r2, [pc, #60]	; (8007204 <xPortStartScheduler+0x140>)
 80071c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80071cc:	f7ff ff64 	bl	8007098 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80071d0:	f7fe fdb6 	bl	8005d40 <vTaskSwitchContext>
    prvTaskExitError();
 80071d4:	f7ff ff1e 	bl	8007014 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	e000ed00 	.word	0xe000ed00
 80071e8:	410fc271 	.word	0x410fc271
 80071ec:	410fc270 	.word	0x410fc270
 80071f0:	e000e400 	.word	0xe000e400
 80071f4:	20000364 	.word	0x20000364
 80071f8:	20000368 	.word	0x20000368
 80071fc:	e000ed20 	.word	0xe000ed20
 8007200:	20000020 	.word	0x20000020
 8007204:	e000ef34 	.word	0xe000ef34

08007208 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
        __asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
    }
 8007220:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <vPortEnterCritical+0x58>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3301      	adds	r3, #1
 8007228:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <vPortEnterCritical+0x58>)
 800722a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <vPortEnterCritical+0x58>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10f      	bne.n	8007254 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <vPortEnterCritical+0x5c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <vPortEnterCritical+0x4c>
        __asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	603b      	str	r3, [r7, #0]
    }
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <vPortEnterCritical+0x4a>
    }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	20000020 	.word	0x20000020
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800726e:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <vPortExitCritical+0x50>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <vPortExitCritical+0x24>
        __asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	607b      	str	r3, [r7, #4]
    }
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortExitCritical+0x50>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3b01      	subs	r3, #1
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <vPortExitCritical+0x50>)
 8007294:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <vPortExitCritical+0x50>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <vPortExitCritical+0x42>
 800729e:	2300      	movs	r3, #0
 80072a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	f383 8811 	msr	BASEPRI, r3
    }
 80072a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000020 	.word	0x20000020
 80072bc:	00000000 	.word	0x00000000

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f01e 0f10 	tst.w	lr, #16
 80072d0:	bf08      	it	eq
 80072d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072e4:	f380 8811 	msr	BASEPRI, r0
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f7fe fd26 	bl	8005d40 <vTaskSwitchContext>
 80072f4:	f04f 0000 	mov.w	r0, #0
 80072f8:	f380 8811 	msr	BASEPRI, r0
 80072fc:	bc09      	pop	{r0, r3}
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	6808      	ldr	r0, [r1, #0]
 8007302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007306:	f01e 0f10 	tst.w	lr, #16
 800730a:	bf08      	it	eq
 800730c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007310:	f380 8809 	msr	PSP, r0
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w

08007320 <pxCurrentTCBConst>:
 8007320:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
        __asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
    }
 8007340:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007342:	f7fe fc45 	bl	8005bd0 <xTaskIncrementTick>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <SysTick_Handler+0x40>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
    }
 800735e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <vPortSetupTimerInterrupt+0x38>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <vPortSetupTimerInterrupt+0x3c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <vPortSetupTimerInterrupt+0x40>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <vPortSetupTimerInterrupt+0x44>)
 800738a:	3b01      	subs	r3, #1
 800738c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738e:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	e000e010 	.word	0xe000e010
 80073a4:	e000e018 	.word	0xe000e018
 80073a8:	20000010 	.word	0x20000010
 80073ac:	10624dd3 	.word	0x10624dd3
 80073b0:	e000e014 	.word	0xe000e014

080073b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80073b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073c4 <vPortEnableVFP+0x10>
 80073b8:	6801      	ldr	r1, [r0, #0]
 80073ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073be:	6001      	str	r1, [r0, #0]
 80073c0:	4770      	bx	lr
 80073c2:	0000      	.short	0x0000
 80073c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop

080073cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80073d2:	f3ef 8305 	mrs	r3, IPSR
 80073d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d914      	bls.n	8007408 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <vPortValidateInterruptPriority+0x70>)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <vPortValidateInterruptPriority+0x74>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	7afa      	ldrb	r2, [r7, #11]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d20a      	bcs.n	8007408 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
    }
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <vPortValidateInterruptPriority+0x78>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <vPortValidateInterruptPriority+0x7c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d90a      	bls.n	800742e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	603b      	str	r3, [r7, #0]
    }
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <vPortValidateInterruptPriority+0x60>
    }
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	e000e3f0 	.word	0xe000e3f0
 8007440:	20000364 	.word	0x20000364
 8007444:	e000ed0c 	.word	0xe000ed0c
 8007448:	20000368 	.word	0x20000368

0800744c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007458:	f7fe fb00 	bl	8005a5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800745c:	4b65      	ldr	r3, [pc, #404]	; (80075f4 <pvPortMalloc+0x1a8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007464:	f000 f934 	bl	80076d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007468:	4b63      	ldr	r3, [pc, #396]	; (80075f8 <pvPortMalloc+0x1ac>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 80a7 	bne.w	80075c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02d      	beq.n	80074d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800747c:	2208      	movs	r2, #8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d227      	bcs.n	80074d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007488:	2208      	movs	r2, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d021      	beq.n	80074de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f023 0307 	bic.w	r3, r3, #7
 80074a0:	3308      	adds	r3, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d214      	bcs.n	80074d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f023 0307 	bic.w	r3, r3, #7
 80074ae:	3308      	adds	r3, #8
 80074b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d010      	beq.n	80074de <pvPortMalloc+0x92>
        __asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	617b      	str	r3, [r7, #20]
    }
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074d6:	e002      	b.n	80074de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e000      	b.n	80074e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d06e      	beq.n	80075c4 <pvPortMalloc+0x178>
 80074e6:	4b45      	ldr	r3, [pc, #276]	; (80075fc <pvPortMalloc+0x1b0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d869      	bhi.n	80075c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <pvPortMalloc+0x1b4>)
 80074f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80074f4:	4b42      	ldr	r3, [pc, #264]	; (8007600 <pvPortMalloc+0x1b4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074fa:	e004      	b.n	8007506 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d903      	bls.n	8007518 <pvPortMalloc+0xcc>
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f1      	bne.n	80074fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <pvPortMalloc+0x1a8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751e:	429a      	cmp	r2, r3
 8007520:	d050      	beq.n	80075c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2208      	movs	r2, #8
 8007528:	4413      	add	r3, r2
 800752a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	2308      	movs	r3, #8
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	429a      	cmp	r2, r3
 8007542:	d91f      	bls.n	8007584 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <pvPortMalloc+0x120>
        __asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	613b      	str	r3, [r7, #16]
    }
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800757e:	69b8      	ldr	r0, [r7, #24]
 8007580:	f000 f908 	bl	8007794 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007584:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <pvPortMalloc+0x1b0>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <pvPortMalloc+0x1b0>)
 8007590:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <pvPortMalloc+0x1b0>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b1b      	ldr	r3, [pc, #108]	; (8007604 <pvPortMalloc+0x1b8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d203      	bcs.n	80075a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800759e:	4b17      	ldr	r3, [pc, #92]	; (80075fc <pvPortMalloc+0x1b0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <pvPortMalloc+0x1b8>)
 80075a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <pvPortMalloc+0x1ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <pvPortMalloc+0x1bc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	4a11      	ldr	r2, [pc, #68]	; (8007608 <pvPortMalloc+0x1bc>)
 80075c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80075c4:	f7fe fa58 	bl	8005a78 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <pvPortMalloc+0x19c>
        __asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60fb      	str	r3, [r7, #12]
    }
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80075e8:	69fb      	ldr	r3, [r7, #28]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3728      	adds	r7, #40	; 0x28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20019374 	.word	0x20019374
 80075f8:	20019388 	.word	0x20019388
 80075fc:	20019378 	.word	0x20019378
 8007600:	2001936c 	.word	0x2001936c
 8007604:	2001937c 	.word	0x2001937c
 8007608:	20019380 	.word	0x20019380

0800760c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d04d      	beq.n	80076ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800761e:	2308      	movs	r3, #8
 8007620:	425b      	negs	r3, r3
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <vPortFree+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <vPortFree+0x44>
        __asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	60fb      	str	r3, [r7, #12]
    }
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <vPortFree+0x62>
        __asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60bb      	str	r3, [r7, #8]
    }
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <vPortFree+0xb8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d11a      	bne.n	80076ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <vPortFree+0xb8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007694:	f7fe f9e2 	bl	8005a5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <vPortFree+0xbc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <vPortFree+0xbc>)
 80076a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076a6:	6938      	ldr	r0, [r7, #16]
 80076a8:	f000 f874 	bl	8007794 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <vPortFree+0xc0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	4a06      	ldr	r2, [pc, #24]	; (80076cc <vPortFree+0xc0>)
 80076b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80076b6:	f7fe f9df 	bl	8005a78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80076ba:	bf00      	nop
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20019388 	.word	0x20019388
 80076c8:	20019378 	.word	0x20019378
 80076cc:	20019384 	.word	0x20019384

080076d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80076da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <prvHeapInit+0xac>)
 80076de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3307      	adds	r3, #7
 80076ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <prvHeapInit+0xac>)
 8007700:	4413      	add	r3, r2
 8007702:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007708:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <prvHeapInit+0xb0>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800770e:	4b1c      	ldr	r3, [pc, #112]	; (8007780 <prvHeapInit+0xb0>)
 8007710:	2200      	movs	r2, #0
 8007712:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800771c:	2208      	movs	r2, #8
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0307 	bic.w	r3, r3, #7
 800772a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a15      	ldr	r2, [pc, #84]	; (8007784 <prvHeapInit+0xb4>)
 8007730:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <prvHeapInit+0xb4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <prvHeapInit+0xb4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	1ad2      	subs	r2, r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <prvHeapInit+0xb4>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <prvHeapInit+0xb8>)
 800775e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <prvHeapInit+0xbc>)
 8007766:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <prvHeapInit+0xc0>)
 800776a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800776e:	601a      	str	r2, [r3, #0]
}
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	2000036c 	.word	0x2000036c
 8007780:	2001936c 	.word	0x2001936c
 8007784:	20019374 	.word	0x20019374
 8007788:	2001937c 	.word	0x2001937c
 800778c:	20019378 	.word	0x20019378
 8007790:	20019388 	.word	0x20019388

08007794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800779c:	4b28      	ldr	r3, [pc, #160]	; (8007840 <prvInsertBlockIntoFreeList+0xac>)
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e002      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x14>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d8f7      	bhi.n	80077a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	4413      	add	r3, r2
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d108      	bne.n	80077d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	441a      	add	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	441a      	add	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d118      	bne.n	800781c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b15      	ldr	r3, [pc, #84]	; (8007844 <prvInsertBlockIntoFreeList+0xb0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d00d      	beq.n	8007812 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	441a      	add	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e008      	b.n	8007824 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007812:	4b0c      	ldr	r3, [pc, #48]	; (8007844 <prvInsertBlockIntoFreeList+0xb0>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e003      	b.n	8007824 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	429a      	cmp	r2, r3
 800782a:	d002      	beq.n	8007832 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2001936c 	.word	0x2001936c
 8007844:	20019374 	.word	0x20019374

08007848 <__errno>:
 8007848:	4b01      	ldr	r3, [pc, #4]	; (8007850 <__errno+0x8>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000024 	.word	0x20000024

08007854 <__libc_init_array>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	4d0d      	ldr	r5, [pc, #52]	; (800788c <__libc_init_array+0x38>)
 8007858:	4c0d      	ldr	r4, [pc, #52]	; (8007890 <__libc_init_array+0x3c>)
 800785a:	1b64      	subs	r4, r4, r5
 800785c:	10a4      	asrs	r4, r4, #2
 800785e:	2600      	movs	r6, #0
 8007860:	42a6      	cmp	r6, r4
 8007862:	d109      	bne.n	8007878 <__libc_init_array+0x24>
 8007864:	4d0b      	ldr	r5, [pc, #44]	; (8007894 <__libc_init_array+0x40>)
 8007866:	4c0c      	ldr	r4, [pc, #48]	; (8007898 <__libc_init_array+0x44>)
 8007868:	f000 fc8e 	bl	8008188 <_init>
 800786c:	1b64      	subs	r4, r4, r5
 800786e:	10a4      	asrs	r4, r4, #2
 8007870:	2600      	movs	r6, #0
 8007872:	42a6      	cmp	r6, r4
 8007874:	d105      	bne.n	8007882 <__libc_init_array+0x2e>
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	f855 3b04 	ldr.w	r3, [r5], #4
 800787c:	4798      	blx	r3
 800787e:	3601      	adds	r6, #1
 8007880:	e7ee      	b.n	8007860 <__libc_init_array+0xc>
 8007882:	f855 3b04 	ldr.w	r3, [r5], #4
 8007886:	4798      	blx	r3
 8007888:	3601      	adds	r6, #1
 800788a:	e7f2      	b.n	8007872 <__libc_init_array+0x1e>
 800788c:	08008528 	.word	0x08008528
 8007890:	08008528 	.word	0x08008528
 8007894:	08008528 	.word	0x08008528
 8007898:	0800852c 	.word	0x0800852c

0800789c <memcpy>:
 800789c:	440a      	add	r2, r1
 800789e:	4291      	cmp	r1, r2
 80078a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a4:	d100      	bne.n	80078a8 <memcpy+0xc>
 80078a6:	4770      	bx	lr
 80078a8:	b510      	push	{r4, lr}
 80078aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b2:	4291      	cmp	r1, r2
 80078b4:	d1f9      	bne.n	80078aa <memcpy+0xe>
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <memset>:
 80078b8:	4402      	add	r2, r0
 80078ba:	4603      	mov	r3, r0
 80078bc:	4293      	cmp	r3, r2
 80078be:	d100      	bne.n	80078c2 <memset+0xa>
 80078c0:	4770      	bx	lr
 80078c2:	f803 1b01 	strb.w	r1, [r3], #1
 80078c6:	e7f9      	b.n	80078bc <memset+0x4>

080078c8 <siprintf>:
 80078c8:	b40e      	push	{r1, r2, r3}
 80078ca:	b500      	push	{lr}
 80078cc:	b09c      	sub	sp, #112	; 0x70
 80078ce:	ab1d      	add	r3, sp, #116	; 0x74
 80078d0:	9002      	str	r0, [sp, #8]
 80078d2:	9006      	str	r0, [sp, #24]
 80078d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078d8:	4809      	ldr	r0, [pc, #36]	; (8007900 <siprintf+0x38>)
 80078da:	9107      	str	r1, [sp, #28]
 80078dc:	9104      	str	r1, [sp, #16]
 80078de:	4909      	ldr	r1, [pc, #36]	; (8007904 <siprintf+0x3c>)
 80078e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e4:	9105      	str	r1, [sp, #20]
 80078e6:	6800      	ldr	r0, [r0, #0]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	a902      	add	r1, sp, #8
 80078ec:	f000 f868 	bl	80079c0 <_svfiprintf_r>
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	b01c      	add	sp, #112	; 0x70
 80078f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078fc:	b003      	add	sp, #12
 80078fe:	4770      	bx	lr
 8007900:	20000024 	.word	0x20000024
 8007904:	ffff0208 	.word	0xffff0208

08007908 <__ssputs_r>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	688e      	ldr	r6, [r1, #8]
 800790e:	429e      	cmp	r6, r3
 8007910:	4682      	mov	sl, r0
 8007912:	460c      	mov	r4, r1
 8007914:	4690      	mov	r8, r2
 8007916:	461f      	mov	r7, r3
 8007918:	d838      	bhi.n	800798c <__ssputs_r+0x84>
 800791a:	898a      	ldrh	r2, [r1, #12]
 800791c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007920:	d032      	beq.n	8007988 <__ssputs_r+0x80>
 8007922:	6825      	ldr	r5, [r4, #0]
 8007924:	6909      	ldr	r1, [r1, #16]
 8007926:	eba5 0901 	sub.w	r9, r5, r1
 800792a:	6965      	ldr	r5, [r4, #20]
 800792c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007934:	3301      	adds	r3, #1
 8007936:	444b      	add	r3, r9
 8007938:	106d      	asrs	r5, r5, #1
 800793a:	429d      	cmp	r5, r3
 800793c:	bf38      	it	cc
 800793e:	461d      	movcc	r5, r3
 8007940:	0553      	lsls	r3, r2, #21
 8007942:	d531      	bpl.n	80079a8 <__ssputs_r+0xa0>
 8007944:	4629      	mov	r1, r5
 8007946:	f000 fb55 	bl	8007ff4 <_malloc_r>
 800794a:	4606      	mov	r6, r0
 800794c:	b950      	cbnz	r0, 8007964 <__ssputs_r+0x5c>
 800794e:	230c      	movs	r3, #12
 8007950:	f8ca 3000 	str.w	r3, [sl]
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007964:	6921      	ldr	r1, [r4, #16]
 8007966:	464a      	mov	r2, r9
 8007968:	f7ff ff98 	bl	800789c <memcpy>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	6126      	str	r6, [r4, #16]
 800797a:	6165      	str	r5, [r4, #20]
 800797c:	444e      	add	r6, r9
 800797e:	eba5 0509 	sub.w	r5, r5, r9
 8007982:	6026      	str	r6, [r4, #0]
 8007984:	60a5      	str	r5, [r4, #8]
 8007986:	463e      	mov	r6, r7
 8007988:	42be      	cmp	r6, r7
 800798a:	d900      	bls.n	800798e <__ssputs_r+0x86>
 800798c:	463e      	mov	r6, r7
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	4632      	mov	r2, r6
 8007992:	4641      	mov	r1, r8
 8007994:	f000 faa8 	bl	8007ee8 <memmove>
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	1b9b      	subs	r3, r3, r6
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	4433      	add	r3, r6
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7db      	b.n	8007960 <__ssputs_r+0x58>
 80079a8:	462a      	mov	r2, r5
 80079aa:	f000 fb97 	bl	80080dc <_realloc_r>
 80079ae:	4606      	mov	r6, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1e1      	bne.n	8007978 <__ssputs_r+0x70>
 80079b4:	6921      	ldr	r1, [r4, #16]
 80079b6:	4650      	mov	r0, sl
 80079b8:	f000 fab0 	bl	8007f1c <_free_r>
 80079bc:	e7c7      	b.n	800794e <__ssputs_r+0x46>
	...

080079c0 <_svfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4698      	mov	r8, r3
 80079c6:	898b      	ldrh	r3, [r1, #12]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	b09d      	sub	sp, #116	; 0x74
 80079cc:	4607      	mov	r7, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	d50e      	bpl.n	80079f2 <_svfiprintf_r+0x32>
 80079d4:	690b      	ldr	r3, [r1, #16]
 80079d6:	b963      	cbnz	r3, 80079f2 <_svfiprintf_r+0x32>
 80079d8:	2140      	movs	r1, #64	; 0x40
 80079da:	f000 fb0b 	bl	8007ff4 <_malloc_r>
 80079de:	6028      	str	r0, [r5, #0]
 80079e0:	6128      	str	r0, [r5, #16]
 80079e2:	b920      	cbnz	r0, 80079ee <_svfiprintf_r+0x2e>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e0d1      	b.n	8007b92 <_svfiprintf_r+0x1d2>
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	616b      	str	r3, [r5, #20]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9309      	str	r3, [sp, #36]	; 0x24
 80079f6:	2320      	movs	r3, #32
 80079f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a00:	2330      	movs	r3, #48	; 0x30
 8007a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bac <_svfiprintf_r+0x1ec>
 8007a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a0a:	f04f 0901 	mov.w	r9, #1
 8007a0e:	4623      	mov	r3, r4
 8007a10:	469a      	mov	sl, r3
 8007a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a16:	b10a      	cbz	r2, 8007a1c <_svfiprintf_r+0x5c>
 8007a18:	2a25      	cmp	r2, #37	; 0x25
 8007a1a:	d1f9      	bne.n	8007a10 <_svfiprintf_r+0x50>
 8007a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a20:	d00b      	beq.n	8007a3a <_svfiprintf_r+0x7a>
 8007a22:	465b      	mov	r3, fp
 8007a24:	4622      	mov	r2, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff ff6d 	bl	8007908 <__ssputs_r>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f000 80aa 	beq.w	8007b88 <_svfiprintf_r+0x1c8>
 8007a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a36:	445a      	add	r2, fp
 8007a38:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80a2 	beq.w	8007b88 <_svfiprintf_r+0x1c8>
 8007a44:	2300      	movs	r3, #0
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a4e:	f10a 0a01 	add.w	sl, sl, #1
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	9307      	str	r3, [sp, #28]
 8007a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a5c:	4654      	mov	r4, sl
 8007a5e:	2205      	movs	r2, #5
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	4851      	ldr	r0, [pc, #324]	; (8007bac <_svfiprintf_r+0x1ec>)
 8007a66:	f7f8 fbcb 	bl	8000200 <memchr>
 8007a6a:	9a04      	ldr	r2, [sp, #16]
 8007a6c:	b9d8      	cbnz	r0, 8007aa6 <_svfiprintf_r+0xe6>
 8007a6e:	06d0      	lsls	r0, r2, #27
 8007a70:	bf44      	itt	mi
 8007a72:	2320      	movmi	r3, #32
 8007a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a78:	0711      	lsls	r1, r2, #28
 8007a7a:	bf44      	itt	mi
 8007a7c:	232b      	movmi	r3, #43	; 0x2b
 8007a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a82:	f89a 3000 	ldrb.w	r3, [sl]
 8007a86:	2b2a      	cmp	r3, #42	; 0x2a
 8007a88:	d015      	beq.n	8007ab6 <_svfiprintf_r+0xf6>
 8007a8a:	9a07      	ldr	r2, [sp, #28]
 8007a8c:	4654      	mov	r4, sl
 8007a8e:	2000      	movs	r0, #0
 8007a90:	f04f 0c0a 	mov.w	ip, #10
 8007a94:	4621      	mov	r1, r4
 8007a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a9a:	3b30      	subs	r3, #48	; 0x30
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d94e      	bls.n	8007b3e <_svfiprintf_r+0x17e>
 8007aa0:	b1b0      	cbz	r0, 8007ad0 <_svfiprintf_r+0x110>
 8007aa2:	9207      	str	r2, [sp, #28]
 8007aa4:	e014      	b.n	8007ad0 <_svfiprintf_r+0x110>
 8007aa6:	eba0 0308 	sub.w	r3, r0, r8
 8007aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	46a2      	mov	sl, r4
 8007ab4:	e7d2      	b.n	8007a5c <_svfiprintf_r+0x9c>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	9103      	str	r1, [sp, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfbb      	ittet	lt
 8007ac2:	425b      	neglt	r3, r3
 8007ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac8:	9307      	strge	r3, [sp, #28]
 8007aca:	9307      	strlt	r3, [sp, #28]
 8007acc:	bfb8      	it	lt
 8007ace:	9204      	strlt	r2, [sp, #16]
 8007ad0:	7823      	ldrb	r3, [r4, #0]
 8007ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad4:	d10c      	bne.n	8007af0 <_svfiprintf_r+0x130>
 8007ad6:	7863      	ldrb	r3, [r4, #1]
 8007ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ada:	d135      	bne.n	8007b48 <_svfiprintf_r+0x188>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	9203      	str	r2, [sp, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfb8      	it	lt
 8007ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aec:	3402      	adds	r4, #2
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bbc <_svfiprintf_r+0x1fc>
 8007af4:	7821      	ldrb	r1, [r4, #0]
 8007af6:	2203      	movs	r2, #3
 8007af8:	4650      	mov	r0, sl
 8007afa:	f7f8 fb81 	bl	8000200 <memchr>
 8007afe:	b140      	cbz	r0, 8007b12 <_svfiprintf_r+0x152>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	eba0 000a 	sub.w	r0, r0, sl
 8007b06:	fa03 f000 	lsl.w	r0, r3, r0
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	4303      	orrs	r3, r0
 8007b0e:	3401      	adds	r4, #1
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b16:	4826      	ldr	r0, [pc, #152]	; (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b1c:	2206      	movs	r2, #6
 8007b1e:	f7f8 fb6f 	bl	8000200 <memchr>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d038      	beq.n	8007b98 <_svfiprintf_r+0x1d8>
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <_svfiprintf_r+0x1f4>)
 8007b28:	bb1b      	cbnz	r3, 8007b72 <_svfiprintf_r+0x1b2>
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	3307      	adds	r3, #7
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
 8007b32:	3308      	adds	r3, #8
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	4433      	add	r3, r6
 8007b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3c:	e767      	b.n	8007a0e <_svfiprintf_r+0x4e>
 8007b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b42:	460c      	mov	r4, r1
 8007b44:	2001      	movs	r0, #1
 8007b46:	e7a5      	b.n	8007a94 <_svfiprintf_r+0xd4>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	3401      	adds	r4, #1
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f04f 0c0a 	mov.w	ip, #10
 8007b54:	4620      	mov	r0, r4
 8007b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b5a:	3a30      	subs	r2, #48	; 0x30
 8007b5c:	2a09      	cmp	r2, #9
 8007b5e:	d903      	bls.n	8007b68 <_svfiprintf_r+0x1a8>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0c5      	beq.n	8007af0 <_svfiprintf_r+0x130>
 8007b64:	9105      	str	r1, [sp, #20]
 8007b66:	e7c3      	b.n	8007af0 <_svfiprintf_r+0x130>
 8007b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7f0      	b.n	8007b54 <_svfiprintf_r+0x194>
 8007b72:	ab03      	add	r3, sp, #12
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	462a      	mov	r2, r5
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <_svfiprintf_r+0x1f8>)
 8007b7a:	a904      	add	r1, sp, #16
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f3af 8000 	nop.w
 8007b82:	1c42      	adds	r2, r0, #1
 8007b84:	4606      	mov	r6, r0
 8007b86:	d1d6      	bne.n	8007b36 <_svfiprintf_r+0x176>
 8007b88:	89ab      	ldrh	r3, [r5, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	f53f af2c 	bmi.w	80079e8 <_svfiprintf_r+0x28>
 8007b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b92:	b01d      	add	sp, #116	; 0x74
 8007b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b98:	ab03      	add	r3, sp, #12
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <_svfiprintf_r+0x1f8>)
 8007ba0:	a904      	add	r1, sp, #16
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f000 f87a 	bl	8007c9c <_printf_i>
 8007ba8:	e7eb      	b.n	8007b82 <_svfiprintf_r+0x1c2>
 8007baa:	bf00      	nop
 8007bac:	080084ec 	.word	0x080084ec
 8007bb0:	080084f6 	.word	0x080084f6
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	08007909 	.word	0x08007909
 8007bbc:	080084f2 	.word	0x080084f2

08007bc0 <_printf_common>:
 8007bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	4699      	mov	r9, r3
 8007bc8:	688a      	ldr	r2, [r1, #8]
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	bfb8      	it	lt
 8007bd4:	4613      	movlt	r3, r2
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	b10a      	cbz	r2, 8007be6 <_printf_common+0x26>
 8007be2:	3301      	adds	r3, #1
 8007be4:	6033      	str	r3, [r6, #0]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	0699      	lsls	r1, r3, #26
 8007bea:	bf42      	ittt	mi
 8007bec:	6833      	ldrmi	r3, [r6, #0]
 8007bee:	3302      	addmi	r3, #2
 8007bf0:	6033      	strmi	r3, [r6, #0]
 8007bf2:	6825      	ldr	r5, [r4, #0]
 8007bf4:	f015 0506 	ands.w	r5, r5, #6
 8007bf8:	d106      	bne.n	8007c08 <_printf_common+0x48>
 8007bfa:	f104 0a19 	add.w	sl, r4, #25
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	6832      	ldr	r2, [r6, #0]
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dc26      	bgt.n	8007c56 <_printf_common+0x96>
 8007c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c0c:	1e13      	subs	r3, r2, #0
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	bf18      	it	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	0692      	lsls	r2, r2, #26
 8007c16:	d42b      	bmi.n	8007c70 <_printf_common+0xb0>
 8007c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4638      	mov	r0, r7
 8007c20:	47c0      	blx	r8
 8007c22:	3001      	adds	r0, #1
 8007c24:	d01e      	beq.n	8007c64 <_printf_common+0xa4>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	68e5      	ldr	r5, [r4, #12]
 8007c2a:	6832      	ldr	r2, [r6, #0]
 8007c2c:	f003 0306 	and.w	r3, r3, #6
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	bf08      	it	eq
 8007c34:	1aad      	subeq	r5, r5, r2
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	6922      	ldr	r2, [r4, #16]
 8007c3a:	bf0c      	ite	eq
 8007c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c40:	2500      	movne	r5, #0
 8007c42:	4293      	cmp	r3, r2
 8007c44:	bfc4      	itt	gt
 8007c46:	1a9b      	subgt	r3, r3, r2
 8007c48:	18ed      	addgt	r5, r5, r3
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	341a      	adds	r4, #26
 8007c4e:	42b5      	cmp	r5, r6
 8007c50:	d11a      	bne.n	8007c88 <_printf_common+0xc8>
 8007c52:	2000      	movs	r0, #0
 8007c54:	e008      	b.n	8007c68 <_printf_common+0xa8>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4652      	mov	r2, sl
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	47c0      	blx	r8
 8007c60:	3001      	adds	r0, #1
 8007c62:	d103      	bne.n	8007c6c <_printf_common+0xac>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	e7c6      	b.n	8007bfe <_printf_common+0x3e>
 8007c70:	18e1      	adds	r1, r4, r3
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	2030      	movs	r0, #48	; 0x30
 8007c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c7a:	4422      	add	r2, r4
 8007c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c84:	3302      	adds	r3, #2
 8007c86:	e7c7      	b.n	8007c18 <_printf_common+0x58>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	4638      	mov	r0, r7
 8007c90:	47c0      	blx	r8
 8007c92:	3001      	adds	r0, #1
 8007c94:	d0e6      	beq.n	8007c64 <_printf_common+0xa4>
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7d9      	b.n	8007c4e <_printf_common+0x8e>
	...

08007c9c <_printf_i>:
 8007c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	7e0f      	ldrb	r7, [r1, #24]
 8007ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ca4:	2f78      	cmp	r7, #120	; 0x78
 8007ca6:	4691      	mov	r9, r2
 8007ca8:	4680      	mov	r8, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	469a      	mov	sl, r3
 8007cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cb2:	d807      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cb4:	2f62      	cmp	r7, #98	; 0x62
 8007cb6:	d80a      	bhi.n	8007cce <_printf_i+0x32>
 8007cb8:	2f00      	cmp	r7, #0
 8007cba:	f000 80d8 	beq.w	8007e6e <_printf_i+0x1d2>
 8007cbe:	2f58      	cmp	r7, #88	; 0x58
 8007cc0:	f000 80a3 	beq.w	8007e0a <_printf_i+0x16e>
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ccc:	e03a      	b.n	8007d44 <_printf_i+0xa8>
 8007cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cd2:	2b15      	cmp	r3, #21
 8007cd4:	d8f6      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cd6:	a101      	add	r1, pc, #4	; (adr r1, 8007cdc <_printf_i+0x40>)
 8007cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007cc5 	.word	0x08007cc5
 8007ce8:	08007cc5 	.word	0x08007cc5
 8007cec:	08007cc5 	.word	0x08007cc5
 8007cf0:	08007cc5 	.word	0x08007cc5
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007cc5 	.word	0x08007cc5
 8007cfc:	08007cc5 	.word	0x08007cc5
 8007d00:	08007cc5 	.word	0x08007cc5
 8007d04:	08007cc5 	.word	0x08007cc5
 8007d08:	08007e55 	.word	0x08007e55
 8007d0c:	08007d79 	.word	0x08007d79
 8007d10:	08007e37 	.word	0x08007e37
 8007d14:	08007cc5 	.word	0x08007cc5
 8007d18:	08007cc5 	.word	0x08007cc5
 8007d1c:	08007e77 	.word	0x08007e77
 8007d20:	08007cc5 	.word	0x08007cc5
 8007d24:	08007d79 	.word	0x08007d79
 8007d28:	08007cc5 	.word	0x08007cc5
 8007d2c:	08007cc5 	.word	0x08007cc5
 8007d30:	08007e3f 	.word	0x08007e3f
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d44:	2301      	movs	r3, #1
 8007d46:	e0a3      	b.n	8007e90 <_printf_i+0x1f4>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	6829      	ldr	r1, [r5, #0]
 8007d4c:	0606      	lsls	r6, r0, #24
 8007d4e:	f101 0304 	add.w	r3, r1, #4
 8007d52:	d50a      	bpl.n	8007d6a <_printf_i+0xce>
 8007d54:	680e      	ldr	r6, [r1, #0]
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	2e00      	cmp	r6, #0
 8007d5a:	da03      	bge.n	8007d64 <_printf_i+0xc8>
 8007d5c:	232d      	movs	r3, #45	; 0x2d
 8007d5e:	4276      	negs	r6, r6
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d64:	485e      	ldr	r0, [pc, #376]	; (8007ee0 <_printf_i+0x244>)
 8007d66:	230a      	movs	r3, #10
 8007d68:	e019      	b.n	8007d9e <_printf_i+0x102>
 8007d6a:	680e      	ldr	r6, [r1, #0]
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d72:	bf18      	it	ne
 8007d74:	b236      	sxthne	r6, r6
 8007d76:	e7ef      	b.n	8007d58 <_printf_i+0xbc>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	1d19      	adds	r1, r3, #4
 8007d7e:	6029      	str	r1, [r5, #0]
 8007d80:	0601      	lsls	r1, r0, #24
 8007d82:	d501      	bpl.n	8007d88 <_printf_i+0xec>
 8007d84:	681e      	ldr	r6, [r3, #0]
 8007d86:	e002      	b.n	8007d8e <_printf_i+0xf2>
 8007d88:	0646      	lsls	r6, r0, #25
 8007d8a:	d5fb      	bpl.n	8007d84 <_printf_i+0xe8>
 8007d8c:	881e      	ldrh	r6, [r3, #0]
 8007d8e:	4854      	ldr	r0, [pc, #336]	; (8007ee0 <_printf_i+0x244>)
 8007d90:	2f6f      	cmp	r7, #111	; 0x6f
 8007d92:	bf0c      	ite	eq
 8007d94:	2308      	moveq	r3, #8
 8007d96:	230a      	movne	r3, #10
 8007d98:	2100      	movs	r1, #0
 8007d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d9e:	6865      	ldr	r5, [r4, #4]
 8007da0:	60a5      	str	r5, [r4, #8]
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	bfa2      	ittt	ge
 8007da6:	6821      	ldrge	r1, [r4, #0]
 8007da8:	f021 0104 	bicge.w	r1, r1, #4
 8007dac:	6021      	strge	r1, [r4, #0]
 8007dae:	b90e      	cbnz	r6, 8007db4 <_printf_i+0x118>
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d04d      	beq.n	8007e50 <_printf_i+0x1b4>
 8007db4:	4615      	mov	r5, r2
 8007db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dba:	fb03 6711 	mls	r7, r3, r1, r6
 8007dbe:	5dc7      	ldrb	r7, [r0, r7]
 8007dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dc4:	4637      	mov	r7, r6
 8007dc6:	42bb      	cmp	r3, r7
 8007dc8:	460e      	mov	r6, r1
 8007dca:	d9f4      	bls.n	8007db6 <_printf_i+0x11a>
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d10b      	bne.n	8007de8 <_printf_i+0x14c>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07de      	lsls	r6, r3, #31
 8007dd4:	d508      	bpl.n	8007de8 <_printf_i+0x14c>
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	6861      	ldr	r1, [r4, #4]
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	bfde      	ittt	le
 8007dde:	2330      	movle	r3, #48	; 0x30
 8007de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007de8:	1b52      	subs	r2, r2, r5
 8007dea:	6122      	str	r2, [r4, #16]
 8007dec:	f8cd a000 	str.w	sl, [sp]
 8007df0:	464b      	mov	r3, r9
 8007df2:	aa03      	add	r2, sp, #12
 8007df4:	4621      	mov	r1, r4
 8007df6:	4640      	mov	r0, r8
 8007df8:	f7ff fee2 	bl	8007bc0 <_printf_common>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d14c      	bne.n	8007e9a <_printf_i+0x1fe>
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	b004      	add	sp, #16
 8007e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0a:	4835      	ldr	r0, [pc, #212]	; (8007ee0 <_printf_i+0x244>)
 8007e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e10:	6829      	ldr	r1, [r5, #0]
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e18:	6029      	str	r1, [r5, #0]
 8007e1a:	061d      	lsls	r5, r3, #24
 8007e1c:	d514      	bpl.n	8007e48 <_printf_i+0x1ac>
 8007e1e:	07df      	lsls	r7, r3, #31
 8007e20:	bf44      	itt	mi
 8007e22:	f043 0320 	orrmi.w	r3, r3, #32
 8007e26:	6023      	strmi	r3, [r4, #0]
 8007e28:	b91e      	cbnz	r6, 8007e32 <_printf_i+0x196>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	f023 0320 	bic.w	r3, r3, #32
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	2310      	movs	r3, #16
 8007e34:	e7b0      	b.n	8007d98 <_printf_i+0xfc>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	f043 0320 	orr.w	r3, r3, #32
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	2378      	movs	r3, #120	; 0x78
 8007e40:	4828      	ldr	r0, [pc, #160]	; (8007ee4 <_printf_i+0x248>)
 8007e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e46:	e7e3      	b.n	8007e10 <_printf_i+0x174>
 8007e48:	0659      	lsls	r1, r3, #25
 8007e4a:	bf48      	it	mi
 8007e4c:	b2b6      	uxthmi	r6, r6
 8007e4e:	e7e6      	b.n	8007e1e <_printf_i+0x182>
 8007e50:	4615      	mov	r5, r2
 8007e52:	e7bb      	b.n	8007dcc <_printf_i+0x130>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	6826      	ldr	r6, [r4, #0]
 8007e58:	6961      	ldr	r1, [r4, #20]
 8007e5a:	1d18      	adds	r0, r3, #4
 8007e5c:	6028      	str	r0, [r5, #0]
 8007e5e:	0635      	lsls	r5, r6, #24
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0x1cc>
 8007e64:	6019      	str	r1, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <_printf_i+0x1d2>
 8007e68:	0670      	lsls	r0, r6, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0x1c8>
 8007e6c:	8019      	strh	r1, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	4615      	mov	r5, r2
 8007e74:	e7ba      	b.n	8007dec <_printf_i+0x150>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	602a      	str	r2, [r5, #0]
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	2100      	movs	r1, #0
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7f8 f9bc 	bl	8000200 <memchr>
 8007e88:	b108      	cbz	r0, 8007e8e <_printf_i+0x1f2>
 8007e8a:	1b40      	subs	r0, r0, r5
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	2300      	movs	r3, #0
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e98:	e7a8      	b.n	8007dec <_printf_i+0x150>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	47d0      	blx	sl
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0ab      	beq.n	8007e00 <_printf_i+0x164>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	d413      	bmi.n	8007ed6 <_printf_i+0x23a>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	bfb8      	it	lt
 8007eb6:	4618      	movlt	r0, r3
 8007eb8:	e7a4      	b.n	8007e04 <_printf_i+0x168>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	47d0      	blx	sl
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d09b      	beq.n	8007e00 <_printf_i+0x164>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	9903      	ldr	r1, [sp, #12]
 8007ece:	1a5b      	subs	r3, r3, r1
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dcf2      	bgt.n	8007eba <_printf_i+0x21e>
 8007ed4:	e7eb      	b.n	8007eae <_printf_i+0x212>
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	f104 0619 	add.w	r6, r4, #25
 8007edc:	e7f5      	b.n	8007eca <_printf_i+0x22e>
 8007ede:	bf00      	nop
 8007ee0:	080084fd 	.word	0x080084fd
 8007ee4:	0800850e 	.word	0x0800850e

08007ee8 <memmove>:
 8007ee8:	4288      	cmp	r0, r1
 8007eea:	b510      	push	{r4, lr}
 8007eec:	eb01 0402 	add.w	r4, r1, r2
 8007ef0:	d902      	bls.n	8007ef8 <memmove+0x10>
 8007ef2:	4284      	cmp	r4, r0
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	d807      	bhi.n	8007f08 <memmove+0x20>
 8007ef8:	1e43      	subs	r3, r0, #1
 8007efa:	42a1      	cmp	r1, r4
 8007efc:	d008      	beq.n	8007f10 <memmove+0x28>
 8007efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f06:	e7f8      	b.n	8007efa <memmove+0x12>
 8007f08:	4402      	add	r2, r0
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	428a      	cmp	r2, r1
 8007f0e:	d100      	bne.n	8007f12 <memmove+0x2a>
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f1a:	e7f7      	b.n	8007f0c <memmove+0x24>

08007f1c <_free_r>:
 8007f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d044      	beq.n	8007fac <_free_r+0x90>
 8007f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f2e:	bfb8      	it	lt
 8007f30:	18e4      	addlt	r4, r4, r3
 8007f32:	f000 f913 	bl	800815c <__malloc_lock>
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <_free_r+0x94>)
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x30>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	b003      	add	sp, #12
 8007f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f48:	f000 b90e 	b.w	8008168 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x46>
 8007f50:	6825      	ldr	r5, [r4, #0]
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x22>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x50>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x46>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1855      	adds	r5, r2, r1
 8007f70:	42a5      	cmp	r5, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x70>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	4421      	add	r1, r4
 8007f78:	1854      	adds	r4, r2, r1
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x26>
 8007f80:	681c      	ldr	r4, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	4421      	add	r1, r4
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x26>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x78>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x26>
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1961      	adds	r1, r4, r5
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x26>
 8007fac:	b003      	add	sp, #12
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	2001938c 	.word	0x2001938c

08007fb4 <sbrk_aligned>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ff0 <sbrk_aligned+0x3c>)
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b911      	cbnz	r1, 8007fc6 <sbrk_aligned+0x12>
 8007fc0:	f000 f8bc 	bl	800813c <_sbrk_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 f8b7 	bl	800813c <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d00a      	beq.n	8007fe8 <sbrk_aligned+0x34>
 8007fd2:	1cc4      	adds	r4, r0, #3
 8007fd4:	f024 0403 	bic.w	r4, r4, #3
 8007fd8:	42a0      	cmp	r0, r4
 8007fda:	d007      	beq.n	8007fec <sbrk_aligned+0x38>
 8007fdc:	1a21      	subs	r1, r4, r0
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 f8ac 	bl	800813c <_sbrk_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d101      	bne.n	8007fec <sbrk_aligned+0x38>
 8007fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	20019390 	.word	0x20019390

08007ff4 <_malloc_r>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	1ccd      	adds	r5, r1, #3
 8007ffa:	f025 0503 	bic.w	r5, r5, #3
 8007ffe:	3508      	adds	r5, #8
 8008000:	2d0c      	cmp	r5, #12
 8008002:	bf38      	it	cc
 8008004:	250c      	movcc	r5, #12
 8008006:	2d00      	cmp	r5, #0
 8008008:	4607      	mov	r7, r0
 800800a:	db01      	blt.n	8008010 <_malloc_r+0x1c>
 800800c:	42a9      	cmp	r1, r5
 800800e:	d905      	bls.n	800801c <_malloc_r+0x28>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	2600      	movs	r6, #0
 8008016:	4630      	mov	r0, r6
 8008018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800801c:	4e2e      	ldr	r6, [pc, #184]	; (80080d8 <_malloc_r+0xe4>)
 800801e:	f000 f89d 	bl	800815c <__malloc_lock>
 8008022:	6833      	ldr	r3, [r6, #0]
 8008024:	461c      	mov	r4, r3
 8008026:	bb34      	cbnz	r4, 8008076 <_malloc_r+0x82>
 8008028:	4629      	mov	r1, r5
 800802a:	4638      	mov	r0, r7
 800802c:	f7ff ffc2 	bl	8007fb4 <sbrk_aligned>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	4604      	mov	r4, r0
 8008034:	d14d      	bne.n	80080d2 <_malloc_r+0xde>
 8008036:	6834      	ldr	r4, [r6, #0]
 8008038:	4626      	mov	r6, r4
 800803a:	2e00      	cmp	r6, #0
 800803c:	d140      	bne.n	80080c0 <_malloc_r+0xcc>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	4631      	mov	r1, r6
 8008042:	4638      	mov	r0, r7
 8008044:	eb04 0803 	add.w	r8, r4, r3
 8008048:	f000 f878 	bl	800813c <_sbrk_r>
 800804c:	4580      	cmp	r8, r0
 800804e:	d13a      	bne.n	80080c6 <_malloc_r+0xd2>
 8008050:	6821      	ldr	r1, [r4, #0]
 8008052:	3503      	adds	r5, #3
 8008054:	1a6d      	subs	r5, r5, r1
 8008056:	f025 0503 	bic.w	r5, r5, #3
 800805a:	3508      	adds	r5, #8
 800805c:	2d0c      	cmp	r5, #12
 800805e:	bf38      	it	cc
 8008060:	250c      	movcc	r5, #12
 8008062:	4629      	mov	r1, r5
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff ffa5 	bl	8007fb4 <sbrk_aligned>
 800806a:	3001      	adds	r0, #1
 800806c:	d02b      	beq.n	80080c6 <_malloc_r+0xd2>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	442b      	add	r3, r5
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	e00e      	b.n	8008094 <_malloc_r+0xa0>
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	1b52      	subs	r2, r2, r5
 800807a:	d41e      	bmi.n	80080ba <_malloc_r+0xc6>
 800807c:	2a0b      	cmp	r2, #11
 800807e:	d916      	bls.n	80080ae <_malloc_r+0xba>
 8008080:	1961      	adds	r1, r4, r5
 8008082:	42a3      	cmp	r3, r4
 8008084:	6025      	str	r5, [r4, #0]
 8008086:	bf18      	it	ne
 8008088:	6059      	strne	r1, [r3, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	bf08      	it	eq
 800808e:	6031      	streq	r1, [r6, #0]
 8008090:	5162      	str	r2, [r4, r5]
 8008092:	604b      	str	r3, [r1, #4]
 8008094:	4638      	mov	r0, r7
 8008096:	f104 060b 	add.w	r6, r4, #11
 800809a:	f000 f865 	bl	8008168 <__malloc_unlock>
 800809e:	f026 0607 	bic.w	r6, r6, #7
 80080a2:	1d23      	adds	r3, r4, #4
 80080a4:	1af2      	subs	r2, r6, r3
 80080a6:	d0b6      	beq.n	8008016 <_malloc_r+0x22>
 80080a8:	1b9b      	subs	r3, r3, r6
 80080aa:	50a3      	str	r3, [r4, r2]
 80080ac:	e7b3      	b.n	8008016 <_malloc_r+0x22>
 80080ae:	6862      	ldr	r2, [r4, #4]
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	bf0c      	ite	eq
 80080b4:	6032      	streq	r2, [r6, #0]
 80080b6:	605a      	strne	r2, [r3, #4]
 80080b8:	e7ec      	b.n	8008094 <_malloc_r+0xa0>
 80080ba:	4623      	mov	r3, r4
 80080bc:	6864      	ldr	r4, [r4, #4]
 80080be:	e7b2      	b.n	8008026 <_malloc_r+0x32>
 80080c0:	4634      	mov	r4, r6
 80080c2:	6876      	ldr	r6, [r6, #4]
 80080c4:	e7b9      	b.n	800803a <_malloc_r+0x46>
 80080c6:	230c      	movs	r3, #12
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	4638      	mov	r0, r7
 80080cc:	f000 f84c 	bl	8008168 <__malloc_unlock>
 80080d0:	e7a1      	b.n	8008016 <_malloc_r+0x22>
 80080d2:	6025      	str	r5, [r4, #0]
 80080d4:	e7de      	b.n	8008094 <_malloc_r+0xa0>
 80080d6:	bf00      	nop
 80080d8:	2001938c 	.word	0x2001938c

080080dc <_realloc_r>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	4680      	mov	r8, r0
 80080e2:	4614      	mov	r4, r2
 80080e4:	460e      	mov	r6, r1
 80080e6:	b921      	cbnz	r1, 80080f2 <_realloc_r+0x16>
 80080e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	4611      	mov	r1, r2
 80080ee:	f7ff bf81 	b.w	8007ff4 <_malloc_r>
 80080f2:	b92a      	cbnz	r2, 8008100 <_realloc_r+0x24>
 80080f4:	f7ff ff12 	bl	8007f1c <_free_r>
 80080f8:	4625      	mov	r5, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	f000 f838 	bl	8008174 <_malloc_usable_size_r>
 8008104:	4284      	cmp	r4, r0
 8008106:	4607      	mov	r7, r0
 8008108:	d802      	bhi.n	8008110 <_realloc_r+0x34>
 800810a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800810e:	d812      	bhi.n	8008136 <_realloc_r+0x5a>
 8008110:	4621      	mov	r1, r4
 8008112:	4640      	mov	r0, r8
 8008114:	f7ff ff6e 	bl	8007ff4 <_malloc_r>
 8008118:	4605      	mov	r5, r0
 800811a:	2800      	cmp	r0, #0
 800811c:	d0ed      	beq.n	80080fa <_realloc_r+0x1e>
 800811e:	42bc      	cmp	r4, r7
 8008120:	4622      	mov	r2, r4
 8008122:	4631      	mov	r1, r6
 8008124:	bf28      	it	cs
 8008126:	463a      	movcs	r2, r7
 8008128:	f7ff fbb8 	bl	800789c <memcpy>
 800812c:	4631      	mov	r1, r6
 800812e:	4640      	mov	r0, r8
 8008130:	f7ff fef4 	bl	8007f1c <_free_r>
 8008134:	e7e1      	b.n	80080fa <_realloc_r+0x1e>
 8008136:	4635      	mov	r5, r6
 8008138:	e7df      	b.n	80080fa <_realloc_r+0x1e>
	...

0800813c <_sbrk_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_sbrk_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 f91a 	bl	8001380 <_sbrk>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_sbrk_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_sbrk_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20019394 	.word	0x20019394

0800815c <__malloc_lock>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__malloc_lock+0x8>)
 800815e:	f000 b811 	b.w	8008184 <__retarget_lock_acquire_recursive>
 8008162:	bf00      	nop
 8008164:	20019398 	.word	0x20019398

08008168 <__malloc_unlock>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__malloc_unlock+0x8>)
 800816a:	f000 b80c 	b.w	8008186 <__retarget_lock_release_recursive>
 800816e:	bf00      	nop
 8008170:	20019398 	.word	0x20019398

08008174 <_malloc_usable_size_r>:
 8008174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008178:	1f18      	subs	r0, r3, #4
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfbc      	itt	lt
 800817e:	580b      	ldrlt	r3, [r1, r0]
 8008180:	18c0      	addlt	r0, r0, r3
 8008182:	4770      	bx	lr

08008184 <__retarget_lock_acquire_recursive>:
 8008184:	4770      	bx	lr

08008186 <__retarget_lock_release_recursive>:
 8008186:	4770      	bx	lr

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
