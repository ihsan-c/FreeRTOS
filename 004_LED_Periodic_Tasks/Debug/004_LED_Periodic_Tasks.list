
004_LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080076b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001a890  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a8ac  2001a8ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154c5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fcb  00000000  00000000  00035511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  000384e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  00039890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f59  00000000  00000000  0003aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015962  00000000  00000000  0005da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7488  00000000  00000000  00073373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a7fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005258  00000000  00000000  0014a84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074f0 	.word	0x080074f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080074f0 	.word	0x080074f0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192d0 	.word	0x200192d0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fba5 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f006 fe88 	bl	8007290 <SEGGER_UART_init>

  //CYCLCNT enable for SEGGER view
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 faba 	bl	8004b04 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f002 fbf1 	bl	8002d88 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f002 fbd7 	bl	8002d88 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f002 fbbe 	bl	8002d88 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 fd93 	bl	8003154 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0007a120 	.word	0x0007a120
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08007508 	.word	0x08007508
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08007518 	.word	0x08007518
 8000644:	08000a51 	.word	0x08000a51
 8000648:	08007528 	.word	0x08007528
 800064c:	08000a19 	.word	0x08000a19

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 ff3e 	bl	80074e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fde5 	bl	80012a4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9e4 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f846 	bl	8001794 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9cd 	bl	8000aac <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd28 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd23 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd1d 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb73 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb65 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb55 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb48 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb38 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb28 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb1c 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb0b 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fafc 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 faeb 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fade 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 facd 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fac1 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fab0 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 faa3 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80009e8:	f002 fcc4 	bl	8003374 <xTaskGetTickCount>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <led_green_handler+0x30>)
 80009f2:	f006 fb05 	bl	8007000 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <led_green_handler+0x34>)
 80009fc:	f000 fc37 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(1000));
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fb21 	bl	8003050 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a0e:	e7ef      	b.n	80009f0 <led_green_handler+0x10>
 8000a10:	08007538 	.word	0x08007538
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000a20:	f002 fca8 	bl	8003374 <xTaskGetTickCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <led_orange_handler+0x30>)
 8000a2a:	f006 fae9 	bl	8007000 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <led_orange_handler+0x34>)
 8000a34:	f000 fc1b 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(800));
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fb05 	bl	8003050 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a46:	e7ef      	b.n	8000a28 <led_orange_handler+0x10>
 8000a48:	0800754c 	.word	0x0800754c
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000a58:	f002 fc8c 	bl	8003374 <xTaskGetTickCount>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <led_red_handler+0x30>)
 8000a62:	f006 facd 	bl	8007000 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <led_red_handler+0x34>)
 8000a6c:	f000 fbff 	bl	800126e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(400));
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fae9 	bl	8003050 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a7e:	e7ef      	b.n	8000a60 <led_red_handler+0x10>
 8000a80:	08007560 	.word	0x08007560
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f931 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f832 	bl	8001bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f001 f817 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 f813 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 f839 	bl	8001c10 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 f889 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 f991 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 f96d 	bl	8000eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM6_DAC_IRQHandler+0x10>)
 8000c36:	f001 f8b5 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000038 	.word	0x20000038

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f006 fbe1 	bl	800745c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc65 	bl	8000568 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cac:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8000cb0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cb4:	2001a8ac 	.word	0x2001a8ac

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff0e 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fee4 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000080 	.word	0x20000080

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000080 	.word	0x20000080

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	041a      	lsls	r2, r3, #16
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43d9      	mvns	r1, r3
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	400b      	ands	r3, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e267      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fce4 	bl	8000d28 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fce0 	bl	8000d28 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e207      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcd0 	bl	8000d28 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fccc 	bl	8000d28 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f3      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc85 	bl	8000d28 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc81 	bl	8000d28 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a8      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc64 	bl	8000d28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc60 	bl	8000d28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e187      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc44 	bl	8000d28 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc40 	bl	8000d28 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e167      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc2d 	bl	8000d28 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc29 	bl	8000d28 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e150      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbe9 	bl	8000d28 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbe5 	bl	8000d28 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e10c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fbaa 	bl	8000d28 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fba6 	bl	8000d28 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0cb      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb94 	bl	8000d28 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb90 	bl	8000d28 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a1 	beq.w	8001784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb64 	bl	8000d28 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb60 	bl	8000d28 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb39 	bl	8000d28 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb35 	bl	8000d28 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e05c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb22 	bl	8000d28 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb1e 	bl	8000d28 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d028      	beq.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d121      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa50 	bl	8000d28 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa4c 	bl	8000d28 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f8e6 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	08007654 	.word	0x08007654
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80e1 	bhi.w	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0db      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001998:	e0db      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199e:	e0d8      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b6d      	ldr	r3, [pc, #436]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0159      	lsls	r1, r3, #5
 80019e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e4:	0150      	lsls	r0, r2, #5
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a51      	subs	r1, r2, r1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb63 0301 	sbc.w	r3, r3, r1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a04:	4659      	mov	r1, fp
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	4651      	mov	r1, sl
 8001a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0e:	4651      	mov	r1, sl
 8001a10:	018a      	lsls	r2, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ebb2 0801 	subs.w	r8, r2, r1
 8001a18:	4659      	mov	r1, fp
 8001a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a32:	4690      	mov	r8, r2
 8001a34:	4699      	mov	r9, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	eb18 0303 	adds.w	r3, r8, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	eb49 0303 	adc.w	r3, r9, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a52:	4629      	mov	r1, r5
 8001a54:	024b      	lsls	r3, r1, #9
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	024a      	lsls	r2, r1, #9
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a70:	f7fe fbf8 	bl	8000264 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fb9e 	bl	8000264 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0a9b      	lsrs	r3, r3, #10
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08007664 	.word	0x08007664

08001bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	220f      	movs	r2, #15
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetClockConfig+0x60>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0207 	and.w	r2, r3, #7
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9d8 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04e      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d01d      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ee 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8e0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8f1 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8c4 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8b6 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8c7 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f89a 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f88c 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f89d 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f870 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f862 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f873 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fdb0 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f902 	bl	8002158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f838 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8cc 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d027      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d023      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 0208 	add.w	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d103      	bne.n	800222e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00c      	b.n	8002248 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3308      	adds	r3, #8
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e002      	b.n	800223c <vListInsert+0x2e>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	429a      	cmp	r2, r3
 8002246:	d2f6      	bcs.n	8002236 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6892      	ldr	r2, [r2, #8]
 8002296:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6852      	ldr	r2, [r2, #4]
 80022a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d103      	bne.n	80022b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueGenericReset+0x2a>
        __asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	60bb      	str	r3, [r7, #8]
    }
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022fe:	f002 f8cb 	bl	8004498 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	3b01      	subs	r3, #1
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	441a      	add	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d114      	bne.n	800237e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01a      	beq.n	8002392 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3310      	adds	r3, #16
 8002360:	4618      	mov	r0, r3
 8002362:	f001 f9a1 	bl	80036a8 <xTaskRemoveFromEventList>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d012      	beq.n	8002392 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <xQueueGenericReset+0xcc>)
 800236e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	e009      	b.n	8002392 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3310      	adds	r3, #16
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fef2 	bl	800216c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3324      	adds	r3, #36	; 0x24
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff feed 	bl	800216c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002392:	f002 f8b1 	bl	80044f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <xQueueGenericCreate+0x2a>
        __asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	61bb      	str	r3, [r7, #24]
    }
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <xQueueGenericCreate+0x48>
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d101      	bne.n	80023f0 <xQueueGenericCreate+0x4c>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <xQueueGenericCreate+0x4e>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <xQueueGenericCreate+0x68>
        __asm volatile
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	617b      	str	r3, [r7, #20]
    }
 8002408:	bf00      	nop
 800240a:	e7fe      	b.n	800240a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002412:	d90a      	bls.n	800242a <xQueueGenericCreate+0x86>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	613b      	str	r3, [r7, #16]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f95c 	bl	80046ec <pvPortMalloc>
 8002434:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3350      	adds	r3, #80	; 0x50
 8002444:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f805 	bl	8002462 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002458:	6a3b      	ldr	r3, [r7, #32]
    }
 800245a:	4618      	mov	r0, r3
 800245c:	3728      	adds	r7, #40	; 0x28
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e002      	b.n	8002484 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002490:	2101      	movs	r1, #1
 8002492:	69b8      	ldr	r0, [r7, #24]
 8002494:	f7ff ff1e 	bl	80022d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	2073      	movs	r0, #115	; 0x73
 80024a8:	f003 ff26 	bl	80062f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b090      	sub	sp, #64	; 0x40
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueGenericSend+0x32>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <xQueueGenericSend+0x40>
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <xQueueGenericSend+0x44>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <xQueueGenericSend+0x46>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <xQueueGenericSend+0x60>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d103      	bne.n	8002522 <xQueueGenericSend+0x6e>
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <xQueueGenericSend+0x72>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueGenericSend+0x74>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <xQueueGenericSend+0x8e>
        __asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	623b      	str	r3, [r7, #32]
    }
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002542:	f001 fa51 	bl	80039e8 <xTaskGetSchedulerState>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <xQueueGenericSend+0x9e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <xQueueGenericSend+0xa2>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <xQueueGenericSend+0xa4>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <xQueueGenericSend+0xbe>
        __asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	61fb      	str	r3, [r7, #28]
    }
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002572:	f001 ff91 	bl	8004498 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <xQueueGenericSend+0xd4>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d136      	bne.n	80025f6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	4618      	mov	r0, r3
 800258c:	f004 fc42 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	4601      	mov	r1, r0
 800259c:	205a      	movs	r0, #90	; 0x5a
 800259e:	f003 ff21 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a8:	f000 fa78 	bl	8002a9c <prvCopyDataToQueue>
 80025ac:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f874 	bl	80036a8 <xTaskRemoveFromEventList>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <xQueueGenericSend+0x248>)
 80025c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	e00a      	b.n	80025ee <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <xQueueGenericSend+0x248>)
 80025e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025ee:	f001 ff83 	bl	80044f8 <vPortExitCritical>
                return pdPASS;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07d      	b.n	80026f2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d110      	bne.n	800261e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025fc:	f001 ff7c 	bl	80044f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fc06 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	4601      	mov	r1, r0
 8002614:	205a      	movs	r0, #90	; 0x5a
 8002616:	f003 fee5 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
 800261c:	e069      	b.n	80026f2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f8a3 	bl	8003774 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002632:	f001 ff61 	bl	80044f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002636:	f000 fdef 	bl	8003218 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800263a:	f001 ff2d 	bl	8004498 <vPortEnterCritical>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d103      	bne.n	8002654 <xQueueGenericSend+0x1a0>
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265a:	b25b      	sxtb	r3, r3
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x1b6>
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800266a:	f001 ff45 	bl	80044f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266e:	1d3a      	adds	r2, r7, #4
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f001 f892 	bl	80037a0 <xTaskCheckForTimeOut>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d124      	bne.n	80026cc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002684:	f000 fb02 	bl	8002c8c <prvIsQueueFull>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3310      	adds	r3, #16
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 ffb4 	bl	8003604 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269e:	f000 fa8d 	bl	8002bbc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026a2:	f000 fdc7 	bl	8003234 <xTaskResumeAll>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f af62 	bne.w	8002572 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <xQueueGenericSend+0x248>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	e758      	b.n	8002572 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c2:	f000 fa7b 	bl	8002bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026c6:	f000 fdb5 	bl	8003234 <xTaskResumeAll>
 80026ca:	e752      	b.n	8002572 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ce:	f000 fa75 	bl	8002bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026d2:	f000 fdaf 	bl	8003234 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 fb9b 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	460b      	mov	r3, r1
 80026e8:	4601      	mov	r1, r0
 80026ea:	205a      	movs	r0, #90	; 0x5a
 80026ec:	f003 fe7a 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026f0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3738      	adds	r7, #56	; 0x38
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b090      	sub	sp, #64	; 0x40
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d103      	bne.n	800273c <xQueueGenericSendFromISR+0x3c>
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGenericSendFromISR+0x40>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xQueueGenericSendFromISR+0x42>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d103      	bne.n	800276a <xQueueGenericSendFromISR+0x6a>
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <xQueueGenericSendFromISR+0x6e>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xQueueGenericSendFromISR+0x70>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	623b      	str	r3, [r7, #32]
    }
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800278a:	f001 ff6f 	bl	800466c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800278e:	f3ef 8211 	mrs	r2, BASEPRI
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	61fa      	str	r2, [r7, #28]
 80027a4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027a6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <xQueueGenericSendFromISR+0xbc>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d148      	bne.n	800284e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fb20 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 80027d4:	4601      	mov	r1, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	461a      	mov	r2, r3
 80027da:	2060      	movs	r0, #96	; 0x60
 80027dc:	f003 fd32 	bl	8006244 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027e6:	f000 f959 	bl	8002a9c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d112      	bne.n	800281a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d025      	beq.n	8002848 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	4618      	mov	r0, r3
 8002802:	f000 ff51 	bl	80036a8 <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01d      	beq.n	8002848 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e016      	b.n	8002848 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800281a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800281e:	2b7f      	cmp	r3, #127	; 0x7f
 8002820:	d10a      	bne.n	8002838 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	617b      	str	r3, [r7, #20]
    }
 8002834:	bf00      	nop
 8002836:	e7fe      	b.n	8002836 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800283c:	3301      	adds	r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	b25a      	sxtb	r2, r3
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002848:	2301      	movs	r3, #1
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800284c:	e00b      	b.n	8002866 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fadf 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002856:	4601      	mov	r1, r0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	2060      	movs	r0, #96	; 0x60
 800285e:	f003 fcf1 	bl	8006244 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002862:	2300      	movs	r3, #0
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002870:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002874:	4618      	mov	r0, r3
 8002876:	3740      	adds	r7, #64	; 0x40
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08f      	sub	sp, #60	; 0x3c
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <xQueueReceive+0x30>
        __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	623b      	str	r3, [r7, #32]
    }
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <xQueueReceive+0x3e>
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <xQueueReceive+0x42>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueReceive+0x44>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xQueueReceive+0x5e>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	61fb      	str	r3, [r7, #28]
    }
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028da:	f001 f885 	bl	80039e8 <xTaskGetSchedulerState>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <xQueueReceive+0x6e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <xQueueReceive+0x72>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueReceive+0x74>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueReceive+0x8e>
        __asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	61bb      	str	r3, [r7, #24]
    }
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800290a:	f001 fdc5 	bl	8004498 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02f      	beq.n	800297a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291e:	f000 f927 	bl	8002b70 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fa75 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 800292a:	4604      	mov	r4, r0
 800292c:	2000      	movs	r0, #0
 800292e:	f004 fa71 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2101      	movs	r1, #1
 8002938:	9100      	str	r1, [sp, #0]
 800293a:	4621      	mov	r1, r4
 800293c:	205c      	movs	r0, #92	; 0x5c
 800293e:	f003 fd51 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00f      	beq.n	8002972 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	3310      	adds	r3, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fea6 	bl	80036a8 <xTaskRemoveFromEventList>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002962:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <xQueueReceive+0x21c>)
 8002964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002972:	f001 fdc1 	bl	80044f8 <vPortExitCritical>
                return pdPASS;
 8002976:	2301      	movs	r3, #1
 8002978:	e08a      	b.n	8002a90 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d113      	bne.n	80029a8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002980:	f001 fdba 	bl	80044f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	4618      	mov	r0, r3
 8002988:	f004 fa44 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 800298c:	4604      	mov	r4, r0
 800298e:	2000      	movs	r0, #0
 8002990:	f004 fa40 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2101      	movs	r1, #1
 800299a:	9100      	str	r1, [sp, #0]
 800299c:	4621      	mov	r1, r4
 800299e:	205c      	movs	r0, #92	; 0x5c
 80029a0:	f003 fd20 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e073      	b.n	8002a90 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fede 	bl	8003774 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029bc:	f001 fd9c 	bl	80044f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029c0:	f000 fc2a 	bl	8003218 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029c4:	f001 fd68 	bl	8004498 <vPortEnterCritical>
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d103      	bne.n	80029de <xQueueReceive+0x162>
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d103      	bne.n	80029f4 <xQueueReceive+0x178>
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f4:	f001 fd80 	bl	80044f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fecd 	bl	80037a0 <xTaskCheckForTimeOut>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d124      	bne.n	8002a56 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f927 	bl	8002c60 <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d018      	beq.n	8002a4a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fdef 	bl	8003604 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a28:	f000 f8c8 	bl	8002bbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a2c:	f000 fc02 	bl	8003234 <xTaskResumeAll>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f47f af69 	bne.w	800290a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <xQueueReceive+0x21c>)
 8002a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	e75f      	b.n	800290a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4c:	f000 f8b6 	bl	8002bbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a50:	f000 fbf0 	bl	8003234 <xTaskResumeAll>
 8002a54:	e759      	b.n	800290a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a58:	f000 f8b0 	bl	8002bbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a5c:	f000 fbea 	bl	8003234 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a62:	f000 f8fd 	bl	8002c60 <prvIsQueueEmpty>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f43f af4e 	beq.w	800290a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 f9cf 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002a76:	4604      	mov	r4, r0
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f004 f9cb 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2101      	movs	r1, #1
 8002a84:	9100      	str	r1, [sp, #0]
 8002a86:	4621      	mov	r1, r4
 8002a88:	205c      	movs	r0, #92	; 0x5c
 8002a8a:	f003 fcab 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a8e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3734      	adds	r7, #52	; 0x34
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd90      	pop	{r4, r7, pc}
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d14d      	bne.n	8002b5e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ffac 	bl	8003a24 <xTaskPriorityDisinherit>
 8002acc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e043      	b.n	8002b5e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d119      	bne.n	8002b10 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6858      	ldr	r0, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	f004 fcec 	bl	80074c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	441a      	add	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d32b      	bcc.n	8002b5e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	e026      	b.n	8002b5e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68d8      	ldr	r0, [r3, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	f004 fcd2 	bl	80074c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	425b      	negs	r3, r3
 8002b2a:	441a      	add	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	425b      	negs	r3, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d105      	bne.n	8002b5e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b66:	697b      	ldr	r3, [r7, #20]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d018      	beq.n	8002bb4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d303      	bcc.n	8002ba4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	461a      	mov	r2, r3
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f004 fc88 	bl	80074c4 <memcpy>
    }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bc4:	f001 fc68 	bl	8004498 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bd0:	e011      	b.n	8002bf6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3324      	adds	r3, #36	; 0x24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd62 	bl	80036a8 <xTaskRemoveFromEventList>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bea:	f000 fe3f 	bl	800386c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	dce9      	bgt.n	8002bd2 <prvUnlockQueue+0x16>
 8002bfe:	e000      	b.n	8002c02 <prvUnlockQueue+0x46>
                        break;
 8002c00:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c0a:	f001 fc75 	bl	80044f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c0e:	f001 fc43 	bl	8004498 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c18:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c1a:	e011      	b.n	8002c40 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3310      	adds	r3, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fd3d 	bl	80036a8 <xTaskRemoveFromEventList>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c34:	f000 fe1a 	bl	800386c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dce9      	bgt.n	8002c1c <prvUnlockQueue+0x60>
 8002c48:	e000      	b.n	8002c4c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c4a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c54:	f001 fc50 	bl	80044f8 <vPortExitCritical>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c68:	f001 fc16 	bl	8004498 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e001      	b.n	8002c7e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c7e:	f001 fc3b 	bl	80044f8 <vPortExitCritical>

    return xReturn;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c94:	f001 fc00 	bl	8004498 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d102      	bne.n	8002caa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e001      	b.n	8002cae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002cae:	f001 fc23 	bl	80044f8 <vPortExitCritical>

    return xReturn;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e01e      	b.n	8002d0a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <vQueueAddToRegistry+0x60>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d115      	bne.n	8002d04 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cd8:	4910      	ldr	r1, [pc, #64]	; (8002d1c <vQueueAddToRegistry+0x60>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <vQueueAddToRegistry+0x60>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f88f 	bl	8006e14 <SEGGER_SYSVIEW_ShrinkId>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2071      	movs	r0, #113	; 0x71
 8002cfe:	f003 faa1 	bl	8006244 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002d02:	e006      	b.n	8002d12 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d9dd      	bls.n	8002ccc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000084 	.word	0x20000084

08002d20 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d30:	f001 fbb2 	bl	8004498 <vPortEnterCritical>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d103      	bne.n	8002d4a <vQueueWaitForMessageRestricted+0x2a>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d103      	bne.n	8002d60 <vQueueWaitForMessageRestricted+0x40>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d60:	f001 fbca 	bl	80044f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fc69 	bl	800364c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff1e 	bl	8002bbc <prvUnlockQueue>
    }
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af04      	add	r7, sp, #16
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fca5 	bl	80046ec <pvPortMalloc>
 8002da2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00e      	beq.n	8002dc8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002daa:	2058      	movs	r0, #88	; 0x58
 8002dac:	f001 fc9e 	bl	80046ec <pvPortMalloc>
 8002db0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbe:	e005      	b.n	8002dcc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dc0:	6978      	ldr	r0, [r7, #20]
 8002dc2:	f001 fd73 	bl	80048ac <vPortFree>
 8002dc6:	e001      	b.n	8002dcc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d013      	beq.n	8002dfa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9303      	str	r3, [sp, #12]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f80e 	bl	8002e0a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dee:	69f8      	ldr	r0, [r7, #28]
 8002df0:	f000 f8a2 	bl	8002f38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002df4:	2301      	movs	r3, #1
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e002      	b.n	8002e00 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e00:	69bb      	ldr	r3, [r7, #24]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b088      	sub	sp, #32
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	461a      	mov	r2, r3
 8002e22:	21a5      	movs	r1, #165	; 0xa5
 8002e24:	f004 fb5c 	bl	80074e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e32:	3b01      	subs	r3, #1
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f023 0307 	bic.w	r3, r3, #7
 8002e40:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	617b      	str	r3, [r7, #20]
    }
 8002e5e:	bf00      	nop
 8002e60:	e7fe      	b.n	8002e60 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01f      	beq.n	8002ea8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e012      	b.n	8002e94 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	7819      	ldrb	r1, [r3, #0]
 8002e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3334      	adds	r3, #52	; 0x34
 8002e7e:	460a      	mov	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	d9e9      	bls.n	8002e6e <prvInitialiseNewTask+0x64>
 8002e9a:	e000      	b.n	8002e9e <prvInitialiseNewTask+0x94>
            {
                break;
 8002e9c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ea6:	e003      	b.n	8002eb0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d901      	bls.n	8002eba <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2200      	movs	r2, #0
 8002eca:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f96b 	bl	80021ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	3318      	adds	r3, #24
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f966 	bl	80021ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	f1c3 0205 	rsb	r2, r3, #5
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	3350      	adds	r3, #80	; 0x50
 8002efa:	2204      	movs	r2, #4
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 faee 	bl	80074e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	3354      	adds	r3, #84	; 0x54
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f004 fae7 	bl	80074e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	69b8      	ldr	r0, [r7, #24]
 8002f18:	f001 f98e 	bl	8004238 <pxPortInitialiseStack>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f2e:	bf00      	nop
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f40:	f001 faaa 	bl	8004498 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <prvAddNewTaskToReadyList+0xfc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <prvAddNewTaskToReadyList+0xfc>)
 8002f4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <prvAddNewTaskToReadyList+0x100>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <prvAddNewTaskToReadyList+0x100>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <prvAddNewTaskToReadyList+0xfc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d110      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f64:	f000 fca6 	bl	80038b4 <prvInitialiseTaskLists>
 8002f68:	e00d      	b.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <prvAddNewTaskToReadyList+0x104>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <prvAddNewTaskToReadyList+0x100>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d802      	bhi.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f80:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <prvAddNewTaskToReadyList+0x100>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <prvAddNewTaskToReadyList+0x108>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <prvAddNewTaskToReadyList+0x108>)
 8002f8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f90:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <prvAddNewTaskToReadyList+0x108>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <prvAddNewTaskToReadyList+0x94>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fe11 	bl	8006bc8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461c      	mov	r4, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	1ae3      	subs	r3, r4, r3
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	f001 fe3e 	bl	8004c48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fe7e 	bl	8006cd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <prvAddNewTaskToReadyList+0x10c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <prvAddNewTaskToReadyList+0x10c>)
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <prvAddNewTaskToReadyList+0x110>)
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7ff f8e2 	bl	80021c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003002:	f001 fa79 	bl	80044f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <prvAddNewTaskToReadyList+0x104>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <prvAddNewTaskToReadyList+0x100>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d207      	bcs.n	800302c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <prvAddNewTaskToReadyList+0x114>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bdb0      	pop	{r4, r5, r7, pc}
 8003034:	2000019c 	.word	0x2000019c
 8003038:	200000c4 	.word	0x200000c4
 800303c:	200001a8 	.word	0x200001a8
 8003040:	200001b8 	.word	0x200001b8
 8003044:	200001a4 	.word	0x200001a4
 8003048:	200000c8 	.word	0x200000c8
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xTaskDelayUntil+0x2a>
        __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	617b      	str	r3, [r7, #20]
    }
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xTaskDelayUntil+0x46>
        __asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	613b      	str	r3, [r7, #16]
    }
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <xTaskDelayUntil+0xf8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <xTaskDelayUntil+0x64>
        __asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	60fb      	str	r3, [r7, #12]
    }
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80030b4:	f000 f8b0 	bl	8003218 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <xTaskDelayUntil+0xfc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d20b      	bcs.n	80030ea <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d211      	bcs.n	8003100 <xTaskDelayUntil+0xb0>
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d90d      	bls.n	8003100 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	e00a      	b.n	8003100 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d303      	bcc.n	80030fc <xTaskDelayUntil+0xac>
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d901      	bls.n	8003100 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 800310c:	2024      	movs	r0, #36	; 0x24
 800310e:	f003 f83f 	bl	8006190 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fd02 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003120:	f000 f888 	bl	8003234 <xTaskResumeAll>
 8003124:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <xTaskDelayUntil+0x100>)
 800312e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800313e:	4618      	mov	r0, r3
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200001c4 	.word	0x200001c4
 800314c:	200001a0 	.word	0x200001a0
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <vTaskStartScheduler+0xa4>)
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <vTaskStartScheduler+0xa8>)
 8003168:	4825      	ldr	r0, [pc, #148]	; (8003200 <vTaskStartScheduler+0xac>)
 800316a:	f7ff fe0d 	bl	8002d88 <xTaskCreate>
 800316e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003176:	f000 fd4d 	bl	8003c14 <xTimerCreateTimerTask>
 800317a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d124      	bne.n	80031cc <vTaskStartScheduler+0x78>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	60bb      	str	r3, [r7, #8]
    }
 8003194:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <vTaskStartScheduler+0xb0>)
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <vTaskStartScheduler+0xb4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <vTaskStartScheduler+0xb8>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <vTaskStartScheduler+0xbc>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <vTaskStartScheduler+0xa4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d102      	bne.n	80031bc <vTaskStartScheduler+0x68>
 80031b6:	f003 fceb 	bl	8006b90 <SEGGER_SYSVIEW_OnIdle>
 80031ba:	e004      	b.n	80031c6 <vTaskStartScheduler+0x72>
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <vTaskStartScheduler+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fd43 	bl	8006c4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80031c6:	f001 f8c5 	bl	8004354 <xPortStartScheduler>
 80031ca:	e00e      	b.n	80031ea <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d10a      	bne.n	80031ea <vTaskStartScheduler+0x96>
        __asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	607b      	str	r3, [r7, #4]
    }
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <vTaskStartScheduler+0xc0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200001c0 	.word	0x200001c0
 80031fc:	08007574 	.word	0x08007574
 8003200:	08003885 	.word	0x08003885
 8003204:	200001bc 	.word	0x200001bc
 8003208:	200001a8 	.word	0x200001a8
 800320c:	200001a0 	.word	0x200001a0
 8003210:	200000c4 	.word	0x200000c4
 8003214:	2000000c 	.word	0x2000000c

08003218 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <vTaskSuspendAll+0x18>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	4a03      	ldr	r2, [pc, #12]	; (8003230 <vTaskSuspendAll+0x18>)
 8003224:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	200001c4 	.word	0x200001c4

08003234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003242:	4b43      	ldr	r3, [pc, #268]	; (8003350 <xTaskResumeAll+0x11c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <xTaskResumeAll+0x2c>
        __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	603b      	str	r3, [r7, #0]
    }
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003260:	f001 f91a 	bl	8004498 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003264:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <xTaskResumeAll+0x11c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	4a39      	ldr	r2, [pc, #228]	; (8003350 <xTaskResumeAll+0x11c>)
 800326c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <xTaskResumeAll+0x11c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d165      	bne.n	8003342 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003276:	4b37      	ldr	r3, [pc, #220]	; (8003354 <xTaskResumeAll+0x120>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d061      	beq.n	8003342 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800327e:	e032      	b.n	80032e6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003280:	4b35      	ldr	r3, [pc, #212]	; (8003358 <xTaskResumeAll+0x124>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3318      	adds	r3, #24
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fff7 	bl	8002280 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3304      	adds	r3, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fff2 	bl	8002280 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fd16 	bl	8006cd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <xTaskResumeAll+0x128>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	4a2a      	ldr	r2, [pc, #168]	; (800335c <xTaskResumeAll+0x128>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4a27      	ldr	r2, [pc, #156]	; (8003360 <xTaskResumeAll+0x12c>)
 80032c4:	441a      	add	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f7fe ff7a 	bl	80021c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <xTaskResumeAll+0x130>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d302      	bcc.n	80032e6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <xTaskResumeAll+0x134>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <xTaskResumeAll+0x124>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1c8      	bne.n	8003280 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032f4:	f000 fb5c 	bl	80039b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <xTaskResumeAll+0x138>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003304:	f000 f858 	bl	80033b8 <xTaskIncrementTick>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <xTaskResumeAll+0x134>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f1      	bne.n	8003304 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <xTaskResumeAll+0x138>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <xTaskResumeAll+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800332e:	2301      	movs	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <xTaskResumeAll+0x13c>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003342:	f001 f8d9 	bl	80044f8 <vPortExitCritical>

    return xAlreadyYielded;
 8003346:	68bb      	ldr	r3, [r7, #8]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200001c4 	.word	0x200001c4
 8003354:	2000019c 	.word	0x2000019c
 8003358:	2000015c 	.word	0x2000015c
 800335c:	200001a4 	.word	0x200001a4
 8003360:	200000c8 	.word	0x200000c8
 8003364:	200000c4 	.word	0x200000c4
 8003368:	200001b0 	.word	0x200001b0
 800336c:	200001ac 	.word	0x200001ac
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <xTaskGetTickCount+0x1c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200001a0 	.word	0x200001a0

08003394 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800339a:	f001 f967 	bl	800466c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <xTaskGetTickCountFromISR+0x20>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033a8:	683b      	ldr	r3, [r7, #0]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200001a0 	.word	0x200001a0

080033b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <xTaskIncrementTick+0x14c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 8092 	bne.w	80034f0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033cc:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <xTaskIncrementTick+0x150>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033d4:	4a4c      	ldr	r2, [pc, #304]	; (8003508 <xTaskIncrementTick+0x150>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d120      	bne.n	8003422 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80033e0:	4b4a      	ldr	r3, [pc, #296]	; (800350c <xTaskIncrementTick+0x154>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <xTaskIncrementTick+0x48>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
    }
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <xTaskIncrementTick+0x46>
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <xTaskIncrementTick+0x154>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b42      	ldr	r3, [pc, #264]	; (8003510 <xTaskIncrementTick+0x158>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a40      	ldr	r2, [pc, #256]	; (800350c <xTaskIncrementTick+0x154>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4a40      	ldr	r2, [pc, #256]	; (8003510 <xTaskIncrementTick+0x158>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <xTaskIncrementTick+0x15c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a3e      	ldr	r2, [pc, #248]	; (8003514 <xTaskIncrementTick+0x15c>)
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	f000 fac7 	bl	80039b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <xTaskIncrementTick+0x160>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d34c      	bcc.n	80034c6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <xTaskIncrementTick+0x154>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003436:	4b38      	ldr	r3, [pc, #224]	; (8003518 <xTaskIncrementTick+0x160>)
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	601a      	str	r2, [r3, #0]
                    break;
 800343e:	e042      	b.n	80034c6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <xTaskIncrementTick+0x154>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d203      	bcs.n	8003460 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003458:	4a2f      	ldr	r2, [pc, #188]	; (8003518 <xTaskIncrementTick+0x160>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800345e:	e032      	b.n	80034c6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3304      	adds	r3, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe ff0b 	bl	8002280 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3318      	adds	r3, #24
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ff02 	bl	8002280 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f003 fc26 	bl	8006cd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	2201      	movs	r2, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <xTaskIncrementTick+0x164>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	4a22      	ldr	r2, [pc, #136]	; (800351c <xTaskIncrementTick+0x164>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <xTaskIncrementTick+0x168>)
 80034a4:	441a      	add	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fe fe8a 	bl	80021c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <xTaskIncrementTick+0x16c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d3b5      	bcc.n	800342c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c4:	e7b2      	b.n	800342c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <xTaskIncrementTick+0x16c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	4914      	ldr	r1, [pc, #80]	; (8003520 <xTaskIncrementTick+0x168>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d901      	bls.n	80034e2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <xTaskIncrementTick+0x170>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e004      	b.n	80034fa <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <xTaskIncrementTick+0x174>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	4a0d      	ldr	r2, [pc, #52]	; (800352c <xTaskIncrementTick+0x174>)
 80034f8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034fa:	697b      	ldr	r3, [r7, #20]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200001c4 	.word	0x200001c4
 8003508:	200001a0 	.word	0x200001a0
 800350c:	20000154 	.word	0x20000154
 8003510:	20000158 	.word	0x20000158
 8003514:	200001b4 	.word	0x200001b4
 8003518:	200001bc 	.word	0x200001bc
 800351c:	200001a4 	.word	0x200001a4
 8003520:	200000c8 	.word	0x200000c8
 8003524:	200000c4 	.word	0x200000c4
 8003528:	200001b0 	.word	0x200001b0
 800352c:	200001ac 	.word	0x200001ac

08003530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003536:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <vTaskSwitchContext+0xbc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <vTaskSwitchContext+0xc0>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003544:	e04d      	b.n	80035e2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <vTaskSwitchContext+0xc0>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <vTaskSwitchContext+0xc4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f1c3 031f 	rsb	r3, r3, #31
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	4925      	ldr	r1, [pc, #148]	; (80035f8 <vTaskSwitchContext+0xc8>)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	607b      	str	r3, [r7, #4]
    }
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <vTaskSwitchContext+0x5a>
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <vTaskSwitchContext+0xc8>)
 8003598:	4413      	add	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3308      	adds	r3, #8
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d104      	bne.n	80035bc <vTaskSwitchContext+0x8c>
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <vTaskSwitchContext+0xcc>)
 80035c4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <vTaskSwitchContext+0xcc>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <vTaskSwitchContext+0xd0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d102      	bne.n	80035d8 <vTaskSwitchContext+0xa8>
 80035d2:	f003 fadd 	bl	8006b90 <SEGGER_SYSVIEW_OnIdle>
}
 80035d6:	e004      	b.n	80035e2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <vTaskSwitchContext+0xcc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f003 fb35 	bl	8006c4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001c4 	.word	0x200001c4
 80035f0:	200001b0 	.word	0x200001b0
 80035f4:	200001a4 	.word	0x200001a4
 80035f8:	200000c8 	.word	0x200000c8
 80035fc:	200000c4 	.word	0x200000c4
 8003600:	200001c0 	.word	0x200001c0

08003604 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10a      	bne.n	800362a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	60fb      	str	r3, [r7, #12]
    }
 8003626:	bf00      	nop
 8003628:	e7fe      	b.n	8003628 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <vTaskPlaceOnEventList+0x44>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3318      	adds	r3, #24
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe fdeb 	bl	800220e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003638:	2101      	movs	r1, #1
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	f000 fa72 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200000c4 	.word	0x200000c4

0800364c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	617b      	str	r3, [r7, #20]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vTaskPlaceOnEventListRestricted+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3318      	adds	r3, #24
 800367a:	4619      	mov	r1, r3
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7fe fda2 	bl	80021c6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800368e:	2024      	movs	r0, #36	; 0x24
 8003690:	f002 fd7e 	bl	8006190 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	68b8      	ldr	r0, [r7, #8]
 8003698:	f000 fa44 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
    }
 800369c:	bf00      	nop
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200000c4 	.word	0x200000c4

080036a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	60fb      	str	r3, [r7, #12]
    }
 80036d0:	bf00      	nop
 80036d2:	e7fe      	b.n	80036d2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	3318      	adds	r3, #24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fdd1 	bl	8002280 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <xTaskRemoveFromEventList+0xb4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d120      	bne.n	8003728 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fdc8 	bl	8002280 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 faec 	bl	8006cd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <xTaskRemoveFromEventList+0xb8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <xTaskRemoveFromEventList+0xb8>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <xTaskRemoveFromEventList+0xbc>)
 8003718:	441a      	add	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3304      	adds	r3, #4
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fe fd50 	bl	80021c6 <vListInsertEnd>
 8003726:	e005      	b.n	8003734 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	3318      	adds	r3, #24
 800372c:	4619      	mov	r1, r3
 800372e:	480e      	ldr	r0, [pc, #56]	; (8003768 <xTaskRemoveFromEventList+0xc0>)
 8003730:	f7fe fd49 	bl	80021c6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <xTaskRemoveFromEventList+0xc4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d905      	bls.n	800374e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003742:	2301      	movs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <xTaskRemoveFromEventList+0xc8>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e001      	b.n	8003752 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003752:	697b      	ldr	r3, [r7, #20]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200001c4 	.word	0x200001c4
 8003760:	200001a4 	.word	0x200001a4
 8003764:	200000c8 	.word	0x200000c8
 8003768:	2000015c 	.word	0x2000015c
 800376c:	200000c4 	.word	0x200000c4
 8003770:	200001b0 	.word	0x200001b0

08003774 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <vTaskInternalSetTimeOutState+0x24>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <vTaskInternalSetTimeOutState+0x28>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	200001b4 	.word	0x200001b4
 800379c:	200001a0 	.word	0x200001a0

080037a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	613b      	str	r3, [r7, #16]
    }
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
    }
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037e2:	f000 fe59 	bl	8004498 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <xTaskCheckForTimeOut+0xc4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d102      	bne.n	8003806 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e026      	b.n	8003854 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <xTaskCheckForTimeOut+0xc8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d00a      	beq.n	8003828 <xTaskCheckForTimeOut+0x88>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d305      	bcc.n	8003828 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e015      	b.n	8003854 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20b      	bcs.n	800384a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff98 	bl	8003774 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e004      	b.n	8003854 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003850:	2301      	movs	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003854:	f000 fe50 	bl	80044f8 <vPortExitCritical>

    return xReturn;
 8003858:	69fb      	ldr	r3, [r7, #28]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001a0 	.word	0x200001a0
 8003868:	200001b4 	.word	0x200001b4

0800386c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <vTaskMissedYield+0x14>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	200001b0 	.word	0x200001b0

08003884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800388c:	f000 f852 	bl	8003934 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <prvIdleTask+0x28>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d9f9      	bls.n	800388c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <prvIdleTask+0x2c>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038a8:	e7f0      	b.n	800388c <prvIdleTask+0x8>
 80038aa:	bf00      	nop
 80038ac:	200000c8 	.word	0x200000c8
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e00c      	b.n	80038da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <prvInitialiseTaskLists+0x60>)
 80038cc:	4413      	add	r3, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fc4c 	bl	800216c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3301      	adds	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d9ef      	bls.n	80038c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <prvInitialiseTaskLists+0x64>)
 80038e2:	f7fe fc43 	bl	800216c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038e6:	480d      	ldr	r0, [pc, #52]	; (800391c <prvInitialiseTaskLists+0x68>)
 80038e8:	f7fe fc40 	bl	800216c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038ec:	480c      	ldr	r0, [pc, #48]	; (8003920 <prvInitialiseTaskLists+0x6c>)
 80038ee:	f7fe fc3d 	bl	800216c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038f2:	480c      	ldr	r0, [pc, #48]	; (8003924 <prvInitialiseTaskLists+0x70>)
 80038f4:	f7fe fc3a 	bl	800216c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038f8:	480b      	ldr	r0, [pc, #44]	; (8003928 <prvInitialiseTaskLists+0x74>)
 80038fa:	f7fe fc37 	bl	800216c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <prvInitialiseTaskLists+0x78>)
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <prvInitialiseTaskLists+0x64>)
 8003902:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <prvInitialiseTaskLists+0x7c>)
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <prvInitialiseTaskLists+0x68>)
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200000c8 	.word	0x200000c8
 8003918:	2000012c 	.word	0x2000012c
 800391c:	20000140 	.word	0x20000140
 8003920:	2000015c 	.word	0x2000015c
 8003924:	20000170 	.word	0x20000170
 8003928:	20000188 	.word	0x20000188
 800392c:	20000154 	.word	0x20000154
 8003930:	20000158 	.word	0x20000158

08003934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800393a:	e019      	b.n	8003970 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800393c:	f000 fdac 	bl	8004498 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <prvCheckTasksWaitingTermination+0x50>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fc97 	bl	8002280 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <prvCheckTasksWaitingTermination+0x54>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3b01      	subs	r3, #1
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <prvCheckTasksWaitingTermination+0x54>)
 800395a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <prvCheckTasksWaitingTermination+0x58>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3b01      	subs	r3, #1
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <prvCheckTasksWaitingTermination+0x58>)
 8003964:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003966:	f000 fdc7 	bl	80044f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f810 	bl	8003990 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <prvCheckTasksWaitingTermination+0x58>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e1      	bne.n	800393c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000170 	.word	0x20000170
 8003988:	2000019c 	.word	0x2000019c
 800398c:	20000184 	.word	0x20000184

08003990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4618      	mov	r0, r3
 800399e:	f000 ff85 	bl	80048ac <vPortFree>
                vPortFree( pxTCB );
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 ff82 	bl	80048ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <prvResetNextTaskUnblockTime+0x30>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <prvResetNextTaskUnblockTime+0x34>)
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039c6:	e005      	b.n	80039d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <prvResetNextTaskUnblockTime+0x30>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <prvResetNextTaskUnblockTime+0x34>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000154 	.word	0x20000154
 80039e4:	200001bc 	.word	0x200001bc

080039e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <xTaskGetSchedulerState+0x34>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039f6:	2301      	movs	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	e008      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <xTaskGetSchedulerState+0x38>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a04:	2302      	movs	r3, #2
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e001      	b.n	8003a0e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a0e:	687b      	ldr	r3, [r7, #4]
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	200001a8 	.word	0x200001a8
 8003a20:	200001c4 	.word	0x200001c4

08003a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d068      	beq.n	8003b0c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <xTaskPriorityDisinherit+0xf4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d00a      	beq.n	8003a5a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
    }
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60bb      	str	r3, [r7, #8]
    }
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d03e      	beq.n	8003b0c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d13a      	bne.n	8003b0c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fbf0 	bl	8002280 <uxListRemove>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	2201      	movs	r2, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003aba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	204a      	movs	r0, #74	; 0x4a
 8003ac2:	f002 fb83 	bl	80061cc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f1c3 0205 	rsb	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <xTaskPriorityDisinherit+0xf8>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <xTaskPriorityDisinherit+0xfc>)
 8003afa:	441a      	add	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe fb5f 	bl	80021c6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b0c:	697b      	ldr	r3, [r7, #20]
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200000c4 	.word	0x200000c4
 8003b1c:	200001a4 	.word	0x200001a4
 8003b20:	200000c8 	.word	0x200000c8

08003b24 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fba0 	bl	8002280 <uxListRemove>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d110      	bne.n	8003b88 <prvAddCurrentTaskToDelayedList+0x64>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	211b      	movs	r1, #27
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 f8ee 	bl	8006d54 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4820      	ldr	r0, [pc, #128]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b82:	f7fe fb20 	bl	80021c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b86:	e032      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d20f      	bcs.n	8003bc0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2104      	movs	r1, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 f8d4 	bl	8006d54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fe fb28 	bl	800220e <vListInsert>
}
 8003bbe:	e016      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 f8c4 	bl	8006d54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7fe fb18 	bl	800220e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xec>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d202      	bcs.n	8003bee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xec>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200001a0 	.word	0x200001a0
 8003bfc:	200000c4 	.word	0x200000c4
 8003c00:	200001a4 	.word	0x200001a4
 8003c04:	20000188 	.word	0x20000188
 8003c08:	20000158 	.word	0x20000158
 8003c0c:	20000154 	.word	0x20000154
 8003c10:	200001bc 	.word	0x200001bc

08003c14 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c1e:	f000 fad5 	bl	80041cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTimerCreateTimerTask+0x54>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <xTimerCreateTimerTask+0x58>)
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	2302      	movs	r3, #2
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c38:	490d      	ldr	r1, [pc, #52]	; (8003c70 <xTimerCreateTimerTask+0x5c>)
 8003c3a:	480e      	ldr	r0, [pc, #56]	; (8003c74 <xTimerCreateTimerTask+0x60>)
 8003c3c:	f7ff f8a4 	bl	8002d88 <xTaskCreate>
 8003c40:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	603b      	str	r3, [r7, #0]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c5e:	687b      	ldr	r3, [r7, #4]
    }
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200001f8 	.word	0x200001f8
 8003c6c:	200001fc 	.word	0x200001fc
 8003c70:	0800757c 	.word	0x0800757c
 8003c74:	08003dad 	.word	0x08003dad

08003c78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	623b      	str	r3, [r7, #32]
    }
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02a      	beq.n	8003d04 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b05      	cmp	r3, #5
 8003cbe:	dc18      	bgt.n	8003cf2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cc0:	f7ff fe92 	bl	80039e8 <xTaskGetSchedulerState>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d109      	bne.n	8003cde <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f107 0114 	add.w	r1, r7, #20
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd6:	f7fe fbed 	bl	80024b4 <xQueueGenericSend>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
 8003cdc:	e012      	b.n	8003d04 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f107 0114 	add.w	r1, r7, #20
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f7fe fbe3 	bl	80024b4 <xQueueGenericSend>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24
 8003cf0:	e008      	b.n	8003d04 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <xTimerGenericCommand+0x98>)
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	f107 0114 	add.w	r1, r7, #20
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f7fe fcff 	bl	8002700 <xQueueGenericSendFromISR>
 8003d02:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d06:	4618      	mov	r0, r3
 8003d08:	3728      	adds	r7, #40	; 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200001f8 	.word	0x200001f8

08003d14 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <prvProcessExpiredTimer+0x94>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe faa7 	bl	8002280 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d022      	beq.n	8003d86 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	18d1      	adds	r1, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f000 f8d1 	bl	8003ef4 <prvInsertTimerInActiveList>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01f      	beq.n	8003d98 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff88 	bl	8003c78 <xTimerGenericCommand>
 8003d68:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
    }
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	6978      	ldr	r0, [r7, #20]
 8003d9e:	4798      	blx	r3
    }
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200001f0 	.word	0x200001f0

08003dac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f857 	bl	8003e6c <prvGetNextExpireTime>
 8003dbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f803 	bl	8003dd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003dca:	f000 f8d5 	bl	8003f78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dce:	e7f1      	b.n	8003db4 <prvTimerTask+0x8>

08003dd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dda:	f7ff fa1d 	bl	8003218 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f866 	bl	8003eb4 <prvSampleTimeNow>
 8003de8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d130      	bne.n	8003e52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <prvProcessTimerOrBlockTask+0x3c>
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d806      	bhi.n	8003e0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dfe:	f7ff fa19 	bl	8003234 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff85 	bl	8003d14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e0a:	e024      	b.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <prvProcessTimerOrBlockTask+0x90>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <prvProcessTimerOrBlockTask+0x50>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <prvProcessTimerOrBlockTask+0x52>
 8003e20:	2300      	movs	r3, #0
 8003e22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <prvProcessTimerOrBlockTask+0x94>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	f7fe ff75 	bl	8002d20 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e36:	f7ff f9fd 	bl	8003234 <xTaskResumeAll>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <prvProcessTimerOrBlockTask+0x98>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
    }
 8003e50:	e001      	b.n	8003e56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e52:	f7ff f9ef 	bl	8003234 <xTaskResumeAll>
    }
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200001f4 	.word	0x200001f4
 8003e64:	200001f8 	.word	0x200001f8
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <prvGetNextExpireTime+0x44>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <prvGetNextExpireTime+0x16>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	e000      	b.n	8003e84 <prvGetNextExpireTime+0x18>
 8003e82:	2200      	movs	r2, #0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <prvGetNextExpireTime+0x44>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e001      	b.n	8003ea0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200001f0 	.word	0x200001f0

08003eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ebc:	f7ff fa5a 	bl	8003374 <xTaskGetTickCount>
 8003ec0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvSampleTimeNow+0x3c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d205      	bcs.n	8003ed8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ecc:	f000 f91a 	bl	8004104 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e002      	b.n	8003ede <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ede:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <prvSampleTimeNow+0x3c>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000200 	.word	0x20000200

08003ef4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d812      	bhi.n	8003f40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e01b      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <prvInsertTimerInActiveList+0x7c>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe f968 	bl	800220e <vListInsert>
 8003f3e:	e012      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d206      	bcs.n	8003f56 <prvInsertTimerInActiveList+0x62>
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e007      	b.n	8003f66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <prvInsertTimerInActiveList+0x80>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fe f954 	bl	800220e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f66:	697b      	ldr	r3, [r7, #20]
    }
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200001f4 	.word	0x200001f4
 8003f74:	200001f0 	.word	0x200001f0

08003f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f7e:	e0ae      	b.n	80040de <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f2c0 80aa 	blt.w	80040dc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe f971 	bl	8002280 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff87 	bl	8003eb4 <prvSampleTimeNow>
 8003fa6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	f200 8097 	bhi.w	80040de <prvProcessReceivedCommands+0x166>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <prvProcessReceivedCommands+0x40>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08004055 	.word	0x08004055
 8003fc8:	08004069 	.word	0x08004069
 8003fcc:	080040b3 	.word	0x080040b3
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe1 	.word	0x08003fe1
 8003fd8:	08004055 	.word	0x08004055
 8003fdc:	08004069 	.word	0x08004069
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	18d1      	adds	r1, r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004000:	f7ff ff78 	bl	8003ef4 <prvInsertTimerInActiveList>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d069      	beq.n	80040de <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004010:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05e      	beq.n	80040de <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	441a      	add	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2100      	movs	r1, #0
 8004030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004032:	f7ff fe21 	bl	8003c78 <xTimerGenericCommand>
 8004036:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d14f      	bne.n	80040de <prvProcessReceivedCommands+0x166>
        __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61bb      	str	r3, [r7, #24]
    }
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004066:	e03a      	b.n	80040de <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	617b      	str	r3, [r7, #20]
    }
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	18d1      	adds	r1, r2, r3
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ac:	f7ff ff22 	bl	8003ef4 <prvInsertTimerInActiveList>
                        break;
 80040b0:	e015      	b.n	80040de <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80040c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c2:	f000 fbf3 	bl	80048ac <vPortFree>
 80040c6:	e00a      	b.n	80040de <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040da:	e000      	b.n	80040de <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <prvProcessReceivedCommands+0x188>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f107 0108 	add.w	r1, r7, #8
 80040e6:	2200      	movs	r2, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fbc7 	bl	800287c <xQueueReceive>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af45 	bne.w	8003f80 <prvProcessReceivedCommands+0x8>
        }
    }
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200001f8 	.word	0x200001f8

08004104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800410a:	e048      	b.n	800419e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800410c:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f8ab 	bl	8002280 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02e      	beq.n	800419e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90e      	bls.n	8004170 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe f850 	bl	800220e <vListInsert>
 800416e:	e016      	b.n	800419e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004170:	2300      	movs	r3, #0
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	2100      	movs	r1, #0
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fd7c 	bl	8003c78 <xTimerGenericCommand>
 8004180:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	603b      	str	r3, [r7, #0]
    }
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1b1      	bne.n	800410c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <prvSwitchTimerLists+0xc4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041b4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <prvSwitchTimerLists+0xc4>)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6013      	str	r3, [r2, #0]
    }
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	200001f0 	.word	0x200001f0
 80041c8:	200001f4 	.word	0x200001f4

080041cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041d0:	f000 f962 	bl	8004498 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11d      	bne.n	8004218 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041dc:	4811      	ldr	r0, [pc, #68]	; (8004224 <prvCheckForValidListAndQueue+0x58>)
 80041de:	f7fd ffc5 	bl	800216c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041e2:	4811      	ldr	r0, [pc, #68]	; (8004228 <prvCheckForValidListAndQueue+0x5c>)
 80041e4:	f7fd ffc2 	bl	800216c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <prvCheckForValidListAndQueue+0x60>)
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <prvCheckForValidListAndQueue+0x58>)
 80041ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvCheckForValidListAndQueue+0x64>)
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <prvCheckForValidListAndQueue+0x5c>)
 80041f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041f4:	2200      	movs	r2, #0
 80041f6:	210c      	movs	r1, #12
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7fe f8d3 	bl	80023a4 <xQueueGenericCreate>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 8004202:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <prvCheckForValidListAndQueue+0x54>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4908      	ldr	r1, [pc, #32]	; (8004234 <prvCheckForValidListAndQueue+0x68>)
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd52 	bl	8002cbc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004218:	f000 f96e 	bl	80044f8 <vPortExitCritical>
    }
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}
 8004220:	200001f8 	.word	0x200001f8
 8004224:	200001c8 	.word	0x200001c8
 8004228:	200001dc 	.word	0x200001dc
 800422c:	200001f0 	.word	0x200001f0
 8004230:	200001f4 	.word	0x200001f4
 8004234:	08007584 	.word	0x08007584

08004238 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b04      	subs	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004250:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b04      	subs	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0201 	bic.w	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004268:	4a0c      	ldr	r2, [pc, #48]	; (800429c <pxPortInitialiseStack+0x64>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b14      	subs	r3, #20
 8004272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b04      	subs	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f06f 0202 	mvn.w	r2, #2
 8004286:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b20      	subs	r3, #32
 800428c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	080042a1 	.word	0x080042a1

080042a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <prvTaskExitError+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d00a      	beq.n	80042ca <prvTaskExitError+0x2a>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <prvTaskExitError+0x28>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
    }
 80042dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042de:	bf00      	nop
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0fc      	beq.n	80042e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	20000010 	.word	0x20000010
	...

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004328:	4808      	ldr	r0, [pc, #32]	; (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
 800434a:	0000      	.short	0x0000
 800434c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop

08004354 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800435a:	4b46      	ldr	r3, [pc, #280]	; (8004474 <xPortStartScheduler+0x120>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a46      	ldr	r2, [pc, #280]	; (8004478 <xPortStartScheduler+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10a      	bne.n	800437a <xPortStartScheduler+0x26>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
    }
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <xPortStartScheduler+0x120>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3f      	ldr	r2, [pc, #252]	; (800447c <xPortStartScheduler+0x128>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10a      	bne.n	800439a <xPortStartScheduler+0x46>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
    }
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <xPortStartScheduler+0x12c>)
 800439c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	22ff      	movs	r2, #255	; 0xff
 80043aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <xPortStartScheduler+0x130>)
 80043c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <xPortStartScheduler+0x134>)
 80043c4:	2207      	movs	r2, #7
 80043c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c8:	e009      	b.n	80043de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <xPortStartScheduler+0x134>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <xPortStartScheduler+0x134>)
 80043d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d0ef      	beq.n	80043ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <xPortStartScheduler+0x134>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00a      	beq.n	800440c <xPortStartScheduler+0xb8>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
    }
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <xPortStartScheduler+0x134>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <xPortStartScheduler+0x134>)
 8004414:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <xPortStartScheduler+0x134>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <xPortStartScheduler+0x134>)
 8004420:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800442a:	4b18      	ldr	r3, [pc, #96]	; (800448c <xPortStartScheduler+0x138>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a17      	ldr	r2, [pc, #92]	; (800448c <xPortStartScheduler+0x138>)
 8004430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004434:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <xPortStartScheduler+0x138>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a14      	ldr	r2, [pc, #80]	; (800448c <xPortStartScheduler+0x138>)
 800443c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004440:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004442:	f000 f8e3 	bl	800460c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <xPortStartScheduler+0x13c>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800444c:	f000 f902 	bl	8004654 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <xPortStartScheduler+0x140>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <xPortStartScheduler+0x140>)
 8004456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800445a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800445c:	f7ff ff64 	bl	8004328 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004460:	f7ff f866 	bl	8003530 <vTaskSwitchContext>
    prvTaskExitError();
 8004464:	f7ff ff1c 	bl	80042a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	e000ed00 	.word	0xe000ed00
 8004478:	410fc271 	.word	0x410fc271
 800447c:	410fc270 	.word	0x410fc270
 8004480:	e000e400 	.word	0xe000e400
 8004484:	20000204 	.word	0x20000204
 8004488:	20000208 	.word	0x20000208
 800448c:	e000ed20 	.word	0xe000ed20
 8004490:	20000010 	.word	0x20000010
 8004494:	e000ef34 	.word	0xe000ef34

08004498 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
        __asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
    }
 80044b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <vPortEnterCritical+0x58>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <vPortEnterCritical+0x58>)
 80044ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <vPortEnterCritical+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10f      	bne.n	80044e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vPortEnterCritical+0x5c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
    }
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <vPortEnterCritical+0x4a>
    }
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000010 	.word	0x20000010
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <vPortExitCritical+0x50>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <vPortExitCritical+0x24>
        __asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	607b      	str	r3, [r7, #4]
    }
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vPortExitCritical+0x50>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3b01      	subs	r3, #1
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <vPortExitCritical+0x50>)
 8004524:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <vPortExitCritical+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <vPortExitCritical+0x42>
 800452e:	2300      	movs	r3, #0
 8004530:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f383 8811 	msr	BASEPRI, r3
    }
 8004538:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000010 	.word	0x20000010
 800454c:	00000000 	.word	0x00000000

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7fe ffd6 	bl	8003530 <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
        __asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
    }
 80045d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045d2:	f002 fa63 	bl	8006a9c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045d6:	f7fe feef 	bl	80033b8 <xTaskIncrementTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80045e0:	f002 faba 	bl	8006b58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <SysTick_Handler+0x50>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e001      	b.n	80045f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80045ee:	f002 fa97 	bl	8006b20 <SEGGER_SYSVIEW_RecordExitISR>
 80045f2:	2300      	movs	r3, #0
 80045f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f383 8811 	msr	BASEPRI, r3
    }
 80045fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <vPortSetupTimerInterrupt+0x34>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <vPortSetupTimerInterrupt+0x38>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <vPortSetupTimerInterrupt+0x3c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <vPortSetupTimerInterrupt+0x40>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <vPortSetupTimerInterrupt+0x44>)
 800462a:	3b01      	subs	r3, #1
 800462c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <vPortSetupTimerInterrupt+0x34>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010
 8004644:	e000e018 	.word	0xe000e018
 8004648:	20000000 	.word	0x20000000
 800464c:	10624dd3 	.word	0x10624dd3
 8004650:	e000e014 	.word	0xe000e014

08004654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004664 <vPortEnableVFP+0x10>
 8004658:	6801      	ldr	r1, [r0, #0]
 800465a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800465e:	6001      	str	r1, [r0, #0]
 8004660:	4770      	bx	lr
 8004662:	0000      	.short	0x0000
 8004664:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop

0800466c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004672:	f3ef 8305 	mrs	r3, IPSR
 8004676:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d914      	bls.n	80046a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <vPortValidateInterruptPriority+0x70>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <vPortValidateInterruptPriority+0x74>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	7afa      	ldrb	r2, [r7, #11]
 800468e:	429a      	cmp	r2, r3
 8004690:	d20a      	bcs.n	80046a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
    }
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <vPortValidateInterruptPriority+0x78>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <vPortValidateInterruptPriority+0x7c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d90a      	bls.n	80046ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	603b      	str	r3, [r7, #0]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vPortValidateInterruptPriority+0x60>
    }
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000e3f0 	.word	0xe000e3f0
 80046e0:	20000204 	.word	0x20000204
 80046e4:	e000ed0c 	.word	0xe000ed0c
 80046e8:	20000208 	.word	0x20000208

080046ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80046f8:	f7fe fd8e 	bl	8003218 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046fc:	4b65      	ldr	r3, [pc, #404]	; (8004894 <pvPortMalloc+0x1a8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004704:	f000 f934 	bl	8004970 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004708:	4b63      	ldr	r3, [pc, #396]	; (8004898 <pvPortMalloc+0x1ac>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 80a7 	bne.w	8004864 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02d      	beq.n	8004778 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800471c:	2208      	movs	r2, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d227      	bcs.n	8004778 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004728:	2208      	movs	r2, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	3308      	adds	r3, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d214      	bcs.n	8004772 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	3308      	adds	r3, #8
 8004750:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <pvPortMalloc+0x92>
        __asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	617b      	str	r3, [r7, #20]
    }
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004776:	e002      	b.n	800477e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	e000      	b.n	8004780 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800477e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d06e      	beq.n	8004864 <pvPortMalloc+0x178>
 8004786:	4b45      	ldr	r3, [pc, #276]	; (800489c <pvPortMalloc+0x1b0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d869      	bhi.n	8004864 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <pvPortMalloc+0x1b4>)
 8004792:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <pvPortMalloc+0x1b4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800479a:	e004      	b.n	80047a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d903      	bls.n	80047b8 <pvPortMalloc+0xcc>
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f1      	bne.n	800479c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047b8:	4b36      	ldr	r3, [pc, #216]	; (8004894 <pvPortMalloc+0x1a8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	429a      	cmp	r2, r3
 80047c0:	d050      	beq.n	8004864 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2208      	movs	r2, #8
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	2308      	movs	r3, #8
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d91f      	bls.n	8004824 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <pvPortMalloc+0x120>
        __asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	613b      	str	r3, [r7, #16]
    }
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800481e:	69b8      	ldr	r0, [r7, #24]
 8004820:	f000 f908 	bl	8004a34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <pvPortMalloc+0x1b0>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <pvPortMalloc+0x1b0>)
 8004830:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <pvPortMalloc+0x1b0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <pvPortMalloc+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d203      	bcs.n	8004846 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800483e:	4b17      	ldr	r3, [pc, #92]	; (800489c <pvPortMalloc+0x1b0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <pvPortMalloc+0x1b8>)
 8004844:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <pvPortMalloc+0x1ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	431a      	orrs	r2, r3
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <pvPortMalloc+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <pvPortMalloc+0x1bc>)
 8004862:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004864:	f7fe fce6 	bl	8003234 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <pvPortMalloc+0x19c>
        __asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
    }
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <pvPortMalloc+0x19a>
    return pvReturn;
 8004888:	69fb      	ldr	r3, [r7, #28]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20019214 	.word	0x20019214
 8004898:	20019228 	.word	0x20019228
 800489c:	20019218 	.word	0x20019218
 80048a0:	2001920c 	.word	0x2001920c
 80048a4:	2001921c 	.word	0x2001921c
 80048a8:	20019220 	.word	0x20019220

080048ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04d      	beq.n	800495a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048be:	2308      	movs	r3, #8
 80048c0:	425b      	negs	r3, r3
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <vPortFree+0xb8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <vPortFree+0x44>
        __asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60fb      	str	r3, [r7, #12]
    }
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <vPortFree+0x62>
        __asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60bb      	str	r3, [r7, #8]
    }
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <vPortFree+0xb8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01e      	beq.n	800495a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11a      	bne.n	800495a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <vPortFree+0xb8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	43db      	mvns	r3, r3
 800492e:	401a      	ands	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004934:	f7fe fc70 	bl	8003218 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortFree+0xbc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4413      	add	r3, r2
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <vPortFree+0xbc>)
 8004944:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f000 f874 	bl	8004a34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <vPortFree+0xc0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a06      	ldr	r2, [pc, #24]	; (800496c <vPortFree+0xc0>)
 8004954:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004956:	f7fe fc6d 	bl	8003234 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20019228 	.word	0x20019228
 8004968:	20019218 	.word	0x20019218
 800496c:	20019224 	.word	0x20019224

08004970 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004976:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800497a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <prvHeapInit+0xac>)
 800497e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3307      	adds	r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <prvHeapInit+0xac>)
 80049a0:	4413      	add	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <prvHeapInit+0xb0>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <prvHeapInit+0xb0>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4413      	add	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049bc:	2208      	movs	r2, #8
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <prvHeapInit+0xb4>)
 80049d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <prvHeapInit+0xb4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <prvHeapInit+0xb4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049f0:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <prvHeapInit+0xb4>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <prvHeapInit+0xb8>)
 80049fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <prvHeapInit+0xbc>)
 8004a06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <prvHeapInit+0xc0>)
 8004a0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	2000020c 	.word	0x2000020c
 8004a20:	2001920c 	.word	0x2001920c
 8004a24:	20019214 	.word	0x20019214
 8004a28:	2001921c 	.word	0x2001921c
 8004a2c:	20019218 	.word	0x20019218
 8004a30:	20019228 	.word	0x20019228

08004a34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <prvInsertBlockIntoFreeList+0xac>)
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e002      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x14>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d8f7      	bhi.n	8004a42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d108      	bne.n	8004a76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d118      	bne.n	8004abc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d00d      	beq.n	8004ab2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e008      	b.n	8004ac4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e003      	b.n	8004ac4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d002      	beq.n	8004ad2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	2001920c 	.word	0x2001920c
 8004ae4:	20019214 	.word	0x20019214

08004ae8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004aec:	4803      	ldr	r0, [pc, #12]	; (8004afc <_cbSendSystemDesc+0x14>)
 8004aee:	f001 ff7f 	bl	80069f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <_cbSendSystemDesc+0x18>)
 8004af4:	f001 ff7c 	bl	80069f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0800758c 	.word	0x0800758c
 8004b00:	080075d0 	.word	0x080075d0

08004b04 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b12:	4a06      	ldr	r2, [pc, #24]	; (8004b2c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b14:	f001 fae8 	bl	80060e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b1c:	f001 fb28 	bl	8006170 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000000 	.word	0x20000000
 8004b28:	08004ae9 	.word	0x08004ae9
 8004b2c:	0800766c 	.word	0x0800766c

08004b30 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	e033      	b.n	8004ba4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b3c:	491e      	ldr	r1, [pc, #120]	; (8004bb8 <_cbSendTaskList+0x88>)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	491a      	ldr	r1, [pc, #104]	; (8004bb8 <_cbSendTaskList+0x88>)
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	4c16      	ldr	r4, [pc, #88]	; (8004bb8 <_cbSendTaskList+0x88>)
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4423      	add	r3, r4
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	681c      	ldr	r4, [r3, #0]
 8004b70:	4d11      	ldr	r5, [pc, #68]	; (8004bb8 <_cbSendTaskList+0x88>)
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	442b      	add	r3, r5
 8004b7e:	330c      	adds	r3, #12
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	4e0d      	ldr	r6, [pc, #52]	; (8004bb8 <_cbSendTaskList+0x88>)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4433      	add	r3, r6
 8004b90:	3310      	adds	r3, #16
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	462b      	mov	r3, r5
 8004b98:	4622      	mov	r2, r4
 8004b9a:	f000 f8bd 	bl	8004d18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	607b      	str	r3, [r7, #4]
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <_cbSendTaskList+0x8c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3c6      	bcc.n	8004b3c <_cbSendTaskList+0xc>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb8:	2001922c 	.word	0x2001922c
 8004bbc:	200192cc 	.word	0x200192cc

08004bc0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bc8:	f7fe fbe4 	bl	8003394 <xTaskGetTickCountFromISR>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	469a      	mov	sl, r3
 8004bd2:	4693      	mov	fp, r2
 8004bd4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	f04f 0a00 	mov.w	sl, #0
 8004be4:	f04f 0b00 	mov.w	fp, #0
 8004be8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004bec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004bf0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	1a14      	subs	r4, r2, r0
 8004bfa:	eb63 0501 	sbc.w	r5, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	00ab      	lsls	r3, r5, #2
 8004c08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c0c:	00a2      	lsls	r2, r4, #2
 8004c0e:	4614      	mov	r4, r2
 8004c10:	461d      	mov	r5, r3
 8004c12:	eb14 0800 	adds.w	r8, r4, r0
 8004c16:	eb45 0901 	adc.w	r9, r5, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c36:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c56:	2205      	movs	r2, #5
 8004c58:	492b      	ldr	r1, [pc, #172]	; (8004d08 <SYSVIEW_AddTask+0xc0>)
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f002 fc22 	bl	80074a4 <memcmp>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d04b      	beq.n	8004cfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b07      	cmp	r3, #7
 8004c6c:	d903      	bls.n	8004c76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c6e:	4828      	ldr	r0, [pc, #160]	; (8004d10 <SYSVIEW_AddTask+0xc8>)
 8004c70:	f002 f9da 	bl	8007028 <SEGGER_SYSVIEW_Warn>
    return;
 8004c74:	e044      	b.n	8004d00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c76:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4926      	ldr	r1, [pc, #152]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4921      	ldr	r1, [pc, #132]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	491b      	ldr	r1, [pc, #108]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4916      	ldr	r1, [pc, #88]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4910      	ldr	r1, [pc, #64]	; (8004d14 <SYSVIEW_AddTask+0xcc>)
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3310      	adds	r3, #16
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <SYSVIEW_AddTask+0xc4>)
 8004cea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f80e 	bl	8004d18 <SYSVIEW_SendTaskInfo>
 8004cfc:	e000      	b.n	8004d00 <SYSVIEW_AddTask+0xb8>
    return;
 8004cfe:	bf00      	nop

}
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	080075e0 	.word	0x080075e0
 8004d0c:	200192cc 	.word	0x200192cc
 8004d10:	080075e8 	.word	0x080075e8
 8004d14:	2001922c 	.word	0x2001922c

08004d18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d26:	f107 0310 	add.w	r3, r7, #16
 8004d2a:	2218      	movs	r2, #24
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fbd6 	bl	80074e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fd57 	bl	8006800 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d52:	bf00      	nop
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <_DoInit+0xa0>)
 8004d64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d66:	22a8      	movs	r2, #168	; 0xa8
 8004d68:	2100      	movs	r1, #0
 8004d6a:	6838      	ldr	r0, [r7, #0]
 8004d6c:	f002 fbb8 	bl	80074e0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2203      	movs	r2, #3
 8004d74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2203      	movs	r2, #3
 8004d7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <_DoInit+0xa4>)
 8004d80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <_DoInit+0xa8>)
 8004d86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <_DoInit+0xa4>)
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <_DoInit+0xac>)
 8004dac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2210      	movs	r2, #16
 8004db2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e00c      	b.n	8004dea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1c3 030f 	rsb	r3, r3, #15
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <_DoInit+0xb0>)
 8004dd8:	5cd1      	ldrb	r1, [r2, r3]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	460a      	mov	r2, r1
 8004de2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b0f      	cmp	r3, #15
 8004dee:	d9ef      	bls.n	8004dd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004df0:	f3bf 8f5f 	dmb	sy
}
 8004df4:	bf00      	nop
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	200192d0 	.word	0x200192d0
 8004e00:	08007638 	.word	0x08007638
 8004e04:	20019378 	.word	0x20019378
 8004e08:	20019778 	.word	0x20019778
 8004e0c:	08007674 	.word	0x08007674

08004e10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d905      	bls.n	8004e40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	e007      	b.n	8004e50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	1acb      	subs	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bf28      	it	cs
 8004e5e:	4613      	movcs	r3, r2
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bf28      	it	cs
 8004e6a:	4613      	movcs	r3, r2
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	6978      	ldr	r0, [r7, #20]
 8004e7e:	f002 fb21 	bl	80074c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	4413      	add	r3, r2
 8004e88:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	4413      	add	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	4413      	add	r3, r2
 8004ea0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d101      	bne.n	8004eb0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eb0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1b2      	bne.n	8004e26 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d911      	bls.n	8004f12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f002 fae1 	bl	80074c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f10:	e01f      	b.n	8004f52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	6938      	ldr	r0, [r7, #16]
 8004f26:	f002 facd 	bl	80074c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4619      	mov	r1, r3
 8004f42:	6938      	ldr	r0, [r7, #16]
 8004f44:	f002 fabe 	bl	80074c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	60da      	str	r2, [r3, #12]
}
 8004f52:	bf00      	nop
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d808      	bhi.n	8004f88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad2      	subs	r2, r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e004      	b.n	8004f92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f92:	697b      	ldr	r3, [r7, #20]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	; 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fac:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fae:	623b      	str	r3, [r7, #32]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b53      	cmp	r3, #83	; 0x53
 8004fb8:	d001      	beq.n	8004fbe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fba:	f7ff fecf 	bl	8004d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4a37      	ldr	r2, [pc, #220]	; (80050a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d92b      	bls.n	8005044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	bf28      	it	cs
 8004ffe:	4613      	movcs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	4413      	add	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	6939      	ldr	r1, [r7, #16]
 8005010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005012:	f002 fa57 	bl	80074c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800502e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	429a      	cmp	r2, r3
 800503e:	d101      	bne.n	8005044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005040:	2300      	movs	r3, #0
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4293      	cmp	r3, r2
 8005052:	bf28      	it	cs
 8005054:	4613      	movcs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	4413      	add	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800506e:	f002 fa29 	bl	80074c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800508a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200192d0 	.word	0x200192d0

080050ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b53      	cmp	r3, #83	; 0x53
 80050c4:	d001      	beq.n	80050ca <SEGGER_RTT_ReadNoLock+0x1e>
 80050c6:	f7ff fe49 	bl	8004d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	3360      	adds	r3, #96	; 0x60
 80050d6:	4a37      	ldr	r2, [pc, #220]	; (80051b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80050d8:	4413      	add	r3, r2
 80050da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d92b      	bls.n	8005150 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4293      	cmp	r3, r2
 8005108:	bf28      	it	cs
 800510a:	4613      	movcs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	4413      	add	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511e:	f002 f9d1 	bl	80074c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800513a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005148:	429a      	cmp	r2, r3
 800514a:	d101      	bne.n	8005150 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800514c:	2300      	movs	r3, #0
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4293      	cmp	r3, r2
 800515e:	bf28      	it	cs
 8005160:	4613      	movcs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d019      	beq.n	800519e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	4413      	add	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	6939      	ldr	r1, [r7, #16]
 8005178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800517a:	f002 f9a3 	bl	80074c4 <memcpy>
    NumBytesRead += NumBytesRem;
 800517e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	; 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200192d0 	.word	0x200192d0

080051b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	3360      	adds	r3, #96	; 0x60
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80051d6:	4413      	add	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d029      	beq.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d82e      	bhi.n	8005244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d013      	beq.n	8005216 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80051ee:	e029      	b.n	8005244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f7ff feb2 	bl	8004f5a <_GetAvailWriteSpace>
 80051f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d202      	bcs.n	8005206 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005204:	e021      	b.n	800524a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff fe5b 	bl	8004eca <_WriteNoCheck>
    break;
 8005214:	e019      	b.n	800524a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff fe9f 	bl	8004f5a <_GetAvailWriteSpace>
 800521c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4293      	cmp	r3, r2
 8005224:	bf28      	it	cs
 8005226:	4613      	movcs	r3, r2
 8005228:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	6978      	ldr	r0, [r7, #20]
 8005230:	f7ff fe4b 	bl	8004eca <_WriteNoCheck>
    break;
 8005234:	e009      	b.n	800524a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	6978      	ldr	r0, [r7, #20]
 800523c:	f7ff fde8 	bl	8004e10 <_WriteBlocking>
 8005240:	61f8      	str	r0, [r7, #28]
    break;
 8005242:	e002      	b.n	800524a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
    break;
 8005248:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800524a:	69fb      	ldr	r3, [r7, #28]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	200192d0 	.word	0x200192d0

08005258 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b53      	cmp	r3, #83	; 0x53
 8005270:	d001      	beq.n	8005276 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005272:	f7ff fd73 	bl	8004d5c <_DoInit>
  SEGGER_RTT_LOCK();
 8005276:	f3ef 8311 	mrs	r3, BASEPRI
 800527a:	f04f 0120 	mov.w	r1, #32
 800527e:	f381 8811 	msr	BASEPRI, r1
 8005282:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff ff95 	bl	80051b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800528e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005296:	697b      	ldr	r3, [r7, #20]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200192d0 	.word	0x200192d0

080052a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052b2:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b53      	cmp	r3, #83	; 0x53
 80052be:	d001      	beq.n	80052c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052c0:	f7ff fd4c 	bl	8004d5c <_DoInit>
  SEGGER_RTT_LOCK();
 80052c4:	f3ef 8311 	mrs	r3, BASEPRI
 80052c8:	f04f 0120 	mov.w	r1, #32
 80052cc:	f381 8811 	msr	BASEPRI, r1
 80052d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052d2:	4b35      	ldr	r3, [pc, #212]	; (80053a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052da:	6939      	ldr	r1, [r7, #16]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3304      	adds	r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	429a      	cmp	r2, r3
 8005300:	dbeb      	blt.n	80052da <SEGGER_RTT_AllocUpBuffer+0x36>
 8005302:	e000      	b.n	8005306 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005304:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	429a      	cmp	r2, r3
 800530e:	da3f      	bge.n	8005390 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005324:	6939      	ldr	r1, [r7, #16]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	3304      	adds	r3, #4
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	440b      	add	r3, r1
 8005348:	3320      	adds	r3, #32
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	3328      	adds	r3, #40	; 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005362:	6939      	ldr	r1, [r7, #16]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	4613      	mov	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	332c      	adds	r3, #44	; 0x2c
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800538a:	f3bf 8f5f 	dmb	sy
 800538e:	e002      	b.n	8005396 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800539c:	69fb      	ldr	r3, [r7, #28]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200192d0 	.word	0x200192d0

080053ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053ba:	4b21      	ldr	r3, [pc, #132]	; (8005440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b53      	cmp	r3, #83	; 0x53
 80053c6:	d001      	beq.n	80053cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053c8:	f7ff fcc8 	bl	8004d5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d82c      	bhi.n	8005430 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053d6:	f3ef 8311 	mrs	r3, BASEPRI
 80053da:	f04f 0120 	mov.w	r1, #32
 80053de:	f381 8811 	msr	BASEPRI, r1
 80053e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4613      	mov	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	4413      	add	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	3360      	adds	r3, #96	; 0x60
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005420:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e002      	b.n	8005436 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200192d0 	.word	0x200192d0

08005444 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	60fa      	str	r2, [r7, #12]
 800545a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d90a      	bls.n	8005478 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005466:	e007      	b.n	8005478 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	1c53      	adds	r3, r2, #1
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	60f9      	str	r1, [r7, #12]
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <_EncodeStr+0x46>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ee      	bne.n	8005468 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	b2da      	uxtb	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3307      	adds	r3, #7
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054c2:	4b35      	ldr	r3, [pc, #212]	; (8005598 <_HandleIncomingPacket+0xdc>)
 80054c4:	7e1b      	ldrb	r3, [r3, #24]
 80054c6:	4618      	mov	r0, r3
 80054c8:	1cfb      	adds	r3, r7, #3
 80054ca:	2201      	movs	r2, #1
 80054cc:	4619      	mov	r1, r3
 80054ce:	f7ff fded 	bl	80050ac <SEGGER_RTT_ReadNoLock>
 80054d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d052      	beq.n	8005580 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d031      	beq.n	8005544 <_HandleIncomingPacket+0x88>
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	dc40      	bgt.n	8005566 <_HandleIncomingPacket+0xaa>
 80054e4:	2b07      	cmp	r3, #7
 80054e6:	dc15      	bgt.n	8005514 <_HandleIncomingPacket+0x58>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dd3c      	ble.n	8005566 <_HandleIncomingPacket+0xaa>
 80054ec:	3b01      	subs	r3, #1
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d839      	bhi.n	8005566 <_HandleIncomingPacket+0xaa>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <_HandleIncomingPacket+0x3c>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800551b 	.word	0x0800551b
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005527 	.word	0x08005527
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005533 	.word	0x08005533
 800550c:	08005539 	.word	0x08005539
 8005510:	0800553f 	.word	0x0800553f
 8005514:	2b7f      	cmp	r3, #127	; 0x7f
 8005516:	d035      	beq.n	8005584 <_HandleIncomingPacket+0xc8>
 8005518:	e025      	b.n	8005566 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800551a:	f000 fff5 	bl	8006508 <SEGGER_SYSVIEW_Start>
      break;
 800551e:	e036      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005520:	f001 f8ae 	bl	8006680 <SEGGER_SYSVIEW_Stop>
      break;
 8005524:	e033      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005526:	f001 fa87 	bl	8006a38 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800552a:	e030      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800552c:	f001 fa4c 	bl	80069c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005530:	e02d      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005532:	f001 f8cb 	bl	80066cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005536:	e02a      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005538:	f001 fd24 	bl	8006f84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800553c:	e027      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800553e:	f001 fd03 	bl	8006f48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005542:	e024      	b.n	800558e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005544:	4b14      	ldr	r3, [pc, #80]	; (8005598 <_HandleIncomingPacket+0xdc>)
 8005546:	7e1b      	ldrb	r3, [r3, #24]
 8005548:	4618      	mov	r0, r3
 800554a:	1cfb      	adds	r3, r7, #3
 800554c:	2201      	movs	r2, #1
 800554e:	4619      	mov	r1, r3
 8005550:	f7ff fdac 	bl	80050ac <SEGGER_RTT_ReadNoLock>
 8005554:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d015      	beq.n	8005588 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fc68 	bl	8006e34 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005564:	e010      	b.n	8005588 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	b25b      	sxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	da0e      	bge.n	800558c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <_HandleIncomingPacket+0xdc>)
 8005570:	7e1b      	ldrb	r3, [r3, #24]
 8005572:	4618      	mov	r0, r3
 8005574:	1cfb      	adds	r3, r7, #3
 8005576:	2201      	movs	r2, #1
 8005578:	4619      	mov	r1, r3
 800557a:	f7ff fd97 	bl	80050ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800557e:	e005      	b.n	800558c <_HandleIncomingPacket+0xd0>
    }
  }
 8005580:	bf00      	nop
 8005582:	e004      	b.n	800558e <_HandleIncomingPacket+0xd2>
      break;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <_HandleIncomingPacket+0xd2>
      break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <_HandleIncomingPacket+0xd2>
      break;
 800558c:	bf00      	nop
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2001a790 	.word	0x2001a790

0800559c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055a2:	2301      	movs	r3, #1
 80055a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b0:	4b32      	ldr	r3, [pc, #200]	; (800567c <_TrySendOverflowPacket+0xe0>)
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	e00b      	b.n	80055d0 <_TrySendOverflowPacket+0x34>
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	09db      	lsrs	r3, r3, #7
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b7f      	cmp	r3, #127	; 0x7f
 80055d4:	d8f0      	bhi.n	80055b8 <_TrySendOverflowPacket+0x1c>
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <_TrySendOverflowPacket+0xe4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055ec:	4b23      	ldr	r3, [pc, #140]	; (800567c <_TrySendOverflowPacket+0xe0>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	e00b      	b.n	8005618 <_TrySendOverflowPacket+0x7c>
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	6279      	str	r1, [r7, #36]	; 0x24
 800560a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b7f      	cmp	r3, #127	; 0x7f
 800561c:	d8f0      	bhi.n	8005600 <_TrySendOverflowPacket+0x64>
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	627a      	str	r2, [r7, #36]	; 0x24
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <_TrySendOverflowPacket+0xe0>)
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	4618      	mov	r0, r3
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	461a      	mov	r2, r3
 800563c:	1d3b      	adds	r3, r7, #4
 800563e:	4619      	mov	r1, r3
 8005640:	f7fa fdc6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005644:	4603      	mov	r3, r0
 8005646:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005648:	f001 fe7e 	bl	8007348 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <_TrySendOverflowPacket+0xe0>)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <_TrySendOverflowPacket+0xe0>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <_TrySendOverflowPacket+0xe0>)
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e004      	b.n	8005670 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <_TrySendOverflowPacket+0xe0>)
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	3301      	adds	r3, #1
 800566c:	4a03      	ldr	r2, [pc, #12]	; (800567c <_TrySendOverflowPacket+0xe0>)
 800566e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005670:	693b      	ldr	r3, [r7, #16]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	2001a790 	.word	0x2001a790
 8005680:	e0001004 	.word	0xe0001004

08005684 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005690:	4b96      	ldr	r3, [pc, #600]	; (80058ec <_SendPacket+0x268>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d010      	beq.n	80056ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005698:	4b94      	ldr	r3, [pc, #592]	; (80058ec <_SendPacket+0x268>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8130 	beq.w	8005902 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056a2:	4b92      	ldr	r3, [pc, #584]	; (80058ec <_SendPacket+0x268>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d109      	bne.n	80056be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056aa:	f7ff ff77 	bl	800559c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056ae:	4b8f      	ldr	r3, [pc, #572]	; (80058ec <_SendPacket+0x268>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	f040 8127 	bne.w	8005906 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056b8:	e001      	b.n	80056be <_SendPacket+0x3a>
    goto Send;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <_SendPacket+0x3c>
Send:
 80056be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b1f      	cmp	r3, #31
 80056c4:	d809      	bhi.n	80056da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056c6:	4b89      	ldr	r3, [pc, #548]	; (80058ec <_SendPacket+0x268>)
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 8118 	bne.w	800590a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b17      	cmp	r3, #23
 80056de:	d807      	bhi.n	80056f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e0c4      	b.n	800587a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	2b7f      	cmp	r3, #127	; 0x7f
 80056fc:	d912      	bls.n	8005724 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	09da      	lsrs	r2, r3, #7
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3b01      	subs	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	3a01      	subs	r2, #1
 8005716:	60fa      	str	r2, [r7, #12]
 8005718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e006      	b.n	8005732 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b7e      	cmp	r3, #126	; 0x7e
 8005736:	d807      	bhi.n	8005748 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e098      	b.n	800587a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574e:	d212      	bcs.n	8005776 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	09da      	lsrs	r2, r3, #7
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	3a01      	subs	r2, #1
 8005768:	60fa      	str	r2, [r7, #12]
 800576a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800576e:	b2da      	uxtb	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e081      	b.n	800587a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800577c:	d21d      	bcs.n	80057ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0b9a      	lsrs	r2, r3, #14
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b01      	subs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	b2db      	uxtb	r3, r3
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	3a01      	subs	r2, #1
 8005798:	60fa      	str	r2, [r7, #12]
 800579a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	3a01      	subs	r2, #1
 80057ac:	60fa      	str	r2, [r7, #12]
 80057ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e05f      	b.n	800587a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c0:	d228      	bcs.n	8005814 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0d5a      	lsrs	r2, r3, #21
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0b9b      	lsrs	r3, r3, #14
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	3a01      	subs	r2, #1
 80057dc:	60fa      	str	r2, [r7, #12]
 80057de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	09db      	lsrs	r3, r3, #7
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	60fa      	str	r2, [r7, #12]
 80057f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	3a01      	subs	r2, #1
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e032      	b.n	800587a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	0f1a      	lsrs	r2, r3, #28
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0d5b      	lsrs	r3, r3, #21
 8005828:	b2db      	uxtb	r3, r3
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	3a01      	subs	r2, #1
 800582e:	60fa      	str	r2, [r7, #12]
 8005830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0b9b      	lsrs	r3, r3, #14
 800583e:	b2db      	uxtb	r3, r3
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	3a01      	subs	r2, #1
 8005844:	60fa      	str	r2, [r7, #12]
 8005846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	3a01      	subs	r2, #1
 800585a:	60fa      	str	r2, [r7, #12]
 800585c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	3a01      	subs	r2, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800587a:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <_SendPacket+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <_SendPacket+0x268>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e00b      	b.n	80058ac <_SendPacket+0x228>
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	6279      	str	r1, [r7, #36]	; 0x24
 800589e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b7f      	cmp	r3, #127	; 0x7f
 80058b0:	d8f0      	bhi.n	8005894 <_SendPacket+0x210>
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	627a      	str	r2, [r7, #36]	; 0x24
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058c2:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <_SendPacket+0x268>)
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	4618      	mov	r0, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	f7fa fc7d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058d6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058d8:	f001 fd36 	bl	8007348 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058e2:	4a02      	ldr	r2, [pc, #8]	; (80058ec <_SendPacket+0x268>)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	60d3      	str	r3, [r2, #12]
 80058e8:	e010      	b.n	800590c <_SendPacket+0x288>
 80058ea:	bf00      	nop
 80058ec:	2001a790 	.word	0x2001a790
 80058f0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058f4:	4b19      	ldr	r3, [pc, #100]	; (800595c <_SendPacket+0x2d8>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b17      	ldr	r3, [pc, #92]	; (800595c <_SendPacket+0x2d8>)
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e004      	b.n	800590c <_SendPacket+0x288>
    goto SendDone;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <_SendPacket+0x288>
      goto SendDone;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <_SendPacket+0x288>
      goto SendDone;
 800590a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <_SendPacket+0x2d8>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4619      	mov	r1, r3
 8005912:	4a13      	ldr	r2, [pc, #76]	; (8005960 <_SendPacket+0x2dc>)
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	336c      	adds	r3, #108	; 0x6c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b0e      	ldr	r3, [pc, #56]	; (800595c <_SendPacket+0x2d8>)
 8005924:	7e1b      	ldrb	r3, [r3, #24]
 8005926:	4618      	mov	r0, r3
 8005928:	490d      	ldr	r1, [pc, #52]	; (8005960 <_SendPacket+0x2dc>)
 800592a:	4603      	mov	r3, r0
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4403      	add	r3, r0
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3370      	adds	r3, #112	; 0x70
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <_SendPacket+0x2d8>)
 800593e:	789b      	ldrb	r3, [r3, #2]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <_SendPacket+0x2d8>)
 8005946:	2201      	movs	r2, #1
 8005948:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800594a:	f7ff fdb7 	bl	80054bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <_SendPacket+0x2d8>)
 8005950:	2200      	movs	r2, #0
 8005952:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005954:	bf00      	nop
 8005956:	3728      	adds	r7, #40	; 0x28
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	2001a790 	.word	0x2001a790
 8005960:	200192d0 	.word	0x200192d0

08005964 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3301      	adds	r3, #1
 800597a:	2b80      	cmp	r3, #128	; 0x80
 800597c:	d80a      	bhi.n	8005994 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6051      	str	r1, [r2, #4]
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d15a      	bne.n	8005a52 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	623b      	str	r3, [r7, #32]
 80059bc:	e00b      	b.n	80059d6 <_StoreChar+0x72>
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	1c59      	adds	r1, r3, #1
 80059c6:	6279      	str	r1, [r7, #36]	; 0x24
 80059c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	09db      	lsrs	r3, r3, #7
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	2b7f      	cmp	r3, #127	; 0x7f
 80059da:	d8f0      	bhi.n	80059be <_StoreChar+0x5a>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	627a      	str	r2, [r7, #36]	; 0x24
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e00b      	b.n	8005a0e <_StoreChar+0xaa>
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	61f9      	str	r1, [r7, #28]
 8005a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b7f      	cmp	r3, #127	; 0x7f
 8005a12:	d8f0      	bhi.n	80059f6 <_StoreChar+0x92>
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	61fa      	str	r2, [r7, #28]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	221a      	movs	r2, #26
 8005a2a:	6939      	ldr	r1, [r7, #16]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fe29 	bl	8005684 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fd34 	bl	80054a4 <_PreparePacket>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]
  }
}
 8005a52:	bf00      	nop
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a76:	e007      	b.n	8005a88 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	623b      	str	r3, [r7, #32]
    Width++;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d2f3      	bcs.n	8005a78 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d901      	bls.n	8005a9c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11f      	bne.n	8005ae6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01c      	beq.n	8005ae6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <_PrintUnsigned+0x66>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <_PrintUnsigned+0x66>
        c = '0';
 8005abc:	2330      	movs	r3, #48	; 0x30
 8005abe:	76fb      	strb	r3, [r7, #27]
 8005ac0:	e001      	b.n	8005ac6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac6:	e007      	b.n	8005ad8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	3b01      	subs	r3, #1
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005ace:	7efb      	ldrb	r3, [r7, #27]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff ff46 	bl	8005964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <_PrintUnsigned+0x8a>
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d3f0      	bcc.n	8005ac8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d903      	bls.n	8005af4 <_PrintUnsigned+0x98>
      NumDigits--;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	e009      	b.n	8005b08 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d200      	bcs.n	8005b08 <_PrintUnsigned+0xac>
        break;
 8005b06:	e005      	b.n	8005b14 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b12:	e7e8      	b.n	8005ae6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b2c:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <_PrintUnsigned+0x128>)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff ff14 	bl	8005964 <_StoreChar>
    Digit /= Base;
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e3      	bne.n	8005b14 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b5c:	e006      	b.n	8005b6c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	3b01      	subs	r3, #1
 8005b62:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b64:	2120      	movs	r1, #32
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff fefc 	bl	8005964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <_PrintUnsigned+0x11e>
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d3f1      	bcc.n	8005b5e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	3728      	adds	r7, #40	; 0x28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	08007694 	.word	0x08007694

08005b88 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfb8      	it	lt
 8005b9c:	425b      	neglt	r3, r3
 8005b9e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ba4:	e007      	b.n	8005bb6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bae:	613b      	str	r3, [r7, #16]
    Width++;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	daf3      	bge.n	8005ba6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d901      	bls.n	8005bca <_PrintInt+0x42>
    Width = NumDigits;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <_PrintInt+0x5e>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db04      	blt.n	8005be0 <_PrintInt+0x58>
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <_PrintInt+0x5e>
    FieldWidth--;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <_PrintInt+0x6e>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <_PrintInt+0x9c>
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d111      	bne.n	8005c24 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00e      	beq.n	8005c24 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c06:	e006      	b.n	8005c16 <_PrintInt+0x8e>
        FieldWidth--;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c0e:	2120      	movs	r1, #32
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fea7 	bl	8005964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <_PrintInt+0x9c>
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d3f1      	bcc.n	8005c08 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da07      	bge.n	8005c3a <_PrintInt+0xb2>
    v = -v;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c30:	212d      	movs	r1, #45	; 0x2d
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fe96 	bl	8005964 <_StoreChar>
 8005c38:	e008      	b.n	8005c4c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c44:	212b      	movs	r1, #43	; 0x2b
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fe8c 	bl	8005964 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <_PrintInt+0x102>
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <_PrintInt+0x102>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d111      	bne.n	8005c8a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c6c:	e006      	b.n	8005c7c <_PrintInt+0xf4>
        FieldWidth--;
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c74:	2130      	movs	r1, #48	; 0x30
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fe74 	bl	8005964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <_PrintInt+0x102>
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3f1      	bcc.n	8005c6e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff fedf 	bl	8005a5c <_PrintUnsigned>
}
 8005c9e:	bf00      	nop
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b098      	sub	sp, #96	; 0x60
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc2:	48b7      	ldr	r0, [pc, #732]	; (8005fa0 <_VPrintTarget+0x2f8>)
 8005cc4:	f7ff fbee 	bl	80054a4 <_PreparePacket>
 8005cc8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cca:	4bb5      	ldr	r3, [pc, #724]	; (8005fa0 <_VPrintTarget+0x2f8>)
 8005ccc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 81a8 	beq.w	8006048 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfc:	2b25      	cmp	r3, #37	; 0x25
 8005cfe:	f040 8195 	bne.w	800602c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d02:	2300      	movs	r3, #0
 8005d04:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d16:	3b23      	subs	r3, #35	; 0x23
 8005d18:	2b0d      	cmp	r3, #13
 8005d1a:	d83f      	bhi.n	8005d9c <_VPrintTarget+0xf4>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <_VPrintTarget+0x7c>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d9d 	.word	0x08005d9d
 8005d2c:	08005d9d 	.word	0x08005d9d
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005d9d 	.word	0x08005d9d
 8005d40:	08005d9d 	.word	0x08005d9d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d9d 	.word	0x08005d9d
 8005d54:	08005d9d 	.word	0x08005d9d
 8005d58:	08005d6d 	.word	0x08005d6d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e01a      	b.n	8005da2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	f043 0302 	orr.w	r3, r3, #2
 8005d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e012      	b.n	8005da2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e00a      	b.n	8005da2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8e:	f043 0308 	orr.w	r3, r3, #8
 8005d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e002      	b.n	8005da2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005da0:	bf00      	nop
        }
      } while (v);
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1b0      	bne.n	8005d0a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005da8:	2300      	movs	r3, #0
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005db8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dba:	d912      	bls.n	8005de2 <_VPrintTarget+0x13a>
 8005dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc0:	2b39      	cmp	r3, #57	; 0x39
 8005dc2:	d80e      	bhi.n	8005de2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dda:	4413      	add	r3, r2
 8005ddc:	3b30      	subs	r3, #48	; 0x30
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005de0:	e7e4      	b.n	8005dac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005de2:	2300      	movs	r3, #0
 8005de4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df2:	2b2e      	cmp	r3, #46	; 0x2e
 8005df4:	d11d      	bne.n	8005e32 <_VPrintTarget+0x18a>
        sFormat++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e08:	2b2f      	cmp	r3, #47	; 0x2f
 8005e0a:	d912      	bls.n	8005e32 <_VPrintTarget+0x18a>
 8005e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e10:	2b39      	cmp	r3, #57	; 0x39
 8005e12:	d80e      	bhi.n	8005e32 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	461a      	mov	r2, r3
 8005e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3b30      	subs	r3, #48	; 0x30
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e30:	e7e4      	b.n	8005dfc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e3e:	2b6c      	cmp	r3, #108	; 0x6c
 8005e40:	d003      	beq.n	8005e4a <_VPrintTarget+0x1a2>
 8005e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e46:	2b68      	cmp	r3, #104	; 0x68
 8005e48:	d107      	bne.n	8005e5a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e58:	e7ef      	b.n	8005e3a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e5e:	2b25      	cmp	r3, #37	; 0x25
 8005e60:	f000 80d8 	beq.w	8006014 <_VPrintTarget+0x36c>
 8005e64:	2b25      	cmp	r3, #37	; 0x25
 8005e66:	f2c0 80dc 	blt.w	8006022 <_VPrintTarget+0x37a>
 8005e6a:	2b78      	cmp	r3, #120	; 0x78
 8005e6c:	f300 80d9 	bgt.w	8006022 <_VPrintTarget+0x37a>
 8005e70:	2b58      	cmp	r3, #88	; 0x58
 8005e72:	f2c0 80d6 	blt.w	8006022 <_VPrintTarget+0x37a>
 8005e76:	3b58      	subs	r3, #88	; 0x58
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	f200 80d2 	bhi.w	8006022 <_VPrintTarget+0x37a>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <_VPrintTarget+0x1dc>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005f7b 	.word	0x08005f7b
 8005e88:	08006023 	.word	0x08006023
 8005e8c:	08006023 	.word	0x08006023
 8005e90:	08006023 	.word	0x08006023
 8005e94:	08006023 	.word	0x08006023
 8005e98:	08006023 	.word	0x08006023
 8005e9c:	08006023 	.word	0x08006023
 8005ea0:	08006023 	.word	0x08006023
 8005ea4:	08006023 	.word	0x08006023
 8005ea8:	08006023 	.word	0x08006023
 8005eac:	08006023 	.word	0x08006023
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f2f 	.word	0x08005f2f
 8005eb8:	08006023 	.word	0x08006023
 8005ebc:	08006023 	.word	0x08006023
 8005ec0:	08006023 	.word	0x08006023
 8005ec4:	08006023 	.word	0x08006023
 8005ec8:	08006023 	.word	0x08006023
 8005ecc:	08006023 	.word	0x08006023
 8005ed0:	08006023 	.word	0x08006023
 8005ed4:	08006023 	.word	0x08006023
 8005ed8:	08006023 	.word	0x08006023
 8005edc:	08006023 	.word	0x08006023
 8005ee0:	08006023 	.word	0x08006023
 8005ee4:	08005fef 	.word	0x08005fef
 8005ee8:	08006023 	.word	0x08006023
 8005eec:	08006023 	.word	0x08006023
 8005ef0:	08005fa5 	.word	0x08005fa5
 8005ef4:	08006023 	.word	0x08006023
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08006023 	.word	0x08006023
 8005f00:	08006023 	.word	0x08006023
 8005f04:	08005f7b 	.word	0x08005f7b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1d19      	adds	r1, r3, #4
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f20:	f107 0310 	add.w	r3, r7, #16
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fd1c 	bl	8005964 <_StoreChar>
        break;
 8005f2c:	e07a      	b.n	8006024 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	1d19      	adds	r1, r3, #4
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6011      	str	r1, [r2, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f3c:	f107 0010 	add.w	r0, r7, #16
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f4e:	f7ff fe1b 	bl	8005b88 <_PrintInt>
        break;
 8005f52:	e067      	b.n	8006024 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	1d19      	adds	r1, r3, #4
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f64:	f107 0010 	add.w	r0, r7, #16
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	220a      	movs	r2, #10
 8005f74:	f7ff fd72 	bl	8005a5c <_PrintUnsigned>
        break;
 8005f78:	e054      	b.n	8006024 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	1d19      	adds	r1, r3, #4
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6011      	str	r1, [r2, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f8a:	f107 0010 	add.w	r0, r7, #16
 8005f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	2210      	movs	r2, #16
 8005f9a:	f7ff fd5f 	bl	8005a5c <_PrintUnsigned>
        break;
 8005f9e:	e041      	b.n	8006024 <_VPrintTarget+0x37c>
 8005fa0:	2001a7c0 	.word	0x2001a7c0
      case 's':
        s = va_arg(*pParamList, const char*);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <_VPrintTarget+0x314>
          s = "(null)";
 8005fb8:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <_VPrintTarget+0x43c>)
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005fd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fcc1 	bl	8005964 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe6:	d9e9      	bls.n	8005fbc <_VPrintTarget+0x314>
        break;
 8005fe8:	e01c      	b.n	8006024 <_VPrintTarget+0x37c>
            break;
 8005fea:	bf00      	nop
        break;
 8005fec:	e01a      	b.n	8006024 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1d19      	adds	r1, r3, #4
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6011      	str	r1, [r2, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ffe:	f107 0010 	add.w	r0, r7, #16
 8006002:	2300      	movs	r3, #0
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	2308      	movs	r3, #8
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	2308      	movs	r3, #8
 800600c:	2210      	movs	r2, #16
 800600e:	f7ff fd25 	bl	8005a5c <_PrintUnsigned>
        break;
 8006012:	e007      	b.n	8006024 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006014:	f107 0310 	add.w	r3, r7, #16
 8006018:	2125      	movs	r1, #37	; 0x25
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fca2 	bl	8005964 <_StoreChar>
        break;
 8006020:	e000      	b.n	8006024 <_VPrintTarget+0x37c>
      default:
        break;
 8006022:	bf00      	nop
      }
      sFormat++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e007      	b.n	800603c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800602c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006030:	f107 0310 	add.w	r3, r7, #16
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fc94 	bl	8005964 <_StoreChar>
    }
  } while (*sFormat);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f ae4d 	bne.w	8005ce0 <_VPrintTarget+0x38>
 8006046:	e000      	b.n	800604a <_VPrintTarget+0x3a2>
      break;
 8006048:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d041      	beq.n	80060d4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006060:	e00b      	b.n	800607a <_VPrintTarget+0x3d2>
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	1c59      	adds	r1, r3, #1
 800606a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800606c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	09db      	lsrs	r3, r3, #7
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b7f      	cmp	r3, #127	; 0x7f
 800607e:	d8f0      	bhi.n	8006062 <_VPrintTarget+0x3ba>
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
 8006094:	2300      	movs	r3, #0
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
 8006098:	e00b      	b.n	80060b2 <_VPrintTarget+0x40a>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	b2da      	uxtb	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	1c59      	adds	r1, r3, #1
 80060a2:	6379      	str	r1, [r7, #52]	; 0x34
 80060a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b7f      	cmp	r3, #127	; 0x7f
 80060b6:	d8f0      	bhi.n	800609a <_VPrintTarget+0x3f2>
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	637a      	str	r2, [r7, #52]	; 0x34
 80060be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	221a      	movs	r2, #26
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fad8 	bl	8005684 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060da:	bf00      	nop
 80060dc:	3758      	adds	r7, #88	; 0x58
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	08007644 	.word	0x08007644

080060e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060f6:	2300      	movs	r3, #0
 80060f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060fc:	4917      	ldr	r1, [pc, #92]	; (800615c <SEGGER_SYSVIEW_Init+0x74>)
 80060fe:	4818      	ldr	r0, [pc, #96]	; (8006160 <SEGGER_SYSVIEW_Init+0x78>)
 8006100:	f7ff f8d0 	bl	80052a4 <SEGGER_RTT_AllocUpBuffer>
 8006104:	4603      	mov	r3, r0
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 800610a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 800610e:	785a      	ldrb	r2, [r3, #1]
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006112:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	7e1b      	ldrb	r3, [r3, #24]
 8006118:	4618      	mov	r0, r3
 800611a:	2300      	movs	r3, #0
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2308      	movs	r3, #8
 8006120:	4a11      	ldr	r2, [pc, #68]	; (8006168 <SEGGER_SYSVIEW_Init+0x80>)
 8006122:	490f      	ldr	r1, [pc, #60]	; (8006160 <SEGGER_SYSVIEW_Init+0x78>)
 8006124:	f7ff f942 	bl	80053ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 800612a:	2200      	movs	r2, #0
 800612c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <SEGGER_SYSVIEW_Init+0x84>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006134:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006136:	4a0b      	ldr	r2, [pc, #44]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800613c:	4a09      	ldr	r2, [pc, #36]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006142:	4a08      	ldr	r2, [pc, #32]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006148:	4a06      	ldr	r2, [pc, #24]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <SEGGER_SYSVIEW_Init+0x7c>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20019788 	.word	0x20019788
 8006160:	0800764c 	.word	0x0800764c
 8006164:	2001a790 	.word	0x2001a790
 8006168:	2001a788 	.word	0x2001a788
 800616c:	e0001004 	.word	0xe0001004

08006170 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006178:	4a04      	ldr	r2, [pc, #16]	; (800618c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6113      	str	r3, [r2, #16]
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	2001a790 	.word	0x2001a790

08006190 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006198:	f3ef 8311 	mrs	r3, BASEPRI
 800619c:	f04f 0120 	mov.w	r1, #32
 80061a0:	f381 8811 	msr	BASEPRI, r1
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	4808      	ldr	r0, [pc, #32]	; (80061c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061a8:	f7ff f97c 	bl	80054a4 <_PreparePacket>
 80061ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	68b8      	ldr	r0, [r7, #8]
 80061b4:	f7ff fa66 	bl	8005684 <_SendPacket>
  RECORD_END();
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2001a7c0 	.word	0x2001a7c0

080061cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061d6:	f3ef 8311 	mrs	r3, BASEPRI
 80061da:	f04f 0120 	mov.w	r1, #32
 80061de:	f381 8811 	msr	BASEPRI, r1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	4816      	ldr	r0, [pc, #88]	; (8006240 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061e6:	f7ff f95d 	bl	80054a4 <_PreparePacket>
 80061ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e00b      	b.n	8006212 <SEGGER_SYSVIEW_RecordU32+0x46>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	61f9      	str	r1, [r7, #28]
 8006204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	09db      	lsrs	r3, r3, #7
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b7f      	cmp	r3, #127	; 0x7f
 8006216:	d8f0      	bhi.n	80061fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	61fa      	str	r2, [r7, #28]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6938      	ldr	r0, [r7, #16]
 800622e:	f7ff fa29 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f383 8811 	msr	BASEPRI, r3
}
 8006238:	bf00      	nop
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	2001a7c0 	.word	0x2001a7c0

08006244 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	; 0x30
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006250:	f3ef 8311 	mrs	r3, BASEPRI
 8006254:	f04f 0120 	mov.w	r1, #32
 8006258:	f381 8811 	msr	BASEPRI, r1
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	4825      	ldr	r0, [pc, #148]	; (80062f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006260:	f7ff f920 	bl	80054a4 <_PreparePacket>
 8006264:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	e00b      	b.n	800628c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	b2da      	uxtb	r2, r3
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800627e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	09db      	lsrs	r3, r3, #7
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	2b7f      	cmp	r3, #127	; 0x7f
 8006290:	d8f0      	bhi.n	8006274 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e00b      	b.n	80062c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	6279      	str	r1, [r7, #36]	; 0x24
 80062b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	09db      	lsrs	r3, r3, #7
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b7f      	cmp	r3, #127	; 0x7f
 80062c8:	d8f0      	bhi.n	80062ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	627a      	str	r2, [r7, #36]	; 0x24
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	6979      	ldr	r1, [r7, #20]
 80062de:	69b8      	ldr	r0, [r7, #24]
 80062e0:	f7ff f9d0 	bl	8005684 <_SendPacket>
  RECORD_END();
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f383 8811 	msr	BASEPRI, r3
}
 80062ea:	bf00      	nop
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2001a7c0 	.word	0x2001a7c0

080062f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08e      	sub	sp, #56	; 0x38
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006306:	f3ef 8311 	mrs	r3, BASEPRI
 800630a:	f04f 0120 	mov.w	r1, #32
 800630e:	f381 8811 	msr	BASEPRI, r1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	4832      	ldr	r0, [pc, #200]	; (80063e0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006316:	f7ff f8c5 	bl	80054a4 <_PreparePacket>
 800631a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	e00b      	b.n	8006342 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	6379      	str	r1, [r7, #52]	; 0x34
 8006334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	09db      	lsrs	r3, r3, #7
 8006340:	633b      	str	r3, [r7, #48]	; 0x30
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	2b7f      	cmp	r3, #127	; 0x7f
 8006346:	d8f0      	bhi.n	800632a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	637a      	str	r2, [r7, #52]	; 0x34
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	b2da      	uxtb	r2, r3
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800636c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	e00b      	b.n	80063b2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	1c59      	adds	r1, r3, #1
 80063a2:	6279      	str	r1, [r7, #36]	; 0x24
 80063a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	09db      	lsrs	r3, r3, #7
 80063b0:	623b      	str	r3, [r7, #32]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	2b7f      	cmp	r3, #127	; 0x7f
 80063b6:	d8f0      	bhi.n	800639a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	627a      	str	r2, [r7, #36]	; 0x24
 80063be:	6a3a      	ldr	r2, [r7, #32]
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	69b8      	ldr	r0, [r7, #24]
 80063ce:	f7ff f959 	bl	8005684 <_SendPacket>
  RECORD_END();
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f383 8811 	msr	BASEPRI, r3
}
 80063d8:	bf00      	nop
 80063da:	3738      	adds	r7, #56	; 0x38
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2001a7c0 	.word	0x2001a7c0

080063e4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b090      	sub	sp, #64	; 0x40
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063f2:	f3ef 8311 	mrs	r3, BASEPRI
 80063f6:	f04f 0120 	mov.w	r1, #32
 80063fa:	f381 8811 	msr	BASEPRI, r1
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	4840      	ldr	r0, [pc, #256]	; (8006504 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006402:	f7ff f84f 	bl	80054a4 <_PreparePacket>
 8006406:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	63bb      	str	r3, [r7, #56]	; 0x38
 8006414:	e00b      	b.n	800642e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	b2da      	uxtb	r2, r3
 800641a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	2b7f      	cmp	r3, #127	; 0x7f
 8006432:	d8f0      	bhi.n	8006416 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800643a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006442:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	6379      	str	r1, [r7, #52]	; 0x34
 8006458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	633b      	str	r3, [r7, #48]	; 0x30
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b7f      	cmp	r3, #127	; 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	637a      	str	r2, [r7, #52]	; 0x34
 8006472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
 8006484:	e00b      	b.n	800649e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	b2da      	uxtb	r2, r3
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	1c59      	adds	r1, r3, #1
 800648e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	09db      	lsrs	r3, r3, #7
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	2b7f      	cmp	r3, #127	; 0x7f
 80064a2:	d8f0      	bhi.n	8006486 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	e00b      	b.n	80064d6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	6279      	str	r1, [r7, #36]	; 0x24
 80064c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	09db      	lsrs	r3, r3, #7
 80064d4:	623b      	str	r3, [r7, #32]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	2b7f      	cmp	r3, #127	; 0x7f
 80064da:	d8f0      	bhi.n	80064be <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	627a      	str	r2, [r7, #36]	; 0x24
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	69b8      	ldr	r0, [r7, #24]
 80064f2:	f7ff f8c7 	bl	8005684 <_SendPacket>
  RECORD_END();
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f383 8811 	msr	BASEPRI, r3
}
 80064fc:	bf00      	nop
 80064fe:	3740      	adds	r7, #64	; 0x40
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	2001a7c0 	.word	0x2001a7c0

08006508 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	; 0x30
 800650c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800650e:	4b59      	ldr	r3, [pc, #356]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006514:	f3ef 8311 	mrs	r3, BASEPRI
 8006518:	f04f 0120 	mov.w	r1, #32
 800651c:	f381 8811 	msr	BASEPRI, r1
 8006520:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006522:	4b54      	ldr	r3, [pc, #336]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	220a      	movs	r2, #10
 8006528:	4953      	ldr	r1, [pc, #332]	; (8006678 <SEGGER_SYSVIEW_Start+0x170>)
 800652a:	4618      	mov	r0, r3
 800652c:	f7f9 fe50 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006536:	f000 ff07 	bl	8007348 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800653a:	200a      	movs	r0, #10
 800653c:	f7ff fe28 	bl	8006190 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006540:	f3ef 8311 	mrs	r3, BASEPRI
 8006544:	f04f 0120 	mov.w	r1, #32
 8006548:	f381 8811 	msr	BASEPRI, r1
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	484b      	ldr	r0, [pc, #300]	; (800667c <SEGGER_SYSVIEW_Start+0x174>)
 8006550:	f7fe ffa8 	bl	80054a4 <_PreparePacket>
 8006554:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655e:	4b45      	ldr	r3, [pc, #276]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
 8006564:	e00b      	b.n	800657e <SEGGER_SYSVIEW_Start+0x76>
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	09db      	lsrs	r3, r3, #7
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d8f0      	bhi.n	8006566 <SEGGER_SYSVIEW_Start+0x5e>
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	e00b      	b.n	80065b8 <SEGGER_SYSVIEW_Start+0xb0>
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	6279      	str	r1, [r7, #36]	; 0x24
 80065aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	09db      	lsrs	r3, r3, #7
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b7f      	cmp	r3, #127	; 0x7f
 80065bc:	d8f0      	bhi.n	80065a0 <SEGGER_SYSVIEW_Start+0x98>
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	627a      	str	r2, [r7, #36]	; 0x24
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	4b28      	ldr	r3, [pc, #160]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e00b      	b.n	80065f2 <SEGGER_SYSVIEW_Start+0xea>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	61f9      	str	r1, [r7, #28]
 80065e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	09db      	lsrs	r3, r3, #7
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b7f      	cmp	r3, #127	; 0x7f
 80065f6:	d8f0      	bhi.n	80065da <SEGGER_SYSVIEW_Start+0xd2>
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	61fa      	str	r2, [r7, #28]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e00b      	b.n	800662a <SEGGER_SYSVIEW_Start+0x122>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	6179      	str	r1, [r7, #20]
 800661c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b7f      	cmp	r3, #127	; 0x7f
 800662e:	d8f0      	bhi.n	8006612 <SEGGER_SYSVIEW_Start+0x10a>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	617a      	str	r2, [r7, #20]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006640:	2218      	movs	r2, #24
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff f81d 	bl	8005684 <_SendPacket>
      RECORD_END();
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <SEGGER_SYSVIEW_Start+0x16c>)
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800665e:	f000 f9eb 	bl	8006a38 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006662:	f000 f9b1 	bl	80069c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006666:	f000 fc8d 	bl	8006f84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800666a:	bf00      	nop
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	2001a790 	.word	0x2001a790
 8006678:	08007688 	.word	0x08007688
 800667c:	2001a7c0 	.word	0x2001a7c0

08006680 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006686:	f3ef 8311 	mrs	r3, BASEPRI
 800668a:	f04f 0120 	mov.w	r1, #32
 800668e:	f381 8811 	msr	BASEPRI, r1
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	480b      	ldr	r0, [pc, #44]	; (80066c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006696:	f7fe ff05 	bl	80054a4 <_PreparePacket>
 800669a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066a4:	220b      	movs	r2, #11
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7fe ffeb 	bl	8005684 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f383 8811 	msr	BASEPRI, r3
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2001a7c0 	.word	0x2001a7c0
 80066c8:	2001a790 	.word	0x2001a790

080066cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08c      	sub	sp, #48	; 0x30
 80066d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066d2:	f3ef 8311 	mrs	r3, BASEPRI
 80066d6:	f04f 0120 	mov.w	r1, #32
 80066da:	f381 8811 	msr	BASEPRI, r1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	4845      	ldr	r0, [pc, #276]	; (80067f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066e2:	f7fe fedf 	bl	80054a4 <_PreparePacket>
 80066e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f0:	4b42      	ldr	r3, [pc, #264]	; (80067fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f6:	e00b      	b.n	8006710 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	1c59      	adds	r1, r3, #1
 8006700:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	09db      	lsrs	r3, r3, #7
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d8f0      	bhi.n	80066f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800671c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	4b34      	ldr	r3, [pc, #208]	; (80067fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	623b      	str	r3, [r7, #32]
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	6279      	str	r1, [r7, #36]	; 0x24
 800673c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b7f      	cmp	r3, #127	; 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	627a      	str	r2, [r7, #36]	; 0x24
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	4b25      	ldr	r3, [pc, #148]	; (80067fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e00b      	b.n	8006784 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	61f9      	str	r1, [r7, #28]
 8006776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b7f      	cmp	r3, #127	; 0x7f
 8006788:	d8f0      	bhi.n	800676c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	61fa      	str	r2, [r7, #28]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	e00b      	b.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	6179      	str	r1, [r7, #20]
 80067ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	09db      	lsrs	r3, r3, #7
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b7f      	cmp	r3, #127	; 0x7f
 80067c0:	d8f0      	bhi.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	617a      	str	r2, [r7, #20]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067d2:	2218      	movs	r2, #24
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	68b8      	ldr	r0, [r7, #8]
 80067d8:	f7fe ff54 	bl	8005684 <_SendPacket>
  RECORD_END();
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	4798      	blx	r3
  }
}
 80067f0:	bf00      	nop
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	2001a7c0 	.word	0x2001a7c0
 80067fc:	2001a790 	.word	0x2001a790

08006800 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b092      	sub	sp, #72	; 0x48
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006808:	f3ef 8311 	mrs	r3, BASEPRI
 800680c:	f04f 0120 	mov.w	r1, #32
 8006810:	f381 8811 	msr	BASEPRI, r1
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	486a      	ldr	r0, [pc, #424]	; (80069c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006818:	f7fe fe44 	bl	80054a4 <_PreparePacket>
 800681c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b66      	ldr	r3, [pc, #408]	; (80069c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	643b      	str	r3, [r7, #64]	; 0x40
 8006832:	e00b      	b.n	800684c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006836:	b2da      	uxtb	r2, r3
 8006838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683a:	1c59      	adds	r1, r3, #1
 800683c:	6479      	str	r1, [r7, #68]	; 0x44
 800683e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	09db      	lsrs	r3, r3, #7
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d8f0      	bhi.n	8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	647a      	str	r2, [r7, #68]	; 0x44
 8006858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	b2da      	uxtb	r2, r3
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	63bb      	str	r3, [r7, #56]	; 0x38
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800688c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	4619      	mov	r1, r3
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7fe fdcd 	bl	8005444 <_EncodeStr>
 80068aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068ac:	2209      	movs	r2, #9
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	6938      	ldr	r0, [r7, #16]
 80068b2:	f7fe fee7 	bl	8005684 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b40      	ldr	r3, [pc, #256]	; (80069c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	633b      	str	r3, [r7, #48]	; 0x30
 80068ca:	e00b      	b.n	80068e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	6379      	str	r1, [r7, #52]	; 0x34
 80068d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	09db      	lsrs	r3, r3, #7
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2b7f      	cmp	r3, #127	; 0x7f
 80068e8:	d8f0      	bhi.n	80068cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	637a      	str	r2, [r7, #52]	; 0x34
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
 8006904:	e00b      	b.n	800691e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	b2da      	uxtb	r2, r3
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	1c59      	adds	r1, r3, #1
 800690e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	09db      	lsrs	r3, r3, #7
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	2b7f      	cmp	r3, #127	; 0x7f
 8006922:	d8f0      	bhi.n	8006906 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800692a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	e00b      	b.n	8006958 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	6279      	str	r1, [r7, #36]	; 0x24
 800694a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	09db      	lsrs	r3, r3, #7
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b7f      	cmp	r3, #127	; 0x7f
 800695c:	d8f0      	bhi.n	8006940 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	627a      	str	r2, [r7, #36]	; 0x24
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	e00b      	b.n	8006992 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	1c59      	adds	r1, r3, #1
 8006982:	61f9      	str	r1, [r7, #28]
 8006984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b7f      	cmp	r3, #127	; 0x7f
 8006996:	d8f0      	bhi.n	800697a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	61fa      	str	r2, [r7, #28]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069a8:	2215      	movs	r2, #21
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	6938      	ldr	r0, [r7, #16]
 80069ae:	f7fe fe69 	bl	8005684 <_SendPacket>
  RECORD_END();
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f383 8811 	msr	BASEPRI, r3
}
 80069b8:	bf00      	nop
 80069ba:	3748      	adds	r7, #72	; 0x48
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	2001a7c0 	.word	0x2001a7c0
 80069c4:	2001a790 	.word	0x2001a790

080069c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069de:	4b03      	ldr	r3, [pc, #12]	; (80069ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4798      	blx	r3
  }
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2001a790 	.word	0x2001a790

080069f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069f8:	f3ef 8311 	mrs	r3, BASEPRI
 80069fc:	f04f 0120 	mov.w	r1, #32
 8006a00:	f381 8811 	msr	BASEPRI, r1
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	480b      	ldr	r0, [pc, #44]	; (8006a34 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a08:	f7fe fd4c 	bl	80054a4 <_PreparePacket>
 8006a0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	6938      	ldr	r0, [r7, #16]
 8006a14:	f7fe fd16 	bl	8005444 <_EncodeStr>
 8006a18:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a1a:	220e      	movs	r2, #14
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7fe fe30 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f383 8811 	msr	BASEPRI, r3
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	2001a7c0 	.word	0x2001a7c0

08006a38 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a3e:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01a      	beq.n	8006a7c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a50:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4798      	blx	r3
 8006a58:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a5c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	000a      	movs	r2, r1
 8006a6c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a6e:	4613      	mov	r3, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	4621      	mov	r1, r4
 8006a74:	200d      	movs	r0, #13
 8006a76:	f7ff fbe5 	bl	8006244 <SEGGER_SYSVIEW_RecordU32x2>
 8006a7a:	e006      	b.n	8006a8a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	200c      	movs	r0, #12
 8006a84:	f7ff fba2 	bl	80061cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd90      	pop	{r4, r7, pc}
 8006a92:	bf00      	nop
 8006a94:	2001a790 	.word	0x2001a790
 8006a98:	e0001004 	.word	0xe0001004

08006a9c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa6:	f04f 0120 	mov.w	r1, #32
 8006aaa:	f381 8811 	msr	BASEPRI, r1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	4819      	ldr	r0, [pc, #100]	; (8006b18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006ab2:	f7fe fcf7 	bl	80054a4 <_PreparePacket>
 8006ab6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006abc:	4b17      	ldr	r3, [pc, #92]	; (8006b1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	e00b      	b.n	8006ae8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	6179      	str	r1, [r7, #20]
 8006ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b7f      	cmp	r3, #127	; 0x7f
 8006aec:	d8f0      	bhi.n	8006ad0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	617a      	str	r2, [r7, #20]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006afe:	2202      	movs	r2, #2
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	68b8      	ldr	r0, [r7, #8]
 8006b04:	f7fe fdbe 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f383 8811 	msr	BASEPRI, r3
}
 8006b0e:	bf00      	nop
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	2001a7c0 	.word	0x2001a7c0
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b26:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2a:	f04f 0120 	mov.w	r1, #32
 8006b2e:	f381 8811 	msr	BASEPRI, r1
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	4807      	ldr	r0, [pc, #28]	; (8006b54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b36:	f7fe fcb5 	bl	80054a4 <_PreparePacket>
 8006b3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6838      	ldr	r0, [r7, #0]
 8006b42:	f7fe fd9f 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f383 8811 	msr	BASEPRI, r3
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	2001a7c0 	.word	0x2001a7c0

08006b58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	4807      	ldr	r0, [pc, #28]	; (8006b8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b6e:	f7fe fc99 	bl	80054a4 <_PreparePacket>
 8006b72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b74:	2212      	movs	r2, #18
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6838      	ldr	r0, [r7, #0]
 8006b7a:	f7fe fd83 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f383 8811 	msr	BASEPRI, r3
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	2001a7c0 	.word	0x2001a7c0

08006b90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b96:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9a:	f04f 0120 	mov.w	r1, #32
 8006b9e:	f381 8811 	msr	BASEPRI, r1
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	4807      	ldr	r0, [pc, #28]	; (8006bc4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006ba6:	f7fe fc7d 	bl	80054a4 <_PreparePacket>
 8006baa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006bac:	2211      	movs	r2, #17
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6838      	ldr	r0, [r7, #0]
 8006bb2:	f7fe fd67 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	2001a7c0 	.word	0x2001a7c0

08006bc8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd4:	f04f 0120 	mov.w	r1, #32
 8006bd8:	f381 8811 	msr	BASEPRI, r1
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006be0:	f7fe fc60 	bl	80054a4 <_PreparePacket>
 8006be4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e00b      	b.n	8006c16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	1c59      	adds	r1, r3, #1
 8006c06:	61f9      	str	r1, [r7, #28]
 8006c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	09db      	lsrs	r3, r3, #7
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1a:	d8f0      	bhi.n	8006bfe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	61fa      	str	r2, [r7, #28]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	6938      	ldr	r0, [r7, #16]
 8006c32:	f7fe fd27 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f383 8811 	msr	BASEPRI, r3
}
 8006c3c:	bf00      	nop
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2001a7c0 	.word	0x2001a7c0
 8006c48:	2001a790 	.word	0x2001a790

08006c4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c54:	f3ef 8311 	mrs	r3, BASEPRI
 8006c58:	f04f 0120 	mov.w	r1, #32
 8006c5c:	f381 8811 	msr	BASEPRI, r1
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	4819      	ldr	r0, [pc, #100]	; (8006cc8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c64:	f7fe fc1e 	bl	80054a4 <_PreparePacket>
 8006c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c6e:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	61f9      	str	r1, [r7, #28]
 8006c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	61fa      	str	r2, [r7, #28]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6938      	ldr	r0, [r7, #16]
 8006cb6:	f7fe fce5 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
}
 8006cc0:	bf00      	nop
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	2001a7c0 	.word	0x2001a7c0
 8006ccc:	2001a790 	.word	0x2001a790

08006cd0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cdc:	f04f 0120 	mov.w	r1, #32
 8006ce0:	f381 8811 	msr	BASEPRI, r1
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	4819      	ldr	r0, [pc, #100]	; (8006d4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ce8:	f7fe fbdc 	bl	80054a4 <_PreparePacket>
 8006cec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e00b      	b.n	8006d1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	61f9      	str	r1, [r7, #28]
 8006d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b7f      	cmp	r3, #127	; 0x7f
 8006d22:	d8f0      	bhi.n	8006d06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	61fa      	str	r2, [r7, #28]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d34:	2206      	movs	r2, #6
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	6938      	ldr	r0, [r7, #16]
 8006d3a:	f7fe fca3 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f383 8811 	msr	BASEPRI, r3
}
 8006d44:	bf00      	nop
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2001a7c0 	.word	0x2001a7c0
 8006d50:	2001a790 	.word	0x2001a790

08006d54 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d62:	f04f 0120 	mov.w	r1, #32
 8006d66:	f381 8811 	msr	BASEPRI, r1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	4827      	ldr	r0, [pc, #156]	; (8006e0c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d6e:	f7fe fb99 	bl	80054a4 <_PreparePacket>
 8006d72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	e00b      	b.n	8006da4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	6279      	str	r1, [r7, #36]	; 0x24
 8006d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	09db      	lsrs	r3, r3, #7
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	2b7f      	cmp	r3, #127	; 0x7f
 8006da8:	d8f0      	bhi.n	8006d8c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	627a      	str	r2, [r7, #36]	; 0x24
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	e00b      	b.n	8006ddc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	61f9      	str	r1, [r7, #28]
 8006dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	09db      	lsrs	r3, r3, #7
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b7f      	cmp	r3, #127	; 0x7f
 8006de0:	d8f0      	bhi.n	8006dc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	61fa      	str	r2, [r7, #28]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006df2:	2207      	movs	r2, #7
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	6938      	ldr	r0, [r7, #16]
 8006df8:	f7fe fc44 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f383 8811 	msr	BASEPRI, r3
}
 8006e02:	bf00      	nop
 8006e04:	3728      	adds	r7, #40	; 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2001a7c0 	.word	0x2001a7c0
 8006e10:	2001a790 	.word	0x2001a790

08006e14 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006e1c:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	1ad3      	subs	r3, r2, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	2001a790 	.word	0x2001a790

08006e34 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08c      	sub	sp, #48	; 0x30
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e3e:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d077      	beq.n	8006f36 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e50:	e008      	b.n	8006e64 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	3301      	adds	r3, #1
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d3f2      	bcc.n	8006e52 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e6c:	e000      	b.n	8006e70 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e6e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d055      	beq.n	8006f22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e76:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7a:	f04f 0120 	mov.w	r1, #32
 8006e7e:	f381 8811 	msr	BASEPRI, r1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	482f      	ldr	r0, [pc, #188]	; (8006f44 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006e86:	f7fe fb0d 	bl	80054a4 <_PreparePacket>
 8006e8a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	e00b      	b.n	8006eb2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	6279      	str	r1, [r7, #36]	; 0x24
 8006ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	09db      	lsrs	r3, r3, #7
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb6:	d8f0      	bhi.n	8006e9a <SEGGER_SYSVIEW_SendModule+0x66>
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	627a      	str	r2, [r7, #36]	; 0x24
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	e00b      	b.n	8006eec <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	61f9      	str	r1, [r7, #28]
 8006ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	09db      	lsrs	r3, r3, #7
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef0:	d8f0      	bhi.n	8006ed4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	61fa      	str	r2, [r7, #28]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2280      	movs	r2, #128	; 0x80
 8006f08:	4619      	mov	r1, r3
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7fe fa9a 	bl	8005444 <_EncodeStr>
 8006f10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f12:	2216      	movs	r2, #22
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	6938      	ldr	r0, [r7, #16]
 8006f18:	f7fe fbb4 	bl	8005684 <_SendPacket>
      RECORD_END();
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <SEGGER_SYSVIEW_SendModule+0x102>
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4798      	blx	r3
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	3730      	adds	r7, #48	; 0x30
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	2001a7b8 	.word	0x2001a7b8
 8006f44:	2001a7c0 	.word	0x2001a7c0

08006f48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00f      	beq.n	8006f76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f2      	bne.n	8006f5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	2001a7b8 	.word	0x2001a7b8

08006f84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f8e:	f04f 0120 	mov.w	r1, #32
 8006f92:	f381 8811 	msr	BASEPRI, r1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	4817      	ldr	r0, [pc, #92]	; (8006ff8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f9a:	f7fe fa83 	bl	80054a4 <_PreparePacket>
 8006f9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e00b      	b.n	8006fc8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	6179      	str	r1, [r7, #20]
 8006fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	09db      	lsrs	r3, r3, #7
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b7f      	cmp	r3, #127	; 0x7f
 8006fcc:	d8f0      	bhi.n	8006fb0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	617a      	str	r2, [r7, #20]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006fde:	221b      	movs	r2, #27
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	68b8      	ldr	r0, [r7, #8]
 8006fe4:	f7fe fb4e 	bl	8005684 <_SendPacket>
  RECORD_END();
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f383 8811 	msr	BASEPRI, r3
}
 8006fee:	bf00      	nop
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2001a7c0 	.word	0x2001a7c0
 8006ffc:	2001a7bc 	.word	0x2001a7bc

08007000 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007000:	b40f      	push	{r0, r1, r2, r3}
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	461a      	mov	r2, r3
 8007012:	2100      	movs	r1, #0
 8007014:	6938      	ldr	r0, [r7, #16]
 8007016:	f7fe fe47 	bl	8005ca8 <_VPrintTarget>
  va_end(ParamList);
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007024:	b004      	add	sp, #16
 8007026:	4770      	bx	lr

08007028 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007030:	f3ef 8311 	mrs	r3, BASEPRI
 8007034:	f04f 0120 	mov.w	r1, #32
 8007038:	f381 8811 	msr	BASEPRI, r1
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	4827      	ldr	r0, [pc, #156]	; (80070dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007040:	f7fe fa30 	bl	80054a4 <_PreparePacket>
 8007044:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007046:	2280      	movs	r2, #128	; 0x80
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f7fe f9fa 	bl	8005444 <_EncodeStr>
 8007050:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	2301      	movs	r3, #1
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	e00b      	b.n	8007074 <SEGGER_SYSVIEW_Warn+0x4c>
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	1c59      	adds	r1, r3, #1
 8007064:	6279      	str	r1, [r7, #36]	; 0x24
 8007066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	09db      	lsrs	r3, r3, #7
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	2b7f      	cmp	r3, #127	; 0x7f
 8007078:	d8f0      	bhi.n	800705c <SEGGER_SYSVIEW_Warn+0x34>
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	627a      	str	r2, [r7, #36]	; 0x24
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e00b      	b.n	80070ac <SEGGER_SYSVIEW_Warn+0x84>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	61f9      	str	r1, [r7, #28]
 800709e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b7f      	cmp	r3, #127	; 0x7f
 80070b0:	d8f0      	bhi.n	8007094 <SEGGER_SYSVIEW_Warn+0x6c>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070c2:	221a      	movs	r2, #26
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	6938      	ldr	r0, [r7, #16]
 80070c8:	f7fe fadc 	bl	8005684 <_SendPacket>
  RECORD_END();
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f383 8811 	msr	BASEPRI, r3
}
 80070d2:	bf00      	nop
 80070d4:	3728      	adds	r7, #40	; 0x28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	2001a7c0 	.word	0x2001a7c0

080070e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80070e4:	4b13      	ldr	r3, [pc, #76]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070e6:	7e1b      	ldrb	r3, [r3, #24]
 80070e8:	4619      	mov	r1, r3
 80070ea:	4a13      	ldr	r2, [pc, #76]	; (8007138 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80070ec:	460b      	mov	r3, r1
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	440b      	add	r3, r1
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	336c      	adds	r3, #108	; 0x6c
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070fc:	7e1b      	ldrb	r3, [r3, #24]
 80070fe:	4618      	mov	r0, r3
 8007100:	490d      	ldr	r1, [pc, #52]	; (8007138 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007102:	4603      	mov	r3, r0
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4403      	add	r3, r0
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	440b      	add	r3, r1
 800710c:	3370      	adds	r3, #112	; 0x70
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d00b      	beq.n	800712c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007114:	4b07      	ldr	r3, [pc, #28]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007116:	789b      	ldrb	r3, [r3, #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800711e:	2201      	movs	r2, #1
 8007120:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007122:	f7fe f9cb 	bl	80054bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007126:	4b03      	ldr	r3, [pc, #12]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007128:	2200      	movs	r2, #0
 800712a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800712c:	4b01      	ldr	r3, [pc, #4]	; (8007134 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800712e:	781b      	ldrb	r3, [r3, #0]
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	2001a790 	.word	0x2001a790
 8007138:	200192d0 	.word	0x200192d0

0800713c <__NVIC_EnableIRQ>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714a:	2b00      	cmp	r3, #0
 800714c:	db0b      	blt.n	8007166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	f003 021f 	and.w	r2, r3, #31
 8007154:	4907      	ldr	r1, [pc, #28]	; (8007174 <__NVIC_EnableIRQ+0x38>)
 8007156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	2001      	movs	r0, #1
 800715e:	fa00 f202 	lsl.w	r2, r0, r2
 8007162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	e000e100 	.word	0xe000e100

08007178 <__NVIC_SetPriority>:
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007188:	2b00      	cmp	r3, #0
 800718a:	db0a      	blt.n	80071a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	490c      	ldr	r1, [pc, #48]	; (80071c4 <__NVIC_SetPriority+0x4c>)
 8007192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007196:	0112      	lsls	r2, r2, #4
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	440b      	add	r3, r1
 800719c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071a0:	e00a      	b.n	80071b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	4908      	ldr	r1, [pc, #32]	; (80071c8 <__NVIC_SetPriority+0x50>)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	3b04      	subs	r3, #4
 80071b0:	0112      	lsls	r2, r2, #4
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	440b      	add	r3, r1
 80071b6:	761a      	strb	r2, [r3, #24]
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	e000e100 	.word	0xe000e100
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80071d2:	f7ff ff85 	bl	80070e0 <SEGGER_SYSVIEW_IsStarted>
 80071d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80071de:	f7ff f993 	bl	8006508 <SEGGER_SYSVIEW_Start>
  }
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <_cbOnUARTRx+0x3c>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d806      	bhi.n	800720c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <_cbOnUARTRx+0x3c>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4b08      	ldr	r3, [pc, #32]	; (8007228 <_cbOnUARTRx+0x3c>)
 8007208:	701a      	strb	r2, [r3, #0]
    goto Done;
 800720a:	e009      	b.n	8007220 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800720c:	f7ff ffde 	bl	80071cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <_cbOnUARTRx+0x3c>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	1dfb      	adds	r3, r7, #7
 8007218:	2201      	movs	r2, #1
 800721a:	4619      	mov	r1, r3
 800721c:	f7fe f81c 	bl	8005258 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007220:	bf00      	nop
}
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000014 	.word	0x20000014

0800722c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <_cbOnUARTTx+0x5c>)
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d80f      	bhi.n	800725c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <_cbOnUARTTx+0x5c>)
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	461a      	mov	r2, r3
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <_cbOnUARTTx+0x60>)
 8007244:	5c9a      	ldrb	r2, [r3, r2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <_cbOnUARTTx+0x5c>)
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	3301      	adds	r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <_cbOnUARTTx+0x5c>)
 8007254:	705a      	strb	r2, [r3, #1]
    r = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
    goto Done;
 800725a:	e00f      	b.n	800727c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <_cbOnUARTTx+0x5c>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4618      	mov	r0, r3
 8007266:	f7fd fe9b 	bl	8004fa0 <SEGGER_RTT_ReadUpBufferNoLock>
 800726a:	4603      	mov	r3, r0
 800726c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da02      	bge.n	800727a <_cbOnUARTTx+0x4e>
    r = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e000      	b.n	800727c <_cbOnUARTTx+0x50>
  }
Done:
 800727a:	bf00      	nop
  return r;
 800727c:	68fb      	ldr	r3, [r7, #12]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000014 	.word	0x20000014
 800728c:	080076a4 	.word	0x080076a4

08007290 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <SEGGER_UART_init+0x1c>)
 800729a:	4905      	ldr	r1, [pc, #20]	; (80072b0 <SEGGER_UART_init+0x20>)
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f863 	bl	8007368 <HIF_UART_Init>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	080071ed 	.word	0x080071ed
 80072b0:	0800722d 	.word	0x0800722d

080072b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80072ba:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <USART2_IRQHandler+0x80>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80072ca:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <USART2_IRQHandler+0x84>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 030b 	and.w	r3, r3, #11
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d108      	bne.n	80072ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80072dc:	4b17      	ldr	r3, [pc, #92]	; (800733c <USART2_IRQHandler+0x88>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80072e4:	4b15      	ldr	r3, [pc, #84]	; (800733c <USART2_IRQHandler+0x88>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	79fa      	ldrb	r2, [r7, #7]
 80072ea:	4610      	mov	r0, r2
 80072ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01a      	beq.n	800732e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80072f8:	4b11      	ldr	r3, [pc, #68]	; (8007340 <USART2_IRQHandler+0x8c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <USART2_IRQHandler+0x8c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	1dfa      	adds	r2, r7, #7
 8007306:	4610      	mov	r0, r2
 8007308:	4798      	blx	r3
 800730a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <USART2_IRQHandler+0x90>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a0b      	ldr	r2, [pc, #44]	; (8007344 <USART2_IRQHandler+0x90>)
 8007318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e006      	b.n	800732e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007320:	4b04      	ldr	r3, [pc, #16]	; (8007334 <USART2_IRQHandler+0x80>)
 8007322:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007324:	79fa      	ldrb	r2, [r7, #7]
 8007326:	4b04      	ldr	r3, [pc, #16]	; (8007338 <USART2_IRQHandler+0x84>)
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e000      	b.n	800732e <USART2_IRQHandler+0x7a>
      return;
 800732c:	bf00      	nop
    }
  }
}
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40004400 	.word	0x40004400
 8007338:	40004404 	.word	0x40004404
 800733c:	2001a8a4 	.word	0x2001a8a4
 8007340:	2001a8a8 	.word	0x2001a8a8
 8007344:	4000440c 	.word	0x4000440c

08007348 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a04      	ldr	r2, [pc, #16]	; (8007364 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	4000440c 	.word	0x4000440c

08007368 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007374:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <HIF_UART_Init+0xc8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2d      	ldr	r2, [pc, #180]	; (8007430 <HIF_UART_Init+0xc8>)
 800737a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8007380:	4b2c      	ldr	r3, [pc, #176]	; (8007434 <HIF_UART_Init+0xcc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <HIF_UART_Init+0xcc>)
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <HIF_UART_Init+0xd0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007398:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80073a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80073a2:	4a25      	ldr	r2, [pc, #148]	; (8007438 <HIF_UART_Init+0xd0>)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80073a8:	4b24      	ldr	r3, [pc, #144]	; (800743c <HIF_UART_Init+0xd4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80073bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80073be:	4a1f      	ldr	r2, [pc, #124]	; (800743c <HIF_UART_Init+0xd4>)
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HIF_UART_Init+0xd8>)
 80073c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80073ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80073cc:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <HIF_UART_Init+0xdc>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80073d2:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <HIF_UART_Init+0xe0>)
 80073d4:	2280      	movs	r2, #128	; 0x80
 80073d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80073de:	4a1b      	ldr	r2, [pc, #108]	; (800744c <HIF_UART_Init+0xe4>)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e6:	3301      	adds	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f6:	d302      	bcc.n	80073fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80073f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80073fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4a11      	ldr	r2, [pc, #68]	; (8007450 <HIF_UART_Init+0xe8>)
 800740a:	b29b      	uxth	r3, r3
 800740c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <HIF_UART_Init+0xec>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <HIF_UART_Init+0xf0>)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800741a:	2106      	movs	r1, #6
 800741c:	2026      	movs	r0, #38	; 0x26
 800741e:	f7ff feab 	bl	8007178 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007422:	2026      	movs	r0, #38	; 0x26
 8007424:	f7ff fe8a 	bl	800713c <__NVIC_EnableIRQ>
}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40023840 	.word	0x40023840
 8007434:	40023830 	.word	0x40023830
 8007438:	40020020 	.word	0x40020020
 800743c:	40020000 	.word	0x40020000
 8007440:	4000440c 	.word	0x4000440c
 8007444:	40004410 	.word	0x40004410
 8007448:	40004414 	.word	0x40004414
 800744c:	0501bd00 	.word	0x0501bd00
 8007450:	40004408 	.word	0x40004408
 8007454:	2001a8a4 	.word	0x2001a8a4
 8007458:	2001a8a8 	.word	0x2001a8a8

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4d0d      	ldr	r5, [pc, #52]	; (8007494 <__libc_init_array+0x38>)
 8007460:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007462:	1b64      	subs	r4, r4, r5
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	2600      	movs	r6, #0
 8007468:	42a6      	cmp	r6, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	4d0b      	ldr	r5, [pc, #44]	; (800749c <__libc_init_array+0x40>)
 800746e:	4c0c      	ldr	r4, [pc, #48]	; (80074a0 <__libc_init_array+0x44>)
 8007470:	f000 f83e 	bl	80074f0 <_init>
 8007474:	1b64      	subs	r4, r4, r5
 8007476:	10a4      	asrs	r4, r4, #2
 8007478:	2600      	movs	r6, #0
 800747a:	42a6      	cmp	r6, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	f855 3b04 	ldr.w	r3, [r5], #4
 8007484:	4798      	blx	r3
 8007486:	3601      	adds	r6, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	f855 3b04 	ldr.w	r3, [r5], #4
 800748e:	4798      	blx	r3
 8007490:	3601      	adds	r6, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080076b0 	.word	0x080076b0
 8007498:	080076b0 	.word	0x080076b0
 800749c:	080076b0 	.word	0x080076b0
 80074a0:	080076b4 	.word	0x080076b4

080074a4 <memcmp>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	3901      	subs	r1, #1
 80074a8:	4402      	add	r2, r0
 80074aa:	4290      	cmp	r0, r2
 80074ac:	d101      	bne.n	80074b2 <memcmp+0xe>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e005      	b.n	80074be <memcmp+0x1a>
 80074b2:	7803      	ldrb	r3, [r0, #0]
 80074b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d001      	beq.n	80074c0 <memcmp+0x1c>
 80074bc:	1b18      	subs	r0, r3, r4
 80074be:	bd10      	pop	{r4, pc}
 80074c0:	3001      	adds	r0, #1
 80074c2:	e7f2      	b.n	80074aa <memcmp+0x6>

080074c4 <memcpy>:
 80074c4:	440a      	add	r2, r1
 80074c6:	4291      	cmp	r1, r2
 80074c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074cc:	d100      	bne.n	80074d0 <memcpy+0xc>
 80074ce:	4770      	bx	lr
 80074d0:	b510      	push	{r4, lr}
 80074d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074da:	4291      	cmp	r1, r2
 80074dc:	d1f9      	bne.n	80074d2 <memcpy+0xe>
 80074de:	bd10      	pop	{r4, pc}

080074e0 <memset>:
 80074e0:	4402      	add	r2, r0
 80074e2:	4603      	mov	r3, r0
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d100      	bne.n	80074ea <memset+0xa>
 80074e8:	4770      	bx	lr
 80074ea:	f803 1b01 	strb.w	r1, [r3], #1
 80074ee:	e7f9      	b.n	80074e4 <memset+0x4>

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
