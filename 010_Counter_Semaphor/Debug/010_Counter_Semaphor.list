
010_Counter_Semaphor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f4  080057f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057fc  080057fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00019260  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019274  20019274  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137f7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2a  00000000  00000000  0003383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00036468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  00037598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002311e  00000000  00000000  000385c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014030  00000000  00000000  0005b6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d70c6  00000000  00000000  0006f70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001467d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f0  00000000  00000000  00146824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005750 	.word	0x08005750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005750 	.word	0x08005750

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fbf7 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f831 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8c3 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f897 	bl	8000618 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  handle_semaphore=xSemaphoreCreateCounting(5,0);
 80004ea:	2100      	movs	r1, #0
 80004ec:	2005      	movs	r0, #5
 80004ee:	f002 fbc3 	bl	8002c78 <xQueueCreateCountingSemaphore>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <main+0x5c>)
 80004f6:	6013      	str	r3, [r2, #0]

  status=xTaskCreate(task1, "task1", 500, NULL, 2, NULL);
 80004f8:	2300      	movs	r3, #0
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2302      	movs	r3, #2
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000506:	490b      	ldr	r1, [pc, #44]	; (8000534 <main+0x60>)
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x64>)
 800050a:	f003 f99f 	bl	800384c <xTaskCreate>
 800050e:	6078      	str	r0, [r7, #4]

  status=xTaskCreate(task_semaph, "taskSemaphoreTake", 500, NULL, 2, NULL);
 8000510:	2300      	movs	r3, #0
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800051e:	4907      	ldr	r1, [pc, #28]	; (800053c <main+0x68>)
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <main+0x6c>)
 8000522:	f003 f993 	bl	800384c <xTaskCreate>
 8000526:	6078      	str	r0, [r7, #4]

  vTaskStartScheduler();
 8000528:	f003 fb0a 	bl	8003b40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x58>
 800052e:	bf00      	nop
 8000530:	20000030 	.word	0x20000030
 8000534:	08005768 	.word	0x08005768
 8000538:	08000939 	.word	0x08000939
 800053c:	08005770 	.word	0x08005770
 8000540:	08000961 	.word	0x08000961

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 f8f4 	bl	8005740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005b8:	2332      	movs	r3, #50	; 0x32
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fe7d 	bl	80012c8 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f9f0 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f8de 	bl	80017b8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f9d9 	bl	80009b8 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART2_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000650:	f001 fdb2 	bl	80021b8 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f9ad 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000034 	.word	0x20000034
 8000668:	40004400 	.word	0x40004400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
 8000686:	4ba6      	ldr	r3, [pc, #664]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4aa5      	ldr	r2, [pc, #660]	; (8000920 <MX_GPIO_Init+0x2b4>)
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4ba3      	ldr	r3, [pc, #652]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	4b9f      	ldr	r3, [pc, #636]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a9e      	ldr	r2, [pc, #632]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b9c      	ldr	r3, [pc, #624]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b98      	ldr	r3, [pc, #608]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a97      	ldr	r2, [pc, #604]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b95      	ldr	r3, [pc, #596]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b91      	ldr	r3, [pc, #580]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a90      	ldr	r2, [pc, #576]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b8a      	ldr	r3, [pc, #552]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a89      	ldr	r2, [pc, #548]	; (8000920 <MX_GPIO_Init+0x2b4>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b87      	ldr	r3, [pc, #540]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b83      	ldr	r3, [pc, #524]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a82      	ldr	r2, [pc, #520]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <MX_GPIO_Init+0x2b4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2108      	movs	r1, #8
 800072e:	487d      	ldr	r0, [pc, #500]	; (8000924 <MX_GPIO_Init+0x2b8>)
 8000730:	f000 fd8c 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2101      	movs	r1, #1
 8000738:	487b      	ldr	r0, [pc, #492]	; (8000928 <MX_GPIO_Init+0x2bc>)
 800073a:	f000 fd87 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800073e:	2200      	movs	r2, #0
 8000740:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000744:	4879      	ldr	r0, [pc, #484]	; (800092c <MX_GPIO_Init+0x2c0>)
 8000746:	f000 fd81 	bl	800124c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4870      	ldr	r0, [pc, #448]	; (8000924 <MX_GPIO_Init+0x2b8>)
 8000762:	f000 fbd7 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000766:	2301      	movs	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	486a      	ldr	r0, [pc, #424]	; (8000928 <MX_GPIO_Init+0x2bc>)
 800077e:	f000 fbc9 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000782:	2308      	movs	r3, #8
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000792:	2305      	movs	r3, #5
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4862      	ldr	r0, [pc, #392]	; (8000928 <MX_GPIO_Init+0x2bc>)
 800079e:	f000 fbb9 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	485e      	ldr	r0, [pc, #376]	; (8000930 <MX_GPIO_Init+0x2c4>)
 80007b8:	f000 fbac 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007cc:	2306      	movs	r3, #6
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4856      	ldr	r0, [pc, #344]	; (8000930 <MX_GPIO_Init+0x2c4>)
 80007d8:	f000 fb9c 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007dc:	23e0      	movs	r3, #224	; 0xe0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ec:	2305      	movs	r3, #5
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	484e      	ldr	r0, [pc, #312]	; (8000930 <MX_GPIO_Init+0x2c4>)
 80007f8:	f000 fb8c 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007fc:	2304      	movs	r3, #4
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4849      	ldr	r0, [pc, #292]	; (8000934 <MX_GPIO_Init+0x2c8>)
 8000810:	f000 fb80 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000826:	2305      	movs	r3, #5
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4840      	ldr	r0, [pc, #256]	; (8000934 <MX_GPIO_Init+0x2c8>)
 8000832:	f000 fb6f 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000836:	f24f 0310 	movw	r3, #61456	; 0xf010
 800083a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4837      	ldr	r0, [pc, #220]	; (800092c <MX_GPIO_Init+0x2c0>)
 8000850:	f000 fb60 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000854:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000866:	2306      	movs	r3, #6
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	482d      	ldr	r0, [pc, #180]	; (8000928 <MX_GPIO_Init+0x2bc>)
 8000872:	f000 fb4f 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_GPIO_Init+0x2c4>)
 800088c:	f000 fb42 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000890:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008a2:	230a      	movs	r3, #10
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4820      	ldr	r0, [pc, #128]	; (8000930 <MX_GPIO_Init+0x2c4>)
 80008ae:	f000 fb31 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <MX_GPIO_Init+0x2c0>)
 80008c6:	f000 fb25 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d0:	2312      	movs	r3, #18
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008dc:	2304      	movs	r3, #4
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_GPIO_Init+0x2c8>)
 80008e8:	f000 fb14 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_GPIO_Init+0x2b8>)
 8000902:	f000 fb07 	bl	8000f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2106      	movs	r1, #6
 800090a:	2006      	movs	r0, #6
 800090c:	f000 fad8 	bl	8000ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000910:	2006      	movs	r0, #6
 8000912:	f000 faf1 	bl	8000ef8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40021000 	.word	0x40021000
 8000928:	40020800 	.word	0x40020800
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020000 	.word	0x40020000
 8000934:	40020400 	.word	0x40020400

08000938 <task1>:
    }

    // HAL_UART_Transmit blocks until transmission is complete, so no need for additional checks
}
void task1(void*param)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

   while(1)
   {
	   Uart_Print("Task-1 running\r\n");
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	2210      	movs	r2, #16
 8000946:	4904      	ldr	r1, [pc, #16]	; (8000958 <task1+0x20>)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <task1+0x24>)
 800094a:	f001 fc82 	bl	8002252 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f003 f8c1 	bl	8003ad8 <vTaskDelay>
	   Uart_Print("Task-1 running\r\n");
 8000956:	e7f3      	b.n	8000940 <task1+0x8>
 8000958:	08005784 	.word	0x08005784
 800095c:	20000034 	.word	0x20000034

08000960 <task_semaph>:
   }
}


void task_semaph(void*param)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

    /* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
    {
		 xSemaphoreTake(handle_semaphore,portMAX_DELAY);                                // If semaphore is not available, the task waits for the maximum time in the blocked state.
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <task_semaph+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fcd9 	bl	8003328 <xQueueSemaphoreTake>
		 Uart_Print("Task semaph running\r\n");
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	2215      	movs	r2, #21
 800097c:	4903      	ldr	r1, [pc, #12]	; (800098c <task_semaph+0x2c>)
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <task_semaph+0x30>)
 8000980:	f001 fc67 	bl	8002252 <HAL_UART_Transmit>
		 xSemaphoreTake(handle_semaphore,portMAX_DELAY);                                // If semaphore is not available, the task waits for the maximum time in the blocked state.
 8000984:	e7f0      	b.n	8000968 <task_semaph+0x8>
 8000986:	bf00      	nop
 8000988:	20000030 	.word	0x20000030
 800098c:	08005798 	.word	0x08005798
 8000990:	20000034 	.word	0x20000034

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 f9b3 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40001000 	.word	0x40001000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12b      	bne.n	8000a8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a8a:	f000 fa43 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_InitTick+0xe4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <HAL_InitTick+0xe4>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_InitTick+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 0210 	add.w	r2, r7, #16
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f88c 	bl	8001bf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aea:	f001 f85d 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000aee:	6378      	str	r0, [r7, #52]	; 0x34
 8000af0:	e004      	b.n	8000afc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000af2:	f001 f859 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000af6:	4603      	mov	r3, r0
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afe:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <HAL_InitTick+0xe8>)
 8000b00:	fba2 2303 	umull	r2, r3, r2, r3
 8000b04:	0c9b      	lsrs	r3, r3, #18
 8000b06:	3b01      	subs	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_InitTick+0xec>)
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_InitTick+0xf0>)
 8000b0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_InitTick+0xec>)
 8000b12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_InitTick+0xec>)
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_InitTick+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_InitTick+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_InitTick+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <HAL_InitTick+0xec>)
 8000b32:	f001 f893 	bl	8001c5c <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d11b      	bne.n	8000b7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <HAL_InitTick+0xec>)
 8000b46:	f001 f8e3 	bl	8001d10 <HAL_TIM_Base_Start_IT>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d111      	bne.n	8000b7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f000 f9cd 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d808      	bhi.n	8000b76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2036      	movs	r0, #54	; 0x36
 8000b6a:	f000 f9a9 	bl	8000ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_InitTick+0xf4>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e002      	b.n	8000b7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	20000078 	.word	0x20000078
 8000b94:	40001000 	.word	0x40001000
 8000b98:	20000004 	.word	0x20000004

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
	 Uart_Print("ISR is running\r\n");
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	4915      	ldr	r1, [pc, #84]	; (8000c30 <EXTI0_IRQHandler+0x68>)
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <EXTI0_IRQHandler+0x6c>)
 8000bdc:	f001 fb39 	bl	8002252 <HAL_UART_Transmit>
	   xSemaphoreGiveFromISR(handle_semaphore,&xHigherPriorityTaskWoken);    // Give semaphore from ISR
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <EXTI0_IRQHandler+0x70>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1d3a      	adds	r2, r7, #4
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fa21 	bl	8003030 <xQueueGiveFromISR>
	   xSemaphoreGiveFromISR(handle_semaphore,&xHigherPriorityTaskWoken);
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <EXTI0_IRQHandler+0x70>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fa1a 	bl	8003030 <xQueueGiveFromISR>
	   xSemaphoreGiveFromISR(handle_semaphore,&xHigherPriorityTaskWoken);
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <EXTI0_IRQHandler+0x70>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1d3a      	adds	r2, r7, #4
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fa13 	bl	8003030 <xQueueGiveFromISR>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fb38 	bl	8001280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);                                // if xHigherPriorityTaskWoken is equal pdTRUE then force the kernel to context switching
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <EXTI0_IRQHandler+0x5e>
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <EXTI0_IRQHandler+0x74>)
 8000c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	080057b0 	.word	0x080057b0
 8000c34:	20000034 	.word	0x20000034
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	e000ed04 	.word	0xe000ed04

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 f8d3 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000078 	.word	0x20000078

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f004 fd19 	bl	80056dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fc13 	bl	80004d4 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cbc:	08005804 	.word	0x08005804
  ldr r2, =_sbss
 8000cc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cc4:	20019274 	.word	0x20019274

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f8d8 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fed2 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe60 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200000c0 	.word	0x200000c0

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000c0 	.word	0x200000c0

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e16b      	b.n	8001208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 815a 	bne.w	8001202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80b4 	beq.w	8001202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b60      	ldr	r3, [pc, #384]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a5f      	ldr	r2, [pc, #380]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b5d      	ldr	r3, [pc, #372]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <HAL_GPIO_Init+0x310>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x314>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x318>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x31c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <HAL_GPIO_Init+0x324>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x216>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4d      	ldr	r2, [pc, #308]	; (800123c <HAL_GPIO_Init+0x328>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x20a>
 800111a:	2307      	movs	r3, #7
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x228>
 800111e:	2308      	movs	r3, #8
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x228>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x310>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_GPIO_Init+0x334>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_GPIO_Init+0x334>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_GPIO_Init+0x334>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae90 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f806 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcda 	bl	8000d38 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fcd6 	bl	8000d38 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcc6 	bl	8000d38 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fcc2 	bl	8000d38 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fc7b 	bl	8000d38 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fc77 	bl	8000d38 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc5a 	bl	8000d38 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fc56 	bl	8000d38 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fc3a 	bl	8000d38 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc36 	bl	8000d38 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc23 	bl	8000d38 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc1f 	bl	8000d38 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbdf 	bl	8000d38 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fbdb 	bl	8000d38 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fba0 	bl	8000d38 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb9c 	bl	8000d38 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb8a 	bl	8000d38 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb86 	bl	8000d38 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb5a 	bl	8000d38 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb56 	bl	8000d38 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb2f 	bl	8000d38 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb2b 	bl	8000d38 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb18 	bl	8000d38 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb14 	bl	8000d38 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff fa46 	bl	8000d38 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff fa42 	bl	8000d38 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f8a0 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	080057dc 	.word	0x080057dc
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fb9c 	bl	80001d0 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb42 	bl	80001d0 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	080057ec 	.word	0x080057ec

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	080057ec 	.word	0x080057ec

08001bf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	220f      	movs	r2, #15
 8001c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCC_GetClockConfig+0x60>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0207 	and.w	r2, r3, #7
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f839 	bl	8001cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 f9d8 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04e      	b.n	8001dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d022      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d01d      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d018      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00e      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_TIM_Base_Start_IT+0xdc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d111      	bne.n	8001db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d010      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	e007      	b.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800
 8001de0:	40000c00 	.word	0x40000c00
 8001de4:	40010400 	.word	0x40010400
 8001de8:	40014000 	.word	0x40014000
 8001dec:	40001800 	.word	0x40001800

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8ee 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8e0 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8f1 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8c4 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b6 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8c7 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0208 	mvn.w	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f89a 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f88c 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f89d 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f870 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f862 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f873 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fd10 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f902 	bl	80021a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f838 	bl	800203c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0220 	mvn.w	r2, #32
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8cc 	bl	8002190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <TIM_Base_SetConfig+0x114>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206e:	d00f      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <TIM_Base_SetConfig+0x118>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00b      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <TIM_Base_SetConfig+0x11c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <TIM_Base_SetConfig+0x120>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3a      	ldr	r2, [pc, #232]	; (8002174 <TIM_Base_SetConfig+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <TIM_Base_SetConfig+0x114>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d027      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <TIM_Base_SetConfig+0x118>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d023      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <TIM_Base_SetConfig+0x11c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <TIM_Base_SetConfig+0x120>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <TIM_Base_SetConfig+0x124>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d017      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <TIM_Base_SetConfig+0x128>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a27      	ldr	r2, [pc, #156]	; (800217c <TIM_Base_SetConfig+0x12c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <TIM_Base_SetConfig+0x130>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <TIM_Base_SetConfig+0x134>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <TIM_Base_SetConfig+0x138>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <TIM_Base_SetConfig+0x13c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d108      	bne.n	8002114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <TIM_Base_SetConfig+0x114>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0xf8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <TIM_Base_SetConfig+0x124>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	615a      	str	r2, [r3, #20]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40010400 	.word	0x40010400
 8002178:	40014000 	.word	0x40014000
 800217c:	40014400 	.word	0x40014400
 8002180:	40014800 	.word	0x40014800
 8002184:	40001800 	.word	0x40001800
 8002188:	40001c00 	.word	0x40001c00
 800218c:	40002000 	.word	0x40002000

08002190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fc18 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f929 	bl	8002454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b08a      	sub	sp, #40	; 0x28
 8002256:	af02      	add	r7, sp, #8
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d17c      	bne.n	800236c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_Transmit+0x2c>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e075      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_UART_Transmit+0x3e>
 800228c:	2302      	movs	r3, #2
 800228e:	e06e      	b.n	800236e <HAL_UART_Transmit+0x11c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	; 0x21
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fd47 	bl	8000d38 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e4:	e02a      	b.n	800233c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f840 	bl	8002376 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3302      	adds	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e007      	b.n	800232e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1cf      	bne.n	80022e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f810 	bl	8002376 <UART_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b090      	sub	sp, #64	; 0x40
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002386:	e050      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d04c      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002396:	f7fe fccf 	bl	8000d38 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d241      	bcs.n	800242a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c6:	637a      	str	r2, [r7, #52]	; 0x34
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	613b      	str	r3, [r7, #16]
   return(result);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3314      	adds	r3, #20
 80023f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fa:	623a      	str	r2, [r7, #32]
 80023fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	69f9      	ldr	r1, [r7, #28]
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	e841 2300 	strex	r3, r2, [r1]
 8002406:	61bb      	str	r3, [r7, #24]
   return(result);
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e5      	bne.n	80023da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d09f      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3740      	adds	r7, #64	; 0x40
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002458:	b0c0      	sub	sp, #256	; 0x100
 800245a:	af00      	add	r7, sp, #0
 800245c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	68d9      	ldr	r1, [r3, #12]
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	ea40 0301 	orr.w	r3, r0, r1
 800247c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800247e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	431a      	orrs	r2, r3
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024ac:	f021 010c 	bic.w	r1, r1, #12
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024ba:	430b      	orrs	r3, r1
 80024bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ce:	6999      	ldr	r1, [r3, #24]
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	ea40 0301 	orr.w	r3, r0, r1
 80024da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <UART_SetConfig+0x2cc>)
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d005      	beq.n	80024f4 <UART_SetConfig+0xa0>
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <UART_SetConfig+0x2d0>)
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d104      	bne.n	80024fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024f4:	f7ff fb6c 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 80024f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024fc:	e003      	b.n	8002506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024fe:	f7ff fb53 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002510:	f040 810c 	bne.w	800272c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002518:	2200      	movs	r2, #0
 800251a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800251e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	1891      	adds	r1, r2, r2
 800252c:	65b9      	str	r1, [r7, #88]	; 0x58
 800252e:	415b      	adcs	r3, r3
 8002530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002536:	4621      	mov	r1, r4
 8002538:	eb12 0801 	adds.w	r8, r2, r1
 800253c:	4629      	mov	r1, r5
 800253e:	eb43 0901 	adc.w	r9, r3, r1
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800254e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002556:	4690      	mov	r8, r2
 8002558:	4699      	mov	r9, r3
 800255a:	4623      	mov	r3, r4
 800255c:	eb18 0303 	adds.w	r3, r8, r3
 8002560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002564:	462b      	mov	r3, r5
 8002566:	eb49 0303 	adc.w	r3, r9, r3
 800256a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800257a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800257e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002582:	460b      	mov	r3, r1
 8002584:	18db      	adds	r3, r3, r3
 8002586:	653b      	str	r3, [r7, #80]	; 0x50
 8002588:	4613      	mov	r3, r2
 800258a:	eb42 0303 	adc.w	r3, r2, r3
 800258e:	657b      	str	r3, [r7, #84]	; 0x54
 8002590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002598:	f7fd fe1a 	bl	80001d0 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <UART_SetConfig+0x2d4>)
 80025a2:	fba3 2302 	umull	r2, r3, r3, r2
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	011c      	lsls	r4, r3, #4
 80025aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025bc:	4642      	mov	r2, r8
 80025be:	464b      	mov	r3, r9
 80025c0:	1891      	adds	r1, r2, r2
 80025c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025c4:	415b      	adcs	r3, r3
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025cc:	4641      	mov	r1, r8
 80025ce:	eb12 0a01 	adds.w	sl, r2, r1
 80025d2:	4649      	mov	r1, r9
 80025d4:	eb43 0b01 	adc.w	fp, r3, r1
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ec:	4692      	mov	sl, r2
 80025ee:	469b      	mov	fp, r3
 80025f0:	4643      	mov	r3, r8
 80025f2:	eb1a 0303 	adds.w	r3, sl, r3
 80025f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025fa:	464b      	mov	r3, r9
 80025fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002618:	460b      	mov	r3, r1
 800261a:	18db      	adds	r3, r3, r3
 800261c:	643b      	str	r3, [r7, #64]	; 0x40
 800261e:	4613      	mov	r3, r2
 8002620:	eb42 0303 	adc.w	r3, r2, r3
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
 8002626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800262a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800262e:	f7fd fdcf 	bl	80001d0 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4611      	mov	r1, r2
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <UART_SetConfig+0x2d4>)
 800263a:	fba3 2301 	umull	r2, r3, r3, r1
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2264      	movs	r2, #100	; 0x64
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	1acb      	subs	r3, r1, r3
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <UART_SetConfig+0x2d4>)
 8002650:	fba3 2302 	umull	r2, r3, r3, r2
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800265c:	441c      	add	r4, r3
 800265e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800266c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002670:	4642      	mov	r2, r8
 8002672:	464b      	mov	r3, r9
 8002674:	1891      	adds	r1, r2, r2
 8002676:	63b9      	str	r1, [r7, #56]	; 0x38
 8002678:	415b      	adcs	r3, r3
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002680:	4641      	mov	r1, r8
 8002682:	1851      	adds	r1, r2, r1
 8002684:	6339      	str	r1, [r7, #48]	; 0x30
 8002686:	4649      	mov	r1, r9
 8002688:	414b      	adcs	r3, r1
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002698:	4659      	mov	r1, fp
 800269a:	00cb      	lsls	r3, r1, #3
 800269c:	4651      	mov	r1, sl
 800269e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a2:	4651      	mov	r1, sl
 80026a4:	00ca      	lsls	r2, r1, #3
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	4642      	mov	r2, r8
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026b4:	464b      	mov	r3, r9
 80026b6:	460a      	mov	r2, r1
 80026b8:	eb42 0303 	adc.w	r3, r2, r3
 80026bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026d4:	460b      	mov	r3, r1
 80026d6:	18db      	adds	r3, r3, r3
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026da:	4613      	mov	r3, r2
 80026dc:	eb42 0303 	adc.w	r3, r2, r3
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026ea:	f7fd fd71 	bl	80001d0 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <UART_SetConfig+0x2d4>)
 80026f4:	fba3 1302 	umull	r1, r3, r3, r2
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2164      	movs	r1, #100	; 0x64
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <UART_SetConfig+0x2d4>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 0207 	and.w	r2, r3, #7
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4422      	add	r2, r4
 800271a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800271c:	e105      	b.n	800292a <UART_SetConfig+0x4d6>
 800271e:	bf00      	nop
 8002720:	40011000 	.word	0x40011000
 8002724:	40011400 	.word	0x40011400
 8002728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800272c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002730:	2200      	movs	r2, #0
 8002732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800273a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800273e:	4642      	mov	r2, r8
 8002740:	464b      	mov	r3, r9
 8002742:	1891      	adds	r1, r2, r2
 8002744:	6239      	str	r1, [r7, #32]
 8002746:	415b      	adcs	r3, r3
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800274e:	4641      	mov	r1, r8
 8002750:	1854      	adds	r4, r2, r1
 8002752:	4649      	mov	r1, r9
 8002754:	eb43 0501 	adc.w	r5, r3, r1
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	00eb      	lsls	r3, r5, #3
 8002762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002766:	00e2      	lsls	r2, r4, #3
 8002768:	4614      	mov	r4, r2
 800276a:	461d      	mov	r5, r3
 800276c:	4643      	mov	r3, r8
 800276e:	18e3      	adds	r3, r4, r3
 8002770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002774:	464b      	mov	r3, r9
 8002776:	eb45 0303 	adc.w	r3, r5, r3
 800277a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800278a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800279a:	4629      	mov	r1, r5
 800279c:	008b      	lsls	r3, r1, #2
 800279e:	4621      	mov	r1, r4
 80027a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a4:	4621      	mov	r1, r4
 80027a6:	008a      	lsls	r2, r1, #2
 80027a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027ac:	f7fd fd10 	bl	80001d0 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4b60      	ldr	r3, [pc, #384]	; (8002938 <UART_SetConfig+0x4e4>)
 80027b6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	011c      	lsls	r4, r3, #4
 80027be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027d0:	4642      	mov	r2, r8
 80027d2:	464b      	mov	r3, r9
 80027d4:	1891      	adds	r1, r2, r2
 80027d6:	61b9      	str	r1, [r7, #24]
 80027d8:	415b      	adcs	r3, r3
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e0:	4641      	mov	r1, r8
 80027e2:	1851      	adds	r1, r2, r1
 80027e4:	6139      	str	r1, [r7, #16]
 80027e6:	4649      	mov	r1, r9
 80027e8:	414b      	adcs	r3, r1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027f8:	4659      	mov	r1, fp
 80027fa:	00cb      	lsls	r3, r1, #3
 80027fc:	4651      	mov	r1, sl
 80027fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002802:	4651      	mov	r1, sl
 8002804:	00ca      	lsls	r2, r1, #3
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	4603      	mov	r3, r0
 800280c:	4642      	mov	r2, r8
 800280e:	189b      	adds	r3, r3, r2
 8002810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002814:	464b      	mov	r3, r9
 8002816:	460a      	mov	r2, r1
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	67bb      	str	r3, [r7, #120]	; 0x78
 800282a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002838:	4649      	mov	r1, r9
 800283a:	008b      	lsls	r3, r1, #2
 800283c:	4641      	mov	r1, r8
 800283e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002842:	4641      	mov	r1, r8
 8002844:	008a      	lsls	r2, r1, #2
 8002846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800284a:	f7fd fcc1 	bl	80001d0 <__aeabi_uldivmod>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <UART_SetConfig+0x4e4>)
 8002854:	fba3 1302 	umull	r1, r3, r3, r2
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	2164      	movs	r1, #100	; 0x64
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	3332      	adds	r3, #50	; 0x32
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <UART_SetConfig+0x4e4>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002872:	441c      	add	r4, r3
 8002874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002878:	2200      	movs	r2, #0
 800287a:	673b      	str	r3, [r7, #112]	; 0x70
 800287c:	677a      	str	r2, [r7, #116]	; 0x74
 800287e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002882:	4642      	mov	r2, r8
 8002884:	464b      	mov	r3, r9
 8002886:	1891      	adds	r1, r2, r2
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	415b      	adcs	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002892:	4641      	mov	r1, r8
 8002894:	1851      	adds	r1, r2, r1
 8002896:	6039      	str	r1, [r7, #0]
 8002898:	4649      	mov	r1, r9
 800289a:	414b      	adcs	r3, r1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028aa:	4659      	mov	r1, fp
 80028ac:	00cb      	lsls	r3, r1, #3
 80028ae:	4651      	mov	r1, sl
 80028b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b4:	4651      	mov	r1, sl
 80028b6:	00ca      	lsls	r2, r1, #3
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	4603      	mov	r3, r0
 80028be:	4642      	mov	r2, r8
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c4:	464b      	mov	r3, r9
 80028c6:	460a      	mov	r2, r1
 80028c8:	eb42 0303 	adc.w	r3, r2, r3
 80028cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	663b      	str	r3, [r7, #96]	; 0x60
 80028d8:	667a      	str	r2, [r7, #100]	; 0x64
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028e6:	4649      	mov	r1, r9
 80028e8:	008b      	lsls	r3, r1, #2
 80028ea:	4641      	mov	r1, r8
 80028ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f0:	4641      	mov	r1, r8
 80028f2:	008a      	lsls	r2, r1, #2
 80028f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028f8:	f7fd fc6a 	bl	80001d0 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <UART_SetConfig+0x4e4>)
 8002902:	fba3 1302 	umull	r1, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2164      	movs	r1, #100	; 0x64
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	4a08      	ldr	r2, [pc, #32]	; (8002938 <UART_SetConfig+0x4e4>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4422      	add	r2, r4
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002936:	bf00      	nop
 8002938:	51eb851f 	.word	0x51eb851f

0800293c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f103 0208 	add.w	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f103 0208 	add.w	r2, r3, #8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 0208 	add.w	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d103      	bne.n	80029fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e00c      	b.n	8002a18 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3308      	adds	r3, #8
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e002      	b.n	8002a0c <vListInsert+0x2e>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d2f6      	bcs.n	8002a06 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6852      	ldr	r2, [r2, #4]
 8002a70:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d103      	bne.n	8002a84 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002ace:	f002 fa9b 	bl	8005008 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	3b01      	subs	r3, #1
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d114      	bne.n	8002b4e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01a      	beq.n	8002b62 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3310      	adds	r3, #16
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fa75 	bl	8004020 <xTaskRemoveFromEventList>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <xQueueGenericReset+0xcc>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	e009      	b.n	8002b62 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3310      	adds	r3, #16
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fef2 	bl	800293c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff feed 	bl	800293c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002b62:	f002 fa81 	bl	8005068 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	; 0x30
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61bb      	str	r3, [r7, #24]
    }
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <xQueueGenericCreate+0x48>
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d101      	bne.n	8002bc0 <xQueueGenericCreate+0x4c>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <xQueueGenericCreate+0x4e>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <xQueueGenericCreate+0x68>
        __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	617b      	str	r3, [r7, #20]
    }
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002be2:	d90a      	bls.n	8002bfa <xQueueGenericCreate+0x86>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	613b      	str	r3, [r7, #16]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	3350      	adds	r3, #80	; 0x50
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fb24 	bl	800524c <pvPortMalloc>
 8002c04:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3350      	adds	r3, #80	; 0x50
 8002c14:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c16:	79fa      	ldrb	r2, [r7, #7]
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f805 	bl	8002c32 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c28:	6a3b      	ldr	r3, [r7, #32]
    }
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e002      	b.n	8002c54 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c60:	2101      	movs	r1, #1
 8002c62:	69b8      	ldr	r0, [r7, #24]
 8002c64:	f7ff ff1e 	bl	8002aa4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	613b      	str	r3, [r7, #16]
    }
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90a      	bls.n	8002cbc <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff57 	bl	8002b74 <xQueueGenericCreate>
 8002cc6:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8002cd4:	697b      	ldr	r3, [r7, #20]
    }
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xQueueGenericSend+0x32>
        __asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <xQueueGenericSend+0x40>
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <xQueueGenericSend+0x44>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <xQueueGenericSend+0x46>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <xQueueGenericSend+0x60>
        __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d3c:	bf00      	nop
 8002d3e:	e7fe      	b.n	8002d3e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d103      	bne.n	8002d4e <xQueueGenericSend+0x6e>
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <xQueueGenericSend+0x72>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueGenericSend+0x74>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0x8e>
        __asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	623b      	str	r3, [r7, #32]
    }
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d6e:	f001 faf3 	bl	8004358 <xTaskGetSchedulerState>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <xQueueGenericSend+0x9e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSend+0xa2>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSend+0xa4>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueGenericSend+0xbe>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fb      	str	r3, [r7, #28]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d9e:	f002 f933 	bl	8005008 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <xQueueGenericSend+0xd4>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d129      	bne.n	8002e08 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dba:	f000 fbd9 	bl	8003570 <prvCopyDataToQueue>
 8002dbe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d010      	beq.n	8002dea <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f927 	bl	8004020 <xTaskRemoveFromEventList>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <xQueueGenericSend+0x1f8>)
 8002dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	e00a      	b.n	8002e00 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <xQueueGenericSend+0x1f8>)
 8002df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e00:	f002 f932 	bl	8005068 <vPortExitCritical>
                return pdPASS;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e063      	b.n	8002ed0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e0e:	f002 f92b 	bl	8005068 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e05c      	b.n	8002ed0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f95f 	bl	80040e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e2a:	f002 f91d 	bl	8005068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e2e:	f000 fed9 	bl	8003be4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e32:	f002 f8e9 	bl	8005008 <vPortEnterCritical>
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d103      	bne.n	8002e4c <xQueueGenericSend+0x16c>
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <xQueueGenericSend+0x182>
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e62:	f002 f901 	bl	8005068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e66:	1d3a      	adds	r2, r7, #4
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f94e 	bl	8004110 <xTaskCheckForTimeOut>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d124      	bne.n	8002ec4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e7c:	f000 fc70 	bl	8003760 <prvIsQueueFull>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	3310      	adds	r3, #16
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 f876 	bl	8003f80 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e96:	f000 fbfb 	bl	8003690 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002e9a:	f000 feb1 	bl	8003c00 <xTaskResumeAll>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f47f af7c 	bne.w	8002d9e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <xQueueGenericSend+0x1f8>)
 8002ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	e772      	b.n	8002d9e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eba:	f000 fbe9 	bl	8003690 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ebe:	f000 fe9f 	bl	8003c00 <xTaskResumeAll>
 8002ec2:	e76c      	b.n	8002d9e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 fbe3 	bl	8003690 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eca:	f000 fe99 	bl	8003c00 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002ece:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3738      	adds	r7, #56	; 0x38
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b090      	sub	sp, #64	; 0x40
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <xQueueGenericSendFromISR+0x3c>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <xQueueGenericSendFromISR+0x40>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <xQueueGenericSendFromISR+0x42>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSendFromISR+0x6a>
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSendFromISR+0x6e>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueGenericSendFromISR+0x70>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	623b      	str	r3, [r7, #32]
    }
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f66:	f002 f931 	bl	80051cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	61fa      	str	r2, [r7, #28]
 8002f80:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f82:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <xQueueGenericSendFromISR+0xbc>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d13e      	bne.n	8003016 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fae:	f000 fadf 	bl	8003570 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002fb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d112      	bne.n	8002fe2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d025      	beq.n	8003010 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f829 	bl	8004020 <xTaskRemoveFromEventList>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01d      	beq.n	8003010 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01a      	beq.n	8003010 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e016      	b.n	8003010 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002fe2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe8:	d10a      	bne.n	8003000 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	617b      	str	r3, [r7, #20]
    }
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003004:	3301      	adds	r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	b25a      	sxtb	r2, r3
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003010:	2301      	movs	r3, #1
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003014:	e001      	b.n	800301a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003016:	2300      	movs	r3, #0
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003024:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003028:	4618      	mov	r0, r3
 800302a:	3740      	adds	r7, #64	; 0x40
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGiveFromISR+0x2a>
        __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	623b      	str	r3, [r7, #32]
    }
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <xQueueGiveFromISR+0x48>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	61fb      	str	r3, [r7, #28]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <xQueueGiveFromISR+0x58>
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <xQueueGiveFromISR+0x5c>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <xQueueGiveFromISR+0x5e>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <xQueueGiveFromISR+0x78>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	61bb      	str	r3, [r7, #24]
    }
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030a8:	f002 f890 	bl	80051cc <vPortValidateInterruptPriority>
        __asm volatile
 80030ac:	f3ef 8211 	mrs	r2, BASEPRI
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	617a      	str	r2, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80030c4:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d23a      	bcs.n	800314e <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80030ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d112      	bne.n	800311a <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d025      	beq.n	8003148 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	3324      	adds	r3, #36	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f000 ff8d 	bl	8004020 <xTaskRemoveFromEventList>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01d      	beq.n	8003148 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01a      	beq.n	8003148 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e016      	b.n	8003148 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800311a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800311e:	2b7f      	cmp	r3, #127	; 0x7f
 8003120:	d10a      	bne.n	8003138 <xQueueGiveFromISR+0x108>
        __asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60fb      	str	r3, [r7, #12]
    }
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800313c:	3301      	adds	r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	b25a      	sxtb	r2, r3
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
 800314c:	e001      	b.n	8003152 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f383 8811 	msr	BASEPRI, r3
    }
 800315c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003160:	4618      	mov	r0, r3
 8003162:	3738      	adds	r7, #56	; 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	; 0x30
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <xQueueReceive+0x30>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	623b      	str	r3, [r7, #32]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <xQueueReceive+0x3e>
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <xQueueReceive+0x42>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueReceive+0x44>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueReceive+0x5e>
        __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61fb      	str	r3, [r7, #28]
    }
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031c6:	f001 f8c7 	bl	8004358 <xTaskGetSchedulerState>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <xQueueReceive+0x6e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <xQueueReceive+0x72>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueReceive+0x74>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueReceive+0x8e>
        __asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61bb      	str	r3, [r7, #24]
    }
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031f6:	f001 ff07 	bl	8005008 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01f      	beq.n	8003246 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320a:	f000 fa1b 	bl	8003644 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00f      	beq.n	800323e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	3310      	adds	r3, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fefc 	bl	8004020 <xTaskRemoveFromEventList>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <xQueueReceive+0x1bc>)
 8003230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800323e:	f001 ff13 	bl	8005068 <vPortExitCritical>
                return pdPASS;
 8003242:	2301      	movs	r3, #1
 8003244:	e069      	b.n	800331a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800324c:	f001 ff0c 	bl	8005068 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003250:	2300      	movs	r3, #0
 8003252:	e062      	b.n	800331a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	4618      	mov	r0, r3
 8003260:	f000 ff40 	bl	80040e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003268:	f001 fefe 	bl	8005068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800326c:	f000 fcba 	bl	8003be4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003270:	f001 feca 	bl	8005008 <vPortEnterCritical>
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d103      	bne.n	800328a <xQueueReceive+0x122>
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d103      	bne.n	80032a0 <xQueueReceive+0x138>
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a0:	f001 fee2 	bl	8005068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032a4:	1d3a      	adds	r2, r7, #4
 80032a6:	f107 0310 	add.w	r3, r7, #16
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 ff2f 	bl	8004110 <xTaskCheckForTimeOut>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d123      	bne.n	8003300 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ba:	f000 fa3b 	bl	8003734 <prvIsQueueEmpty>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d017      	beq.n	80032f4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	3324      	adds	r3, #36	; 0x24
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fe57 	bl	8003f80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d4:	f000 f9dc 	bl	8003690 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80032d8:	f000 fc92 	bl	8003c00 <xTaskResumeAll>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d189      	bne.n	80031f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <xQueueReceive+0x1bc>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	e780      	b.n	80031f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80032f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f6:	f000 f9cb 	bl	8003690 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80032fa:	f000 fc81 	bl	8003c00 <xTaskResumeAll>
 80032fe:	e77a      	b.n	80031f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003302:	f000 f9c5 	bl	8003690 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003306:	f000 fc7b 	bl	8003c00 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f000 fa12 	bl	8003734 <prvIsQueueEmpty>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f43f af6f 	beq.w	80031f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003318:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800331a:	4618      	mov	r0, r3
 800331c:	3730      	adds	r7, #48	; 0x30
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	623b      	str	r3, [r7, #32]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61fb      	str	r3, [r7, #28]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003378:	f000 ffee 	bl	8004358 <xTaskGetSchedulerState>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <xQueueSemaphoreTake+0x60>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <xQueueSemaphoreTake+0x64>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <xQueueSemaphoreTake+0x66>
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	61bb      	str	r3, [r7, #24]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033a8:	f001 fe2e 	bl	8005008 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d024      	beq.n	8003402 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033c8:	f001 f962 	bl	8004690 <pvTaskIncrementMutexHeldCount>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00f      	beq.n	80033fa <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	3310      	adds	r3, #16
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fe1e 	bl	8004020 <xTaskRemoveFromEventList>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <xQueueSemaphoreTake+0x214>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033fa:	f001 fe35 	bl	8005068 <vPortExitCritical>
                return pdPASS;
 80033fe:	2301      	movs	r3, #1
 8003400:	e097      	b.n	8003532 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d111      	bne.n	800342c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	617b      	str	r3, [r7, #20]
    }
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003424:	f001 fe20 	bl	8005068 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003428:	2300      	movs	r3, #0
 800342a:	e082      	b.n	8003532 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fe54 	bl	80040e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003440:	f001 fe12 	bl	8005068 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003444:	f000 fbce 	bl	8003be4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003448:	f001 fdde 	bl	8005008 <vPortEnterCritical>
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003452:	b25b      	sxtb	r3, r3
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <xQueueSemaphoreTake+0x13a>
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003468:	b25b      	sxtb	r3, r3
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d103      	bne.n	8003478 <xQueueSemaphoreTake+0x150>
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003478:	f001 fdf6 	bl	8005068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800347c:	463a      	mov	r2, r7
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fe43 	bl	8004110 <xTaskCheckForTimeOut>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d132      	bne.n	80034f6 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003492:	f000 f94f 	bl	8003734 <prvIsQueueEmpty>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d026      	beq.n	80034ea <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80034a4:	f001 fdb0 	bl	8005008 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ff71 	bl	8004394 <xTaskPriorityInherit>
 80034b2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80034b4:	f001 fdd8 	bl	8005068 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	3324      	adds	r3, #36	; 0x24
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fd5d 	bl	8003f80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034c8:	f000 f8e2 	bl	8003690 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034cc:	f000 fb98 	bl	8003c00 <xTaskResumeAll>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f af68 	bne.w	80033a8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80034d8:	4b18      	ldr	r3, [pc, #96]	; (800353c <xQueueSemaphoreTake+0x214>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	e75e      	b.n	80033a8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80034ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ec:	f000 f8d0 	bl	8003690 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80034f0:	f000 fb86 	bl	8003c00 <xTaskResumeAll>
 80034f4:	e758      	b.n	80033a8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80034f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034f8:	f000 f8ca 	bl	8003690 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80034fc:	f000 fb80 	bl	8003c00 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003502:	f000 f917 	bl	8003734 <prvIsQueueEmpty>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f43f af4d 	beq.w	80033a8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003514:	f001 fd78 	bl	8005008 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800351a:	f000 f811 	bl	8003540 <prvGetDisinheritPriorityAfterTimeout>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003526:	4618      	mov	r0, r3
 8003528:	f001 f824 	bl	8004574 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800352c:	f001 fd9c 	bl	8005068 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003530:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003532:	4618      	mov	r0, r3
 8003534:	3738      	adds	r7, #56	; 0x38
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d006      	beq.n	800355e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1c3 0305 	rsb	r3, r3, #5
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e001      	b.n	8003562 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003562:	68fb      	ldr	r3, [r7, #12]
    }
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d14d      	bne.n	8003632 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 ff70 	bl	8004480 <xTaskPriorityDisinherit>
 80035a0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e043      	b.n	8003632 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d119      	bne.n	80035e4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6858      	ldr	r0, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	461a      	mov	r2, r3
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	f002 f8b2 	bl	8005724 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	441a      	add	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d32b      	bcc.n	8003632 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e026      	b.n	8003632 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68d8      	ldr	r0, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	461a      	mov	r2, r3
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	f002 f898 	bl	8005724 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	425b      	negs	r3, r3
 80035fe:	441a      	add	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	425b      	negs	r3, r3
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d105      	bne.n	8003632 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3b01      	subs	r3, #1
 8003630:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d303      	bcc.n	8003678 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	461a      	mov	r2, r3
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f002 f84e 	bl	8005724 <memcpy>
    }
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003698:	f001 fcb6 	bl	8005008 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036a4:	e011      	b.n	80036ca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fcb4 	bl	8004020 <xTaskRemoveFromEventList>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80036be:	f000 fd8d 	bl	80041dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	dce9      	bgt.n	80036a6 <prvUnlockQueue+0x16>
 80036d2:	e000      	b.n	80036d6 <prvUnlockQueue+0x46>
                        break;
 80036d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80036de:	f001 fcc3 	bl	8005068 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80036e2:	f001 fc91 	bl	8005008 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ee:	e011      	b.n	8003714 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3310      	adds	r3, #16
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fc8f 	bl	8004020 <xTaskRemoveFromEventList>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003708:	f000 fd68 	bl	80041dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	3b01      	subs	r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003718:	2b00      	cmp	r3, #0
 800371a:	dce9      	bgt.n	80036f0 <prvUnlockQueue+0x60>
 800371c:	e000      	b.n	8003720 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800371e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003728:	f001 fc9e 	bl	8005068 <vPortExitCritical>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800373c:	f001 fc64 	bl	8005008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e001      	b.n	8003752 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003752:	f001 fc89 	bl	8005068 <vPortExitCritical>

    return xReturn;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003768:	f001 fc4e 	bl	8005008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	429a      	cmp	r2, r3
 8003776:	d102      	bne.n	800377e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e001      	b.n	8003782 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003782:	f001 fc71 	bl	8005068 <vPortExitCritical>

    return xReturn;
 8003786:	68fb      	ldr	r3, [r7, #12]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e014      	b.n	80037ca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <vQueueAddToRegistry+0x50>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <vQueueAddToRegistry+0x50>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <vQueueAddToRegistry+0x50>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80037c2:	e006      	b.n	80037d2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3301      	adds	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	d9e7      	bls.n	80037a0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200000c4 	.word	0x200000c4

080037e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80037f4:	f001 fc08 	bl	8005008 <vPortEnterCritical>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d103      	bne.n	800380e <vQueueWaitForMessageRestricted+0x2a>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003814:	b25b      	sxtb	r3, r3
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d103      	bne.n	8003824 <vQueueWaitForMessageRestricted+0x40>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003824:	f001 fc20 	bl	8005068 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fbc5 	bl	8003fc8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff26 	bl	8003690 <prvUnlockQueue>
    }
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af04      	add	r7, sp, #16
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fcf3 	bl	800524c <pvPortMalloc>
 8003866:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800386e:	2058      	movs	r0, #88	; 0x58
 8003870:	f001 fcec 	bl	800524c <pvPortMalloc>
 8003874:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
 8003882:	e005      	b.n	8003890 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003884:	6978      	ldr	r0, [r7, #20]
 8003886:	f001 fdc1 	bl	800540c <vPortFree>
 800388a:	e001      	b.n	8003890 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	2300      	movs	r3, #0
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f80e 	bl	80038ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80038b2:	69f8      	ldr	r0, [r7, #28]
 80038b4:	f000 f8a2 	bl	80039fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e002      	b.n	80038c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80038c4:	69bb      	ldr	r3, [r7, #24]
    }
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b088      	sub	sp, #32
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	21a5      	movs	r1, #165	; 0xa5
 80038e8:	f001 ff2a 	bl	8005740 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038f6:	3b01      	subs	r3, #1
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f023 0307 	bic.w	r3, r3, #7
 8003904:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	617b      	str	r3, [r7, #20]
    }
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01f      	beq.n	800396c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e012      	b.n	8003958 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	7819      	ldrb	r1, [r3, #0]
 800393a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	3334      	adds	r3, #52	; 0x34
 8003942:	460a      	mov	r2, r1
 8003944:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b09      	cmp	r3, #9
 800395c:	d9e9      	bls.n	8003932 <prvInitialiseNewTask+0x64>
 800395e:	e000      	b.n	8003962 <prvInitialiseNewTask+0x94>
            {
                break;
 8003960:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800396a:	e003      	b.n	8003974 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	2b04      	cmp	r3, #4
 8003978:	d901      	bls.n	800397e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800397a:	2304      	movs	r3, #4
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003988:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	2200      	movs	r2, #0
 800398e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fff1 	bl	800297c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	3318      	adds	r3, #24
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe ffec 	bl	800297c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	f1c3 0205 	rsb	r2, r3, #5
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	3350      	adds	r3, #80	; 0x50
 80039be:	2204      	movs	r2, #4
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 febc 	bl	8005740 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3354      	adds	r3, #84	; 0x54
 80039cc:	2201      	movs	r2, #1
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 feb5 	bl	8005740 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	69b8      	ldr	r0, [r7, #24]
 80039dc:	f001 f9e4 	bl	8004da8 <pxPortInitialiseStack>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039f2:	bf00      	nop
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003a04:	f001 fb00 	bl	8005008 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003a08:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <prvAddNewTaskToReadyList+0xc0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <prvAddNewTaskToReadyList+0xc0>)
 8003a10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <prvAddNewTaskToReadyList+0xc0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d110      	bne.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003a28:	f000 fbfc 	bl	8004224 <prvInitialiseTaskLists>
 8003a2c:	e00d      	b.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d802      	bhi.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <prvAddNewTaskToReadyList+0xcc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <prvAddNewTaskToReadyList+0xcc>)
 8003a52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <prvAddNewTaskToReadyList+0xcc>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	2201      	movs	r2, #1
 8003a62:	409a      	lsls	r2, r3
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <prvAddNewTaskToReadyList+0xd0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <prvAddNewTaskToReadyList+0xd0>)
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <prvAddNewTaskToReadyList+0xd4>)
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe ff86 	bl	8002996 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a8a:	f001 faed 	bl	8005068 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00e      	beq.n	8003ab4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d207      	bcs.n	8003ab4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <prvAddNewTaskToReadyList+0xd8>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200001dc 	.word	0x200001dc
 8003ac0:	20000104 	.word	0x20000104
 8003ac4:	200001e8 	.word	0x200001e8
 8003ac8:	200001f8 	.word	0x200001f8
 8003acc:	200001e4 	.word	0x200001e4
 8003ad0:	20000108 	.word	0x20000108
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <vTaskDelay+0x60>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <vTaskDelay+0x30>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
    }
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003b08:	f000 f86c 	bl	8003be4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fdd2 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003b14:	f000 f874 	bl	8003c00 <xTaskResumeAll>
 8003b18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d107      	bne.n	8003b30 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <vTaskDelay+0x64>)
 8003b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000204 	.word	0x20000204
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <vTaskStartScheduler+0x88>)
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2282      	movs	r2, #130	; 0x82
 8003b52:	491e      	ldr	r1, [pc, #120]	; (8003bcc <vTaskStartScheduler+0x8c>)
 8003b54:	481e      	ldr	r0, [pc, #120]	; (8003bd0 <vTaskStartScheduler+0x90>)
 8003b56:	f7ff fe79 	bl	800384c <xTaskCreate>
 8003b5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003b62:	f000 fe0f 	bl	8004784 <xTimerCreateTimerTask>
 8003b66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d116      	bne.n	8003b9c <vTaskStartScheduler+0x5c>
        __asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
    }
 8003b80:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <vTaskStartScheduler+0x94>)
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <vTaskStartScheduler+0x98>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <vTaskStartScheduler+0x9c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003b96:	f001 f995 	bl	8004ec4 <xPortStartScheduler>
 8003b9a:	e00e      	b.n	8003bba <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d10a      	bne.n	8003bba <vTaskStartScheduler+0x7a>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	607b      	str	r3, [r7, #4]
    }
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <vTaskStartScheduler+0xa0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000200 	.word	0x20000200
 8003bcc:	080057c4 	.word	0x080057c4
 8003bd0:	080041f5 	.word	0x080041f5
 8003bd4:	200001fc 	.word	0x200001fc
 8003bd8:	200001e8 	.word	0x200001e8
 8003bdc:	200001e0 	.word	0x200001e0
 8003be0:	2000000c 	.word	0x2000000c

08003be4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <vTaskSuspendAll+0x18>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <vTaskSuspendAll+0x18>)
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20000204 	.word	0x20000204

08003c00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <xTaskResumeAll+0x2c>
        __asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	603b      	str	r3, [r7, #0]
    }
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003c2c:	f001 f9ec 	bl	8005008 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c38:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d161      	bne.n	8003d06 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <xTaskResumeAll+0x118>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d05d      	beq.n	8003d06 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c4a:	e02e      	b.n	8003caa <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4c:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <xTaskResumeAll+0x11c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3318      	adds	r3, #24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fef9 	bl	8002a50 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fef4 	bl	8002a50 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <xTaskResumeAll+0x120>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <xTaskResumeAll+0x120>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <xTaskResumeAll+0x124>)
 8003c88:	441a      	add	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7fe fe80 	bl	8002996 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9a:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <xTaskResumeAll+0x128>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <xTaskResumeAll+0x11c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1cc      	bne.n	8003c4c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003cb8:	f000 fb32 	bl	8004320 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <xTaskResumeAll+0x130>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003cc8:	f000 f846 	bl	8003d58 <xTaskIncrementTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f1      	bne.n	8003cc8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <xTaskResumeAll+0x130>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <xTaskResumeAll+0x134>)
 8003cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003d06:	f001 f9af 	bl	8005068 <vPortExitCritical>

    return xAlreadyYielded;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000204 	.word	0x20000204
 8003d18:	200001dc 	.word	0x200001dc
 8003d1c:	2000019c 	.word	0x2000019c
 8003d20:	200001e4 	.word	0x200001e4
 8003d24:	20000108 	.word	0x20000108
 8003d28:	20000104 	.word	0x20000104
 8003d2c:	200001f0 	.word	0x200001f0
 8003d30:	200001ec 	.word	0x200001ec
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <xTaskGetTickCount+0x1c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003d44:	687b      	ldr	r3, [r7, #4]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	200001e0 	.word	0x200001e0

08003d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d62:	4b4e      	ldr	r3, [pc, #312]	; (8003e9c <xTaskIncrementTick+0x144>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 808e 	bne.w	8003e88 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <xTaskIncrementTick+0x148>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d74:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <xTaskIncrementTick+0x148>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d120      	bne.n	8003dc2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d80:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <xTaskIncrementTick+0x48>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	603b      	str	r3, [r7, #0]
    }
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskIncrementTick+0x46>
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <xTaskIncrementTick+0x150>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <xTaskIncrementTick+0x150>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <xTaskIncrementTick+0x154>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a3c      	ldr	r2, [pc, #240]	; (8003eac <xTaskIncrementTick+0x154>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	f000 faaf 	bl	8004320 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d348      	bcc.n	8003e5e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	601a      	str	r2, [r3, #0]
                    break;
 8003dde:	e03e      	b.n	8003e5e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de0:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <xTaskIncrementTick+0x14c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d203      	bcs.n	8003e00 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003df8:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <xTaskIncrementTick+0x158>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dfe:	e02e      	b.n	8003e5e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fe23 	bl	8002a50 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3318      	adds	r3, #24
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fe1a 	bl	8002a50 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <xTaskIncrementTick+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <xTaskIncrementTick+0x15c>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <xTaskIncrementTick+0x160>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe fda6 	bl	8002996 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <xTaskIncrementTick+0x164>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3b9      	bcc.n	8003dcc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5c:	e7b6      	b.n	8003dcc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e5e:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <xTaskIncrementTick+0x164>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4914      	ldr	r1, [pc, #80]	; (8003eb8 <xTaskIncrementTick+0x160>)
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d901      	bls.n	8003e7a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <xTaskIncrementTick+0x168>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e004      	b.n	8003e92 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <xTaskIncrementTick+0x16c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <xTaskIncrementTick+0x16c>)
 8003e90:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000204 	.word	0x20000204
 8003ea0:	200001e0 	.word	0x200001e0
 8003ea4:	20000194 	.word	0x20000194
 8003ea8:	20000198 	.word	0x20000198
 8003eac:	200001f4 	.word	0x200001f4
 8003eb0:	200001fc 	.word	0x200001fc
 8003eb4:	200001e4 	.word	0x200001e4
 8003eb8:	20000108 	.word	0x20000108
 8003ebc:	20000104 	.word	0x20000104
 8003ec0:	200001f0 	.word	0x200001f0
 8003ec4:	200001ec 	.word	0x200001ec

08003ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <vTaskSwitchContext+0xa4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <vTaskSwitchContext+0xa8>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003edc:	e03f      	b.n	8003f5e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <vTaskSwitchContext+0xa8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <vTaskSwitchContext+0xac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	f1c3 031f 	rsb	r3, r3, #31
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	491f      	ldr	r1, [pc, #124]	; (8003f78 <vTaskSwitchContext+0xb0>)
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
    }
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <vTaskSwitchContext+0x5a>
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <vTaskSwitchContext+0xb0>)
 8003f30:	4413      	add	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3308      	adds	r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d104      	bne.n	8003f54 <vTaskSwitchContext+0x8c>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <vTaskSwitchContext+0xb4>)
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000204 	.word	0x20000204
 8003f70:	200001f0 	.word	0x200001f0
 8003f74:	200001e4 	.word	0x200001e4
 8003f78:	20000108 	.word	0x20000108
 8003f7c:	20000104 	.word	0x20000104

08003f80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
    }
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <vTaskPlaceOnEventList+0x44>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3318      	adds	r3, #24
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe fd15 	bl	80029de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	6838      	ldr	r0, [r7, #0]
 8003fb8:	f000 fb7e 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000104 	.word	0x20000104

08003fc8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	617b      	str	r3, [r7, #20]
    }
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7fe fccc 	bl	8002996 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004004:	f04f 33ff 	mov.w	r3, #4294967295
 8004008:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f000 fb53 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
    }
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000104 	.word	0x20000104

08004020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60fb      	str	r3, [r7, #12]
    }
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3318      	adds	r3, #24
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fcfd 	bl	8002a50 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <xTaskRemoveFromEventList+0xac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11c      	bne.n	8004098 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3304      	adds	r3, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fcf4 	bl	8002a50 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <xTaskRemoveFromEventList+0xb0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4313      	orrs	r3, r2
 8004076:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <xTaskRemoveFromEventList+0xb0>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <xTaskRemoveFromEventList+0xb4>)
 8004088:	441a      	add	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7fe fc80 	bl	8002996 <vListInsertEnd>
 8004096:	e005      	b.n	80040a4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3318      	adds	r3, #24
 800409c:	4619      	mov	r1, r3
 800409e:	480e      	ldr	r0, [pc, #56]	; (80040d8 <xTaskRemoveFromEventList+0xb8>)
 80040a0:	f7fe fc79 	bl	8002996 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <xTaskRemoveFromEventList+0xbc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d905      	bls.n	80040be <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <xTaskRemoveFromEventList+0xc0>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e001      	b.n	80040c2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80040c2:	697b      	ldr	r3, [r7, #20]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000204 	.word	0x20000204
 80040d0:	200001e4 	.word	0x200001e4
 80040d4:	20000108 	.word	0x20000108
 80040d8:	2000019c 	.word	0x2000019c
 80040dc:	20000104 	.word	0x20000104
 80040e0:	200001f0 	.word	0x200001f0

080040e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <vTaskInternalSetTimeOutState+0x24>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <vTaskInternalSetTimeOutState+0x28>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	200001f4 	.word	0x200001f4
 800410c:	200001e0 	.word	0x200001e0

08004110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
    }
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
    }
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004152:	f000 ff59 	bl	8005008 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <xTaskCheckForTimeOut+0xc4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d102      	bne.n	8004176 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e026      	b.n	80041c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <xTaskCheckForTimeOut+0xc8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d00a      	beq.n	8004198 <xTaskCheckForTimeOut+0x88>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d305      	bcc.n	8004198 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e015      	b.n	80041c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20b      	bcs.n	80041ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1ad2      	subs	r2, r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff98 	bl	80040e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e004      	b.n	80041c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80041c4:	f000 ff50 	bl	8005068 <vPortExitCritical>

    return xReturn;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200001e0 	.word	0x200001e0
 80041d8:	200001f4 	.word	0x200001f4

080041dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <vTaskMissedYield+0x14>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	200001f0 	.word	0x200001f0

080041f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80041fc:	f000 f852 	bl	80042a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <prvIdleTask+0x28>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d9f9      	bls.n	80041fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <prvIdleTask+0x2c>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004218:	e7f0      	b.n	80041fc <prvIdleTask+0x8>
 800421a:	bf00      	nop
 800421c:	20000108 	.word	0x20000108
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e00c      	b.n	800424a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <prvInitialiseTaskLists+0x60>)
 800423c:	4413      	add	r3, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fb7c 	bl	800293c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d9ef      	bls.n	8004230 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004250:	480d      	ldr	r0, [pc, #52]	; (8004288 <prvInitialiseTaskLists+0x64>)
 8004252:	f7fe fb73 	bl	800293c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <prvInitialiseTaskLists+0x68>)
 8004258:	f7fe fb70 	bl	800293c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800425c:	480c      	ldr	r0, [pc, #48]	; (8004290 <prvInitialiseTaskLists+0x6c>)
 800425e:	f7fe fb6d 	bl	800293c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <prvInitialiseTaskLists+0x70>)
 8004264:	f7fe fb6a 	bl	800293c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004268:	480b      	ldr	r0, [pc, #44]	; (8004298 <prvInitialiseTaskLists+0x74>)
 800426a:	f7fe fb67 	bl	800293c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <prvInitialiseTaskLists+0x78>)
 8004270:	4a05      	ldr	r2, [pc, #20]	; (8004288 <prvInitialiseTaskLists+0x64>)
 8004272:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvInitialiseTaskLists+0x7c>)
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <prvInitialiseTaskLists+0x68>)
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000108 	.word	0x20000108
 8004288:	2000016c 	.word	0x2000016c
 800428c:	20000180 	.word	0x20000180
 8004290:	2000019c 	.word	0x2000019c
 8004294:	200001b0 	.word	0x200001b0
 8004298:	200001c8 	.word	0x200001c8
 800429c:	20000194 	.word	0x20000194
 80042a0:	20000198 	.word	0x20000198

080042a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042aa:	e019      	b.n	80042e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80042ac:	f000 feac 	bl	8005008 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <prvCheckTasksWaitingTermination+0x50>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fbc7 	bl	8002a50 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80042d6:	f000 fec7 	bl	8005068 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f810 	bl	8004300 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvCheckTasksWaitingTermination+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e1      	bne.n	80042ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200001b0 	.word	0x200001b0
 80042f8:	200001dc 	.word	0x200001dc
 80042fc:	200001c4 	.word	0x200001c4

08004300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f87d 	bl	800540c <vPortFree>
                vPortFree( pxTCB );
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 f87a 	bl	800540c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <prvResetNextTaskUnblockTime+0x30>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <prvResetNextTaskUnblockTime+0x34>)
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004336:	e005      	b.n	8004344 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <prvResetNextTaskUnblockTime+0x30>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <prvResetNextTaskUnblockTime+0x34>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000194 	.word	0x20000194
 8004354:	200001fc 	.word	0x200001fc

08004358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <xTaskGetSchedulerState+0x34>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004366:	2301      	movs	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	e008      	b.n	800437e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <xTaskGetSchedulerState+0x38>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004374:	2302      	movs	r3, #2
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	e001      	b.n	800437e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800437e:	687b      	ldr	r3, [r7, #4]
    }
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	200001e8 	.word	0x200001e8
 8004390:	20000204 	.word	0x20000204

08004394 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d05e      	beq.n	8004468 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b31      	ldr	r3, [pc, #196]	; (8004474 <xTaskPriorityInherit+0xe0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d24e      	bcs.n	8004456 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db06      	blt.n	80043ce <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c0:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <xTaskPriorityInherit+0xe0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	f1c3 0205 	rsb	r2, r3, #5
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6959      	ldr	r1, [r3, #20]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4a26      	ldr	r2, [pc, #152]	; (8004478 <xTaskPriorityInherit+0xe4>)
 80043e0:	4413      	add	r3, r2
 80043e2:	4299      	cmp	r1, r3
 80043e4:	d12f      	bne.n	8004446 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fb30 	bl	8002a50 <uxListRemove>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	2201      	movs	r2, #1
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43da      	mvns	r2, r3
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <xTaskPriorityInherit+0xe8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4013      	ands	r3, r2
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <xTaskPriorityInherit+0xe8>)
 800440a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <xTaskPriorityInherit+0xe0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	2201      	movs	r2, #1
 800441c:	409a      	lsls	r2, r3
 800441e:	4b17      	ldr	r3, [pc, #92]	; (800447c <xTaskPriorityInherit+0xe8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	4a15      	ldr	r2, [pc, #84]	; (800447c <xTaskPriorityInherit+0xe8>)
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4a10      	ldr	r2, [pc, #64]	; (8004478 <xTaskPriorityInherit+0xe4>)
 8004436:	441a      	add	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe faa9 	bl	8002996 <vListInsertEnd>
 8004444:	e004      	b.n	8004450 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <xTaskPriorityInherit+0xe0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e008      	b.n	8004468 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <xTaskPriorityInherit+0xe0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	429a      	cmp	r2, r3
 8004462:	d201      	bcs.n	8004468 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004468:	68fb      	ldr	r3, [r7, #12]
    }
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000104 	.word	0x20000104
 8004478:	20000108 	.word	0x20000108
 800447c:	200001e4 	.word	0x200001e4

08004480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d063      	beq.n	800455e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004496:	4b34      	ldr	r3, [pc, #208]	; (8004568 <xTaskPriorityDisinherit+0xe8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d00a      	beq.n	80044b6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
    }
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	60bb      	str	r3, [r7, #8]
    }
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	1e5a      	subs	r2, r3, #1
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d039      	beq.n	800455e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d135      	bne.n	800455e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe faaa 	bl	8002a50 <uxListRemove>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	2201      	movs	r2, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43da      	mvns	r2, r3
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <xTaskPriorityDisinherit+0xec>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4013      	ands	r3, r2
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <xTaskPriorityDisinherit+0xec>)
 8004516:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	f1c3 0205 	rsb	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	2201      	movs	r2, #1
 8004532:	409a      	lsls	r2, r3
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <xTaskPriorityDisinherit+0xec>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4313      	orrs	r3, r2
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <xTaskPriorityDisinherit+0xec>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <xTaskPriorityDisinherit+0xf0>)
 800454c:	441a      	add	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe fa1e 	bl	8002996 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800455e:	697b      	ldr	r3, [r7, #20]
    }
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000104 	.word	0x20000104
 800456c:	200001e4 	.word	0x200001e4
 8004570:	20000108 	.word	0x20000108

08004574 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004582:	2301      	movs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d077      	beq.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
    }
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d902      	bls.n	80045ba <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	e002      	b.n	80045c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d058      	beq.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d153      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10a      	bne.n	80045f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
    }
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db04      	blt.n	8004612 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f1c3 0205 	rsb	r2, r3, #5
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	6959      	ldr	r1, [r3, #20]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004622:	4413      	add	r3, r2
 8004624:	4299      	cmp	r1, r3
 8004626:	d129      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fa0f 	bl	8002a50 <uxListRemove>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4013      	ands	r3, r2
 800464a:	4a10      	ldr	r2, [pc, #64]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800464c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a06      	ldr	r2, [pc, #24]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800466e:	441a      	add	r2, r3
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe f98d 	bl	8002996 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800467c:	bf00      	nop
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000104 	.word	0x20000104
 8004688:	20000108 	.word	0x20000108
 800468c:	200001e4 	.word	0x200001e4

08004690 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046a2:	3201      	adds	r2, #1
 80046a4:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80046a6:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046a8:	681b      	ldr	r3, [r3, #0]
    }
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000104 	.word	0x20000104

080046b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c8:	4b28      	ldr	r3, [pc, #160]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe f9be 	bl	8002a50 <uxListRemove>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	2201      	movs	r2, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4013      	ands	r3, r2
 80046ee:	4a20      	ldr	r2, [pc, #128]	; (8004770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d10a      	bne.n	8004710 <prvAddCurrentTaskToDelayedList+0x58>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4619      	mov	r1, r3
 8004708:	481a      	ldr	r0, [pc, #104]	; (8004774 <prvAddCurrentTaskToDelayedList+0xbc>)
 800470a:	f7fe f944 	bl	8002996 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800470e:	e026      	b.n	800475e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	429a      	cmp	r2, r3
 8004726:	d209      	bcs.n	800473c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <prvAddCurrentTaskToDelayedList+0xc0>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe f952 	bl	80029de <vListInsert>
}
 800473a:	e010      	b.n	800475e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <prvAddCurrentTaskToDelayedList+0xc4>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7fe f948 	bl	80029de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	429a      	cmp	r2, r3
 8004756:	d202      	bcs.n	800475e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <prvAddCurrentTaskToDelayedList+0xc8>)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6013      	str	r3, [r2, #0]
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	200001e0 	.word	0x200001e0
 800476c:	20000104 	.word	0x20000104
 8004770:	200001e4 	.word	0x200001e4
 8004774:	200001c8 	.word	0x200001c8
 8004778:	20000198 	.word	0x20000198
 800477c:	20000194 	.word	0x20000194
 8004780:	200001fc 	.word	0x200001fc

08004784 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800478e:	f000 fad5 	bl	8004d3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <xTimerCreateTimerTask+0x54>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <xTimerCreateTimerTask+0x58>)
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	2302      	movs	r3, #2
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2300      	movs	r3, #0
 80047a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047a8:	490d      	ldr	r1, [pc, #52]	; (80047e0 <xTimerCreateTimerTask+0x5c>)
 80047aa:	480e      	ldr	r0, [pc, #56]	; (80047e4 <xTimerCreateTimerTask+0x60>)
 80047ac:	f7ff f84e 	bl	800384c <xTaskCreate>
 80047b0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	603b      	str	r3, [r7, #0]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80047ce:	687b      	ldr	r3, [r7, #4]
    }
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000238 	.word	0x20000238
 80047dc:	2000023c 	.word	0x2000023c
 80047e0:	080057cc 	.word	0x080057cc
 80047e4:	0800491d 	.word	0x0800491d

080047e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	623b      	str	r3, [r7, #32]
    }
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <xTimerGenericCommand+0x98>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02a      	beq.n	8004874 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b05      	cmp	r3, #5
 800482e:	dc18      	bgt.n	8004862 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004830:	f7ff fd92 	bl	8004358 <xTaskGetSchedulerState>
 8004834:	4603      	mov	r3, r0
 8004836:	2b02      	cmp	r3, #2
 8004838:	d109      	bne.n	800484e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <xTimerGenericCommand+0x98>)
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f107 0114 	add.w	r1, r7, #20
 8004842:	2300      	movs	r3, #0
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	f7fe fa4b 	bl	8002ce0 <xQueueGenericSend>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24
 800484c:	e012      	b.n	8004874 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <xTimerGenericCommand+0x98>)
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f107 0114 	add.w	r1, r7, #20
 8004856:	2300      	movs	r3, #0
 8004858:	2200      	movs	r2, #0
 800485a:	f7fe fa41 	bl	8002ce0 <xQueueGenericSend>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24
 8004860:	e008      	b.n	8004874 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <xTimerGenericCommand+0x98>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f107 0114 	add.w	r1, r7, #20
 800486a:	2300      	movs	r3, #0
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	f7fe fb35 	bl	8002edc <xQueueGenericSendFromISR>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000238 	.word	0x20000238

08004884 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <prvProcessExpiredTimer+0x94>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe f8d7 	bl	8002a50 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d022      	beq.n	80048f6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	18d1      	adds	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	6978      	ldr	r0, [r7, #20]
 80048be:	f000 f8d1 	bl	8004a64 <prvInsertTimerInActiveList>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01f      	beq.n	8004908 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	2100      	movs	r1, #0
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f7ff ff88 	bl	80047e8 <xTimerGenericCommand>
 80048d8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d113      	bne.n	8004908 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
    }
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	b2da      	uxtb	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	4798      	blx	r3
    }
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000230 	.word	0x20000230

0800491c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f857 	bl	80049dc <prvGetNextExpireTime>
 800492e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4619      	mov	r1, r3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f803 	bl	8004940 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800493a:	f000 f8d5 	bl	8004ae8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800493e:	e7f1      	b.n	8004924 <prvTimerTask+0x8>

08004940 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800494a:	f7ff f94b 	bl	8003be4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f866 	bl	8004a24 <prvSampleTimeNow>
 8004958:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d130      	bne.n	80049c2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <prvProcessTimerOrBlockTask+0x3c>
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	429a      	cmp	r2, r3
 800496c:	d806      	bhi.n	800497c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800496e:	f7ff f947 	bl	8003c00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff85 	bl	8004884 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800497a:	e024      	b.n	80049c6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004982:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <prvProcessTimerOrBlockTask+0x90>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <prvProcessTimerOrBlockTask+0x50>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <prvProcessTimerOrBlockTask+0x52>
 8004990:	2300      	movs	r3, #0
 8004992:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvProcessTimerOrBlockTask+0x94>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	f7fe ff1f 	bl	80037e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80049a6:	f7ff f92b 	bl	8003c00 <xTaskResumeAll>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <prvProcessTimerOrBlockTask+0x98>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
    }
 80049c0:	e001      	b.n	80049c6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80049c2:	f7ff f91d 	bl	8003c00 <xTaskResumeAll>
    }
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000234 	.word	0x20000234
 80049d4:	20000238 	.word	0x20000238
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvGetNextExpireTime+0x44>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <prvGetNextExpireTime+0x16>
 80049ee:	2201      	movs	r2, #1
 80049f0:	e000      	b.n	80049f4 <prvGetNextExpireTime+0x18>
 80049f2:	2200      	movs	r2, #0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <prvGetNextExpireTime+0x44>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e001      	b.n	8004a10 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a10:	68fb      	ldr	r3, [r7, #12]
    }
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000230 	.word	0x20000230

08004a24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a2c:	f7ff f984 	bl	8003d38 <xTaskGetTickCount>
 8004a30:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <prvSampleTimeNow+0x3c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d205      	bcs.n	8004a48 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004a3c:	f000 f91a 	bl	8004c74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e002      	b.n	8004a4e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <prvSampleTimeNow+0x3c>)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a54:	68fb      	ldr	r3, [r7, #12]
    }
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000240 	.word	0x20000240

08004a64 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d812      	bhi.n	8004ab0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e01b      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <prvInsertTimerInActiveList+0x7c>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fd ff98 	bl	80029de <vListInsert>
 8004aae:	e012      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d206      	bcs.n	8004ac6 <prvInsertTimerInActiveList+0x62>
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e007      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvInsertTimerInActiveList+0x80>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fd ff84 	bl	80029de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ad6:	697b      	ldr	r3, [r7, #20]
    }
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000234 	.word	0x20000234
 8004ae4:	20000230 	.word	0x20000230

08004ae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08c      	sub	sp, #48	; 0x30
 8004aec:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aee:	e0ae      	b.n	8004c4e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f2c0 80aa 	blt.w	8004c4c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd ffa1 	bl	8002a50 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff87 	bl	8004a24 <prvSampleTimeNow>
 8004b16:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b09      	cmp	r3, #9
 8004b1c:	f200 8097 	bhi.w	8004c4e <prvProcessReceivedCommands+0x166>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <prvProcessReceivedCommands+0x40>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b51 	.word	0x08004b51
 8004b34:	08004bc5 	.word	0x08004bc5
 8004b38:	08004bd9 	.word	0x08004bd9
 8004b3c:	08004c23 	.word	0x08004c23
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004b51 	.word	0x08004b51
 8004b48:	08004bc5 	.word	0x08004bc5
 8004b4c:	08004bd9 	.word	0x08004bd9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	18d1      	adds	r1, r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b70:	f7ff ff78 	bl	8004a64 <prvInsertTimerInActiveList>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d069      	beq.n	8004c4e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b80:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d05e      	beq.n	8004c4e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	441a      	add	r2, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba2:	f7ff fe21 	bl	80047e8 <xTimerGenericCommand>
 8004ba6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d14f      	bne.n	8004c4e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	61bb      	str	r3, [r7, #24]
    }
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004bd6:	e03a      	b.n	8004c4e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	617b      	str	r3, [r7, #20]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	18d1      	adds	r1, r2, r3
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1c:	f7ff ff22 	bl	8004a64 <prvInsertTimerInActiveList>
                        break;
 8004c20:	e015      	b.n	8004c4e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c32:	f000 fbeb 	bl	800540c <vPortFree>
 8004c36:	e00a      	b.n	8004c4e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c4a:	e000      	b.n	8004c4e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004c4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <prvProcessReceivedCommands+0x188>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f107 0108 	add.w	r1, r7, #8
 8004c56:	2200      	movs	r2, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fa85 	bl	8003168 <xQueueReceive>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af45 	bne.w	8004af0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	3728      	adds	r7, #40	; 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000238 	.word	0x20000238

08004c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c7a:	e048      	b.n	8004d0e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c86:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd fedb 	bl	8002a50 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d02e      	beq.n	8004d0e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d90e      	bls.n	8004ce0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fd fe80 	bl	80029de <vListInsert>
 8004cde:	e016      	b.n	8004d0e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fd7c 	bl	80047e8 <xTimerGenericCommand>
 8004cf0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	603b      	str	r3, [r7, #0]
    }
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1b1      	bne.n	8004c7c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <prvSwitchTimerLists+0xc4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <prvSwitchTimerLists+0xc0>)
 8004d24:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004d26:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <prvSwitchTimerLists+0xc4>)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6013      	str	r3, [r2, #0]
    }
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000230 	.word	0x20000230
 8004d38:	20000234 	.word	0x20000234

08004d3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004d40:	f000 f962 	bl	8005008 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <prvCheckForValidListAndQueue+0x54>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11d      	bne.n	8004d88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d4c:	4811      	ldr	r0, [pc, #68]	; (8004d94 <prvCheckForValidListAndQueue+0x58>)
 8004d4e:	f7fd fdf5 	bl	800293c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d52:	4811      	ldr	r0, [pc, #68]	; (8004d98 <prvCheckForValidListAndQueue+0x5c>)
 8004d54:	f7fd fdf2 	bl	800293c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <prvCheckForValidListAndQueue+0x60>)
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	; (8004d94 <prvCheckForValidListAndQueue+0x58>)
 8004d5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <prvCheckForValidListAndQueue+0x64>)
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <prvCheckForValidListAndQueue+0x5c>)
 8004d62:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d64:	2200      	movs	r2, #0
 8004d66:	210c      	movs	r1, #12
 8004d68:	200a      	movs	r0, #10
 8004d6a:	f7fd ff03 	bl	8002b74 <xQueueGenericCreate>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4a07      	ldr	r2, [pc, #28]	; (8004d90 <prvCheckForValidListAndQueue+0x54>)
 8004d72:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <prvCheckForValidListAndQueue+0x54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <prvCheckForValidListAndQueue+0x54>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4908      	ldr	r1, [pc, #32]	; (8004da4 <prvCheckForValidListAndQueue+0x68>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fd04 	bl	8003790 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d88:	f000 f96e 	bl	8005068 <vPortExitCritical>
    }
 8004d8c:	bf00      	nop
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000238 	.word	0x20000238
 8004d94:	20000208 	.word	0x20000208
 8004d98:	2000021c 	.word	0x2000021c
 8004d9c:	20000230 	.word	0x20000230
 8004da0:	20000234 	.word	0x20000234
 8004da4:	080057d4 	.word	0x080057d4

08004da8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b04      	subs	r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b04      	subs	r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0201 	bic.w	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <pxPortInitialiseStack+0x64>)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b14      	subs	r3, #20
 8004de2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f06f 0202 	mvn.w	r2, #2
 8004df6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3b20      	subs	r3, #32
 8004dfc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	08004e11 	.word	0x08004e11

08004e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <prvTaskExitError+0x54>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d00a      	beq.n	8004e3a <prvTaskExitError+0x2a>
        __asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60fb      	str	r3, [r7, #12]
    }
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <prvTaskExitError+0x28>
        __asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60bb      	str	r3, [r7, #8]
    }
 8004e4c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004e4e:	bf00      	nop
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0fc      	beq.n	8004e50 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000010 	.word	0x20000010
	...

08004e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <pxCurrentTCBConst2>)
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	6808      	ldr	r0, [r1, #0]
 8004e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7a:	f380 8809 	msr	PSP, r0
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	f380 8811 	msr	BASEPRI, r0
 8004e8a:	4770      	bx	lr
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst2>:
 8004e90:	20000104 	.word	0x20000104
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004e98:	4808      	ldr	r0, [pc, #32]	; (8004ebc <prvPortStartFirstTask+0x24>)
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	6800      	ldr	r0, [r0, #0]
 8004e9e:	f380 8808 	msr	MSP, r0
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8814 	msr	CONTROL, r0
 8004eaa:	b662      	cpsie	i
 8004eac:	b661      	cpsie	f
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	df00      	svc	0
 8004eb8:	bf00      	nop
 8004eba:	0000      	.short	0x0000
 8004ebc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop

08004ec4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004eca:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <xPortStartScheduler+0x120>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a46      	ldr	r2, [pc, #280]	; (8004fe8 <xPortStartScheduler+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10a      	bne.n	8004eea <xPortStartScheduler+0x26>
        __asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	613b      	str	r3, [r7, #16]
    }
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004eea:	4b3e      	ldr	r3, [pc, #248]	; (8004fe4 <xPortStartScheduler+0x120>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3f      	ldr	r2, [pc, #252]	; (8004fec <xPortStartScheduler+0x128>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10a      	bne.n	8004f0a <xPortStartScheduler+0x46>
        __asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
    }
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <xPortStartScheduler+0x12c>)
 8004f0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	22ff      	movs	r2, #255	; 0xff
 8004f1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <xPortStartScheduler+0x130>)
 8004f30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f32:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f34:	2207      	movs	r2, #7
 8004f36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f38:	e009      	b.n	8004f4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004f3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d0ef      	beq.n	8004f3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1c3 0307 	rsb	r3, r3, #7
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d00a      	beq.n	8004f7c <xPortStartScheduler+0xb8>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <xPortStartScheduler+0x134>)
 8004f90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <xPortStartScheduler+0x138>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <xPortStartScheduler+0x138>)
 8004fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <xPortStartScheduler+0x138>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <xPortStartScheduler+0x138>)
 8004fac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004fb2:	f000 f8db 	bl	800516c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004fb6:	4b12      	ldr	r3, [pc, #72]	; (8005000 <xPortStartScheduler+0x13c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004fbc:	f000 f8fa 	bl	80051b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <xPortStartScheduler+0x140>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <xPortStartScheduler+0x140>)
 8004fc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004fcc:	f7ff ff64 	bl	8004e98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004fd0:	f7fe ff7a 	bl	8003ec8 <vTaskSwitchContext>
    prvTaskExitError();
 8004fd4:	f7ff ff1c 	bl	8004e10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed00 	.word	0xe000ed00
 8004fe8:	410fc271 	.word	0x410fc271
 8004fec:	410fc270 	.word	0x410fc270
 8004ff0:	e000e400 	.word	0xe000e400
 8004ff4:	20000244 	.word	0x20000244
 8004ff8:	20000248 	.word	0x20000248
 8004ffc:	e000ed20 	.word	0xe000ed20
 8005000:	20000010 	.word	0x20000010
 8005004:	e000ef34 	.word	0xe000ef34

08005008 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
        __asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
    }
 8005020:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <vPortEnterCritical+0x58>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <vPortEnterCritical+0x58>)
 800502a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <vPortEnterCritical+0x58>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10f      	bne.n	8005054 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <vPortEnterCritical+0x5c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <vPortEnterCritical+0x4c>
        __asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	603b      	str	r3, [r7, #0]
    }
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <vPortEnterCritical+0x4a>
    }
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000010 	.word	0x20000010
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <vPortExitCritical+0x50>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <vPortExitCritical+0x24>
        __asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	607b      	str	r3, [r7, #4]
    }
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <vPortExitCritical+0x50>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3b01      	subs	r3, #1
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <vPortExitCritical+0x50>)
 8005094:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <vPortExitCritical+0x50>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <vPortExitCritical+0x42>
 800509e:	2300      	movs	r3, #0
 80050a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f383 8811 	msr	BASEPRI, r3
    }
 80050a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000010 	.word	0x20000010
 80050bc:	00000000 	.word	0x00000000

080050c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80050c0:	f3ef 8009 	mrs	r0, PSP
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	4b15      	ldr	r3, [pc, #84]	; (8005120 <pxCurrentTCBConst>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f01e 0f10 	tst.w	lr, #16
 80050d0:	bf08      	it	eq
 80050d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050e4:	f380 8811 	msr	BASEPRI, r0
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f7fe feea 	bl	8003ec8 <vTaskSwitchContext>
 80050f4:	f04f 0000 	mov.w	r0, #0
 80050f8:	f380 8811 	msr	BASEPRI, r0
 80050fc:	bc09      	pop	{r0, r3}
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	6808      	ldr	r0, [r1, #0]
 8005102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005106:	f01e 0f10 	tst.w	lr, #16
 800510a:	bf08      	it	eq
 800510c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005110:	f380 8809 	msr	PSP, r0
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	f3af 8000 	nop.w

08005120 <pxCurrentTCBConst>:
 8005120:	20000104 	.word	0x20000104
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
        __asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
    }
 8005140:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005142:	f7fe fe09 	bl	8003d58 <xTaskIncrementTick>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <SysTick_Handler+0x40>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f383 8811 	msr	BASEPRI, r3
    }
 800515e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <vPortSetupTimerInterrupt+0x34>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <vPortSetupTimerInterrupt+0x38>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <vPortSetupTimerInterrupt+0x3c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <vPortSetupTimerInterrupt+0x40>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <vPortSetupTimerInterrupt+0x44>)
 800518a:	3b01      	subs	r3, #1
 800518c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800518e:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <vPortSetupTimerInterrupt+0x34>)
 8005190:	2207      	movs	r2, #7
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	e000e010 	.word	0xe000e010
 80051a4:	e000e018 	.word	0xe000e018
 80051a8:	20000000 	.word	0x20000000
 80051ac:	10624dd3 	.word	0x10624dd3
 80051b0:	e000e014 	.word	0xe000e014

080051b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80051b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051c4 <vPortEnableVFP+0x10>
 80051b8:	6801      	ldr	r1, [r0, #0]
 80051ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051be:	6001      	str	r1, [r0, #0]
 80051c0:	4770      	bx	lr
 80051c2:	0000      	.short	0x0000
 80051c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop

080051cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80051d2:	f3ef 8305 	mrs	r3, IPSR
 80051d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d914      	bls.n	8005208 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <vPortValidateInterruptPriority+0x70>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <vPortValidateInterruptPriority+0x74>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	7afa      	ldrb	r2, [r7, #11]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d20a      	bcs.n	8005208 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	607b      	str	r3, [r7, #4]
    }
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <vPortValidateInterruptPriority+0x78>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <vPortValidateInterruptPriority+0x7c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d90a      	bls.n	800522e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	603b      	str	r3, [r7, #0]
    }
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <vPortValidateInterruptPriority+0x60>
    }
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000e3f0 	.word	0xe000e3f0
 8005240:	20000244 	.word	0x20000244
 8005244:	e000ed0c 	.word	0xe000ed0c
 8005248:	20000248 	.word	0x20000248

0800524c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005258:	f7fe fcc4 	bl	8003be4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800525c:	4b65      	ldr	r3, [pc, #404]	; (80053f4 <pvPortMalloc+0x1a8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005264:	f000 f934 	bl	80054d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005268:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <pvPortMalloc+0x1ac>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 80a7 	bne.w	80053c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02d      	beq.n	80052d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800527c:	2208      	movs	r2, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d227      	bcs.n	80052d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005288:	2208      	movs	r2, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d021      	beq.n	80052de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	3308      	adds	r3, #8
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d214      	bcs.n	80052d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	3308      	adds	r3, #8
 80052b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d010      	beq.n	80052de <pvPortMalloc+0x92>
        __asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	617b      	str	r3, [r7, #20]
    }
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052d6:	e002      	b.n	80052de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e000      	b.n	80052e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d06e      	beq.n	80053c4 <pvPortMalloc+0x178>
 80052e6:	4b45      	ldr	r3, [pc, #276]	; (80053fc <pvPortMalloc+0x1b0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d869      	bhi.n	80053c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80052f0:	4b43      	ldr	r3, [pc, #268]	; (8005400 <pvPortMalloc+0x1b4>)
 80052f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80052f4:	4b42      	ldr	r3, [pc, #264]	; (8005400 <pvPortMalloc+0x1b4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fa:	e004      	b.n	8005306 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <pvPortMalloc+0xcc>
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005318:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <pvPortMalloc+0x1a8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531e:	429a      	cmp	r2, r3
 8005320:	d050      	beq.n	80053c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2208      	movs	r2, #8
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	2308      	movs	r3, #8
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	429a      	cmp	r2, r3
 8005342:	d91f      	bls.n	8005384 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <pvPortMalloc+0x120>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	613b      	str	r3, [r7, #16]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f000 f908 	bl	8005594 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <pvPortMalloc+0x1b0>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <pvPortMalloc+0x1b0>)
 8005390:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005392:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <pvPortMalloc+0x1b0>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <pvPortMalloc+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d203      	bcs.n	80053a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800539e:	4b17      	ldr	r3, [pc, #92]	; (80053fc <pvPortMalloc+0x1b0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <pvPortMalloc+0x1b8>)
 80053a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <pvPortMalloc+0x1ac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <pvPortMalloc+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	4a11      	ldr	r2, [pc, #68]	; (8005408 <pvPortMalloc+0x1bc>)
 80053c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80053c4:	f7fe fc1c 	bl	8003c00 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <pvPortMalloc+0x19c>
        __asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
    }
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80053e8:	69fb      	ldr	r3, [r7, #28]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3728      	adds	r7, #40	; 0x28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20019254 	.word	0x20019254
 80053f8:	20019268 	.word	0x20019268
 80053fc:	20019258 	.word	0x20019258
 8005400:	2001924c 	.word	0x2001924c
 8005404:	2001925c 	.word	0x2001925c
 8005408:	20019260 	.word	0x20019260

0800540c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04d      	beq.n	80054ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800541e:	2308      	movs	r3, #8
 8005420:	425b      	negs	r3, r3
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <vPortFree+0xb8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <vPortFree+0x44>
        __asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60fb      	str	r3, [r7, #12]
    }
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <vPortFree+0x62>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60bb      	str	r3, [r7, #8]
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <vPortFree+0xb8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01e      	beq.n	80054ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11a      	bne.n	80054ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <vPortFree+0xb8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005494:	f7fe fba6 	bl	8003be4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <vPortFree+0xbc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <vPortFree+0xbc>)
 80054a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f000 f874 	bl	8005594 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80054ac:	4b07      	ldr	r3, [pc, #28]	; (80054cc <vPortFree+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	4a06      	ldr	r2, [pc, #24]	; (80054cc <vPortFree+0xc0>)
 80054b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80054b6:	f7fe fba3 	bl	8003c00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80054ba:	bf00      	nop
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20019268 	.word	0x20019268
 80054c8:	20019258 	.word	0x20019258
 80054cc:	20019264 	.word	0x20019264

080054d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80054da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80054dc:	4b27      	ldr	r3, [pc, #156]	; (800557c <prvHeapInit+0xac>)
 80054de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3307      	adds	r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	4a1f      	ldr	r2, [pc, #124]	; (800557c <prvHeapInit+0xac>)
 8005500:	4413      	add	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <prvHeapInit+0xb0>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <prvHeapInit+0xb0>)
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800551c:	2208      	movs	r2, #8
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <prvHeapInit+0xb4>)
 8005530:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <prvHeapInit+0xb4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <prvHeapInit+0xb4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <prvHeapInit+0xb4>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <prvHeapInit+0xb8>)
 800555e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a09      	ldr	r2, [pc, #36]	; (800558c <prvHeapInit+0xbc>)
 8005566:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <prvHeapInit+0xc0>)
 800556a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800556e:	601a      	str	r2, [r3, #0]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	2000024c 	.word	0x2000024c
 8005580:	2001924c 	.word	0x2001924c
 8005584:	20019254 	.word	0x20019254
 8005588:	2001925c 	.word	0x2001925c
 800558c:	20019258 	.word	0x20019258
 8005590:	20019268 	.word	0x20019268

08005594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800559c:	4b28      	ldr	r3, [pc, #160]	; (8005640 <prvInsertBlockIntoFreeList+0xac>)
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e002      	b.n	80055a8 <prvInsertBlockIntoFreeList+0x14>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d8f7      	bhi.n	80055a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d108      	bne.n	80055d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d118      	bne.n	800561c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <prvInsertBlockIntoFreeList+0xb0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d00d      	beq.n	8005612 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e008      	b.n	8005624 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <prvInsertBlockIntoFreeList+0xb0>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e003      	b.n	8005624 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d002      	beq.n	8005632 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2001924c 	.word	0x2001924c
 8005644:	20019254 	.word	0x20019254

08005648 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <USART2_IRQHandler+0x80>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d011      	beq.n	8005682 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <USART2_IRQHandler+0x84>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 030b 	and.w	r3, r3, #11
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <USART2_IRQHandler+0x88>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <USART2_IRQHandler+0x88>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	79fa      	ldrb	r2, [r7, #7]
 800567e:	4610      	mov	r0, r2
 8005680:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <USART2_IRQHandler+0x8c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <USART2_IRQHandler+0x8c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1dfa      	adds	r2, r7, #7
 800569a:	4610      	mov	r0, r2
 800569c:	4798      	blx	r3
 800569e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <USART2_IRQHandler+0x90>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <USART2_IRQHandler+0x90>)
 80056ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e006      	b.n	80056c2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <USART2_IRQHandler+0x80>)
 80056b6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80056b8:	79fa      	ldrb	r2, [r7, #7]
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <USART2_IRQHandler+0x84>)
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e000      	b.n	80056c2 <USART2_IRQHandler+0x7a>
      return;
 80056c0:	bf00      	nop
    }
  }
}
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004404 	.word	0x40004404
 80056d0:	2001926c 	.word	0x2001926c
 80056d4:	20019270 	.word	0x20019270
 80056d8:	4000440c 	.word	0x4000440c

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4d0d      	ldr	r5, [pc, #52]	; (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	; (8005718 <__libc_init_array+0x3c>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2600      	movs	r6, #0
 80056e8:	42a6      	cmp	r6, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4d0b      	ldr	r5, [pc, #44]	; (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	; (8005720 <__libc_init_array+0x44>)
 80056f0:	f000 f82e 	bl	8005750 <_init>
 80056f4:	1b64      	subs	r4, r4, r5
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2600      	movs	r6, #0
 80056fa:	42a6      	cmp	r6, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f855 3b04 	ldr.w	r3, [r5], #4
 8005704:	4798      	blx	r3
 8005706:	3601      	adds	r6, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f855 3b04 	ldr.w	r3, [r5], #4
 800570e:	4798      	blx	r3
 8005710:	3601      	adds	r6, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	080057fc 	.word	0x080057fc
 8005718:	080057fc 	.word	0x080057fc
 800571c:	080057fc 	.word	0x080057fc
 8005720:	08005800 	.word	0x08005800

08005724 <memcpy>:
 8005724:	440a      	add	r2, r1
 8005726:	4291      	cmp	r1, r2
 8005728:	f100 33ff 	add.w	r3, r0, #4294967295
 800572c:	d100      	bne.n	8005730 <memcpy+0xc>
 800572e:	4770      	bx	lr
 8005730:	b510      	push	{r4, lr}
 8005732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800573a:	4291      	cmp	r1, r2
 800573c:	d1f9      	bne.n	8005732 <memcpy+0xe>
 800573e:	bd10      	pop	{r4, pc}

08005740 <memset>:
 8005740:	4402      	add	r2, r0
 8005742:	4603      	mov	r3, r0
 8005744:	4293      	cmp	r3, r2
 8005746:	d100      	bne.n	800574a <memset+0xa>
 8005748:	4770      	bx	lr
 800574a:	f803 1b01 	strb.w	r1, [r3], #1
 800574e:	e7f9      	b.n	8005744 <memset+0x4>

08005750 <_init>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr

0800575c <_fini>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr
