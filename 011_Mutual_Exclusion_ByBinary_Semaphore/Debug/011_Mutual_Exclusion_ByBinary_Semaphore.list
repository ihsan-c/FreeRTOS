
011_Mutual_Exclusion_ByBinary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b48  08005b48  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001933c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200193b4  200193b4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133dd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c81  00000000  00000000  00033485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00036108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001030  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023450  00000000  00000000  00038280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144ff  00000000  00000000  0005b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7418  00000000  00000000  0006fbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146fe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  00147038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a9c 	.word	0x08005a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005a9c 	.word	0x08005a9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc11 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f83d 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8cf 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8a3 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  vSemaphoreCreateBinary(handle_semaphore);
 800059a:	2203      	movs	r2, #3
 800059c:	2100      	movs	r1, #0
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 fb36 	bl	8002c10 <xQueueGenericCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0x74>)
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <main+0x74>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d006      	beq.n	80005c0 <main+0x3c>
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <main+0x74>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 fbaa 	bl	8002d14 <xQueueGenericSend>

  status=xTaskCreate(task1, "task1", 500, NULL, 2, NULL);
 80005c0:	2300      	movs	r3, #0
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ce:	490b      	ldr	r1, [pc, #44]	; (80005fc <main+0x78>)
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <main+0x7c>)
 80005d2:	f002 ff95 	bl	8003500 <xTaskCreate>
 80005d6:	6078      	str	r0, [r7, #4]

  status=xTaskCreate(task2, "task2", 500, NULL, 2, NULL);
 80005d8:	2300      	movs	r3, #0
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2302      	movs	r3, #2
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e6:	4907      	ldr	r1, [pc, #28]	; (8000604 <main+0x80>)
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0x84>)
 80005ea:	f002 ff89 	bl	8003500 <xTaskCreate>
 80005ee:	6078      	str	r0, [r7, #4]

  vTaskStartScheduler();
 80005f0:	f003 f900 	bl	80037f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x70>
 80005f6:	bf00      	nop
 80005f8:	20000094 	.word	0x20000094
 80005fc:	08005ab4 	.word	0x08005ab4
 8000600:	080009f1 	.word	0x080009f1
 8000604:	08005abc 	.word	0x08005abc
 8000608:	08000a19 	.word	0x08000a19

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fdd6 	bl	80051cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000684:	2304      	movs	r3, #4
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe67 	bl	8001364 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 fa04 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f8c8 	bl	8001854 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f9ed 	bl	8000aa8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fd9c 	bl	8002254 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f9c1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000098 	.word	0x20000098
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4aa1      	ldr	r2, [pc, #644]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a9a      	ldr	r2, [pc, #616]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b98      	ldr	r3, [pc, #608]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a93      	ldr	r2, [pc, #588]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a8c      	ldr	r2, [pc, #560]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a85      	ldr	r2, [pc, #532]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a7e      	ldr	r2, [pc, #504]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4879      	ldr	r0, [pc, #484]	; (80009dc <MX_GPIO_Init+0x2a8>)
 80007f8:	f000 fd9a 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	4877      	ldr	r0, [pc, #476]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000802:	f000 fd95 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000806:	2200      	movs	r2, #0
 8000808:	f24f 0110 	movw	r1, #61456	; 0xf010
 800080c:	4875      	ldr	r0, [pc, #468]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 800080e:	f000 fd8f 	bl	8001330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	486c      	ldr	r0, [pc, #432]	; (80009dc <MX_GPIO_Init+0x2a8>)
 800082a:	f000 fbe5 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4866      	ldr	r0, [pc, #408]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fbd7 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	485e      	ldr	r0, [pc, #376]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fbc7 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	485a      	ldr	r0, [pc, #360]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000880:	f000 fbba 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000884:	2310      	movs	r3, #16
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000894:	2306      	movs	r3, #6
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4852      	ldr	r0, [pc, #328]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 80008a0:	f000 fbaa 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a4:	23e0      	movs	r3, #224	; 0xe0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b4:	2305      	movs	r3, #5
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb9a 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c4:	2304      	movs	r3, #4
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80008d8:	f000 fb8e 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80008fa:	f000 fb7d 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000902:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4833      	ldr	r0, [pc, #204]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 8000918:	f000 fb6e 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800091c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092e:	2306      	movs	r3, #6
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 800093a:	f000 fb5d 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000954:	f000 fb50 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096a:	230a      	movs	r3, #10
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000976:	f000 fb3f 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 800098e:	f000 fb33 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000992:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000998:	2312      	movs	r3, #18
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a4:	2304      	movs	r3, #4
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80009b0:	f000 fb22 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0x2a8>)
 80009ca:	f000 fb15 	bl	8000ff8 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400

080009f0 <task1>:

/* USER CODE BEGIN 4 */

void task1(void*param)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

   while(1)
   {
	 //  xSemaphoreTake(handle_semaphore,portMAX_DELAY);
		sprintf(msg,"Task1 \r\n");
 80009f8:	4905      	ldr	r1, [pc, #20]	; (8000a10 <task1+0x20>)
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <task1+0x24>)
 80009fc:	f004 fbee 	bl	80051dc <siprintf>
		printmsg(msg);
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <task1+0x24>)
 8000a02:	f000 f81d 	bl	8000a40 <printmsg>
	//   xSemaphoreGive(handle_semaphore);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a06:	200a      	movs	r0, #10
 8000a08:	f002 fec0 	bl	800378c <vTaskDelay>
		sprintf(msg,"Task1 \r\n");
 8000a0c:	e7f4      	b.n	80009f8 <task1+0x8>
 8000a0e:	bf00      	nop
 8000a10:	08005ac4 	.word	0x08005ac4
 8000a14:	200000dc 	.word	0x200000dc

08000a18 <task2>:
   }
}


void task2(void*param)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

    /* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
    {
	   	//xSemaphoreTake(handle_semaphore,portMAX_DELAY);
		  sprintf(msg,"Task2 \r\n");
 8000a20:	4905      	ldr	r1, [pc, #20]	; (8000a38 <task2+0x20>)
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <task2+0x24>)
 8000a24:	f004 fbda 	bl	80051dc <siprintf>
		  printmsg(msg);
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <task2+0x24>)
 8000a2a:	f000 f809 	bl	8000a40 <printmsg>
		//xSemaphoreGive(handle_semaphore);
		  vTaskDelay(pdMS_TO_TICKS(10));
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f002 feac 	bl	800378c <vTaskDelay>
		  sprintf(msg,"Task2 \r\n");
 8000a34:	e7f4      	b.n	8000a20 <task2+0x8>
 8000a36:	bf00      	nop
 8000a38:	08005ad0 	.word	0x08005ad0
 8000a3c:	200000dc 	.word	0x200000dc

08000a40 <printmsg>:
    }
}

void printmsg(char *msg)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    // Assuming USART2 is already initialized using HAL

    // Send each character in the message
    for(uint32_t i = 0; i < strlen(msg); i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e00b      	b.n	8000a66 <printmsg+0x26>
    {
        // Transmit each character
        HAL_UART_Transmit(&huart2, (uint8_t *)&msg[i], 1, HAL_MAX_DELAY);
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	18d1      	adds	r1, r2, r3
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <printmsg+0x40>)
 8000a5c:	f001 fc47 	bl	80022ee <HAL_UART_Transmit>
    for(uint32_t i = 0; i < strlen(msg); i++)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fbb2 	bl	80001d0 <strlen>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d3ec      	bcc.n	8000a4e <printmsg+0xe>
    }

    // Ensure transmission is complete
    // HAL_UART_Transmit blocks until transmission is complete
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000098 	.word	0x20000098

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 f9ad 	bl	8000df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b7a:	f000 fa3d 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_InitTick+0xe4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_InitTick+0xe4>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_InitTick+0xe4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc0:	f107 0210 	add.w	r2, r7, #16
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f862 	bl	8001c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bda:	f001 f833 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000bde:	6378      	str	r0, [r7, #52]	; 0x34
 8000be0:	e004      	b.n	8000bec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000be2:	f001 f82f 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000be6:	4603      	mov	r3, r0
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_InitTick+0xe8>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0c9b      	lsrs	r3, r3, #18
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_InitTick+0xec>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <HAL_InitTick+0xf0>)
 8000bfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_InitTick+0xec>)
 8000c02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_InitTick+0xec>)
 8000c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_InitTick+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <HAL_InitTick+0xec>)
 8000c22:	f001 f869 	bl	8001cf8 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d11b      	bne.n	8000c6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <HAL_InitTick+0xec>)
 8000c36:	f001 f8b9 	bl	8001dac <HAL_TIM_Base_Start_IT>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c48:	2036      	movs	r0, #54	; 0x36
 8000c4a:	f000 f9c7 	bl	8000fdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d808      	bhi.n	8000c66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2036      	movs	r0, #54	; 0x36
 8000c5a:	f000 f9a3 	bl	8000fa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0xf4>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e002      	b.n	8000c6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	200001a4 	.word	0x200001a4
 8000c84:	40001000 	.word	0x40001000
 8000c88:	20000004 	.word	0x20000004

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM6_DAC_IRQHandler+0x10>)
 8000cbe:	f001 f8e5 	bl	8001e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001a4 	.word	0x200001a4

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f004 fa2e 	bl	800515c <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200001ec 	.word	0x200001ec
 8000d34:	200193b8 	.word	0x200193b8

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f004 f9ed 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fbf9 	bl	8000584 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000da0:	08005b50 	.word	0x08005b50
  ldr r2, =_sbss
 8000da4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000da8:	200193b4 	.word	0x200193b4

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f8d8 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f7ff fed8 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe66 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	200001f0 	.word	0x200001f0

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200001f0 	.word	0x200001f0

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb6:	f7ff ff61 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff ffb1 	bl	8000f28 <NVIC_EncodePriority>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff80 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff54 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e16b      	b.n	80012ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 815a 	bne.w	80012e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	2b02      	cmp	r3, #2
 8001048:	d130      	bne.n	80010ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 0201 	and.w	r2, r3, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d017      	beq.n	80010e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80b4 	beq.w	80012e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a5f      	ldr	r2, [pc, #380]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_GPIO_Init+0x310>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_GPIO_Init+0x314>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x226>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x318>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x222>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <HAL_GPIO_Init+0x31c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x21e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_GPIO_Init+0x320>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_GPIO_Init+0x324>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <HAL_GPIO_Init+0x328>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_GPIO_Init+0x32c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x20a>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001202:	2308      	movs	r3, #8
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_GPIO_Init+0x334>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_GPIO_Init+0x334>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_GPIO_Init+0x334>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_GPIO_Init+0x334>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_GPIO_Init+0x334>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_GPIO_Init+0x334>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae90 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e267      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d075      	beq.n	800146e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b04      	cmp	r3, #4
 800138c:	d00c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d112      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139a:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d05b      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d157      	bne.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e242      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x74>
 80013ca:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a75      	ldr	r2, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013fc:	4b69      	ldr	r3, [pc, #420]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fcfe 	bl	8000e1c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fcfa 	bl	8000e1c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e207      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xc0>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fcea 	bl	8000e1c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fce6 	bl	8000e1c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1f3      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1c7      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x244>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fc9f 	bl	8000e1c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc9b 	bl	8000e1c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1a8      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4925      	ldr	r1, [pc, #148]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_OscConfig+0x244>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fc7e 	bl	8000e1c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff fc7a 	bl	8000e1c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e187      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d036      	beq.n	80015bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d016      	beq.n	8001584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x248>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fc5e 	bl	8000e1c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fc5a 	bl	8000e1c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e167      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x200>
 8001582:	e01b      	b.n	80015bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_OscConfig+0x248>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fc47 	bl	8000e1c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	e00e      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fc43 	bl	8000e1c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d907      	bls.n	80015b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e150      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470000 	.word	0x42470000
 80015ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ea      	bne.n	8001592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8097 	beq.w	80016f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b7d      	ldr	r3, [pc, #500]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a7c      	ldr	r2, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b7a      	ldr	r3, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b77      	ldr	r3, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001606:	4b74      	ldr	r3, [pc, #464]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a73      	ldr	r2, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff fc03 	bl	8000e1c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fbff 	bl	8000e1c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e10c      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x2ea>
 8001640:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x324>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x30c>
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0x324>
 8001670:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 0304 	bic.w	r3, r3, #4
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fbc4 	bl	8000e1c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fbc0 	bl	8000e1c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0cb      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ee      	beq.n	8001698 <HAL_RCC_OscConfig+0x334>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fbae 	bl	8000e1c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff fbaa 	bl	8000e1c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e0b5      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016da:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a1 	beq.w	8001844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d05c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d141      	bne.n	800179a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fb7e 	bl	8000e1c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fb7a 	bl	8000e1c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e087      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb53 	bl	8000e1c <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb4f 	bl	8000e1c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e05c      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x416>
 8001798:	e054      	b.n	8001844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb3c 	bl	8000e1c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fb38 	bl	8000e1c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e045      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
 80017c6:	e03d      	b.n	8001844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e038      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x4ec>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d028      	beq.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d121      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	4293      	cmp	r3, r2
 800181a:	d111      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	3b01      	subs	r3, #1
 800182a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0cc      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d90c      	bls.n	8001890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0b8      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	494d      	ldr	r1, [pc, #308]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d044      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d119      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d003      	beq.n	8001912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190e:	2b03      	cmp	r3, #3
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e067      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4934      	ldr	r1, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff fa6a 	bl	8000e1c <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff fa66 	bl	8000e1c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e04f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d20c      	bcs.n	800199c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e032      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019da:	f000 f821 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	490a      	ldr	r1, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f8ca 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08005af4 	.word	0x08005af4
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b094      	sub	sp, #80	; 0x50
 8001a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a30:	2300      	movs	r3, #0
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a38:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d00d      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x40>
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	f200 80e1 	bhi.w	8001c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a52:	e0db      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a58:	e0db      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5a:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5e:	e0d8      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a76:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	099b      	lsrs	r3, r3, #6
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a92:	4622      	mov	r2, r4
 8001a94:	462b      	mov	r3, r5
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	0159      	lsls	r1, r3, #5
 8001aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa4:	0150      	lsls	r0, r2, #5
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1a51      	subs	r1, r2, r1
 8001aae:	6139      	str	r1, [r7, #16]
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac4:	4659      	mov	r1, fp
 8001ac6:	018b      	lsls	r3, r1, #6
 8001ac8:	4651      	mov	r1, sl
 8001aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ace:	4651      	mov	r1, sl
 8001ad0:	018a      	lsls	r2, r1, #6
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ad8:	4659      	mov	r1, fp
 8001ada:	eb63 0901 	sbc.w	r9, r3, r1
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af2:	4690      	mov	r8, r2
 8001af4:	4699      	mov	r9, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	eb18 0303 	adds.w	r3, r8, r3
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	462b      	mov	r3, r5
 8001b00:	eb49 0303 	adc.w	r3, r9, r3
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b12:	4629      	mov	r1, r5
 8001b14:	024b      	lsls	r3, r1, #9
 8001b16:	4621      	mov	r1, r4
 8001b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	024a      	lsls	r2, r1, #9
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b26:	2200      	movs	r2, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b30:	f7fe fba6 	bl	8000280 <__aeabi_uldivmod>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	e058      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	2200      	movs	r2, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	4611      	mov	r1, r2
 8001b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b58:	4642      	mov	r2, r8
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	0159      	lsls	r1, r3, #5
 8001b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6a:	0150      	lsls	r0, r2, #5
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4641      	mov	r1, r8
 8001b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b76:	4649      	mov	r1, r9
 8001b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b90:	ebb2 040a 	subs.w	r4, r2, sl
 8001b94:	eb63 050b 	sbc.w	r5, r3, fp
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	00eb      	lsls	r3, r5, #3
 8001ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba6:	00e2      	lsls	r2, r4, #3
 8001ba8:	4614      	mov	r4, r2
 8001baa:	461d      	mov	r5, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	18e3      	adds	r3, r4, r3
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	eb45 0303 	adc.w	r3, r5, r3
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	028b      	lsls	r3, r1, #10
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	028a      	lsls	r2, r1, #10
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	61fa      	str	r2, [r7, #28]
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fb4c 	bl	8000280 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3750      	adds	r7, #80	; 0x50
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08005b04 	.word	0x08005b04

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08005b04 	.word	0x08005b04

08001c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_RCC_GetClockConfig+0x60>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0207 	and.w	r2, r3, #7
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e041      	b.n	8001d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f839 	bl	8001d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 f9d8 	bl	80020ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e04e      	b.n	8001e62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d022      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d01d      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d018      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d111      	bne.n	8001e50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d010      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	e007      	b.n	8001e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40010400 	.word	0x40010400
 8001e84:	40014000 	.word	0x40014000
 8001e88:	40001800 	.word	0x40001800

08001e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0202 	mvn.w	r2, #2
 8001eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ee 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8e0 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8f1 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d122      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d11b      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0204 	mvn.w	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8b6 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8c7 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0208 	mvn.w	r2, #8
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f89a 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f88c 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f89d 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0210 	mvn.w	r2, #16
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f870 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f862 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f873 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fd3a 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f902 	bl	8002240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	2b40      	cmp	r3, #64	; 0x40
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f838 	bl	80020d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b20      	cmp	r3, #32
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b20      	cmp	r3, #32
 8002082:	d107      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8cc 	bl	800222c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <TIM_Base_SetConfig+0x114>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <TIM_Base_SetConfig+0x118>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <TIM_Base_SetConfig+0x11c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3b      	ldr	r2, [pc, #236]	; (800220c <TIM_Base_SetConfig+0x120>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <TIM_Base_SetConfig+0x124>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <TIM_Base_SetConfig+0x114>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d027      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2c      	ldr	r2, [pc, #176]	; (8002204 <TIM_Base_SetConfig+0x118>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d023      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <TIM_Base_SetConfig+0x11c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <TIM_Base_SetConfig+0x120>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a29      	ldr	r2, [pc, #164]	; (8002210 <TIM_Base_SetConfig+0x124>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d017      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <TIM_Base_SetConfig+0x128>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <TIM_Base_SetConfig+0x12c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <TIM_Base_SetConfig+0x130>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a25      	ldr	r2, [pc, #148]	; (8002220 <TIM_Base_SetConfig+0x134>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <TIM_Base_SetConfig+0x138>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <TIM_Base_SetConfig+0x13c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <TIM_Base_SetConfig+0x114>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0xf8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <TIM_Base_SetConfig+0x124>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	615a      	str	r2, [r3, #20]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40010400 	.word	0x40010400
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800
 8002220:	40001800 	.word	0x40001800
 8002224:	40001c00 	.word	0x40001c00
 8002228:	40002000 	.word	0x40002000

0800222c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e03f      	b.n	80022e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fc42 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2224      	movs	r2, #36	; 0x24
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f929 	bl	80024f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b08a      	sub	sp, #40	; 0x28
 80022f2:	af02      	add	r7, sp, #8
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	d17c      	bne.n	8002408 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_UART_Transmit+0x2c>
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e075      	b.n	800240a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_UART_Transmit+0x3e>
 8002328:	2302      	movs	r3, #2
 800232a:	e06e      	b.n	800240a <HAL_UART_Transmit+0x11c>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	; 0x21
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002342:	f7fe fd6b 	bl	8000e1c <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Transmit+0x82>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002380:	e02a      	b.n	80023d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f840 	bl	8002412 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e036      	b.n	800240a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e007      	b.n	80023ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cf      	bne.n	8002382 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f810 	bl	8002412 <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e006      	b.n	800240a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b090      	sub	sp, #64	; 0x40
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002422:	e050      	b.n	80024c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d04c      	beq.n	80024c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800242c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x30>
 8002432:	f7fe fcf3 	bl	8000e1c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800243e:	429a      	cmp	r2, r3
 8002440:	d241      	bcs.n	80024c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002462:	637a      	str	r2, [r7, #52]	; 0x34
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e5      	bne.n	8002442 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3314      	adds	r3, #20
 800247c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	e853 3f00 	ldrex	r3, [r3]
 8002484:	613b      	str	r3, [r7, #16]
   return(result);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3314      	adds	r3, #20
 8002494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002496:	623a      	str	r2, [r7, #32]
 8002498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249a:	69f9      	ldr	r1, [r7, #28]
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	e841 2300 	strex	r3, r2, [r1]
 80024a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1e5      	bne.n	8002476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d09f      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3740      	adds	r7, #64	; 0x40
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f4:	b0c0      	sub	sp, #256	; 0x100
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	ea40 0301 	orr.w	r3, r0, r1
 8002518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	431a      	orrs	r2, r3
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002548:	f021 010c 	bic.w	r1, r1, #12
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002556:	430b      	orrs	r3, r1
 8002558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256a:	6999      	ldr	r1, [r3, #24]
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	ea40 0301 	orr.w	r3, r0, r1
 8002576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b8f      	ldr	r3, [pc, #572]	; (80027bc <UART_SetConfig+0x2cc>)
 8002580:	429a      	cmp	r2, r3
 8002582:	d005      	beq.n	8002590 <UART_SetConfig+0xa0>
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <UART_SetConfig+0x2d0>)
 800258c:	429a      	cmp	r2, r3
 800258e:	d104      	bne.n	800259a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002590:	f7ff fb6c 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8002594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002598:	e003      	b.n	80025a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800259a:	f7ff fb53 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800259e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	f040 810c 	bne.w	80027c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b4:	2200      	movs	r2, #0
 80025b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025c2:	4622      	mov	r2, r4
 80025c4:	462b      	mov	r3, r5
 80025c6:	1891      	adds	r1, r2, r2
 80025c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80025ca:	415b      	adcs	r3, r3
 80025cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025d2:	4621      	mov	r1, r4
 80025d4:	eb12 0801 	adds.w	r8, r2, r1
 80025d8:	4629      	mov	r1, r5
 80025da:	eb43 0901 	adc.w	r9, r3, r1
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025f2:	4690      	mov	r8, r2
 80025f4:	4699      	mov	r9, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	eb18 0303 	adds.w	r3, r8, r3
 80025fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002600:	462b      	mov	r3, r5
 8002602:	eb49 0303 	adc.w	r3, r9, r3
 8002606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800261a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800261e:	460b      	mov	r3, r1
 8002620:	18db      	adds	r3, r3, r3
 8002622:	653b      	str	r3, [r7, #80]	; 0x50
 8002624:	4613      	mov	r3, r2
 8002626:	eb42 0303 	adc.w	r3, r2, r3
 800262a:	657b      	str	r3, [r7, #84]	; 0x54
 800262c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002634:	f7fd fe24 	bl	8000280 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <UART_SetConfig+0x2d4>)
 800263e:	fba3 2302 	umull	r2, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	011c      	lsls	r4, r3, #4
 8002646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	1891      	adds	r1, r2, r2
 800265e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002660:	415b      	adcs	r3, r3
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002668:	4641      	mov	r1, r8
 800266a:	eb12 0a01 	adds.w	sl, r2, r1
 800266e:	4649      	mov	r1, r9
 8002670:	eb43 0b01 	adc.w	fp, r3, r1
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002688:	4692      	mov	sl, r2
 800268a:	469b      	mov	fp, r3
 800268c:	4643      	mov	r3, r8
 800268e:	eb1a 0303 	adds.w	r3, sl, r3
 8002692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002696:	464b      	mov	r3, r9
 8002698:	eb4b 0303 	adc.w	r3, fp, r3
 800269c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026b4:	460b      	mov	r3, r1
 80026b6:	18db      	adds	r3, r3, r3
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ba:	4613      	mov	r3, r2
 80026bc:	eb42 0303 	adc.w	r3, r2, r3
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
 80026c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026ca:	f7fd fdd9 	bl	8000280 <__aeabi_uldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <UART_SetConfig+0x2d4>)
 80026d6:	fba3 2301 	umull	r2, r3, r3, r1
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2264      	movs	r2, #100	; 0x64
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	1acb      	subs	r3, r1, r3
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <UART_SetConfig+0x2d4>)
 80026ec:	fba3 2302 	umull	r2, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026f8:	441c      	add	r4, r3
 80026fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800270c:	4642      	mov	r2, r8
 800270e:	464b      	mov	r3, r9
 8002710:	1891      	adds	r1, r2, r2
 8002712:	63b9      	str	r1, [r7, #56]	; 0x38
 8002714:	415b      	adcs	r3, r3
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800271c:	4641      	mov	r1, r8
 800271e:	1851      	adds	r1, r2, r1
 8002720:	6339      	str	r1, [r7, #48]	; 0x30
 8002722:	4649      	mov	r1, r9
 8002724:	414b      	adcs	r3, r1
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002734:	4659      	mov	r1, fp
 8002736:	00cb      	lsls	r3, r1, #3
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800273e:	4651      	mov	r1, sl
 8002740:	00ca      	lsls	r2, r1, #3
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	4603      	mov	r3, r0
 8002748:	4642      	mov	r2, r8
 800274a:	189b      	adds	r3, r3, r2
 800274c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002750:	464b      	mov	r3, r9
 8002752:	460a      	mov	r2, r1
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800276c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002770:	460b      	mov	r3, r1
 8002772:	18db      	adds	r3, r3, r3
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
 8002776:	4613      	mov	r3, r2
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002786:	f7fd fd7b 	bl	8000280 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <UART_SetConfig+0x2d4>)
 8002790:	fba3 1302 	umull	r1, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2164      	movs	r1, #100	; 0x64
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <UART_SetConfig+0x2d4>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f003 0207 	and.w	r2, r3, #7
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4422      	add	r2, r4
 80027b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027b8:	e105      	b.n	80029c6 <UART_SetConfig+0x4d6>
 80027ba:	bf00      	nop
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40011400 	.word	0x40011400
 80027c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027da:	4642      	mov	r2, r8
 80027dc:	464b      	mov	r3, r9
 80027de:	1891      	adds	r1, r2, r2
 80027e0:	6239      	str	r1, [r7, #32]
 80027e2:	415b      	adcs	r3, r3
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ea:	4641      	mov	r1, r8
 80027ec:	1854      	adds	r4, r2, r1
 80027ee:	4649      	mov	r1, r9
 80027f0:	eb43 0501 	adc.w	r5, r3, r1
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	00eb      	lsls	r3, r5, #3
 80027fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002802:	00e2      	lsls	r2, r4, #3
 8002804:	4614      	mov	r4, r2
 8002806:	461d      	mov	r5, r3
 8002808:	4643      	mov	r3, r8
 800280a:	18e3      	adds	r3, r4, r3
 800280c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002810:	464b      	mov	r3, r9
 8002812:	eb45 0303 	adc.w	r3, r5, r3
 8002816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002836:	4629      	mov	r1, r5
 8002838:	008b      	lsls	r3, r1, #2
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002840:	4621      	mov	r1, r4
 8002842:	008a      	lsls	r2, r1, #2
 8002844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002848:	f7fd fd1a 	bl	8000280 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4b60      	ldr	r3, [pc, #384]	; (80029d4 <UART_SetConfig+0x4e4>)
 8002852:	fba3 2302 	umull	r2, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	011c      	lsls	r4, r3, #4
 800285a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800286c:	4642      	mov	r2, r8
 800286e:	464b      	mov	r3, r9
 8002870:	1891      	adds	r1, r2, r2
 8002872:	61b9      	str	r1, [r7, #24]
 8002874:	415b      	adcs	r3, r3
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287c:	4641      	mov	r1, r8
 800287e:	1851      	adds	r1, r2, r1
 8002880:	6139      	str	r1, [r7, #16]
 8002882:	4649      	mov	r1, r9
 8002884:	414b      	adcs	r3, r1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002894:	4659      	mov	r1, fp
 8002896:	00cb      	lsls	r3, r1, #3
 8002898:	4651      	mov	r1, sl
 800289a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289e:	4651      	mov	r1, sl
 80028a0:	00ca      	lsls	r2, r1, #3
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	4642      	mov	r2, r8
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028b0:	464b      	mov	r3, r9
 80028b2:	460a      	mov	r2, r1
 80028b4:	eb42 0303 	adc.w	r3, r2, r3
 80028b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028d4:	4649      	mov	r1, r9
 80028d6:	008b      	lsls	r3, r1, #2
 80028d8:	4641      	mov	r1, r8
 80028da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028de:	4641      	mov	r1, r8
 80028e0:	008a      	lsls	r2, r1, #2
 80028e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028e6:	f7fd fccb 	bl	8000280 <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <UART_SetConfig+0x4e4>)
 80028f0:	fba3 1302 	umull	r1, r3, r3, r2
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	2164      	movs	r1, #100	; 0x64
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	3332      	adds	r3, #50	; 0x32
 8002902:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <UART_SetConfig+0x4e4>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290e:	441c      	add	r4, r3
 8002910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002914:	2200      	movs	r2, #0
 8002916:	673b      	str	r3, [r7, #112]	; 0x70
 8002918:	677a      	str	r2, [r7, #116]	; 0x74
 800291a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800291e:	4642      	mov	r2, r8
 8002920:	464b      	mov	r3, r9
 8002922:	1891      	adds	r1, r2, r2
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	415b      	adcs	r3, r3
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800292e:	4641      	mov	r1, r8
 8002930:	1851      	adds	r1, r2, r1
 8002932:	6039      	str	r1, [r7, #0]
 8002934:	4649      	mov	r1, r9
 8002936:	414b      	adcs	r3, r1
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002946:	4659      	mov	r1, fp
 8002948:	00cb      	lsls	r3, r1, #3
 800294a:	4651      	mov	r1, sl
 800294c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002950:	4651      	mov	r1, sl
 8002952:	00ca      	lsls	r2, r1, #3
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	4603      	mov	r3, r0
 800295a:	4642      	mov	r2, r8
 800295c:	189b      	adds	r3, r3, r2
 800295e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002960:	464b      	mov	r3, r9
 8002962:	460a      	mov	r2, r1
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	663b      	str	r3, [r7, #96]	; 0x60
 8002974:	667a      	str	r2, [r7, #100]	; 0x64
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002982:	4649      	mov	r1, r9
 8002984:	008b      	lsls	r3, r1, #2
 8002986:	4641      	mov	r1, r8
 8002988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800298c:	4641      	mov	r1, r8
 800298e:	008a      	lsls	r2, r1, #2
 8002990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002994:	f7fd fc74 	bl	8000280 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <UART_SetConfig+0x4e4>)
 800299e:	fba3 1302 	umull	r1, r3, r3, r2
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2164      	movs	r1, #100	; 0x64
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	3332      	adds	r3, #50	; 0x32
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <UART_SetConfig+0x4e4>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4422      	add	r2, r4
 80029c4:	609a      	str	r2, [r3, #8]
}
 80029c6:	bf00      	nop
 80029c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d2:	bf00      	nop
 80029d4:	51eb851f 	.word	0x51eb851f

080029d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 0208 	add.w	r2, r3, #8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 0208 	add.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d103      	bne.n	8002a9a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e00c      	b.n	8002ab4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e002      	b.n	8002aa8 <vListInsert+0x2e>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d2f6      	bcs.n	8002aa2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d103      	bne.n	8002b20 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002b6a:	f001 ff8d 	bl	8004a88 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	441a      	add	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d114      	bne.n	8002bea <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01a      	beq.n	8002bfe <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3310      	adds	r3, #16
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f881 	bl	8003cd4 <xTaskRemoveFromEventList>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <xQueueGenericReset+0xcc>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	e009      	b.n	8002bfe <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3310      	adds	r3, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fef2 	bl	80029d8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3324      	adds	r3, #36	; 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff feed 	bl	80029d8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002bfe:	f001 ff73 	bl	8004ae8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61bb      	str	r3, [r7, #24]
    }
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <xQueueGenericCreate+0x48>
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d101      	bne.n	8002c5c <xQueueGenericCreate+0x4c>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xQueueGenericCreate+0x4e>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <xQueueGenericCreate+0x68>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	617b      	str	r3, [r7, #20]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c7e:	d90a      	bls.n	8002c96 <xQueueGenericCreate+0x86>
        __asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	613b      	str	r3, [r7, #16]
    }
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3350      	adds	r3, #80	; 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 f816 	bl	8004ccc <pvPortMalloc>
 8002ca0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3350      	adds	r3, #80	; 0x50
 8002cb0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f805 	bl	8002cce <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
    }
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	69b8      	ldr	r0, [r7, #24]
 8002d00:	f7ff ff1e 	bl	8002b40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	; 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <xQueueGenericSend+0x32>
        __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <xQueueGenericSend+0x40>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xQueueGenericSend+0x44>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xQueueGenericSend+0x46>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xQueueGenericSend+0x60>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x6e>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x72>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x74>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGenericSend+0x8e>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
    }
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	f001 f933 	bl	800400c <xTaskGetSchedulerState>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueGenericSend+0x9e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueGenericSend+0xa2>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericSend+0xa4>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueGenericSend+0xbe>
        __asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61fb      	str	r3, [r7, #28]
    }
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dd2:	f001 fe59 	bl	8004a88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <xQueueGenericSend+0xd4>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d129      	bne.n	8002e3c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 fa19 	bl	8003224 <prvCopyDataToQueue>
 8002df2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ff67 	bl	8003cd4 <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	e00a      	b.n	8002e34 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e34:	f001 fe58 	bl	8004ae8 <vPortExitCritical>
                return pdPASS;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e063      	b.n	8002f04 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e42:	f001 fe51 	bl	8004ae8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e05c      	b.n	8002f04 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff9f 	bl	8003d98 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e5e:	f001 fe43 	bl	8004ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e62:	f000 fd19 	bl	8003898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e66:	f001 fe0f 	bl	8004a88 <vPortEnterCritical>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d103      	bne.n	8002e80 <xQueueGenericSend+0x16c>
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d103      	bne.n	8002e96 <xQueueGenericSend+0x182>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e96:	f001 fe27 	bl	8004ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e9a:	1d3a      	adds	r2, r7, #4
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 ff8e 	bl	8003dc4 <xTaskCheckForTimeOut>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d124      	bne.n	8002ef8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb0:	f000 fab0 	bl	8003414 <prvIsQueueFull>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d018      	beq.n	8002eec <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 feb6 	bl	8003c34 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fa3b 	bl	8003344 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002ece:	f000 fcf1 	bl	80038b4 <xTaskResumeAll>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af7c 	bne.w	8002dd2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <xQueueGenericSend+0x1f8>)
 8002edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	e772      	b.n	8002dd2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eee:	f000 fa29 	bl	8003344 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ef2:	f000 fcdf 	bl	80038b4 <xTaskResumeAll>
 8002ef6:	e76c      	b.n	8002dd2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa23 	bl	8003344 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002efe:	f000 fcd9 	bl	80038b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002f02:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3738      	adds	r7, #56	; 0x38
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b090      	sub	sp, #64	; 0x40
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <xQueueGenericSendFromISR+0x3c>
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericSendFromISR+0x40>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericSendFromISR+0x42>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSendFromISR+0x6a>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <xQueueGenericSendFromISR+0x6e>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueGenericSendFromISR+0x70>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	623b      	str	r3, [r7, #32]
    }
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f9a:	f001 fe57 	bl	8004c4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	61fa      	str	r2, [r7, #28]
 8002fb4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <xQueueGenericSendFromISR+0xbc>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d13e      	bne.n	800304a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe2:	f000 f91f 	bl	8003224 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002fe6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d112      	bne.n	8003016 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d025      	beq.n	8003044 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fe69 	bl	8003cd4 <xTaskRemoveFromEventList>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01d      	beq.n	8003044 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01a      	beq.n	8003044 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e016      	b.n	8003044 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003016:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800301a:	2b7f      	cmp	r3, #127	; 0x7f
 800301c:	d10a      	bne.n	8003034 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	617b      	str	r3, [r7, #20]
    }
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003034:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003038:	3301      	adds	r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	b25a      	sxtb	r2, r3
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003044:	2301      	movs	r3, #1
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003048:	e001      	b.n	800304e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800304a:	2300      	movs	r3, #0
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800304e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003050:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003058:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800305a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800305c:	4618      	mov	r0, r3
 800305e:	3740      	adds	r7, #64	; 0x40
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <xQueueReceive+0x30>
        __asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	623b      	str	r3, [r7, #32]
    }
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <xQueueReceive+0x3e>
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <xQueueReceive+0x42>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueReceive+0x44>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueReceive+0x5e>
        __asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61fb      	str	r3, [r7, #28]
    }
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c2:	f000 ffa3 	bl	800400c <xTaskGetSchedulerState>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <xQueueReceive+0x6e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueReceive+0x72>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueReceive+0x74>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xQueueReceive+0x8e>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61bb      	str	r3, [r7, #24]
    }
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80030f2:	f001 fcc9 	bl	8004a88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01f      	beq.n	8003142 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003106:	f000 f8f7 	bl	80032f8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	1e5a      	subs	r2, r3, #1
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00f      	beq.n	800313a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	3310      	adds	r3, #16
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fdd8 	bl	8003cd4 <xTaskRemoveFromEventList>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <xQueueReceive+0x1bc>)
 800312c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800313a:	f001 fcd5 	bl	8004ae8 <vPortExitCritical>
                return pdPASS;
 800313e:	2301      	movs	r3, #1
 8003140:	e069      	b.n	8003216 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003148:	f001 fcce 	bl	8004ae8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800314c:	2300      	movs	r3, #0
 800314e:	e062      	b.n	8003216 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003156:	f107 0310 	add.w	r3, r7, #16
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fe1c 	bl	8003d98 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003164:	f001 fcc0 	bl	8004ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003168:	f000 fb96 	bl	8003898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800316c:	f001 fc8c 	bl	8004a88 <vPortEnterCritical>
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003176:	b25b      	sxtb	r3, r3
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d103      	bne.n	8003186 <xQueueReceive+0x122>
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318c:	b25b      	sxtb	r3, r3
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d103      	bne.n	800319c <xQueueReceive+0x138>
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800319c:	f001 fca4 	bl	8004ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031a0:	1d3a      	adds	r2, r7, #4
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe0b 	bl	8003dc4 <xTaskCheckForTimeOut>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d123      	bne.n	80031fc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b6:	f000 f917 	bl	80033e8 <prvIsQueueEmpty>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	3324      	adds	r3, #36	; 0x24
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fd33 	bl	8003c34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80031ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d0:	f000 f8b8 	bl	8003344 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80031d4:	f000 fb6e 	bl	80038b4 <xTaskResumeAll>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d189      	bne.n	80030f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <xQueueReceive+0x1bc>)
 80031e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	e780      	b.n	80030f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80031f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f2:	f000 f8a7 	bl	8003344 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031f6:	f000 fb5d 	bl	80038b4 <xTaskResumeAll>
 80031fa:	e77a      	b.n	80030f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f000 f8a1 	bl	8003344 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003202:	f000 fb57 	bl	80038b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003208:	f000 f8ee 	bl	80033e8 <prvIsQueueEmpty>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f43f af6f 	beq.w	80030f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003214:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003216:	4618      	mov	r0, r3
 8003218:	3730      	adds	r7, #48	; 0x30
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d14d      	bne.n	80032e6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fefa 	bl	8004048 <xTaskPriorityDisinherit>
 8003254:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e043      	b.n	80032e6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d119      	bne.n	8003298 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6858      	ldr	r0, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	461a      	mov	r2, r3
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	f001 ff9e 	bl	80051b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	441a      	add	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d32b      	bcc.n	80032e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e026      	b.n	80032e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68d8      	ldr	r0, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	461a      	mov	r2, r3
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	f001 ff84 	bl	80051b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	425b      	negs	r3, r3
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d207      	bcs.n	80032d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	425b      	negs	r3, r3
 80032ce:	441a      	add	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d105      	bne.n	80032e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80032ee:	697b      	ldr	r3, [r7, #20]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d303      	bcc.n	800332c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f001 ff3a 	bl	80051b0 <memcpy>
    }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800334c:	f001 fb9c 	bl	8004a88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003356:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003358:	e011      	b.n	800337e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fcb4 	bl	8003cd4 <xTaskRemoveFromEventList>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003372:	f000 fd8d 	bl	8003e90 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	dce9      	bgt.n	800335a <prvUnlockQueue+0x16>
 8003386:	e000      	b.n	800338a <prvUnlockQueue+0x46>
                        break;
 8003388:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003392:	f001 fba9 	bl	8004ae8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003396:	f001 fb77 	bl	8004a88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a2:	e011      	b.n	80033c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3310      	adds	r3, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fc8f 	bl	8003cd4 <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80033bc:	f000 fd68 	bl	8003e90 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dce9      	bgt.n	80033a4 <prvUnlockQueue+0x60>
 80033d0:	e000      	b.n	80033d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80033d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80033dc:	f001 fb84 	bl	8004ae8 <vPortExitCritical>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033f0:	f001 fb4a 	bl	8004a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e001      	b.n	8003406 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003406:	f001 fb6f 	bl	8004ae8 <vPortExitCritical>

    return xReturn;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800341c:	f001 fb34 	bl	8004a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	429a      	cmp	r2, r3
 800342a:	d102      	bne.n	8003432 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e001      	b.n	8003436 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003436:	f001 fb57 	bl	8004ae8 <vPortExitCritical>

    return xReturn;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e014      	b.n	800347e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <vQueueAddToRegistry+0x50>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <vQueueAddToRegistry+0x50>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <vQueueAddToRegistry+0x50>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003476:	e006      	b.n	8003486 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3301      	adds	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b07      	cmp	r3, #7
 8003482:	d9e7      	bls.n	8003454 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	200001f4 	.word	0x200001f4

08003498 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80034a8:	f001 faee 	bl	8004a88 <vPortEnterCritical>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d103      	bne.n	80034c2 <vQueueWaitForMessageRestricted+0x2a>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d103      	bne.n	80034d8 <vQueueWaitForMessageRestricted+0x40>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d8:	f001 fb06 	bl	8004ae8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3324      	adds	r3, #36	; 0x24
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fbc5 	bl	8003c7c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff26 	bl	8003344 <prvUnlockQueue>
    }
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af04      	add	r7, sp, #16
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4618      	mov	r0, r3
 8003516:	f001 fbd9 	bl	8004ccc <pvPortMalloc>
 800351a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003522:	2058      	movs	r0, #88	; 0x58
 8003524:	f001 fbd2 	bl	8004ccc <pvPortMalloc>
 8003528:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
 8003536:	e005      	b.n	8003544 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f001 fca7 	bl	8004e8c <vPortFree>
 800353e:	e001      	b.n	8003544 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d013      	beq.n	8003572 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	2300      	movs	r3, #0
 800354e:	9303      	str	r3, [sp, #12]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f80e 	bl	8003582 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003566:	69f8      	ldr	r0, [r7, #28]
 8003568:	f000 f8a2 	bl	80036b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800356c:	2301      	movs	r3, #1
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e002      	b.n	8003578 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
 8003576:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003578:	69bb      	ldr	r3, [r7, #24]
    }
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	461a      	mov	r2, r3
 800359a:	21a5      	movs	r1, #165	; 0xa5
 800359c:	f001 fe16 	bl	80051cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035aa:	3b01      	subs	r3, #1
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f023 0307 	bic.w	r3, r3, #7
 80035b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <prvInitialiseNewTask+0x58>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	617b      	str	r3, [r7, #20]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01f      	beq.n	8003620 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e012      	b.n	800360c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	7819      	ldrb	r1, [r3, #0]
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	3334      	adds	r3, #52	; 0x34
 80035f6:	460a      	mov	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3301      	adds	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b09      	cmp	r3, #9
 8003610:	d9e9      	bls.n	80035e6 <prvInitialiseNewTask+0x64>
 8003612:	e000      	b.n	8003616 <prvInitialiseNewTask+0x94>
            {
                break;
 8003614:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800361e:	e003      	b.n	8003628 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	2b04      	cmp	r3, #4
 800362c:	d901      	bls.n	8003632 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800362e:	2304      	movs	r3, #4
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2200      	movs	r2, #0
 8003642:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f9e5 	bl	8002a18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	3318      	adds	r3, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff f9e0 	bl	8002a18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f1c3 0205 	rsb	r2, r3, #5
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	3350      	adds	r3, #80	; 0x50
 8003672:	2204      	movs	r2, #4
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fda8 	bl	80051cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	3354      	adds	r3, #84	; 0x54
 8003680:	2201      	movs	r2, #1
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f001 fda1 	bl	80051cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	69b8      	ldr	r0, [r7, #24]
 8003690:	f001 f8cc 	bl	800482c <pxPortInitialiseStack>
 8003694:	4602      	mov	r2, r0
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036a6:	bf00      	nop
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80036b8:	f001 f9e6 	bl	8004a88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <prvAddNewTaskToReadyList+0xc0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a2b      	ldr	r2, [pc, #172]	; (8003770 <prvAddNewTaskToReadyList+0xc0>)
 80036c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80036c6:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <prvAddNewTaskToReadyList+0xc4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <prvAddNewTaskToReadyList+0xc4>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <prvAddNewTaskToReadyList+0xc0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d110      	bne.n	80036fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80036dc:	f000 fbfc 	bl	8003ed8 <prvInitialiseTaskLists>
 80036e0:	e00d      	b.n	80036fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80036e2:	4b25      	ldr	r3, [pc, #148]	; (8003778 <prvAddNewTaskToReadyList+0xc8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036ea:	4b22      	ldr	r3, [pc, #136]	; (8003774 <prvAddNewTaskToReadyList+0xc4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d802      	bhi.n	80036fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <prvAddNewTaskToReadyList+0xc4>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <prvAddNewTaskToReadyList+0xcc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a1d      	ldr	r2, [pc, #116]	; (800377c <prvAddNewTaskToReadyList+0xcc>)
 8003706:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <prvAddNewTaskToReadyList+0xcc>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <prvAddNewTaskToReadyList+0xd0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <prvAddNewTaskToReadyList+0xd0>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <prvAddNewTaskToReadyList+0xd4>)
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7ff f97a 	bl	8002a32 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800373e:	f001 f9d3 	bl	8004ae8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <prvAddNewTaskToReadyList+0xc8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <prvAddNewTaskToReadyList+0xc4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	429a      	cmp	r2, r3
 8003756:	d207      	bcs.n	8003768 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <prvAddNewTaskToReadyList+0xd8>)
 800375a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000030c 	.word	0x2000030c
 8003774:	20000234 	.word	0x20000234
 8003778:	20000318 	.word	0x20000318
 800377c:	20000328 	.word	0x20000328
 8003780:	20000314 	.word	0x20000314
 8003784:	20000238 	.word	0x20000238
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <vTaskDelay+0x60>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <vTaskDelay+0x30>
        __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60bb      	str	r3, [r7, #8]
    }
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80037bc:	f000 f86c 	bl	8003898 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037c0:	2100      	movs	r1, #0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fcba 	bl	800413c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80037c8:	f000 f874 	bl	80038b4 <xTaskResumeAll>
 80037cc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <vTaskDelay+0x64>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000334 	.word	0x20000334
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <vTaskStartScheduler+0x88>)
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2282      	movs	r2, #130	; 0x82
 8003806:	491e      	ldr	r1, [pc, #120]	; (8003880 <vTaskStartScheduler+0x8c>)
 8003808:	481e      	ldr	r0, [pc, #120]	; (8003884 <vTaskStartScheduler+0x90>)
 800380a:	f7ff fe79 	bl	8003500 <xTaskCreate>
 800380e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003816:	f000 fcf7 	bl	8004208 <xTimerCreateTimerTask>
 800381a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d116      	bne.n	8003850 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60bb      	str	r3, [r7, #8]
    }
 8003834:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <vTaskStartScheduler+0x94>)
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <vTaskStartScheduler+0x98>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <vTaskStartScheduler+0x9c>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800384a:	f001 f87b 	bl	8004944 <xPortStartScheduler>
 800384e:	e00e      	b.n	800386e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d10a      	bne.n	800386e <vTaskStartScheduler+0x7a>
        __asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	607b      	str	r3, [r7, #4]
    }
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <vTaskStartScheduler+0xa0>)
 8003870:	681b      	ldr	r3, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000330 	.word	0x20000330
 8003880:	08005adc 	.word	0x08005adc
 8003884:	08003ea9 	.word	0x08003ea9
 8003888:	2000032c 	.word	0x2000032c
 800388c:	20000318 	.word	0x20000318
 8003890:	20000310 	.word	0x20000310
 8003894:	2000000c 	.word	0x2000000c

08003898 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <vTaskSuspendAll+0x18>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	4a03      	ldr	r2, [pc, #12]	; (80038b0 <vTaskSuspendAll+0x18>)
 80038a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000334 	.word	0x20000334

080038b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038c2:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <xTaskResumeAll+0x114>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	603b      	str	r3, [r7, #0]
    }
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038e0:	f001 f8d2 	bl	8004a88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038e4:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <xTaskResumeAll+0x114>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <xTaskResumeAll+0x114>)
 80038ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <xTaskResumeAll+0x114>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d161      	bne.n	80039ba <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038f6:	4b35      	ldr	r3, [pc, #212]	; (80039cc <xTaskResumeAll+0x118>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d05d      	beq.n	80039ba <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038fe:	e02e      	b.n	800395e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003900:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <xTaskResumeAll+0x11c>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3318      	adds	r3, #24
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f8ed 	bl	8002aec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff f8e8 	bl	8002aec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <xTaskResumeAll+0x120>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <xTaskResumeAll+0x120>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <xTaskResumeAll+0x124>)
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff f874 	bl	8002a32 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <xTaskResumeAll+0x128>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	429a      	cmp	r2, r3
 8003956:	d302      	bcc.n	800395e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <xTaskResumeAll+0x12c>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <xTaskResumeAll+0x11c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1cc      	bne.n	8003900 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800396c:	f000 fb32 	bl	8003fd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <xTaskResumeAll+0x130>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800397c:	f000 f846 	bl	8003a0c <xTaskIncrementTick>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <xTaskResumeAll+0x12c>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f1      	bne.n	800397c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <xTaskResumeAll+0x130>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <xTaskResumeAll+0x12c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <xTaskResumeAll+0x134>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039ba:	f001 f895 	bl	8004ae8 <vPortExitCritical>

    return xAlreadyYielded;
 80039be:	68bb      	ldr	r3, [r7, #8]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000334 	.word	0x20000334
 80039cc:	2000030c 	.word	0x2000030c
 80039d0:	200002cc 	.word	0x200002cc
 80039d4:	20000314 	.word	0x20000314
 80039d8:	20000238 	.word	0x20000238
 80039dc:	20000234 	.word	0x20000234
 80039e0:	20000320 	.word	0x20000320
 80039e4:	2000031c 	.word	0x2000031c
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <xTaskGetTickCount+0x1c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80039f8:	687b      	ldr	r3, [r7, #4]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000310 	.word	0x20000310

08003a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a16:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <xTaskIncrementTick+0x144>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 808e 	bne.w	8003b3c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <xTaskIncrementTick+0x148>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <xTaskIncrementTick+0x148>)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d120      	bne.n	8003a76 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <xTaskIncrementTick+0x48>
        __asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	603b      	str	r3, [r7, #0]
    }
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xTaskIncrementTick+0x46>
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <xTaskIncrementTick+0x150>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4a3e      	ldr	r2, [pc, #248]	; (8003b5c <xTaskIncrementTick+0x150>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <xTaskIncrementTick+0x154>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <xTaskIncrementTick+0x154>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	f000 faaf 	bl	8003fd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d348      	bcc.n	8003b12 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	601a      	str	r2, [r3, #0]
                    break;
 8003a92:	e03e      	b.n	8003b12 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <xTaskIncrementTick+0x14c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d203      	bcs.n	8003ab4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <xTaskIncrementTick+0x158>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ab2:	e02e      	b.n	8003b12 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff f817 	bl	8002aec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f80e 	bl	8002aec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <xTaskIncrementTick+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <xTaskIncrementTick+0x15c>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <xTaskIncrementTick+0x160>)
 8003af0:	441a      	add	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7fe ff9a 	bl	8002a32 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <xTaskIncrementTick+0x164>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3b9      	bcc.n	8003a80 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b10:	e7b6      	b.n	8003a80 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <xTaskIncrementTick+0x164>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4914      	ldr	r1, [pc, #80]	; (8003b6c <xTaskIncrementTick+0x160>)
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d901      	bls.n	8003b2e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <xTaskIncrementTick+0x168>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e004      	b.n	8003b46 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <xTaskIncrementTick+0x16c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <xTaskIncrementTick+0x16c>)
 8003b44:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000334 	.word	0x20000334
 8003b54:	20000310 	.word	0x20000310
 8003b58:	200002c4 	.word	0x200002c4
 8003b5c:	200002c8 	.word	0x200002c8
 8003b60:	20000324 	.word	0x20000324
 8003b64:	2000032c 	.word	0x2000032c
 8003b68:	20000314 	.word	0x20000314
 8003b6c:	20000238 	.word	0x20000238
 8003b70:	20000234 	.word	0x20000234
 8003b74:	20000320 	.word	0x20000320
 8003b78:	2000031c 	.word	0x2000031c

08003b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <vTaskSwitchContext+0xa4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <vTaskSwitchContext+0xa8>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b90:	e03f      	b.n	8003c12 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <vTaskSwitchContext+0xa8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <vTaskSwitchContext+0xac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f1c3 031f 	rsb	r3, r3, #31
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	491f      	ldr	r1, [pc, #124]	; (8003c2c <vTaskSwitchContext+0xb0>)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	607b      	str	r3, [r7, #4]
    }
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskSwitchContext+0x5a>
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <vTaskSwitchContext+0xb0>)
 8003be4:	4413      	add	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d104      	bne.n	8003c08 <vTaskSwitchContext+0x8c>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <vTaskSwitchContext+0xb4>)
 8003c10:	6013      	str	r3, [r2, #0]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000334 	.word	0x20000334
 8003c24:	20000320 	.word	0x20000320
 8003c28:	20000314 	.word	0x20000314
 8003c2c:	20000238 	.word	0x20000238
 8003c30:	20000234 	.word	0x20000234

08003c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60fb      	str	r3, [r7, #12]
    }
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <vTaskPlaceOnEventList+0x44>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe ff09 	bl	8002a7a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c68:	2101      	movs	r1, #1
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	f000 fa66 	bl	800413c <prvAddCurrentTaskToDelayedList>
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000234 	.word	0x20000234

08003c7c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	617b      	str	r3, [r7, #20]
    }
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7fe fec0 	bl	8002a32 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	68b8      	ldr	r0, [r7, #8]
 8003cc2:	f000 fa3b 	bl	800413c <prvAddCurrentTaskToDelayedList>
    }
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000234 	.word	0x20000234

08003cd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60fb      	str	r3, [r7, #12]
    }
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3318      	adds	r3, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fef1 	bl	8002aec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <xTaskRemoveFromEventList+0xac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11c      	bne.n	8003d4c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fee8 	bl	8002aec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2201      	movs	r2, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <xTaskRemoveFromEventList+0xb0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <xTaskRemoveFromEventList+0xb0>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <xTaskRemoveFromEventList+0xb4>)
 8003d3c:	441a      	add	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7fe fe74 	bl	8002a32 <vListInsertEnd>
 8003d4a:	e005      	b.n	8003d58 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	3318      	adds	r3, #24
 8003d50:	4619      	mov	r1, r3
 8003d52:	480e      	ldr	r0, [pc, #56]	; (8003d8c <xTaskRemoveFromEventList+0xb8>)
 8003d54:	f7fe fe6d 	bl	8002a32 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <xTaskRemoveFromEventList+0xbc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d905      	bls.n	8003d72 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <xTaskRemoveFromEventList+0xc0>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e001      	b.n	8003d76 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000334 	.word	0x20000334
 8003d84:	20000314 	.word	0x20000314
 8003d88:	20000238 	.word	0x20000238
 8003d8c:	200002cc 	.word	0x200002cc
 8003d90:	20000234 	.word	0x20000234
 8003d94:	20000320 	.word	0x20000320

08003d98 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <vTaskInternalSetTimeOutState+0x24>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <vTaskInternalSetTimeOutState+0x28>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000324 	.word	0x20000324
 8003dc0:	20000310 	.word	0x20000310

08003dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	613b      	str	r3, [r7, #16]
    }
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
    }
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003e06:	f000 fe3f 	bl	8004a88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <xTaskCheckForTimeOut+0xc4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d102      	bne.n	8003e2a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e026      	b.n	8003e78 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <xTaskCheckForTimeOut+0xc8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d00a      	beq.n	8003e4c <xTaskCheckForTimeOut+0x88>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d305      	bcc.n	8003e4c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e015      	b.n	8003e78 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d20b      	bcs.n	8003e6e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ff98 	bl	8003d98 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	e004      	b.n	8003e78 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e78:	f000 fe36 	bl	8004ae8 <vPortExitCritical>

    return xReturn;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000310 	.word	0x20000310
 8003e8c:	20000324 	.word	0x20000324

08003e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <vTaskMissedYield+0x14>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000320 	.word	0x20000320

08003ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003eb0:	f000 f852 	bl	8003f58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <prvIdleTask+0x28>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d9f9      	bls.n	8003eb0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <prvIdleTask+0x2c>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ecc:	e7f0      	b.n	8003eb0 <prvIdleTask+0x8>
 8003ece:	bf00      	nop
 8003ed0:	20000238 	.word	0x20000238
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	e00c      	b.n	8003efe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <prvInitialiseTaskLists+0x60>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd70 	bl	80029d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3301      	adds	r3, #1
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d9ef      	bls.n	8003ee4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <prvInitialiseTaskLists+0x64>)
 8003f06:	f7fe fd67 	bl	80029d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f0a:	480d      	ldr	r0, [pc, #52]	; (8003f40 <prvInitialiseTaskLists+0x68>)
 8003f0c:	f7fe fd64 	bl	80029d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f10:	480c      	ldr	r0, [pc, #48]	; (8003f44 <prvInitialiseTaskLists+0x6c>)
 8003f12:	f7fe fd61 	bl	80029d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f16:	480c      	ldr	r0, [pc, #48]	; (8003f48 <prvInitialiseTaskLists+0x70>)
 8003f18:	f7fe fd5e 	bl	80029d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f1c:	480b      	ldr	r0, [pc, #44]	; (8003f4c <prvInitialiseTaskLists+0x74>)
 8003f1e:	f7fe fd5b 	bl	80029d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <prvInitialiseTaskLists+0x78>)
 8003f24:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <prvInitialiseTaskLists+0x64>)
 8003f26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <prvInitialiseTaskLists+0x7c>)
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <prvInitialiseTaskLists+0x68>)
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000238 	.word	0x20000238
 8003f3c:	2000029c 	.word	0x2000029c
 8003f40:	200002b0 	.word	0x200002b0
 8003f44:	200002cc 	.word	0x200002cc
 8003f48:	200002e0 	.word	0x200002e0
 8003f4c:	200002f8 	.word	0x200002f8
 8003f50:	200002c4 	.word	0x200002c4
 8003f54:	200002c8 	.word	0x200002c8

08003f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f5e:	e019      	b.n	8003f94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f60:	f000 fd92 	bl	8004a88 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <prvCheckTasksWaitingTermination+0x50>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fdbb 	bl	8002aec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <prvCheckTasksWaitingTermination+0x54>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <prvCheckTasksWaitingTermination+0x54>)
 8003f7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <prvCheckTasksWaitingTermination+0x58>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <prvCheckTasksWaitingTermination+0x58>)
 8003f88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f8a:	f000 fdad 	bl	8004ae8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f810 	bl	8003fb4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <prvCheckTasksWaitingTermination+0x58>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e1      	bne.n	8003f60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200002e0 	.word	0x200002e0
 8003fac:	2000030c 	.word	0x2000030c
 8003fb0:	200002f4 	.word	0x200002f4

08003fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 ff63 	bl	8004e8c <vPortFree>
                vPortFree( pxTCB );
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 ff60 	bl	8004e8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvResetNextTaskUnblockTime+0x30>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <prvResetNextTaskUnblockTime+0x34>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fea:	e005      	b.n	8003ff8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <prvResetNextTaskUnblockTime+0x30>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <prvResetNextTaskUnblockTime+0x34>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	200002c4 	.word	0x200002c4
 8004008:	2000032c 	.word	0x2000032c

0800400c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <xTaskGetSchedulerState+0x34>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e008      	b.n	8004032 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <xTaskGetSchedulerState+0x38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004028:	2302      	movs	r3, #2
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e001      	b.n	8004032 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004032:	687b      	ldr	r3, [r7, #4]
    }
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000318 	.word	0x20000318
 8004044:	20000334 	.word	0x20000334

08004048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d063      	beq.n	8004126 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800405e:	4b34      	ldr	r3, [pc, #208]	; (8004130 <xTaskPriorityDisinherit+0xe8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d00a      	beq.n	800407e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
    }
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
    }
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d039      	beq.n	8004126 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d135      	bne.n	8004126 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fd14 	bl	8002aec <uxListRemove>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43da      	mvns	r2, r3
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <xTaskPriorityDisinherit+0xec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4013      	ands	r3, r2
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <xTaskPriorityDisinherit+0xec>)
 80040de:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f1c3 0205 	rsb	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	2201      	movs	r2, #1
 80040fa:	409a      	lsls	r2, r3
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <xTaskPriorityDisinherit+0xec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <xTaskPriorityDisinherit+0xec>)
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <xTaskPriorityDisinherit+0xf0>)
 8004114:	441a      	add	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3304      	adds	r3, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f7fe fc88 	bl	8002a32 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004126:	697b      	ldr	r3, [r7, #20]
    }
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000234 	.word	0x20000234
 8004134:	20000314 	.word	0x20000314
 8004138:	20000238 	.word	0x20000238

0800413c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004146:	4b29      	ldr	r3, [pc, #164]	; (80041ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fcca 	bl	8002aec <uxListRemove>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	2201      	movs	r2, #1
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4013      	ands	r3, r2
 8004172:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004174:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d10a      	bne.n	8004194 <prvAddCurrentTaskToDelayedList+0x58>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	481a      	ldr	r0, [pc, #104]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800418e:	f7fe fc50 	bl	8002a32 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004192:	e026      	b.n	80041e2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d209      	bcs.n	80041c0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f7fe fc5e 	bl	8002a7a <vListInsert>
}
 80041be:	e010      	b.n	80041e2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fc54 	bl	8002a7a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d202      	bcs.n	80041e2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6013      	str	r3, [r2, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000310 	.word	0x20000310
 80041f0:	20000234 	.word	0x20000234
 80041f4:	20000314 	.word	0x20000314
 80041f8:	200002f8 	.word	0x200002f8
 80041fc:	200002c8 	.word	0x200002c8
 8004200:	200002c4 	.word	0x200002c4
 8004204:	2000032c 	.word	0x2000032c

08004208 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004212:	f000 fad5 	bl	80047c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <xTimerCreateTimerTask+0x54>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <xTimerCreateTimerTask+0x58>)
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2302      	movs	r3, #2
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800422c:	490d      	ldr	r1, [pc, #52]	; (8004264 <xTimerCreateTimerTask+0x5c>)
 800422e:	480e      	ldr	r0, [pc, #56]	; (8004268 <xTimerCreateTimerTask+0x60>)
 8004230:	f7ff f966 	bl	8003500 <xTaskCreate>
 8004234:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	603b      	str	r3, [r7, #0]
    }
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004252:	687b      	ldr	r3, [r7, #4]
    }
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000368 	.word	0x20000368
 8004260:	2000036c 	.word	0x2000036c
 8004264:	08005ae4 	.word	0x08005ae4
 8004268:	080043a1 	.word	0x080043a1

0800426c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xTimerGenericCommand+0x2e>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	623b      	str	r3, [r7, #32]
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <xTimerGenericCommand+0x98>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02a      	beq.n	80042f8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	dc18      	bgt.n	80042e6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042b4:	f7ff feaa 	bl	800400c <xTaskGetSchedulerState>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d109      	bne.n	80042d2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <xTimerGenericCommand+0x98>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f107 0114 	add.w	r1, r7, #20
 80042c6:	2300      	movs	r3, #0
 80042c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ca:	f7fe fd23 	bl	8002d14 <xQueueGenericSend>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
 80042d0:	e012      	b.n	80042f8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <xTimerGenericCommand+0x98>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f107 0114 	add.w	r1, r7, #20
 80042da:	2300      	movs	r3, #0
 80042dc:	2200      	movs	r2, #0
 80042de:	f7fe fd19 	bl	8002d14 <xQueueGenericSend>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24
 80042e4:	e008      	b.n	80042f8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <xTimerGenericCommand+0x98>)
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f107 0114 	add.w	r1, r7, #20
 80042ee:	2300      	movs	r3, #0
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f7fe fe0d 	bl	8002f10 <xQueueGenericSendFromISR>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80042fa:	4618      	mov	r0, r3
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000368 	.word	0x20000368

08004308 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <prvProcessExpiredTimer+0x94>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fbe3 	bl	8002aec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d022      	beq.n	800437a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	18d1      	adds	r1, r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	6978      	ldr	r0, [r7, #20]
 8004342:	f000 f8d1 	bl	80044e8 <prvInsertTimerInActiveList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01f      	beq.n	800438c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800434c:	2300      	movs	r3, #0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2300      	movs	r3, #0
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	2100      	movs	r1, #0
 8004356:	6978      	ldr	r0, [r7, #20]
 8004358:	f7ff ff88 	bl	800426c <xTimerGenericCommand>
 800435c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d113      	bne.n	800438c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	60fb      	str	r3, [r7, #12]
    }
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	6978      	ldr	r0, [r7, #20]
 8004392:	4798      	blx	r3
    }
 8004394:	bf00      	nop
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000360 	.word	0x20000360

080043a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043a8:	f107 0308 	add.w	r3, r7, #8
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f857 	bl	8004460 <prvGetNextExpireTime>
 80043b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4619      	mov	r1, r3
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f803 	bl	80043c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80043be:	f000 f8d5 	bl	800456c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043c2:	e7f1      	b.n	80043a8 <prvTimerTask+0x8>

080043c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80043ce:	f7ff fa63 	bl	8003898 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f866 	bl	80044a8 <prvSampleTimeNow>
 80043dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d130      	bne.n	8004446 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <prvProcessTimerOrBlockTask+0x3c>
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d806      	bhi.n	8004400 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80043f2:	f7ff fa5f 	bl	80038b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff85 	bl	8004308 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80043fe:	e024      	b.n	800444a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <prvProcessTimerOrBlockTask+0x90>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <prvProcessTimerOrBlockTask+0x50>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <prvProcessTimerOrBlockTask+0x52>
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <prvProcessTimerOrBlockTask+0x94>)
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff f837 	bl	8003498 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800442a:	f7ff fa43 	bl	80038b4 <xTaskResumeAll>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <prvProcessTimerOrBlockTask+0x98>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
    }
 8004444:	e001      	b.n	800444a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004446:	f7ff fa35 	bl	80038b4 <xTaskResumeAll>
    }
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000364 	.word	0x20000364
 8004458:	20000368 	.word	0x20000368
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <prvGetNextExpireTime+0x44>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <prvGetNextExpireTime+0x16>
 8004472:	2201      	movs	r2, #1
 8004474:	e000      	b.n	8004478 <prvGetNextExpireTime+0x18>
 8004476:	2200      	movs	r2, #0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <prvGetNextExpireTime+0x44>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e001      	b.n	8004494 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004494:	68fb      	ldr	r3, [r7, #12]
    }
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000360 	.word	0x20000360

080044a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80044b0:	f7ff fa9c 	bl	80039ec <xTaskGetTickCount>
 80044b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <prvSampleTimeNow+0x3c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d205      	bcs.n	80044cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80044c0:	f000 f91a 	bl	80046f8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e002      	b.n	80044d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <prvSampleTimeNow+0x3c>)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80044d8:	68fb      	ldr	r3, [r7, #12]
    }
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000370 	.word	0x20000370

080044e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	d812      	bhi.n	8004534 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e01b      	b.n	800455a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <prvInsertTimerInActiveList+0x7c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7fe faa4 	bl	8002a7a <vListInsert>
 8004532:	e012      	b.n	800455a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d206      	bcs.n	800454a <prvInsertTimerInActiveList+0x62>
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e007      	b.n	800455a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <prvInsertTimerInActiveList+0x80>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe fa90 	bl	8002a7a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800455a:	697b      	ldr	r3, [r7, #20]
    }
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000364 	.word	0x20000364
 8004568:	20000360 	.word	0x20000360

0800456c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004572:	e0ae      	b.n	80046d2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f2c0 80aa 	blt.w	80046d0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe faad 	bl	8002aec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff87 	bl	80044a8 <prvSampleTimeNow>
 800459a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b09      	cmp	r3, #9
 80045a0:	f200 8097 	bhi.w	80046d2 <prvProcessReceivedCommands+0x166>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <prvProcessReceivedCommands+0x40>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045d5 	.word	0x080045d5
 80045b8:	08004649 	.word	0x08004649
 80045bc:	0800465d 	.word	0x0800465d
 80045c0:	080046a7 	.word	0x080046a7
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045d5 	.word	0x080045d5
 80045cc:	08004649 	.word	0x08004649
 80045d0:	0800465d 	.word	0x0800465d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	18d1      	adds	r1, r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f4:	f7ff ff78 	bl	80044e8 <prvInsertTimerInActiveList>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d069      	beq.n	80046d2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004604:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05e      	beq.n	80046d2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	441a      	add	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	2100      	movs	r1, #0
 8004624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004626:	f7ff fe21 	bl	800426c <xTimerGenericCommand>
 800462a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d14f      	bne.n	80046d2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	61bb      	str	r3, [r7, #24]
    }
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800465a:	e03a      	b.n	80046d2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	617b      	str	r3, [r7, #20]
    }
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	18d1      	adds	r1, r2, r3
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a0:	f7ff ff22 	bl	80044e8 <prvInsertTimerInActiveList>
                        break;
 80046a4:	e015      	b.n	80046d2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d103      	bne.n	80046bc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80046b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046b6:	f000 fbe9 	bl	8004e8c <vPortFree>
 80046ba:	e00a      	b.n	80046d2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80046ce:	e000      	b.n	80046d2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80046d0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <prvProcessReceivedCommands+0x188>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f107 0108 	add.w	r1, r7, #8
 80046da:	2200      	movs	r2, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fcc1 	bl	8003064 <xQueueReceive>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f af45 	bne.w	8004574 <prvProcessReceivedCommands+0x8>
        }
    }
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000368 	.word	0x20000368

080046f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046fe:	e048      	b.n	8004792 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470a:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe f9e7 	bl	8002aec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02e      	beq.n	8004792 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90e      	bls.n	8004764 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f98c 	bl	8002a7a <vListInsert>
 8004762:	e016      	b.n	8004792 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	2100      	movs	r1, #0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fd7c 	bl	800426c <xTimerGenericCommand>
 8004774:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	603b      	str	r3, [r7, #0]
    }
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1b1      	bne.n	8004700 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <prvSwitchTimerLists+0xc4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <prvSwitchTimerLists+0xc0>)
 80047a8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <prvSwitchTimerLists+0xc4>)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6013      	str	r3, [r2, #0]
    }
 80047b0:	bf00      	nop
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000360 	.word	0x20000360
 80047bc:	20000364 	.word	0x20000364

080047c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80047c4:	f000 f960 	bl	8004a88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <prvCheckForValidListAndQueue+0x54>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11d      	bne.n	800480c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80047d0:	4811      	ldr	r0, [pc, #68]	; (8004818 <prvCheckForValidListAndQueue+0x58>)
 80047d2:	f7fe f901 	bl	80029d8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80047d6:	4811      	ldr	r0, [pc, #68]	; (800481c <prvCheckForValidListAndQueue+0x5c>)
 80047d8:	f7fe f8fe 	bl	80029d8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <prvCheckForValidListAndQueue+0x60>)
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <prvCheckForValidListAndQueue+0x58>)
 80047e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <prvCheckForValidListAndQueue+0x64>)
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <prvCheckForValidListAndQueue+0x5c>)
 80047e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80047e8:	2200      	movs	r2, #0
 80047ea:	210c      	movs	r1, #12
 80047ec:	200a      	movs	r0, #10
 80047ee:	f7fe fa0f 	bl	8002c10 <xQueueGenericCreate>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <prvCheckForValidListAndQueue+0x54>)
 80047f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <prvCheckForValidListAndQueue+0x54>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <prvCheckForValidListAndQueue+0x54>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4908      	ldr	r1, [pc, #32]	; (8004828 <prvCheckForValidListAndQueue+0x68>)
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fe1c 	bl	8003444 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800480c:	f000 f96c 	bl	8004ae8 <vPortExitCritical>
    }
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000368 	.word	0x20000368
 8004818:	20000338 	.word	0x20000338
 800481c:	2000034c 	.word	0x2000034c
 8004820:	20000360 	.word	0x20000360
 8004824:	20000364 	.word	0x20000364
 8004828:	08005aec 	.word	0x08005aec

0800482c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b04      	subs	r3, #4
 800483c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004844:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b04      	subs	r3, #4
 800484a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b04      	subs	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800485c:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <pxPortInitialiseStack+0x64>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b14      	subs	r3, #20
 8004866:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b04      	subs	r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f06f 0202 	mvn.w	r2, #2
 800487a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3b20      	subs	r3, #32
 8004880:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004882:	68fb      	ldr	r3, [r7, #12]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	08004895 	.word	0x08004895

08004894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800489e:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvTaskExitError+0x54>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d00a      	beq.n	80048be <prvTaskExitError+0x2a>
        __asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60fb      	str	r3, [r7, #12]
    }
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <prvTaskExitError+0x28>
        __asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60bb      	str	r3, [r7, #8]
    }
 80048d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80048d2:	bf00      	nop
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0fc      	beq.n	80048d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000010 	.word	0x20000010
 80048ec:	00000000 	.word	0x00000000

080048f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80048f0:	4b07      	ldr	r3, [pc, #28]	; (8004910 <pxCurrentTCBConst2>)
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	6808      	ldr	r0, [r1, #0]
 80048f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	f380 8809 	msr	PSP, r0
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	4770      	bx	lr
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst2>:
 8004910:	20000234 	.word	0x20000234
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004918:	4808      	ldr	r0, [pc, #32]	; (800493c <prvPortStartFirstTask+0x24>)
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f380 8808 	msr	MSP, r0
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8814 	msr	CONTROL, r0
 800492a:	b662      	cpsie	i
 800492c:	b661      	cpsie	f
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	df00      	svc	0
 8004938:	bf00      	nop
 800493a:	0000      	.short	0x0000
 800493c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop

08004944 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800494a:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <xPortStartScheduler+0x120>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <xPortStartScheduler+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10a      	bne.n	800496a <xPortStartScheduler+0x26>
        __asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	613b      	str	r3, [r7, #16]
    }
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800496a:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <xPortStartScheduler+0x120>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3f      	ldr	r2, [pc, #252]	; (8004a6c <xPortStartScheduler+0x128>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10a      	bne.n	800498a <xPortStartScheduler+0x46>
        __asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
    }
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <xPortStartScheduler+0x12c>)
 800498c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <xPortStartScheduler+0x130>)
 80049b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <xPortStartScheduler+0x134>)
 80049b4:	2207      	movs	r2, #7
 80049b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b8:	e009      	b.n	80049ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <xPortStartScheduler+0x134>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3b01      	subs	r3, #1
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <xPortStartScheduler+0x134>)
 80049c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d0ef      	beq.n	80049ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049da:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <xPortStartScheduler+0x134>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1c3 0307 	rsb	r3, r3, #7
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d00a      	beq.n	80049fc <xPortStartScheduler+0xb8>
        __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60bb      	str	r3, [r7, #8]
    }
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049fc:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <xPortStartScheduler+0x134>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <xPortStartScheduler+0x134>)
 8004a04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a06:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <xPortStartScheduler+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <xPortStartScheduler+0x134>)
 8004a10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <xPortStartScheduler+0x138>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <xPortStartScheduler+0x138>)
 8004a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <xPortStartScheduler+0x138>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <xPortStartScheduler+0x138>)
 8004a2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a32:	f000 f8db 	bl	8004bec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <xPortStartScheduler+0x13c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004a3c:	f000 f8fa 	bl	8004c34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <xPortStartScheduler+0x140>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <xPortStartScheduler+0x140>)
 8004a46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a4c:	f7ff ff64 	bl	8004918 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a50:	f7ff f894 	bl	8003b7c <vTaskSwitchContext>
    prvTaskExitError();
 8004a54:	f7ff ff1e 	bl	8004894 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000ed00 	.word	0xe000ed00
 8004a68:	410fc271 	.word	0x410fc271
 8004a6c:	410fc270 	.word	0x410fc270
 8004a70:	e000e400 	.word	0xe000e400
 8004a74:	20000374 	.word	0x20000374
 8004a78:	20000378 	.word	0x20000378
 8004a7c:	e000ed20 	.word	0xe000ed20
 8004a80:	20000010 	.word	0x20000010
 8004a84:	e000ef34 	.word	0xe000ef34

08004a88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
    }
 8004aa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <vPortEnterCritical+0x58>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <vPortEnterCritical+0x58>)
 8004aaa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <vPortEnterCritical+0x58>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10f      	bne.n	8004ad4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <vPortEnterCritical+0x5c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	603b      	str	r3, [r7, #0]
    }
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vPortEnterCritical+0x4a>
    }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000010 	.word	0x20000010
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <vPortExitCritical+0x50>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <vPortExitCritical+0x24>
        __asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	607b      	str	r3, [r7, #4]
    }
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <vPortExitCritical+0x50>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <vPortExitCritical+0x50>)
 8004b14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <vPortExitCritical+0x50>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <vPortExitCritical+0x42>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f383 8811 	msr	BASEPRI, r3
    }
 8004b28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000010 	.word	0x20000010
 8004b3c:	00000000 	.word	0x00000000

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <pxCurrentTCBConst>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f01e 0f10 	tst.w	lr, #16
 8004b50:	bf08      	it	eq
 8004b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	6010      	str	r0, [r2, #0]
 8004b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b64:	f380 8811 	msr	BASEPRI, r0
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f7ff f804 	bl	8003b7c <vTaskSwitchContext>
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f380 8811 	msr	BASEPRI, r0
 8004b7c:	bc09      	pop	{r0, r3}
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	6808      	ldr	r0, [r1, #0]
 8004b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b86:	f01e 0f10 	tst.w	lr, #16
 8004b8a:	bf08      	it	eq
 8004b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b90:	f380 8809 	msr	PSP, r0
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	20000234 	.word	0x20000234
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
        __asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
    }
 8004bc0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7fe ff23 	bl	8003a0c <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <SysTick_Handler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
    }
 8004bde:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <vPortSetupTimerInterrupt+0x44>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e010 	.word	0xe000e010
 8004c24:	e000e018 	.word	0xe000e018
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	10624dd3 	.word	0x10624dd3
 8004c30:	e000e014 	.word	0xe000e014

08004c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c44 <vPortEnableVFP+0x10>
 8004c38:	6801      	ldr	r1, [r0, #0]
 8004c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c3e:	6001      	str	r1, [r0, #0]
 8004c40:	4770      	bx	lr
 8004c42:	0000      	.short	0x0000
 8004c44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop

08004c4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004c52:	f3ef 8305 	mrs	r3, IPSR
 8004c56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d914      	bls.n	8004c88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <vPortValidateInterruptPriority+0x70>)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <vPortValidateInterruptPriority+0x74>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	7afa      	ldrb	r2, [r7, #11]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d20a      	bcs.n	8004c88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
    }
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <vPortValidateInterruptPriority+0x78>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <vPortValidateInterruptPriority+0x7c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d90a      	bls.n	8004cae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	603b      	str	r3, [r7, #0]
    }
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <vPortValidateInterruptPriority+0x60>
    }
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e3f0 	.word	0xe000e3f0
 8004cc0:	20000374 	.word	0x20000374
 8004cc4:	e000ed0c 	.word	0xe000ed0c
 8004cc8:	20000378 	.word	0x20000378

08004ccc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004cd8:	f7fe fdde 	bl	8003898 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004cdc:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <pvPortMalloc+0x1a8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ce4:	f000 f934 	bl	8004f50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ce8:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <pvPortMalloc+0x1ac>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 80a7 	bne.w	8004e44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02d      	beq.n	8004d58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d227      	bcs.n	8004d58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004d08:	2208      	movs	r2, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	3308      	adds	r3, #8
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d214      	bcs.n	8004d52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	3308      	adds	r3, #8
 8004d30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <pvPortMalloc+0x92>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	617b      	str	r3, [r7, #20]
    }
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d56:	e002      	b.n	8004d5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	e000      	b.n	8004d60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d06e      	beq.n	8004e44 <pvPortMalloc+0x178>
 8004d66:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <pvPortMalloc+0x1b0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d869      	bhi.n	8004e44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004d70:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <pvPortMalloc+0x1b4>)
 8004d72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004d74:	4b42      	ldr	r3, [pc, #264]	; (8004e80 <pvPortMalloc+0x1b4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d7a:	e004      	b.n	8004d86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d903      	bls.n	8004d98 <pvPortMalloc+0xcc>
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f1      	bne.n	8004d7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004d98:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <pvPortMalloc+0x1a8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d050      	beq.n	8004e44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2208      	movs	r2, #8
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad2      	subs	r2, r2, r3
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d91f      	bls.n	8004e04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <pvPortMalloc+0x120>
        __asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	613b      	str	r3, [r7, #16]
    }
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad2      	subs	r2, r2, r3
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dfe:	69b8      	ldr	r0, [r7, #24]
 8004e00:	f000 f908 	bl	8005014 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <pvPortMalloc+0x1b0>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <pvPortMalloc+0x1b0>)
 8004e10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <pvPortMalloc+0x1b0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <pvPortMalloc+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d203      	bcs.n	8004e26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <pvPortMalloc+0x1b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <pvPortMalloc+0x1b8>)
 8004e24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <pvPortMalloc+0x1ac>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <pvPortMalloc+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <pvPortMalloc+0x1bc>)
 8004e42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004e44:	f7fe fd36 	bl	80038b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <pvPortMalloc+0x19c>
        __asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60fb      	str	r3, [r7, #12]
    }
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <pvPortMalloc+0x19a>
    return pvReturn;
 8004e68:	69fb      	ldr	r3, [r7, #28]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20019384 	.word	0x20019384
 8004e78:	20019398 	.word	0x20019398
 8004e7c:	20019388 	.word	0x20019388
 8004e80:	2001937c 	.word	0x2001937c
 8004e84:	2001938c 	.word	0x2001938c
 8004e88:	20019390 	.word	0x20019390

08004e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04d      	beq.n	8004f3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	425b      	negs	r3, r3
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <vPortFree+0xb8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <vPortFree+0x44>
        __asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
    }
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <vPortFree+0x62>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60bb      	str	r3, [r7, #8]
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <vPortFree+0xb8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01e      	beq.n	8004f3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11a      	bne.n	8004f3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <vPortFree+0xb8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	401a      	ands	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004f14:	f7fe fcc0 	bl	8003898 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <vPortFree+0xbc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <vPortFree+0xbc>)
 8004f24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f000 f874 	bl	8005014 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <vPortFree+0xc0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a06      	ldr	r2, [pc, #24]	; (8004f4c <vPortFree+0xc0>)
 8004f34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004f36:	f7fe fcbd 	bl	80038b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20019398 	.word	0x20019398
 8004f48:	20019388 	.word	0x20019388
 8004f4c:	20019394 	.word	0x20019394

08004f50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f56:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8004f5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004f5c:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <prvHeapInit+0xac>)
 8004f5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3307      	adds	r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <prvHeapInit+0xac>)
 8004f80:	4413      	add	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <prvHeapInit+0xb0>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <prvHeapInit+0xb0>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <prvHeapInit+0xb4>)
 8004fb0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <prvHeapInit+0xb4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <prvHeapInit+0xb4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <prvHeapInit+0xb4>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <prvHeapInit+0xb8>)
 8004fde:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a09      	ldr	r2, [pc, #36]	; (800500c <prvHeapInit+0xbc>)
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <prvHeapInit+0xc0>)
 8004fea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	2000037c 	.word	0x2000037c
 8005000:	2001937c 	.word	0x2001937c
 8005004:	20019384 	.word	0x20019384
 8005008:	2001938c 	.word	0x2001938c
 800500c:	20019388 	.word	0x20019388
 8005010:	20019398 	.word	0x20019398

08005014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <prvInsertBlockIntoFreeList+0xac>)
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e002      	b.n	8005028 <prvInsertBlockIntoFreeList+0x14>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d8f7      	bhi.n	8005022 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4413      	add	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d108      	bne.n	8005056 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	441a      	add	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d118      	bne.n	800509c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d00d      	beq.n	8005092 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	441a      	add	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e008      	b.n	80050a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e003      	b.n	80050a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d002      	beq.n	80050b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2001937c 	.word	0x2001937c
 80050c4:	20019384 	.word	0x20019384

080050c8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80050ce:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <USART2_IRQHandler+0x80>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <USART2_IRQHandler+0x84>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 030b 	and.w	r3, r3, #11
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <USART2_IRQHandler+0x88>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <USART2_IRQHandler+0x88>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	79fa      	ldrb	r2, [r7, #7]
 80050fe:	4610      	mov	r0, r2
 8005100:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01a      	beq.n	8005142 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <USART2_IRQHandler+0x8c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <USART2_IRQHandler+0x8c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	1dfa      	adds	r2, r7, #7
 800511a:	4610      	mov	r0, r2
 800511c:	4798      	blx	r3
 800511e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <USART2_IRQHandler+0x90>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <USART2_IRQHandler+0x90>)
 800512c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e006      	b.n	8005142 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <USART2_IRQHandler+0x80>)
 8005136:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005138:	79fa      	ldrb	r2, [r7, #7]
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <USART2_IRQHandler+0x84>)
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e000      	b.n	8005142 <USART2_IRQHandler+0x7a>
      return;
 8005140:	bf00      	nop
    }
  }
}
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40004400 	.word	0x40004400
 800514c:	40004404 	.word	0x40004404
 8005150:	2001939c 	.word	0x2001939c
 8005154:	200193a0 	.word	0x200193a0
 8005158:	4000440c 	.word	0x4000440c

0800515c <__errno>:
 800515c:	4b01      	ldr	r3, [pc, #4]	; (8005164 <__errno+0x8>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000014 	.word	0x20000014

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f000 fc8e 	bl	8005a9c <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	08005b48 	.word	0x08005b48
 80051a4:	08005b48 	.word	0x08005b48
 80051a8:	08005b48 	.word	0x08005b48
 80051ac:	08005b4c 	.word	0x08005b4c

080051b0 <memcpy>:
 80051b0:	440a      	add	r2, r1
 80051b2:	4291      	cmp	r1, r2
 80051b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051b8:	d100      	bne.n	80051bc <memcpy+0xc>
 80051ba:	4770      	bx	lr
 80051bc:	b510      	push	{r4, lr}
 80051be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c6:	4291      	cmp	r1, r2
 80051c8:	d1f9      	bne.n	80051be <memcpy+0xe>
 80051ca:	bd10      	pop	{r4, pc}

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <siprintf>:
 80051dc:	b40e      	push	{r1, r2, r3}
 80051de:	b500      	push	{lr}
 80051e0:	b09c      	sub	sp, #112	; 0x70
 80051e2:	ab1d      	add	r3, sp, #116	; 0x74
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	9006      	str	r0, [sp, #24]
 80051e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ec:	4809      	ldr	r0, [pc, #36]	; (8005214 <siprintf+0x38>)
 80051ee:	9107      	str	r1, [sp, #28]
 80051f0:	9104      	str	r1, [sp, #16]
 80051f2:	4909      	ldr	r1, [pc, #36]	; (8005218 <siprintf+0x3c>)
 80051f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f8:	9105      	str	r1, [sp, #20]
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	a902      	add	r1, sp, #8
 8005200:	f000 f868 	bl	80052d4 <_svfiprintf_r>
 8005204:	9b02      	ldr	r3, [sp, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	b01c      	add	sp, #112	; 0x70
 800520c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005210:	b003      	add	sp, #12
 8005212:	4770      	bx	lr
 8005214:	20000014 	.word	0x20000014
 8005218:	ffff0208 	.word	0xffff0208

0800521c <__ssputs_r>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	688e      	ldr	r6, [r1, #8]
 8005222:	429e      	cmp	r6, r3
 8005224:	4682      	mov	sl, r0
 8005226:	460c      	mov	r4, r1
 8005228:	4690      	mov	r8, r2
 800522a:	461f      	mov	r7, r3
 800522c:	d838      	bhi.n	80052a0 <__ssputs_r+0x84>
 800522e:	898a      	ldrh	r2, [r1, #12]
 8005230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005234:	d032      	beq.n	800529c <__ssputs_r+0x80>
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	6909      	ldr	r1, [r1, #16]
 800523a:	eba5 0901 	sub.w	r9, r5, r1
 800523e:	6965      	ldr	r5, [r4, #20]
 8005240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005248:	3301      	adds	r3, #1
 800524a:	444b      	add	r3, r9
 800524c:	106d      	asrs	r5, r5, #1
 800524e:	429d      	cmp	r5, r3
 8005250:	bf38      	it	cc
 8005252:	461d      	movcc	r5, r3
 8005254:	0553      	lsls	r3, r2, #21
 8005256:	d531      	bpl.n	80052bc <__ssputs_r+0xa0>
 8005258:	4629      	mov	r1, r5
 800525a:	f000 fb55 	bl	8005908 <_malloc_r>
 800525e:	4606      	mov	r6, r0
 8005260:	b950      	cbnz	r0, 8005278 <__ssputs_r+0x5c>
 8005262:	230c      	movs	r3, #12
 8005264:	f8ca 3000 	str.w	r3, [sl]
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	6921      	ldr	r1, [r4, #16]
 800527a:	464a      	mov	r2, r9
 800527c:	f7ff ff98 	bl	80051b0 <memcpy>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	6126      	str	r6, [r4, #16]
 800528e:	6165      	str	r5, [r4, #20]
 8005290:	444e      	add	r6, r9
 8005292:	eba5 0509 	sub.w	r5, r5, r9
 8005296:	6026      	str	r6, [r4, #0]
 8005298:	60a5      	str	r5, [r4, #8]
 800529a:	463e      	mov	r6, r7
 800529c:	42be      	cmp	r6, r7
 800529e:	d900      	bls.n	80052a2 <__ssputs_r+0x86>
 80052a0:	463e      	mov	r6, r7
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	4632      	mov	r2, r6
 80052a6:	4641      	mov	r1, r8
 80052a8:	f000 faa8 	bl	80057fc <memmove>
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	1b9b      	subs	r3, r3, r6
 80052b0:	60a3      	str	r3, [r4, #8]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	4433      	add	r3, r6
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7db      	b.n	8005274 <__ssputs_r+0x58>
 80052bc:	462a      	mov	r2, r5
 80052be:	f000 fb97 	bl	80059f0 <_realloc_r>
 80052c2:	4606      	mov	r6, r0
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d1e1      	bne.n	800528c <__ssputs_r+0x70>
 80052c8:	6921      	ldr	r1, [r4, #16]
 80052ca:	4650      	mov	r0, sl
 80052cc:	f000 fab0 	bl	8005830 <_free_r>
 80052d0:	e7c7      	b.n	8005262 <__ssputs_r+0x46>
	...

080052d4 <_svfiprintf_r>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4698      	mov	r8, r3
 80052da:	898b      	ldrh	r3, [r1, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	b09d      	sub	sp, #116	; 0x74
 80052e0:	4607      	mov	r7, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	d50e      	bpl.n	8005306 <_svfiprintf_r+0x32>
 80052e8:	690b      	ldr	r3, [r1, #16]
 80052ea:	b963      	cbnz	r3, 8005306 <_svfiprintf_r+0x32>
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	f000 fb0b 	bl	8005908 <_malloc_r>
 80052f2:	6028      	str	r0, [r5, #0]
 80052f4:	6128      	str	r0, [r5, #16]
 80052f6:	b920      	cbnz	r0, 8005302 <_svfiprintf_r+0x2e>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	e0d1      	b.n	80054a6 <_svfiprintf_r+0x1d2>
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	616b      	str	r3, [r5, #20]
 8005306:	2300      	movs	r3, #0
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	2320      	movs	r3, #32
 800530c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005310:	f8cd 800c 	str.w	r8, [sp, #12]
 8005314:	2330      	movs	r3, #48	; 0x30
 8005316:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054c0 <_svfiprintf_r+0x1ec>
 800531a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800531e:	f04f 0901 	mov.w	r9, #1
 8005322:	4623      	mov	r3, r4
 8005324:	469a      	mov	sl, r3
 8005326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532a:	b10a      	cbz	r2, 8005330 <_svfiprintf_r+0x5c>
 800532c:	2a25      	cmp	r2, #37	; 0x25
 800532e:	d1f9      	bne.n	8005324 <_svfiprintf_r+0x50>
 8005330:	ebba 0b04 	subs.w	fp, sl, r4
 8005334:	d00b      	beq.n	800534e <_svfiprintf_r+0x7a>
 8005336:	465b      	mov	r3, fp
 8005338:	4622      	mov	r2, r4
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ff6d 	bl	800521c <__ssputs_r>
 8005342:	3001      	adds	r0, #1
 8005344:	f000 80aa 	beq.w	800549c <_svfiprintf_r+0x1c8>
 8005348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800534a:	445a      	add	r2, fp
 800534c:	9209      	str	r2, [sp, #36]	; 0x24
 800534e:	f89a 3000 	ldrb.w	r3, [sl]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80a2 	beq.w	800549c <_svfiprintf_r+0x1c8>
 8005358:	2300      	movs	r3, #0
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005362:	f10a 0a01 	add.w	sl, sl, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800536e:	931a      	str	r3, [sp, #104]	; 0x68
 8005370:	4654      	mov	r4, sl
 8005372:	2205      	movs	r2, #5
 8005374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005378:	4851      	ldr	r0, [pc, #324]	; (80054c0 <_svfiprintf_r+0x1ec>)
 800537a:	f7fa ff31 	bl	80001e0 <memchr>
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	b9d8      	cbnz	r0, 80053ba <_svfiprintf_r+0xe6>
 8005382:	06d0      	lsls	r0, r2, #27
 8005384:	bf44      	itt	mi
 8005386:	2320      	movmi	r3, #32
 8005388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800538c:	0711      	lsls	r1, r2, #28
 800538e:	bf44      	itt	mi
 8005390:	232b      	movmi	r3, #43	; 0x2b
 8005392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005396:	f89a 3000 	ldrb.w	r3, [sl]
 800539a:	2b2a      	cmp	r3, #42	; 0x2a
 800539c:	d015      	beq.n	80053ca <_svfiprintf_r+0xf6>
 800539e:	9a07      	ldr	r2, [sp, #28]
 80053a0:	4654      	mov	r4, sl
 80053a2:	2000      	movs	r0, #0
 80053a4:	f04f 0c0a 	mov.w	ip, #10
 80053a8:	4621      	mov	r1, r4
 80053aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ae:	3b30      	subs	r3, #48	; 0x30
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d94e      	bls.n	8005452 <_svfiprintf_r+0x17e>
 80053b4:	b1b0      	cbz	r0, 80053e4 <_svfiprintf_r+0x110>
 80053b6:	9207      	str	r2, [sp, #28]
 80053b8:	e014      	b.n	80053e4 <_svfiprintf_r+0x110>
 80053ba:	eba0 0308 	sub.w	r3, r0, r8
 80053be:	fa09 f303 	lsl.w	r3, r9, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	46a2      	mov	sl, r4
 80053c8:	e7d2      	b.n	8005370 <_svfiprintf_r+0x9c>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9103      	str	r1, [sp, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbb      	ittet	lt
 80053d6:	425b      	neglt	r3, r3
 80053d8:	f042 0202 	orrlt.w	r2, r2, #2
 80053dc:	9307      	strge	r3, [sp, #28]
 80053de:	9307      	strlt	r3, [sp, #28]
 80053e0:	bfb8      	it	lt
 80053e2:	9204      	strlt	r2, [sp, #16]
 80053e4:	7823      	ldrb	r3, [r4, #0]
 80053e6:	2b2e      	cmp	r3, #46	; 0x2e
 80053e8:	d10c      	bne.n	8005404 <_svfiprintf_r+0x130>
 80053ea:	7863      	ldrb	r3, [r4, #1]
 80053ec:	2b2a      	cmp	r3, #42	; 0x2a
 80053ee:	d135      	bne.n	800545c <_svfiprintf_r+0x188>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfb8      	it	lt
 80053fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005400:	3402      	adds	r4, #2
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054d0 <_svfiprintf_r+0x1fc>
 8005408:	7821      	ldrb	r1, [r4, #0]
 800540a:	2203      	movs	r2, #3
 800540c:	4650      	mov	r0, sl
 800540e:	f7fa fee7 	bl	80001e0 <memchr>
 8005412:	b140      	cbz	r0, 8005426 <_svfiprintf_r+0x152>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	eba0 000a 	sub.w	r0, r0, sl
 800541a:	fa03 f000 	lsl.w	r0, r3, r0
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	4303      	orrs	r3, r0
 8005422:	3401      	adds	r4, #1
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542a:	4826      	ldr	r0, [pc, #152]	; (80054c4 <_svfiprintf_r+0x1f0>)
 800542c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005430:	2206      	movs	r2, #6
 8005432:	f7fa fed5 	bl	80001e0 <memchr>
 8005436:	2800      	cmp	r0, #0
 8005438:	d038      	beq.n	80054ac <_svfiprintf_r+0x1d8>
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <_svfiprintf_r+0x1f4>)
 800543c:	bb1b      	cbnz	r3, 8005486 <_svfiprintf_r+0x1b2>
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	3307      	adds	r3, #7
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	3308      	adds	r3, #8
 8005448:	9303      	str	r3, [sp, #12]
 800544a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544c:	4433      	add	r3, r6
 800544e:	9309      	str	r3, [sp, #36]	; 0x24
 8005450:	e767      	b.n	8005322 <_svfiprintf_r+0x4e>
 8005452:	fb0c 3202 	mla	r2, ip, r2, r3
 8005456:	460c      	mov	r4, r1
 8005458:	2001      	movs	r0, #1
 800545a:	e7a5      	b.n	80053a8 <_svfiprintf_r+0xd4>
 800545c:	2300      	movs	r3, #0
 800545e:	3401      	adds	r4, #1
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	4619      	mov	r1, r3
 8005464:	f04f 0c0a 	mov.w	ip, #10
 8005468:	4620      	mov	r0, r4
 800546a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800546e:	3a30      	subs	r2, #48	; 0x30
 8005470:	2a09      	cmp	r2, #9
 8005472:	d903      	bls.n	800547c <_svfiprintf_r+0x1a8>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0c5      	beq.n	8005404 <_svfiprintf_r+0x130>
 8005478:	9105      	str	r1, [sp, #20]
 800547a:	e7c3      	b.n	8005404 <_svfiprintf_r+0x130>
 800547c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005480:	4604      	mov	r4, r0
 8005482:	2301      	movs	r3, #1
 8005484:	e7f0      	b.n	8005468 <_svfiprintf_r+0x194>
 8005486:	ab03      	add	r3, sp, #12
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	462a      	mov	r2, r5
 800548c:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <_svfiprintf_r+0x1f8>)
 800548e:	a904      	add	r1, sp, #16
 8005490:	4638      	mov	r0, r7
 8005492:	f3af 8000 	nop.w
 8005496:	1c42      	adds	r2, r0, #1
 8005498:	4606      	mov	r6, r0
 800549a:	d1d6      	bne.n	800544a <_svfiprintf_r+0x176>
 800549c:	89ab      	ldrh	r3, [r5, #12]
 800549e:	065b      	lsls	r3, r3, #25
 80054a0:	f53f af2c 	bmi.w	80052fc <_svfiprintf_r+0x28>
 80054a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a6:	b01d      	add	sp, #116	; 0x74
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	ab03      	add	r3, sp, #12
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	462a      	mov	r2, r5
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <_svfiprintf_r+0x1f8>)
 80054b4:	a904      	add	r1, sp, #16
 80054b6:	4638      	mov	r0, r7
 80054b8:	f000 f87a 	bl	80055b0 <_printf_i>
 80054bc:	e7eb      	b.n	8005496 <_svfiprintf_r+0x1c2>
 80054be:	bf00      	nop
 80054c0:	08005b0c 	.word	0x08005b0c
 80054c4:	08005b16 	.word	0x08005b16
 80054c8:	00000000 	.word	0x00000000
 80054cc:	0800521d 	.word	0x0800521d
 80054d0:	08005b12 	.word	0x08005b12

080054d4 <_printf_common>:
 80054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	4616      	mov	r6, r2
 80054da:	4699      	mov	r9, r3
 80054dc:	688a      	ldr	r2, [r1, #8]
 80054de:	690b      	ldr	r3, [r1, #16]
 80054e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	bfb8      	it	lt
 80054e8:	4613      	movlt	r3, r2
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054f0:	4607      	mov	r7, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	b10a      	cbz	r2, 80054fa <_printf_common+0x26>
 80054f6:	3301      	adds	r3, #1
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	0699      	lsls	r1, r3, #26
 80054fe:	bf42      	ittt	mi
 8005500:	6833      	ldrmi	r3, [r6, #0]
 8005502:	3302      	addmi	r3, #2
 8005504:	6033      	strmi	r3, [r6, #0]
 8005506:	6825      	ldr	r5, [r4, #0]
 8005508:	f015 0506 	ands.w	r5, r5, #6
 800550c:	d106      	bne.n	800551c <_printf_common+0x48>
 800550e:	f104 0a19 	add.w	sl, r4, #25
 8005512:	68e3      	ldr	r3, [r4, #12]
 8005514:	6832      	ldr	r2, [r6, #0]
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	42ab      	cmp	r3, r5
 800551a:	dc26      	bgt.n	800556a <_printf_common+0x96>
 800551c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005520:	1e13      	subs	r3, r2, #0
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	bf18      	it	ne
 8005526:	2301      	movne	r3, #1
 8005528:	0692      	lsls	r2, r2, #26
 800552a:	d42b      	bmi.n	8005584 <_printf_common+0xb0>
 800552c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005530:	4649      	mov	r1, r9
 8005532:	4638      	mov	r0, r7
 8005534:	47c0      	blx	r8
 8005536:	3001      	adds	r0, #1
 8005538:	d01e      	beq.n	8005578 <_printf_common+0xa4>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	68e5      	ldr	r5, [r4, #12]
 800553e:	6832      	ldr	r2, [r6, #0]
 8005540:	f003 0306 	and.w	r3, r3, #6
 8005544:	2b04      	cmp	r3, #4
 8005546:	bf08      	it	eq
 8005548:	1aad      	subeq	r5, r5, r2
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	6922      	ldr	r2, [r4, #16]
 800554e:	bf0c      	ite	eq
 8005550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005554:	2500      	movne	r5, #0
 8005556:	4293      	cmp	r3, r2
 8005558:	bfc4      	itt	gt
 800555a:	1a9b      	subgt	r3, r3, r2
 800555c:	18ed      	addgt	r5, r5, r3
 800555e:	2600      	movs	r6, #0
 8005560:	341a      	adds	r4, #26
 8005562:	42b5      	cmp	r5, r6
 8005564:	d11a      	bne.n	800559c <_printf_common+0xc8>
 8005566:	2000      	movs	r0, #0
 8005568:	e008      	b.n	800557c <_printf_common+0xa8>
 800556a:	2301      	movs	r3, #1
 800556c:	4652      	mov	r2, sl
 800556e:	4649      	mov	r1, r9
 8005570:	4638      	mov	r0, r7
 8005572:	47c0      	blx	r8
 8005574:	3001      	adds	r0, #1
 8005576:	d103      	bne.n	8005580 <_printf_common+0xac>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005580:	3501      	adds	r5, #1
 8005582:	e7c6      	b.n	8005512 <_printf_common+0x3e>
 8005584:	18e1      	adds	r1, r4, r3
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	2030      	movs	r0, #48	; 0x30
 800558a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800558e:	4422      	add	r2, r4
 8005590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005598:	3302      	adds	r3, #2
 800559a:	e7c7      	b.n	800552c <_printf_common+0x58>
 800559c:	2301      	movs	r3, #1
 800559e:	4622      	mov	r2, r4
 80055a0:	4649      	mov	r1, r9
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	3001      	adds	r0, #1
 80055a8:	d0e6      	beq.n	8005578 <_printf_common+0xa4>
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7d9      	b.n	8005562 <_printf_common+0x8e>
	...

080055b0 <_printf_i>:
 80055b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	7e0f      	ldrb	r7, [r1, #24]
 80055b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055b8:	2f78      	cmp	r7, #120	; 0x78
 80055ba:	4691      	mov	r9, r2
 80055bc:	4680      	mov	r8, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	469a      	mov	sl, r3
 80055c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055c6:	d807      	bhi.n	80055d8 <_printf_i+0x28>
 80055c8:	2f62      	cmp	r7, #98	; 0x62
 80055ca:	d80a      	bhi.n	80055e2 <_printf_i+0x32>
 80055cc:	2f00      	cmp	r7, #0
 80055ce:	f000 80d8 	beq.w	8005782 <_printf_i+0x1d2>
 80055d2:	2f58      	cmp	r7, #88	; 0x58
 80055d4:	f000 80a3 	beq.w	800571e <_printf_i+0x16e>
 80055d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055e0:	e03a      	b.n	8005658 <_printf_i+0xa8>
 80055e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055e6:	2b15      	cmp	r3, #21
 80055e8:	d8f6      	bhi.n	80055d8 <_printf_i+0x28>
 80055ea:	a101      	add	r1, pc, #4	; (adr r1, 80055f0 <_printf_i+0x40>)
 80055ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055f0:	08005649 	.word	0x08005649
 80055f4:	0800565d 	.word	0x0800565d
 80055f8:	080055d9 	.word	0x080055d9
 80055fc:	080055d9 	.word	0x080055d9
 8005600:	080055d9 	.word	0x080055d9
 8005604:	080055d9 	.word	0x080055d9
 8005608:	0800565d 	.word	0x0800565d
 800560c:	080055d9 	.word	0x080055d9
 8005610:	080055d9 	.word	0x080055d9
 8005614:	080055d9 	.word	0x080055d9
 8005618:	080055d9 	.word	0x080055d9
 800561c:	08005769 	.word	0x08005769
 8005620:	0800568d 	.word	0x0800568d
 8005624:	0800574b 	.word	0x0800574b
 8005628:	080055d9 	.word	0x080055d9
 800562c:	080055d9 	.word	0x080055d9
 8005630:	0800578b 	.word	0x0800578b
 8005634:	080055d9 	.word	0x080055d9
 8005638:	0800568d 	.word	0x0800568d
 800563c:	080055d9 	.word	0x080055d9
 8005640:	080055d9 	.word	0x080055d9
 8005644:	08005753 	.word	0x08005753
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005658:	2301      	movs	r3, #1
 800565a:	e0a3      	b.n	80057a4 <_printf_i+0x1f4>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	6829      	ldr	r1, [r5, #0]
 8005660:	0606      	lsls	r6, r0, #24
 8005662:	f101 0304 	add.w	r3, r1, #4
 8005666:	d50a      	bpl.n	800567e <_printf_i+0xce>
 8005668:	680e      	ldr	r6, [r1, #0]
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	2e00      	cmp	r6, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xc8>
 8005670:	232d      	movs	r3, #45	; 0x2d
 8005672:	4276      	negs	r6, r6
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005678:	485e      	ldr	r0, [pc, #376]	; (80057f4 <_printf_i+0x244>)
 800567a:	230a      	movs	r3, #10
 800567c:	e019      	b.n	80056b2 <_printf_i+0x102>
 800567e:	680e      	ldr	r6, [r1, #0]
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005686:	bf18      	it	ne
 8005688:	b236      	sxthne	r6, r6
 800568a:	e7ef      	b.n	800566c <_printf_i+0xbc>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	1d19      	adds	r1, r3, #4
 8005692:	6029      	str	r1, [r5, #0]
 8005694:	0601      	lsls	r1, r0, #24
 8005696:	d501      	bpl.n	800569c <_printf_i+0xec>
 8005698:	681e      	ldr	r6, [r3, #0]
 800569a:	e002      	b.n	80056a2 <_printf_i+0xf2>
 800569c:	0646      	lsls	r6, r0, #25
 800569e:	d5fb      	bpl.n	8005698 <_printf_i+0xe8>
 80056a0:	881e      	ldrh	r6, [r3, #0]
 80056a2:	4854      	ldr	r0, [pc, #336]	; (80057f4 <_printf_i+0x244>)
 80056a4:	2f6f      	cmp	r7, #111	; 0x6f
 80056a6:	bf0c      	ite	eq
 80056a8:	2308      	moveq	r3, #8
 80056aa:	230a      	movne	r3, #10
 80056ac:	2100      	movs	r1, #0
 80056ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056b2:	6865      	ldr	r5, [r4, #4]
 80056b4:	60a5      	str	r5, [r4, #8]
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	bfa2      	ittt	ge
 80056ba:	6821      	ldrge	r1, [r4, #0]
 80056bc:	f021 0104 	bicge.w	r1, r1, #4
 80056c0:	6021      	strge	r1, [r4, #0]
 80056c2:	b90e      	cbnz	r6, 80056c8 <_printf_i+0x118>
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	d04d      	beq.n	8005764 <_printf_i+0x1b4>
 80056c8:	4615      	mov	r5, r2
 80056ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80056ce:	fb03 6711 	mls	r7, r3, r1, r6
 80056d2:	5dc7      	ldrb	r7, [r0, r7]
 80056d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056d8:	4637      	mov	r7, r6
 80056da:	42bb      	cmp	r3, r7
 80056dc:	460e      	mov	r6, r1
 80056de:	d9f4      	bls.n	80056ca <_printf_i+0x11a>
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d10b      	bne.n	80056fc <_printf_i+0x14c>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	07de      	lsls	r6, r3, #31
 80056e8:	d508      	bpl.n	80056fc <_printf_i+0x14c>
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	6861      	ldr	r1, [r4, #4]
 80056ee:	4299      	cmp	r1, r3
 80056f0:	bfde      	ittt	le
 80056f2:	2330      	movle	r3, #48	; 0x30
 80056f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056fc:	1b52      	subs	r2, r2, r5
 80056fe:	6122      	str	r2, [r4, #16]
 8005700:	f8cd a000 	str.w	sl, [sp]
 8005704:	464b      	mov	r3, r9
 8005706:	aa03      	add	r2, sp, #12
 8005708:	4621      	mov	r1, r4
 800570a:	4640      	mov	r0, r8
 800570c:	f7ff fee2 	bl	80054d4 <_printf_common>
 8005710:	3001      	adds	r0, #1
 8005712:	d14c      	bne.n	80057ae <_printf_i+0x1fe>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	b004      	add	sp, #16
 800571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571e:	4835      	ldr	r0, [pc, #212]	; (80057f4 <_printf_i+0x244>)
 8005720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005724:	6829      	ldr	r1, [r5, #0]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f851 6b04 	ldr.w	r6, [r1], #4
 800572c:	6029      	str	r1, [r5, #0]
 800572e:	061d      	lsls	r5, r3, #24
 8005730:	d514      	bpl.n	800575c <_printf_i+0x1ac>
 8005732:	07df      	lsls	r7, r3, #31
 8005734:	bf44      	itt	mi
 8005736:	f043 0320 	orrmi.w	r3, r3, #32
 800573a:	6023      	strmi	r3, [r4, #0]
 800573c:	b91e      	cbnz	r6, 8005746 <_printf_i+0x196>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	f023 0320 	bic.w	r3, r3, #32
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	2310      	movs	r3, #16
 8005748:	e7b0      	b.n	80056ac <_printf_i+0xfc>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f043 0320 	orr.w	r3, r3, #32
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	2378      	movs	r3, #120	; 0x78
 8005754:	4828      	ldr	r0, [pc, #160]	; (80057f8 <_printf_i+0x248>)
 8005756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800575a:	e7e3      	b.n	8005724 <_printf_i+0x174>
 800575c:	0659      	lsls	r1, r3, #25
 800575e:	bf48      	it	mi
 8005760:	b2b6      	uxthmi	r6, r6
 8005762:	e7e6      	b.n	8005732 <_printf_i+0x182>
 8005764:	4615      	mov	r5, r2
 8005766:	e7bb      	b.n	80056e0 <_printf_i+0x130>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	6826      	ldr	r6, [r4, #0]
 800576c:	6961      	ldr	r1, [r4, #20]
 800576e:	1d18      	adds	r0, r3, #4
 8005770:	6028      	str	r0, [r5, #0]
 8005772:	0635      	lsls	r5, r6, #24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	d501      	bpl.n	800577c <_printf_i+0x1cc>
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	e002      	b.n	8005782 <_printf_i+0x1d2>
 800577c:	0670      	lsls	r0, r6, #25
 800577e:	d5fb      	bpl.n	8005778 <_printf_i+0x1c8>
 8005780:	8019      	strh	r1, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	4615      	mov	r5, r2
 8005788:	e7ba      	b.n	8005700 <_printf_i+0x150>
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	1d1a      	adds	r2, r3, #4
 800578e:	602a      	str	r2, [r5, #0]
 8005790:	681d      	ldr	r5, [r3, #0]
 8005792:	6862      	ldr	r2, [r4, #4]
 8005794:	2100      	movs	r1, #0
 8005796:	4628      	mov	r0, r5
 8005798:	f7fa fd22 	bl	80001e0 <memchr>
 800579c:	b108      	cbz	r0, 80057a2 <_printf_i+0x1f2>
 800579e:	1b40      	subs	r0, r0, r5
 80057a0:	6060      	str	r0, [r4, #4]
 80057a2:	6863      	ldr	r3, [r4, #4]
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	2300      	movs	r3, #0
 80057a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ac:	e7a8      	b.n	8005700 <_printf_i+0x150>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4649      	mov	r1, r9
 80057b4:	4640      	mov	r0, r8
 80057b6:	47d0      	blx	sl
 80057b8:	3001      	adds	r0, #1
 80057ba:	d0ab      	beq.n	8005714 <_printf_i+0x164>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	079b      	lsls	r3, r3, #30
 80057c0:	d413      	bmi.n	80057ea <_printf_i+0x23a>
 80057c2:	68e0      	ldr	r0, [r4, #12]
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	4298      	cmp	r0, r3
 80057c8:	bfb8      	it	lt
 80057ca:	4618      	movlt	r0, r3
 80057cc:	e7a4      	b.n	8005718 <_printf_i+0x168>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4632      	mov	r2, r6
 80057d2:	4649      	mov	r1, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	47d0      	blx	sl
 80057d8:	3001      	adds	r0, #1
 80057da:	d09b      	beq.n	8005714 <_printf_i+0x164>
 80057dc:	3501      	adds	r5, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	9903      	ldr	r1, [sp, #12]
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dcf2      	bgt.n	80057ce <_printf_i+0x21e>
 80057e8:	e7eb      	b.n	80057c2 <_printf_i+0x212>
 80057ea:	2500      	movs	r5, #0
 80057ec:	f104 0619 	add.w	r6, r4, #25
 80057f0:	e7f5      	b.n	80057de <_printf_i+0x22e>
 80057f2:	bf00      	nop
 80057f4:	08005b1d 	.word	0x08005b1d
 80057f8:	08005b2e 	.word	0x08005b2e

080057fc <memmove>:
 80057fc:	4288      	cmp	r0, r1
 80057fe:	b510      	push	{r4, lr}
 8005800:	eb01 0402 	add.w	r4, r1, r2
 8005804:	d902      	bls.n	800580c <memmove+0x10>
 8005806:	4284      	cmp	r4, r0
 8005808:	4623      	mov	r3, r4
 800580a:	d807      	bhi.n	800581c <memmove+0x20>
 800580c:	1e43      	subs	r3, r0, #1
 800580e:	42a1      	cmp	r1, r4
 8005810:	d008      	beq.n	8005824 <memmove+0x28>
 8005812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800581a:	e7f8      	b.n	800580e <memmove+0x12>
 800581c:	4402      	add	r2, r0
 800581e:	4601      	mov	r1, r0
 8005820:	428a      	cmp	r2, r1
 8005822:	d100      	bne.n	8005826 <memmove+0x2a>
 8005824:	bd10      	pop	{r4, pc}
 8005826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582e:	e7f7      	b.n	8005820 <memmove+0x24>

08005830 <_free_r>:
 8005830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005832:	2900      	cmp	r1, #0
 8005834:	d044      	beq.n	80058c0 <_free_r+0x90>
 8005836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800583a:	9001      	str	r0, [sp, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f1a1 0404 	sub.w	r4, r1, #4
 8005842:	bfb8      	it	lt
 8005844:	18e4      	addlt	r4, r4, r3
 8005846:	f000 f913 	bl	8005a70 <__malloc_lock>
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <_free_r+0x94>)
 800584c:	9801      	ldr	r0, [sp, #4]
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	b933      	cbnz	r3, 8005860 <_free_r+0x30>
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	6014      	str	r4, [r2, #0]
 8005856:	b003      	add	sp, #12
 8005858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800585c:	f000 b90e 	b.w	8005a7c <__malloc_unlock>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d908      	bls.n	8005876 <_free_r+0x46>
 8005864:	6825      	ldr	r5, [r4, #0]
 8005866:	1961      	adds	r1, r4, r5
 8005868:	428b      	cmp	r3, r1
 800586a:	bf01      	itttt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	1949      	addeq	r1, r1, r5
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	e7ed      	b.n	8005852 <_free_r+0x22>
 8005876:	461a      	mov	r2, r3
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	b10b      	cbz	r3, 8005880 <_free_r+0x50>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d9fa      	bls.n	8005876 <_free_r+0x46>
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	1855      	adds	r5, r2, r1
 8005884:	42a5      	cmp	r5, r4
 8005886:	d10b      	bne.n	80058a0 <_free_r+0x70>
 8005888:	6824      	ldr	r4, [r4, #0]
 800588a:	4421      	add	r1, r4
 800588c:	1854      	adds	r4, r2, r1
 800588e:	42a3      	cmp	r3, r4
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	d1e0      	bne.n	8005856 <_free_r+0x26>
 8005894:	681c      	ldr	r4, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	6053      	str	r3, [r2, #4]
 800589a:	4421      	add	r1, r4
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	e7da      	b.n	8005856 <_free_r+0x26>
 80058a0:	d902      	bls.n	80058a8 <_free_r+0x78>
 80058a2:	230c      	movs	r3, #12
 80058a4:	6003      	str	r3, [r0, #0]
 80058a6:	e7d6      	b.n	8005856 <_free_r+0x26>
 80058a8:	6825      	ldr	r5, [r4, #0]
 80058aa:	1961      	adds	r1, r4, r5
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf04      	itt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	bf04      	itt	eq
 80058b8:	1949      	addeq	r1, r1, r5
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	6054      	str	r4, [r2, #4]
 80058be:	e7ca      	b.n	8005856 <_free_r+0x26>
 80058c0:	b003      	add	sp, #12
 80058c2:	bd30      	pop	{r4, r5, pc}
 80058c4:	200193a4 	.word	0x200193a4

080058c8 <sbrk_aligned>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4e0e      	ldr	r6, [pc, #56]	; (8005904 <sbrk_aligned+0x3c>)
 80058cc:	460c      	mov	r4, r1
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	4605      	mov	r5, r0
 80058d2:	b911      	cbnz	r1, 80058da <sbrk_aligned+0x12>
 80058d4:	f000 f8bc 	bl	8005a50 <_sbrk_r>
 80058d8:	6030      	str	r0, [r6, #0]
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f8b7 	bl	8005a50 <_sbrk_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d00a      	beq.n	80058fc <sbrk_aligned+0x34>
 80058e6:	1cc4      	adds	r4, r0, #3
 80058e8:	f024 0403 	bic.w	r4, r4, #3
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d007      	beq.n	8005900 <sbrk_aligned+0x38>
 80058f0:	1a21      	subs	r1, r4, r0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 f8ac 	bl	8005a50 <_sbrk_r>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d101      	bne.n	8005900 <sbrk_aligned+0x38>
 80058fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005900:	4620      	mov	r0, r4
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	200193a8 	.word	0x200193a8

08005908 <_malloc_r>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	1ccd      	adds	r5, r1, #3
 800590e:	f025 0503 	bic.w	r5, r5, #3
 8005912:	3508      	adds	r5, #8
 8005914:	2d0c      	cmp	r5, #12
 8005916:	bf38      	it	cc
 8005918:	250c      	movcc	r5, #12
 800591a:	2d00      	cmp	r5, #0
 800591c:	4607      	mov	r7, r0
 800591e:	db01      	blt.n	8005924 <_malloc_r+0x1c>
 8005920:	42a9      	cmp	r1, r5
 8005922:	d905      	bls.n	8005930 <_malloc_r+0x28>
 8005924:	230c      	movs	r3, #12
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	2600      	movs	r6, #0
 800592a:	4630      	mov	r0, r6
 800592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005930:	4e2e      	ldr	r6, [pc, #184]	; (80059ec <_malloc_r+0xe4>)
 8005932:	f000 f89d 	bl	8005a70 <__malloc_lock>
 8005936:	6833      	ldr	r3, [r6, #0]
 8005938:	461c      	mov	r4, r3
 800593a:	bb34      	cbnz	r4, 800598a <_malloc_r+0x82>
 800593c:	4629      	mov	r1, r5
 800593e:	4638      	mov	r0, r7
 8005940:	f7ff ffc2 	bl	80058c8 <sbrk_aligned>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	4604      	mov	r4, r0
 8005948:	d14d      	bne.n	80059e6 <_malloc_r+0xde>
 800594a:	6834      	ldr	r4, [r6, #0]
 800594c:	4626      	mov	r6, r4
 800594e:	2e00      	cmp	r6, #0
 8005950:	d140      	bne.n	80059d4 <_malloc_r+0xcc>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	4631      	mov	r1, r6
 8005956:	4638      	mov	r0, r7
 8005958:	eb04 0803 	add.w	r8, r4, r3
 800595c:	f000 f878 	bl	8005a50 <_sbrk_r>
 8005960:	4580      	cmp	r8, r0
 8005962:	d13a      	bne.n	80059da <_malloc_r+0xd2>
 8005964:	6821      	ldr	r1, [r4, #0]
 8005966:	3503      	adds	r5, #3
 8005968:	1a6d      	subs	r5, r5, r1
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	4629      	mov	r1, r5
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ffa5 	bl	80058c8 <sbrk_aligned>
 800597e:	3001      	adds	r0, #1
 8005980:	d02b      	beq.n	80059da <_malloc_r+0xd2>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	442b      	add	r3, r5
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	e00e      	b.n	80059a8 <_malloc_r+0xa0>
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	1b52      	subs	r2, r2, r5
 800598e:	d41e      	bmi.n	80059ce <_malloc_r+0xc6>
 8005990:	2a0b      	cmp	r2, #11
 8005992:	d916      	bls.n	80059c2 <_malloc_r+0xba>
 8005994:	1961      	adds	r1, r4, r5
 8005996:	42a3      	cmp	r3, r4
 8005998:	6025      	str	r5, [r4, #0]
 800599a:	bf18      	it	ne
 800599c:	6059      	strne	r1, [r3, #4]
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	bf08      	it	eq
 80059a2:	6031      	streq	r1, [r6, #0]
 80059a4:	5162      	str	r2, [r4, r5]
 80059a6:	604b      	str	r3, [r1, #4]
 80059a8:	4638      	mov	r0, r7
 80059aa:	f104 060b 	add.w	r6, r4, #11
 80059ae:	f000 f865 	bl	8005a7c <__malloc_unlock>
 80059b2:	f026 0607 	bic.w	r6, r6, #7
 80059b6:	1d23      	adds	r3, r4, #4
 80059b8:	1af2      	subs	r2, r6, r3
 80059ba:	d0b6      	beq.n	800592a <_malloc_r+0x22>
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	50a3      	str	r3, [r4, r2]
 80059c0:	e7b3      	b.n	800592a <_malloc_r+0x22>
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	bf0c      	ite	eq
 80059c8:	6032      	streq	r2, [r6, #0]
 80059ca:	605a      	strne	r2, [r3, #4]
 80059cc:	e7ec      	b.n	80059a8 <_malloc_r+0xa0>
 80059ce:	4623      	mov	r3, r4
 80059d0:	6864      	ldr	r4, [r4, #4]
 80059d2:	e7b2      	b.n	800593a <_malloc_r+0x32>
 80059d4:	4634      	mov	r4, r6
 80059d6:	6876      	ldr	r6, [r6, #4]
 80059d8:	e7b9      	b.n	800594e <_malloc_r+0x46>
 80059da:	230c      	movs	r3, #12
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	4638      	mov	r0, r7
 80059e0:	f000 f84c 	bl	8005a7c <__malloc_unlock>
 80059e4:	e7a1      	b.n	800592a <_malloc_r+0x22>
 80059e6:	6025      	str	r5, [r4, #0]
 80059e8:	e7de      	b.n	80059a8 <_malloc_r+0xa0>
 80059ea:	bf00      	nop
 80059ec:	200193a4 	.word	0x200193a4

080059f0 <_realloc_r>:
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4680      	mov	r8, r0
 80059f6:	4614      	mov	r4, r2
 80059f8:	460e      	mov	r6, r1
 80059fa:	b921      	cbnz	r1, 8005a06 <_realloc_r+0x16>
 80059fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a00:	4611      	mov	r1, r2
 8005a02:	f7ff bf81 	b.w	8005908 <_malloc_r>
 8005a06:	b92a      	cbnz	r2, 8005a14 <_realloc_r+0x24>
 8005a08:	f7ff ff12 	bl	8005830 <_free_r>
 8005a0c:	4625      	mov	r5, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a14:	f000 f838 	bl	8005a88 <_malloc_usable_size_r>
 8005a18:	4284      	cmp	r4, r0
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	d802      	bhi.n	8005a24 <_realloc_r+0x34>
 8005a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a22:	d812      	bhi.n	8005a4a <_realloc_r+0x5a>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4640      	mov	r0, r8
 8005a28:	f7ff ff6e 	bl	8005908 <_malloc_r>
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0ed      	beq.n	8005a0e <_realloc_r+0x1e>
 8005a32:	42bc      	cmp	r4, r7
 8005a34:	4622      	mov	r2, r4
 8005a36:	4631      	mov	r1, r6
 8005a38:	bf28      	it	cs
 8005a3a:	463a      	movcs	r2, r7
 8005a3c:	f7ff fbb8 	bl	80051b0 <memcpy>
 8005a40:	4631      	mov	r1, r6
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fef4 	bl	8005830 <_free_r>
 8005a48:	e7e1      	b.n	8005a0e <_realloc_r+0x1e>
 8005a4a:	4635      	mov	r5, r6
 8005a4c:	e7df      	b.n	8005a0e <_realloc_r+0x1e>
	...

08005a50 <_sbrk_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	; (8005a6c <_sbrk_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb f936 	bl	8000ccc <_sbrk>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_sbrk_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_sbrk_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	200193ac 	.word	0x200193ac

08005a70 <__malloc_lock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__malloc_lock+0x8>)
 8005a72:	f000 b811 	b.w	8005a98 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	200193b0 	.word	0x200193b0

08005a7c <__malloc_unlock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__malloc_unlock+0x8>)
 8005a7e:	f000 b80c 	b.w	8005a9a <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	200193b0 	.word	0x200193b0

08005a88 <_malloc_usable_size_r>:
 8005a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8c:	1f18      	subs	r0, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfbc      	itt	lt
 8005a92:	580b      	ldrlt	r3, [r1, r0]
 8005a94:	18c0      	addlt	r0, r0, r3
 8005a96:	4770      	bx	lr

08005a98 <__retarget_lock_acquire_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <__retarget_lock_release_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
