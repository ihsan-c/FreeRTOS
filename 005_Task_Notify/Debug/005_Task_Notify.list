
005_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d4  080067d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067dc  080067dc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001a828  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a844  2001a844  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d04  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a0e  00000000  00000000  00032d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022950  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013331  00000000  00000000  0005a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ff9  00000000  00000000  0006d5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001435b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000495c  00000000  00000000  00143604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065dc 	.word	0x080065dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080065dc 	.word	0x080065dc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019268 	.word	0x20019268

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc47 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f897 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	483b      	ldr	r0, [pc, #236]	; (8000668 <main+0x100>)
 800057c:	f005 fefe 	bl	800637c <SEGGER_UART_init>

  //CYCLCNT enable for SEGGER view
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x104>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a39      	ldr	r2, [pc, #228]	; (800066c <main+0x104>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f003 faea 	bl	8003b64 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <main+0x108>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4935      	ldr	r1, [pc, #212]	; (8000674 <main+0x10c>)
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <main+0x110>)
 80005a0:	f001 ff52 	bl	8002448 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>
  next_task_handle =task1_handle;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <main+0x108>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <main+0x114>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <main+0x118>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	492b      	ldr	r1, [pc, #172]	; (8000684 <main+0x11c>)
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0x120>)
 80005da:	f001 ff35 	bl	8002448 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x124>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4921      	ldr	r1, [pc, #132]	; (8000690 <main+0x128>)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x12c>)
 800060c:	f001 ff1c 	bl	8002448 <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status =xTaskCreate(button_handler, "Button_Task", 200, NULL, 4, &task4_handle);
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x130>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x134>)
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <main+0x138>)
 800063e:	f001 ff03 	bl	8002448 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>
  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000660:	f002 f938 	bl	80028d4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0xfc>
 8000666:	bf00      	nop
 8000668:	0007a120 	.word	0x0007a120
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000038 	.word	0x20000038
 8000674:	080065f4 	.word	0x080065f4
 8000678:	08000a81 	.word	0x08000a81
 800067c:	20000048 	.word	0x20000048
 8000680:	2000003c 	.word	0x2000003c
 8000684:	08006604 	.word	0x08006604
 8000688:	08000b61 	.word	0x08000b61
 800068c:	20000040 	.word	0x20000040
 8000690:	08006614 	.word	0x08006614
 8000694:	08000af1 	.word	0x08000af1
 8000698:	20000044 	.word	0x20000044
 800069c:	08006624 	.word	0x08006624
 80006a0:	08000a35 	.word	0x08000a35

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 ff8a 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe75 	bl	8001418 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa5c 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f8d6 	bl	8001908 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 fa45 	bl	8000bf0 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fdb8 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fdb3 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fdad 	bl	80013b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fbeb 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4866      	ldr	r0, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800088a:	f000 fbdd 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485e      	ldr	r0, [pc, #376]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fbcd 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	485a      	ldr	r0, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fbc0 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d8:	2306      	movs	r3, #6
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4852      	ldr	r0, [pc, #328]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbb0 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e8:	23e0      	movs	r3, #224	; 0xe0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fba0 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800091c:	f000 fb94 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800093e:	f000 fb83 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800095c:	f000 fb74 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000960:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000972:	2306      	movs	r3, #6
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800097e:	f000 fb63 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000998:	f000 fb56 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 80009ba:	f000 fb45 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009d2:	f000 fb39 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80009f4:	f000 fb28 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000a0e:	f000 fb1b 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <button_handler>:

/* USER CODE BEGIN 4 */

static void button_handler()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
	uint8_t btn_read=0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71bb      	strb	r3, [r7, #6]
	uint8_t prev_read=0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		btn_read=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a42:	2101      	movs	r1, #1
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <button_handler+0x44>)
 8000a46:	f000 fc9b 	bl	8001380 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71bb      	strb	r3, [r7, #6]
		if(btn_read)
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00b      	beq.n	8000a6c <button_handler+0x38>
		{
			if(!prev_read)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d108      	bne.n	8000a6c <button_handler+0x38>
			{
				xTaskNotify(next_task_handle,0,eNoAction);
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <button_handler+0x48>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	f002 fab0 	bl	8002fcc <xTaskGenericNotify>
			}

		}
		prev_read=btn_read;
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	71fb      	strb	r3, [r7, #7]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 fef7 	bl	8002864 <vTaskDelay>
		btn_read=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a76:	e7e4      	b.n	8000a42 <button_handler+0xe>
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	20000048 	.word	0x20000048

08000a80 <led_green_handler>:
	}
}

static void led_green_handler(void* parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a88:	4814      	ldr	r0, [pc, #80]	; (8000adc <led_green_handler+0x5c>)
 8000a8a:	f005 fb2f 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <led_green_handler+0x60>)
 8000a94:	f000 fca5 	bl	80013e2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 fa09 	bl	8002ebc <xTaskGenericNotifyWait>
 8000aaa:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d1ea      	bne.n	8000a88 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000ab2:	f001 ff6b 	bl	800298c <vTaskSuspendAll>
			next_task_handle=task2_handle;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <led_green_handler+0x64>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <led_green_handler+0x68>)
 8000abc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000abe:	f001 ff73 	bl	80029a8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <led_green_handler+0x60>)
 8000aca:	f000 fc71 	bl	80013b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Green LED Task");
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <led_green_handler+0x6c>)
 8000ad0:	f005 fb0c 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f001 fe1b 	bl	8002710 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000ada:	e7d5      	b.n	8000a88 <led_green_handler+0x8>
 8000adc:	08006630 	.word	0x08006630
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	2000003c 	.word	0x2000003c
 8000ae8:	20000048 	.word	0x20000048
 8000aec:	08006644 	.word	0x08006644

08000af0 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <led_orange_handler+0x5c>)
 8000afa:	f005 faf7 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <led_orange_handler+0x60>)
 8000b04:	f000 fc6d 	bl	80013e2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 f9d1 	bl	8002ebc <xTaskGenericNotifyWait>
 8000b1a:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d1ea      	bne.n	8000af8 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000b22:	f001 ff33 	bl	800298c <vTaskSuspendAll>
			next_task_handle=task3_handle;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <led_orange_handler+0x64>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <led_orange_handler+0x68>)
 8000b2c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b2e:	f001 ff3b 	bl	80029a8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <led_orange_handler+0x60>)
 8000b3a:	f000 fc39 	bl	80013b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Orange LED Task");
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <led_orange_handler+0x6c>)
 8000b40:	f005 fad4 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000b44:	2000      	movs	r0, #0
 8000b46:	f001 fde3 	bl	8002710 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b4a:	e7d5      	b.n	8000af8 <led_orange_handler+0x8>
 8000b4c:	0800665c 	.word	0x0800665c
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	20000040 	.word	0x20000040
 8000b58:	20000048 	.word	0x20000048
 8000b5c:	08006670 	.word	0x08006670

08000b60 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <led_red_handler+0x5c>)
 8000b6a:	f005 fabf 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <led_red_handler+0x60>)
 8000b74:	f000 fc35 	bl	80013e2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000b78:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f002 f999 	bl	8002ebc <xTaskGenericNotifyWait>
 8000b8a:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1ea      	bne.n	8000b68 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b92:	f001 fefb 	bl	800298c <vTaskSuspendAll>
			next_task_handle=NULL;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <led_red_handler+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b9c:	f001 ff04 	bl	80029a8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <led_red_handler+0x60>)
 8000ba8:	f000 fc02 	bl	80013b0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete RED LED Task");
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <led_red_handler+0x68>)
 8000bae:	f005 fa9d 	bl	80060ec <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f001 fdac 	bl	8002710 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000bb8:	e7d6      	b.n	8000b68 <led_red_handler+0x8>
 8000bba:	bf00      	nop
 8000bbc:	08006688 	.word	0x08006688
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	20000048 	.word	0x20000048
 8000bc8:	0800669c 	.word	0x0800669c

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 f931 	bl	8000e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40001000 	.word	0x40001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f84a 	bl	8001d20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 f82f 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9e:	f001 f82b 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <HAL_InitTick+0xe8>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	0c9b      	lsrs	r3, r3, #18
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_InitTick+0xec>)
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HAL_InitTick+0xec>)
 8000cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_InitTick+0xec>)
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_InitTick+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_InitTick+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_InitTick+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_InitTick+0xec>)
 8000cde:	f001 f851 	bl	8001d84 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d11b      	bne.n	8000d28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <HAL_InitTick+0xec>)
 8000cf2:	f001 f8a1 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d04:	2036      	movs	r0, #54	; 0x36
 8000d06:	f000 f991 	bl	800102c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d808      	bhi.n	8000d22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 f96d 	bl	8000ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_InitTick+0xf4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e002      	b.n	8000d28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3738      	adds	r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	2000004c 	.word	0x2000004c
 8000d40:	40001000 	.word	0x40001000
 8000d44:	20000004 	.word	0x20000004

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM6_DAC_IRQHandler+0x10>)
 8000d7a:	f001 f8cd 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000004c 	.word	0x2000004c

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f005 fbb5 	bl	8006548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbc3 	bl	8000568 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000df0:	080067e4 	.word	0x080067e4
  ldr r2, =_sbss
 8000df4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000df8:	2001a844 	.word	0x2001a844

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f8d8 	bl	8000fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff0e 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fee4 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000094 	.word	0x20000094

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000094 	.word	0x20000094

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff4c 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001006:	f7ff ff61 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800100a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff ffb1 	bl	8000f78 <NVIC_EncodePriority>
 8001016:	4602      	mov	r2, r0
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff80 	bl	8000f24 <__NVIC_SetPriority>
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff54 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e16b      	b.n	800133c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 815a 	bne.w	8001336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80b4 	beq.w	8001336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <HAL_GPIO_Init+0x310>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x330>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x20a>
 800124e:	2307      	movs	r3, #7
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001252:	2308      	movs	r3, #8
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_GPIO_Init+0x334>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_GPIO_Init+0x334>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_GPIO_Init+0x334>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_GPIO_Init+0x334>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_Init+0x334>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_GPIO_Init+0x334>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae90 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	041a      	lsls	r2, r3, #16
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43d9      	mvns	r1, r3
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e267      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d00c      	beq.n	800145c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b85      	ldr	r3, [pc, #532]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	2b08      	cmp	r3, #8
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b82      	ldr	r3, [pc, #520]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b7e      	ldr	r3, [pc, #504]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05b      	beq.n	8001520 <HAL_RCC_OscConfig+0x108>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d157      	bne.n	8001520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e242      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x74>
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a75      	ldr	r2, [pc, #468]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6f      	ldr	r2, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6c      	ldr	r2, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 80014b0:	4b69      	ldr	r3, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a68      	ldr	r2, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a65      	ldr	r2, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fccc 	bl	8000e6c <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fcc8 	bl	8000e6c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e207      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fcb8 	bl	8000e6c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fcb4 	bl	8000e6c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1f3      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	4b51      	ldr	r3, [pc, #324]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xe8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	2b08      	cmp	r3, #8
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e1c7      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4937      	ldr	r1, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e03a      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <HAL_RCC_OscConfig+0x244>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fc6d 	bl	8000e6c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc69 	bl	8000e6c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1a8      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4925      	ldr	r1, [pc, #148]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x244>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc4c 	bl	8000e6c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc48 	bl	8000e6c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e187      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d036      	beq.n	8001670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d016      	beq.n	8001638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x248>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fc2c 	bl	8000e6c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc28 	bl	8000e6c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e167      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x240>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x200>
 8001636:	e01b      	b.n	8001670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x248>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fc15 	bl	8000e6c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	e00e      	b.n	8001664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fc11 	bl	8000e6c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d907      	bls.n	8001664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e150      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
 8001658:	40023800 	.word	0x40023800
 800165c:	42470000 	.word	0x42470000
 8001660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ea      	bne.n	8001646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8097 	beq.w	80017ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b81      	ldr	r3, [pc, #516]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a7c      	ldr	r2, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b77      	ldr	r3, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x474>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a73      	ldr	r2, [pc, #460]	; (800188c <HAL_RCC_OscConfig+0x474>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fbd1 	bl	8000e6c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fbcd 	bl	8000e6c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e10c      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x474>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x2ea>
 80016f4:	4b64      	ldr	r3, [pc, #400]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a63      	ldr	r2, [pc, #396]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x324>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b05      	cmp	r3, #5
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x30c>
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a5b      	ldr	r2, [pc, #364]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x324>
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a57      	ldr	r2, [pc, #348]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b55      	ldr	r3, [pc, #340]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a54      	ldr	r2, [pc, #336]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fb92 	bl	8000e6c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fb8e 	bl	8000e6c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0cb      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	4b49      	ldr	r3, [pc, #292]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0ee      	beq.n	800174c <HAL_RCC_OscConfig+0x334>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fb7c 	bl	8000e6c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff fb78 	bl	8000e6c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0b5      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a38      	ldr	r2, [pc, #224]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a1 	beq.w	80018f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d05c      	beq.n	800187c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d141      	bne.n	800184e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_RCC_OscConfig+0x478>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb4c 	bl	8000e6c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fb48 	bl	8000e6c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e087      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	019b      	lsls	r3, r3, #6
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	491b      	ldr	r1, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x478>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb21 	bl	8000e6c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb1d 	bl	8000e6c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e05c      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x416>
 800184c:	e054      	b.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_OscConfig+0x478>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fb0a 	bl	8000e6c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fb06 	bl	8000e6c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e045      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x470>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x444>
 800187a:	e03d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e038      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000
 8001890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x4ec>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d028      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d121      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11a      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	3b01      	subs	r3, #1
 80018de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cc      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d90c      	bls.n	8001944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d044      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e067      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff fa38 	bl	8000e6c <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff fa34 	bl	8000e6c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f8ce 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08006780 	.word	0x08006780
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad8:	b094      	sub	sp, #80	; 0x50
 8001ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d00d      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x40>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	f200 80e1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x34>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b06:	e0db      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b0c:	e0db      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b12:	e0d8      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	2200      	movs	r2, #0
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
 8001b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b46:	4622      	mov	r2, r4
 8001b48:	462b      	mov	r3, r5
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	0159      	lsls	r1, r3, #5
 8001b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b58:	0150      	lsls	r0, r2, #5
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4621      	mov	r1, r4
 8001b60:	1a51      	subs	r1, r2, r1
 8001b62:	6139      	str	r1, [r7, #16]
 8001b64:	4629      	mov	r1, r5
 8001b66:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b78:	4659      	mov	r1, fp
 8001b7a:	018b      	lsls	r3, r1, #6
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b82:	4651      	mov	r1, sl
 8001b84:	018a      	lsls	r2, r1, #6
 8001b86:	4651      	mov	r1, sl
 8001b88:	ebb2 0801 	subs.w	r8, r2, r1
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba6:	4690      	mov	r8, r2
 8001ba8:	4699      	mov	r9, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	eb18 0303 	adds.w	r3, r8, r3
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	eb49 0303 	adc.w	r3, r9, r3
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	024b      	lsls	r3, r1, #9
 8001bca:	4621      	mov	r1, r4
 8001bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	024a      	lsls	r2, r1, #9
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be4:	f7fe fb3e 	bl	8000264 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf0:	e058      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	464b      	mov	r3, r9
 8001c10:	f04f 0000 	mov.w	r0, #0
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	0159      	lsls	r1, r3, #5
 8001c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1e:	0150      	lsls	r0, r2, #5
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4641      	mov	r1, r8
 8001c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2a:	4649      	mov	r1, r9
 8001c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c44:	ebb2 040a 	subs.w	r4, r2, sl
 8001c48:	eb63 050b 	sbc.w	r5, r3, fp
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	00eb      	lsls	r3, r5, #3
 8001c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5a:	00e2      	lsls	r2, r4, #3
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	461d      	mov	r5, r3
 8001c60:	4643      	mov	r3, r8
 8001c62:	18e3      	adds	r3, r4, r3
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	464b      	mov	r3, r9
 8001c68:	eb45 0303 	adc.w	r3, r5, r3
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	61fa      	str	r2, [r7, #28]
 8001c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c98:	f7fe fae4 	bl	8000264 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3750      	adds	r7, #80	; 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08006790 	.word	0x08006790

08001d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCC_GetClockConfig+0x60>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9d8 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0202 	mvn.w	r2, #2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8ee 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8e0 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8f1 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8c4 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8b6 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8c7 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0208 	mvn.w	r2, #8
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f89a 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f88c 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f89d 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b10      	cmp	r3, #16
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b10      	cmp	r3, #16
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0210 	mvn.w	r2, #16
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f870 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f862 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f873 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fd98 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f902 	bl	80022cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d107      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f838 	bl	8002164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0220 	mvn.w	r2, #32
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8cc 	bl	80022b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <TIM_Base_SetConfig+0x114>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <TIM_Base_SetConfig+0x118>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <TIM_Base_SetConfig+0x114>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d027      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <TIM_Base_SetConfig+0x118>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d023      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <TIM_Base_SetConfig+0x128>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <TIM_Base_SetConfig+0x12c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <TIM_Base_SetConfig+0x130>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <TIM_Base_SetConfig+0x134>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <TIM_Base_SetConfig+0x138>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <TIM_Base_SetConfig+0x13c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <TIM_Base_SetConfig+0x114>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0xf8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <TIM_Base_SetConfig+0x124>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010400 	.word	0x40010400
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800
 80022ac:	40001800 	.word	0x40001800
 80022b0:	40001c00 	.word	0x40001c00
 80022b4:	40002000 	.word	0x40002000

080022b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0208 	add.w	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 0208 	add.w	r2, r3, #8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d103      	bne.n	80023a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e00c      	b.n	80023bc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e002      	b.n	80023b0 <vListInsert+0x2e>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d2f6      	bcs.n	80023aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6852      	ldr	r2, [r2, #4]
 8002414:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d103      	bne.n	8002428 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af04      	add	r7, sp, #16
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f975 	bl	800374c <pvPortMalloc>
 8002462:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00e      	beq.n	8002488 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800246a:	2058      	movs	r0, #88	; 0x58
 800246c:	f001 f96e 	bl	800374c <pvPortMalloc>
 8002470:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
 800247e:	e005      	b.n	800248c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f001 fa43 	bl	800390c <vPortFree>
 8002486:	e001      	b.n	800248c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	2300      	movs	r3, #0
 8002496:	9303      	str	r3, [sp, #12]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f80e 	bl	80024ca <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f000 f8a2 	bl	80025f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e002      	b.n	80024c0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024c0:	69bb      	ldr	r3, [r7, #24]
    }
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b088      	sub	sp, #32
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	21a5      	movs	r1, #165	; 0xa5
 80024e4:	f004 f872 	bl	80065cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024f2:	3b01      	subs	r3, #1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f023 0307 	bic.w	r3, r3, #7
 8002500:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <prvInitialiseNewTask+0x58>
        __asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	617b      	str	r3, [r7, #20]
    }
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e012      	b.n	8002554 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	7819      	ldrb	r1, [r3, #0]
 8002536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	3334      	adds	r3, #52	; 0x34
 800253e:	460a      	mov	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b09      	cmp	r3, #9
 8002558:	d9e9      	bls.n	800252e <prvInitialiseNewTask+0x64>
 800255a:	e000      	b.n	800255e <prvInitialiseNewTask+0x94>
            {
                break;
 800255c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002566:	e003      	b.n	8002570 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	2b04      	cmp	r3, #4
 8002574:	d901      	bls.n	800257a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002576:	2304      	movs	r3, #4
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002584:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	2200      	movs	r2, #0
 800258a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	3304      	adds	r3, #4
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fec5 	bl	8002320 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	3318      	adds	r3, #24
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fec0 	bl	8002320 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	f1c3 0205 	rsb	r2, r3, #5
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	3350      	adds	r3, #80	; 0x50
 80025ba:	2204      	movs	r2, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 f804 	bl	80065cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	3354      	adds	r3, #84	; 0x54
 80025c8:	2201      	movs	r2, #1
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fffd 	bl	80065cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	69b8      	ldr	r0, [r7, #24]
 80025d8:	f000 fe62 	bl	80032a0 <pxPortInitialiseStack>
 80025dc:	4602      	mov	r2, r0
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ee:	bf00      	nop
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002600:	f000 ff7a 	bl	80034f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002604:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <prvAddNewTaskToReadyList+0xfc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	4a3a      	ldr	r2, [pc, #232]	; (80026f4 <prvAddNewTaskToReadyList+0xfc>)
 800260c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <prvAddNewTaskToReadyList+0x100>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002616:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <prvAddNewTaskToReadyList+0x100>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <prvAddNewTaskToReadyList+0xfc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d110      	bne.n	8002646 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002624:	f000 fbb0 	bl	8002d88 <prvInitialiseTaskLists>
 8002628:	e00d      	b.n	8002646 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <prvAddNewTaskToReadyList+0x104>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <prvAddNewTaskToReadyList+0x100>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	429a      	cmp	r2, r3
 800263e:	d802      	bhi.n	8002646 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <prvAddNewTaskToReadyList+0x100>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002646:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <prvAddNewTaskToReadyList+0x108>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <prvAddNewTaskToReadyList+0x108>)
 800264e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <prvAddNewTaskToReadyList+0x108>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <prvAddNewTaskToReadyList+0x94>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fb27 	bl	8005cb4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	461d      	mov	r5, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461c      	mov	r4, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	1ae3      	subs	r3, r4, r3
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	462b      	mov	r3, r5
 8002688:	f001 fb0e 	bl	8003ca8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fb94 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	2201      	movs	r2, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <prvAddNewTaskToReadyList+0x10c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <prvAddNewTaskToReadyList+0x10c>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <prvAddNewTaskToReadyList+0x110>)
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7ff fe3c 	bl	800233a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026c2:	f000 ff49 	bl	8003558 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <prvAddNewTaskToReadyList+0x104>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <prvAddNewTaskToReadyList+0x100>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <prvAddNewTaskToReadyList+0x114>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdb0      	pop	{r4, r5, r7, pc}
 80026f4:	20000170 	.word	0x20000170
 80026f8:	20000098 	.word	0x20000098
 80026fc:	2000017c 	.word	0x2000017c
 8002700:	2000018c 	.word	0x2000018c
 8002704:	20000178 	.word	0x20000178
 8002708:	2000009c 	.word	0x2000009c
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002718:	f000 feee 	bl	80034f8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <vTaskDelete+0x18>
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <vTaskDelete+0x12c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e000      	b.n	800272a <vTaskDelete+0x1a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe5f 	bl	80023f4 <uxListRemove>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d115      	bne.n	8002768 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	493f      	ldr	r1, [pc, #252]	; (8002840 <vTaskDelete+0x130>)
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <vTaskDelete+0x58>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43da      	mvns	r2, r3
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <vTaskDelete+0x134>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4013      	ands	r3, r2
 8002764:	4a37      	ldr	r2, [pc, #220]	; (8002844 <vTaskDelete+0x134>)
 8002766:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3318      	adds	r3, #24
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fe3d 	bl	80023f4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800277a:	4b33      	ldr	r3, [pc, #204]	; (8002848 <vTaskDelete+0x138>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a31      	ldr	r2, [pc, #196]	; (8002848 <vTaskDelete+0x138>)
 8002782:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <vTaskDelete+0x12c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	429a      	cmp	r2, r3
 800278c:	d118      	bne.n	80027c0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3304      	adds	r3, #4
 8002792:	4619      	mov	r1, r3
 8002794:	482d      	ldr	r0, [pc, #180]	; (800284c <vTaskDelete+0x13c>)
 8002796:	f7ff fdd0 	bl	800233a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <vTaskDelete+0x140>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <vTaskDelete+0x140>)
 80027a2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fbaa 	bl	8005f00 <SEGGER_SYSVIEW_ShrinkId>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4619      	mov	r1, r3
 80027b0:	2022      	movs	r0, #34	; 0x22
 80027b2:	f002 fdf7 	bl	80053a4 <SEGGER_SYSVIEW_RecordU32>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fadd 	bl	8003d78 <SYSVIEW_DeleteTask>
 80027be:	e016      	b.n	80027ee <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <vTaskDelete+0x144>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	4a23      	ldr	r2, [pc, #140]	; (8002854 <vTaskDelete+0x144>)
 80027c8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fb97 	bl	8005f00 <SEGGER_SYSVIEW_ShrinkId>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	2022      	movs	r0, #34	; 0x22
 80027d8:	f002 fde4 	bl	80053a4 <SEGGER_SYSVIEW_RecordU32>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 faca 	bl	8003d78 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fb3d 	bl	8002e64 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80027ea:	f000 fb4b 	bl	8002e84 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80027ee:	f000 feb3 	bl	8003558 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <vTaskDelete+0x148>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01b      	beq.n	8002832 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <vTaskDelete+0x12c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d116      	bne.n	8002832 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <vTaskDelete+0x14c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <vTaskDelete+0x112>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60bb      	str	r3, [r7, #8]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <vTaskDelete+0x150>)
 8002824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000098 	.word	0x20000098
 8002840:	2000009c 	.word	0x2000009c
 8002844:	20000178 	.word	0x20000178
 8002848:	2000018c 	.word	0x2000018c
 800284c:	20000144 	.word	0x20000144
 8002850:	20000158 	.word	0x20000158
 8002854:	20000170 	.word	0x20000170
 8002858:	2000017c 	.word	0x2000017c
 800285c:	20000198 	.word	0x20000198
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01b      	beq.n	80028ae <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <vTaskDelay+0x68>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <vTaskDelay+0x30>
        __asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	60bb      	str	r3, [r7, #8]
    }
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002894:	f000 f87a 	bl	800298c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	2023      	movs	r0, #35	; 0x23
 800289c:	f002 fd82 	bl	80053a4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028a0:	2100      	movs	r1, #0
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fc84 	bl	80031b0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80028a8:	f000 f87e 	bl	80029a8 <xTaskResumeAll>
 80028ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <vTaskDelay+0x6c>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000198 	.word	0x20000198
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <vTaskStartScheduler+0x98>)
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	2282      	movs	r2, #130	; 0x82
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <vTaskStartScheduler+0x9c>)
 80028e8:	4822      	ldr	r0, [pc, #136]	; (8002974 <vTaskStartScheduler+0xa0>)
 80028ea:	f7ff fdad 	bl	8002448 <xTaskCreate>
 80028ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d124      	bne.n	8002940 <vTaskStartScheduler+0x6c>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60bb      	str	r3, [r7, #8]
    }
 8002908:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <vTaskStartScheduler+0xa4>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <vTaskStartScheduler+0xa8>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <vTaskStartScheduler+0xac>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <vTaskStartScheduler+0xb0>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <vTaskStartScheduler+0x98>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d102      	bne.n	8002930 <vTaskStartScheduler+0x5c>
 800292a:	f003 f9a7 	bl	8005c7c <SEGGER_SYSVIEW_OnIdle>
 800292e:	e004      	b.n	800293a <vTaskStartScheduler+0x66>
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <vTaskStartScheduler+0xb0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 f9ff 	bl	8005d38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800293a:	f000 fd3b 	bl	80033b4 <xPortStartScheduler>
 800293e:	e00e      	b.n	800295e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d10a      	bne.n	800295e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	607b      	str	r3, [r7, #4]
    }
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <vTaskStartScheduler+0xb4>)
 8002960:	681b      	ldr	r3, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000194 	.word	0x20000194
 8002970:	080066b0 	.word	0x080066b0
 8002974:	08002d59 	.word	0x08002d59
 8002978:	20000190 	.word	0x20000190
 800297c:	2000017c 	.word	0x2000017c
 8002980:	20000174 	.word	0x20000174
 8002984:	20000098 	.word	0x20000098
 8002988:	2000000c 	.word	0x2000000c

0800298c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <vTaskSuspendAll+0x18>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <vTaskSuspendAll+0x18>)
 8002998:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000198 	.word	0x20000198

080029a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <xTaskResumeAll+0x11c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	603b      	str	r3, [r7, #0]
    }
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80029d4:	f000 fd90 	bl	80034f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <xTaskResumeAll+0x11c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <xTaskResumeAll+0x11c>)
 80029e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <xTaskResumeAll+0x11c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d165      	bne.n	8002ab6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <xTaskResumeAll+0x120>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d061      	beq.n	8002ab6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029f2:	e032      	b.n	8002a5a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <xTaskResumeAll+0x124>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3318      	adds	r3, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fcf7 	bl	80023f4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fcf2 	bl	80023f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f9d2 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <xTaskResumeAll+0x128>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <xTaskResumeAll+0x128>)
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <xTaskResumeAll+0x12c>)
 8002a38:	441a      	add	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7ff fc7a 	bl	800233a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <xTaskResumeAll+0x130>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <xTaskResumeAll+0x134>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <xTaskResumeAll+0x124>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1c8      	bne.n	80029f4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a68:	f000 fa0c 	bl	8002e84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <xTaskResumeAll+0x138>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a78:	f000 f848 	bl	8002b0c <xTaskIncrementTick>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <xTaskResumeAll+0x134>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f1      	bne.n	8002a78 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <xTaskResumeAll+0x138>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <xTaskResumeAll+0x134>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <xTaskResumeAll+0x13c>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ab6:	f000 fd4f 	bl	8003558 <vPortExitCritical>

    return xAlreadyYielded;
 8002aba:	68bb      	ldr	r3, [r7, #8]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000198 	.word	0x20000198
 8002ac8:	20000170 	.word	0x20000170
 8002acc:	20000130 	.word	0x20000130
 8002ad0:	20000178 	.word	0x20000178
 8002ad4:	2000009c 	.word	0x2000009c
 8002ad8:	20000098 	.word	0x20000098
 8002adc:	20000184 	.word	0x20000184
 8002ae0:	20000180 	.word	0x20000180
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aee:	f000 fded 	bl	80036cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <xTaskGetTickCountFromISR+0x20>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002afc:	683b      	ldr	r3, [r7, #0]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000174 	.word	0x20000174

08002b0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b16:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <xTaskIncrementTick+0x14c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 8092 	bne.w	8002c44 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <xTaskIncrementTick+0x150>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <xTaskIncrementTick+0x150>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d120      	bne.n	8002b76 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <xTaskIncrementTick+0x154>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <xTaskIncrementTick+0x48>
        __asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	603b      	str	r3, [r7, #0]
    }
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xTaskIncrementTick+0x46>
 8002b54:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <xTaskIncrementTick+0x154>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <xTaskIncrementTick+0x158>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <xTaskIncrementTick+0x154>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <xTaskIncrementTick+0x158>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <xTaskIncrementTick+0x15c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	4a3e      	ldr	r2, [pc, #248]	; (8002c68 <xTaskIncrementTick+0x15c>)
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	f000 f987 	bl	8002e84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <xTaskIncrementTick+0x160>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d34c      	bcc.n	8002c1a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <xTaskIncrementTick+0x154>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b8a:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <xTaskIncrementTick+0x160>)
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	601a      	str	r2, [r3, #0]
                    break;
 8002b92:	e042      	b.n	8002c1a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <xTaskIncrementTick+0x154>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d203      	bcs.n	8002bb4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bac:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <xTaskIncrementTick+0x160>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002bb2:	e032      	b.n	8002c1a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fc1b 	bl	80023f4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fc12 	bl	80023f4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 f8f2 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <xTaskIncrementTick+0x164>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <xTaskIncrementTick+0x164>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <xTaskIncrementTick+0x168>)
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7ff fb9a 	bl	800233a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <xTaskIncrementTick+0x16c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3b5      	bcc.n	8002b80 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c18:	e7b2      	b.n	8002b80 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <xTaskIncrementTick+0x16c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4914      	ldr	r1, [pc, #80]	; (8002c74 <xTaskIncrementTick+0x168>)
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d901      	bls.n	8002c36 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <xTaskIncrementTick+0x170>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e004      	b.n	8002c4e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <xTaskIncrementTick+0x174>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <xTaskIncrementTick+0x174>)
 8002c4c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000198 	.word	0x20000198
 8002c5c:	20000174 	.word	0x20000174
 8002c60:	20000128 	.word	0x20000128
 8002c64:	2000012c 	.word	0x2000012c
 8002c68:	20000188 	.word	0x20000188
 8002c6c:	20000190 	.word	0x20000190
 8002c70:	20000178 	.word	0x20000178
 8002c74:	2000009c 	.word	0x2000009c
 8002c78:	20000098 	.word	0x20000098
 8002c7c:	20000184 	.word	0x20000184
 8002c80:	20000180 	.word	0x20000180

08002c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <vTaskSwitchContext+0xbc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <vTaskSwitchContext+0xc0>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c98:	e04d      	b.n	8002d36 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <vTaskSwitchContext+0xc0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <vTaskSwitchContext+0xc4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f1c3 031f 	rsb	r3, r3, #31
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	4925      	ldr	r1, [pc, #148]	; (8002d4c <vTaskSwitchContext+0xc8>)
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	607b      	str	r3, [r7, #4]
    }
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <vTaskSwitchContext+0x5a>
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <vTaskSwitchContext+0xc8>)
 8002cec:	4413      	add	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3308      	adds	r3, #8
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d104      	bne.n	8002d10 <vTaskSwitchContext+0x8c>
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <vTaskSwitchContext+0xcc>)
 8002d18:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <vTaskSwitchContext+0xcc>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <vTaskSwitchContext+0xd0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d102      	bne.n	8002d2c <vTaskSwitchContext+0xa8>
 8002d26:	f002 ffa9 	bl	8005c7c <SEGGER_SYSVIEW_OnIdle>
}
 8002d2a:	e004      	b.n	8002d36 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <vTaskSwitchContext+0xcc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 f801 	bl	8005d38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000198 	.word	0x20000198
 8002d44:	20000184 	.word	0x20000184
 8002d48:	20000178 	.word	0x20000178
 8002d4c:	2000009c 	.word	0x2000009c
 8002d50:	20000098 	.word	0x20000098
 8002d54:	20000194 	.word	0x20000194

08002d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d60:	f000 f852 	bl	8002e08 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <prvIdleTask+0x28>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d9f9      	bls.n	8002d60 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <prvIdleTask+0x2c>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d7c:	e7f0      	b.n	8002d60 <prvIdleTask+0x8>
 8002d7e:	bf00      	nop
 8002d80:	2000009c 	.word	0x2000009c
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	e00c      	b.n	8002dae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <prvInitialiseTaskLists+0x60>)
 8002da0:	4413      	add	r3, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fa9c 	bl	80022e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3301      	adds	r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d9ef      	bls.n	8002d94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <prvInitialiseTaskLists+0x64>)
 8002db6:	f7ff fa93 	bl	80022e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <prvInitialiseTaskLists+0x68>)
 8002dbc:	f7ff fa90 	bl	80022e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <prvInitialiseTaskLists+0x6c>)
 8002dc2:	f7ff fa8d 	bl	80022e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002dc6:	480c      	ldr	r0, [pc, #48]	; (8002df8 <prvInitialiseTaskLists+0x70>)
 8002dc8:	f7ff fa8a 	bl	80022e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002dcc:	480b      	ldr	r0, [pc, #44]	; (8002dfc <prvInitialiseTaskLists+0x74>)
 8002dce:	f7ff fa87 	bl	80022e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <prvInitialiseTaskLists+0x78>)
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <prvInitialiseTaskLists+0x64>)
 8002dd6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <prvInitialiseTaskLists+0x7c>)
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <prvInitialiseTaskLists+0x68>)
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000009c 	.word	0x2000009c
 8002dec:	20000100 	.word	0x20000100
 8002df0:	20000114 	.word	0x20000114
 8002df4:	20000130 	.word	0x20000130
 8002df8:	20000144 	.word	0x20000144
 8002dfc:	2000015c 	.word	0x2000015c
 8002e00:	20000128 	.word	0x20000128
 8002e04:	2000012c 	.word	0x2000012c

08002e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e0e:	e019      	b.n	8002e44 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002e10:	f000 fb72 	bl	80034f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <prvCheckTasksWaitingTermination+0x50>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fae7 	bl	80023f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <prvCheckTasksWaitingTermination+0x54>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <prvCheckTasksWaitingTermination+0x54>)
 8002e2e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <prvCheckTasksWaitingTermination+0x58>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <prvCheckTasksWaitingTermination+0x58>)
 8002e38:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002e3a:	f000 fb8d 	bl	8003558 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f810 	bl	8002e64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <prvCheckTasksWaitingTermination+0x58>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e1      	bne.n	8002e10 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000144 	.word	0x20000144
 8002e5c:	20000170 	.word	0x20000170
 8002e60:	20000158 	.word	0x20000158

08002e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd4b 	bl	800390c <vPortFree>
                vPortFree( pxTCB );
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fd48 	bl	800390c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <prvResetNextTaskUnblockTime+0x30>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <prvResetNextTaskUnblockTime+0x34>)
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e9a:	e005      	b.n	8002ea8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <prvResetNextTaskUnblockTime+0x30>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <prvResetNextTaskUnblockTime+0x34>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000128 	.word	0x20000128
 8002eb8:	20000190 	.word	0x20000190

08002ebc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	613b      	str	r3, [r7, #16]
    }
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002ee6:	f000 fb07 	bl	80034f8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3354      	adds	r3, #84	; 0x54
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d022      	beq.n	8002f42 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	3214      	adds	r2, #20
 8002f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	43d2      	mvns	r2, r2
 8002f0c:	4011      	ands	r1, r2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	3214      	adds	r2, #20
 8002f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3354      	adds	r3, #84	; 0x54
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	6a38      	ldr	r0, [r7, #32]
 8002f2e:	f000 f93f 	bl	80031b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <xTaskGenericNotifyWait+0x10c>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f42:	f000 fb09 	bl	8003558 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002f46:	f000 fad7 	bl	80034f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	2040      	movs	r0, #64	; 0x40
 8002f58:	f002 faba 	bl	80054d0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	3214      	adds	r2, #20
 8002f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3354      	adds	r3, #84	; 0x54
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d002      	beq.n	8002f8a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e00e      	b.n	8002fa8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	3214      	adds	r2, #20
 8002f92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	43d2      	mvns	r2, r2
 8002f9a:	4011      	ands	r1, r2
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	3214      	adds	r2, #20
 8002fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <xTaskGenericNotifyWait+0x108>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3354      	adds	r3, #84	; 0x54
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002fb6:	f000 facf 	bl	8003558 <vPortExitCritical>

        return xReturn;
 8002fba:	697b      	ldr	r3, [r7, #20]
    }
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000098 	.word	0x20000098
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	; 0x38
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <xTaskGenericNotify+0x2e>
        __asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	623b      	str	r3, [r7, #32]
    }
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61fb      	str	r3, [r7, #28]
    }
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800301a:	f000 fa6d 	bl	80034f8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	3214      	adds	r2, #20
 800302a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4413      	add	r3, r2
 8003038:	3354      	adds	r3, #84	; 0x54
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4413      	add	r3, r2
 8003046:	3354      	adds	r3, #84	; 0x54
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d83b      	bhi.n	80030ca <xTaskGenericNotify+0xfe>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <xTaskGenericNotify+0x8c>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	080030e9 	.word	0x080030e9
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003089 	.word	0x08003089
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030af 	.word	0x080030af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	3214      	adds	r2, #20
 8003072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	ea42 0103 	orr.w	r1, r2, r3
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	3214      	adds	r2, #20
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003086:	e032      	b.n	80030ee <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	3214      	adds	r2, #20
 800308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	3214      	adds	r2, #20
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800309e:	e026      	b.n	80030ee <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	3214      	adds	r2, #20
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80030ac:	e01f      	b.n	80030ee <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80030ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d006      	beq.n	80030c4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	3214      	adds	r2, #20
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80030c2:	e014      	b.n	80030ee <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80030c8:	e011      	b.n	80030ee <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <xTaskGenericNotify+0x1d0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <xTaskGenericNotify+0x120>
        __asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61bb      	str	r3, [r7, #24]
    }
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <xTaskGenericNotify+0x11a>
                    break;
 80030e8:	bf00      	nop
 80030ea:	e000      	b.n	80030ee <xTaskGenericNotify+0x122>

                    break;
 80030ec:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 ff05 	bl	8005f00 <SEGGER_SYSVIEW_ShrinkId>
 80030f6:	4601      	mov	r1, r0
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	203e      	movs	r0, #62	; 0x3e
 8003104:	f002 f9e4 	bl	80054d0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310c:	2b01      	cmp	r3, #1
 800310e:	d13d      	bne.n	800318c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	3304      	adds	r3, #4
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f96d 	bl	80023f4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fe4d 	bl	8005dbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <xTaskGenericNotify+0x1d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <xTaskGenericNotify+0x1d4>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <xTaskGenericNotify+0x1d8>)
 8003142:	441a      	add	r2, r3
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7ff f8f5 	bl	800233a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <xTaskGenericNotify+0x1a2>
        __asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	617b      	str	r3, [r7, #20]
    }
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <xTaskGenericNotify+0x1dc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d907      	bls.n	800318c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <xTaskGenericNotify+0x1e0>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800318c:	f000 f9e4 	bl	8003558 <vPortExitCritical>

        return xReturn;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003192:	4618      	mov	r0, r3
 8003194:	3730      	adds	r7, #48	; 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000174 	.word	0x20000174
 80031a0:	20000178 	.word	0x20000178
 80031a4:	2000009c 	.word	0x2000009c
 80031a8:	20000098 	.word	0x20000098
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <prvAddCurrentTaskToDelayedList+0xd4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f914 	bl	80023f4 <uxListRemove>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2201      	movs	r2, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <prvAddCurrentTaskToDelayedList+0xdc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4013      	ands	r3, r2
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <prvAddCurrentTaskToDelayedList+0xdc>)
 80031e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d110      	bne.n	8003214 <prvAddCurrentTaskToDelayedList+0x64>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	211b      	movs	r1, #27
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 fe1e 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4820      	ldr	r0, [pc, #128]	; (8003290 <prvAddCurrentTaskToDelayedList+0xe0>)
 800320e:	f7ff f894 	bl	800233a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003212:	e032      	b.n	800327a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d20f      	bcs.n	800324c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2104      	movs	r1, #4
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fe04 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <prvAddCurrentTaskToDelayedList+0xe4>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff f89c 	bl	8002382 <vListInsert>
}
 800324a:	e016      	b.n	800327a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2104      	movs	r1, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fdf4 	bl	8005e40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <prvAddCurrentTaskToDelayedList+0xe8>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <prvAddCurrentTaskToDelayedList+0xd8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3304      	adds	r3, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7ff f88c 	bl	8002382 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <prvAddCurrentTaskToDelayedList+0xec>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d202      	bcs.n	800327a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003274:	4a09      	ldr	r2, [pc, #36]	; (800329c <prvAddCurrentTaskToDelayedList+0xec>)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6013      	str	r3, [r2, #0]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000174 	.word	0x20000174
 8003288:	20000098 	.word	0x20000098
 800328c:	20000178 	.word	0x20000178
 8003290:	2000015c 	.word	0x2000015c
 8003294:	2000012c 	.word	0x2000012c
 8003298:	20000128 	.word	0x20000128
 800329c:	20000190 	.word	0x20000190

080032a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3b04      	subs	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b04      	subs	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f023 0201 	bic.w	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b04      	subs	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <pxPortInitialiseStack+0x64>)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b14      	subs	r3, #20
 80032da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3b04      	subs	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f06f 0202 	mvn.w	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b20      	subs	r3, #32
 80032f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	08003309 	.word	0x08003309

08003308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <prvTaskExitError+0x54>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d00a      	beq.n	8003332 <prvTaskExitError+0x2a>
        __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60fb      	str	r3, [r7, #12]
    }
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <prvTaskExitError+0x28>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60bb      	str	r3, [r7, #8]
    }
 8003344:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003346:	bf00      	nop
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0fc      	beq.n	8003348 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000010 	.word	0x20000010

08003360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <pxCurrentTCBConst2>)
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6808      	ldr	r0, [r1, #0]
 8003366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	f380 8809 	msr	PSP, r0
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8811 	msr	BASEPRI, r0
 800337a:	4770      	bx	lr
 800337c:	f3af 8000 	nop.w

08003380 <pxCurrentTCBConst2>:
 8003380:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop

08003388 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003388:	4808      	ldr	r0, [pc, #32]	; (80033ac <prvPortStartFirstTask+0x24>)
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	6800      	ldr	r0, [r0, #0]
 800338e:	f380 8808 	msr	MSP, r0
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f380 8814 	msr	CONTROL, r0
 800339a:	b662      	cpsie	i
 800339c:	b661      	cpsie	f
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	df00      	svc	0
 80033a8:	bf00      	nop
 80033aa:	0000      	.short	0x0000
 80033ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop

080033b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033ba:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <xPortStartScheduler+0x120>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <xPortStartScheduler+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10a      	bne.n	80033da <xPortStartScheduler+0x26>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	613b      	str	r3, [r7, #16]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <xPortStartScheduler+0x120>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <xPortStartScheduler+0x128>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10a      	bne.n	80033fa <xPortStartScheduler+0x46>
        __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
    }
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <xPortStartScheduler+0x12c>)
 80033fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <xPortStartScheduler+0x130>)
 8003420:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <xPortStartScheduler+0x134>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003428:	e009      	b.n	800343e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <xPortStartScheduler+0x134>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <xPortStartScheduler+0x134>)
 8003432:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	d0ef      	beq.n	800342a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <xPortStartScheduler+0x134>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00a      	beq.n	800346c <xPortStartScheduler+0xb8>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60bb      	str	r3, [r7, #8]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <xPortStartScheduler+0x134>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <xPortStartScheduler+0x134>)
 8003474:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <xPortStartScheduler+0x134>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <xPortStartScheduler+0x134>)
 8003480:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <xPortStartScheduler+0x138>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <xPortStartScheduler+0x138>)
 8003490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003494:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <xPortStartScheduler+0x138>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <xPortStartScheduler+0x138>)
 800349c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034a2:	f000 f8e3 	bl	800366c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <xPortStartScheduler+0x13c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034ac:	f000 f902 	bl	80036b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <xPortStartScheduler+0x140>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <xPortStartScheduler+0x140>)
 80034b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034bc:	f7ff ff64 	bl	8003388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034c0:	f7ff fbe0 	bl	8002c84 <vTaskSwitchContext>
    prvTaskExitError();
 80034c4:	f7ff ff20 	bl	8003308 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	410fc271 	.word	0x410fc271
 80034dc:	410fc270 	.word	0x410fc270
 80034e0:	e000e400 	.word	0xe000e400
 80034e4:	2000019c 	.word	0x2000019c
 80034e8:	200001a0 	.word	0x200001a0
 80034ec:	e000ed20 	.word	0xe000ed20
 80034f0:	20000010 	.word	0x20000010
 80034f4:	e000ef34 	.word	0xe000ef34

080034f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	607b      	str	r3, [r7, #4]
    }
 8003510:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <vPortEnterCritical+0x58>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <vPortEnterCritical+0x58>)
 800351a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <vPortEnterCritical+0x58>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10f      	bne.n	8003544 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <vPortEnterCritical+0x5c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <vPortEnterCritical+0x4c>
        __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	603b      	str	r3, [r7, #0]
    }
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <vPortEnterCritical+0x4a>
    }
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000010 	.word	0x20000010
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <vPortExitCritical+0x50>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <vPortExitCritical+0x24>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	607b      	str	r3, [r7, #4]
    }
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <vPortExitCritical+0x50>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <vPortExitCritical+0x50>)
 8003584:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <vPortExitCritical+0x50>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <vPortExitCritical+0x42>
 800358e:	2300      	movs	r3, #0
 8003590:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003598:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000010 	.word	0x20000010
 80035ac:	00000000 	.word	0x00000000

080035b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80035b0:	f3ef 8009 	mrs	r0, PSP
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <pxCurrentTCBConst>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f01e 0f10 	tst.w	lr, #16
 80035c0:	bf08      	it	eq
 80035c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035d4:	f380 8811 	msr	BASEPRI, r0
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f7ff fb50 	bl	8002c84 <vTaskSwitchContext>
 80035e4:	f04f 0000 	mov.w	r0, #0
 80035e8:	f380 8811 	msr	BASEPRI, r0
 80035ec:	bc09      	pop	{r0, r3}
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	6808      	ldr	r0, [r1, #0]
 80035f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f6:	f01e 0f10 	tst.w	lr, #16
 80035fa:	bf08      	it	eq
 80035fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003600:	f380 8809 	msr	PSP, r0
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w

08003610 <pxCurrentTCBConst>:
 8003610:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop

08003618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
        __asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	607b      	str	r3, [r7, #4]
    }
 8003630:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003632:	f002 faa9 	bl	8005b88 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003636:	f7ff fa69 	bl	8002b0c <xTaskIncrementTick>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003640:	f002 fb00 	bl	8005c44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <SysTick_Handler+0x50>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e001      	b.n	8003652 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800364e:	f002 fadd 	bl	8005c0c <SEGGER_SYSVIEW_RecordExitISR>
 8003652:	2300      	movs	r3, #0
 8003654:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f383 8811 	msr	BASEPRI, r3
    }
 800365c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vPortSetupTimerInterrupt+0x38>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <vPortSetupTimerInterrupt+0x3c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <vPortSetupTimerInterrupt+0x40>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <vPortSetupTimerInterrupt+0x44>)
 800368a:	3b01      	subs	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010
 80036a4:	e000e018 	.word	0xe000e018
 80036a8:	20000000 	.word	0x20000000
 80036ac:	10624dd3 	.word	0x10624dd3
 80036b0:	e000e014 	.word	0xe000e014

080036b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036c4 <vPortEnableVFP+0x10>
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	4770      	bx	lr
 80036c2:	0000      	.short	0x0000
 80036c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop

080036cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80036d2:	f3ef 8305 	mrs	r3, IPSR
 80036d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d914      	bls.n	8003708 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <vPortValidateInterruptPriority+0x70>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <vPortValidateInterruptPriority+0x74>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	7afa      	ldrb	r2, [r7, #11]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20a      	bcs.n	8003708 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	607b      	str	r3, [r7, #4]
    }
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <vPortValidateInterruptPriority+0x78>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <vPortValidateInterruptPriority+0x7c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d90a      	bls.n	800372e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	603b      	str	r3, [r7, #0]
    }
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <vPortValidateInterruptPriority+0x60>
    }
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e3f0 	.word	0xe000e3f0
 8003740:	2000019c 	.word	0x2000019c
 8003744:	e000ed0c 	.word	0xe000ed0c
 8003748:	200001a0 	.word	0x200001a0

0800374c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003758:	f7ff f918 	bl	800298c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800375c:	4b65      	ldr	r3, [pc, #404]	; (80038f4 <pvPortMalloc+0x1a8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003764:	f000 f934 	bl	80039d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003768:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <pvPortMalloc+0x1ac>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 80a7 	bne.w	80038c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02d      	beq.n	80037d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800377c:	2208      	movs	r2, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d227      	bcs.n	80037d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003788:	2208      	movs	r2, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	3308      	adds	r3, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d214      	bcs.n	80037d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	3308      	adds	r3, #8
 80037b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <pvPortMalloc+0x92>
        __asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	617b      	str	r3, [r7, #20]
    }
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037d6:	e002      	b.n	80037de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e000      	b.n	80037e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06e      	beq.n	80038c4 <pvPortMalloc+0x178>
 80037e6:	4b45      	ldr	r3, [pc, #276]	; (80038fc <pvPortMalloc+0x1b0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d869      	bhi.n	80038c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <pvPortMalloc+0x1b4>)
 80037f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <pvPortMalloc+0x1b4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037fa:	e004      	b.n	8003806 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d903      	bls.n	8003818 <pvPortMalloc+0xcc>
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <pvPortMalloc+0x1a8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d050      	beq.n	80038c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2208      	movs	r2, #8
 8003828:	4413      	add	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	2308      	movs	r3, #8
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d91f      	bls.n	8003884 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <pvPortMalloc+0x120>
        __asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	613b      	str	r3, [r7, #16]
    }
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800387e:	69b8      	ldr	r0, [r7, #24]
 8003880:	f000 f908 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <pvPortMalloc+0x1b0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <pvPortMalloc+0x1b0>)
 8003890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <pvPortMalloc+0x1b0>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <pvPortMalloc+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d203      	bcs.n	80038a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <pvPortMalloc+0x1b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <pvPortMalloc+0x1b8>)
 80038a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <pvPortMalloc+0x1ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <pvPortMalloc+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	4a11      	ldr	r2, [pc, #68]	; (8003908 <pvPortMalloc+0x1bc>)
 80038c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038c4:	f7ff f870 	bl	80029a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <pvPortMalloc+0x19c>
        __asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
    }
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80038e8:	69fb      	ldr	r3, [r7, #28]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200191ac 	.word	0x200191ac
 80038f8:	200191c0 	.word	0x200191c0
 80038fc:	200191b0 	.word	0x200191b0
 8003900:	200191a4 	.word	0x200191a4
 8003904:	200191b4 	.word	0x200191b4
 8003908:	200191b8 	.word	0x200191b8

0800390c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d04d      	beq.n	80039ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800391e:	2308      	movs	r3, #8
 8003920:	425b      	negs	r3, r3
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4413      	add	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <vPortFree+0xb8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <vPortFree+0x44>
        __asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60fb      	str	r3, [r7, #12]
    }
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <vPortFree+0x62>
        __asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60bb      	str	r3, [r7, #8]
    }
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <vPortFree+0xb8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01e      	beq.n	80039ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <vPortFree+0xb8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003994:	f7fe fffa 	bl	800298c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <vPortFree+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <vPortFree+0xbc>)
 80039a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f000 f874 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <vPortFree+0xc0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a06      	ldr	r2, [pc, #24]	; (80039cc <vPortFree+0xc0>)
 80039b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039b6:	f7fe fff7 	bl	80029a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200191c0 	.word	0x200191c0
 80039c8:	200191b0 	.word	0x200191b0
 80039cc:	200191bc 	.word	0x200191bc

080039d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80039da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <prvHeapInit+0xac>)
 80039de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3307      	adds	r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <prvHeapInit+0xac>)
 8003a00:	4413      	add	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <prvHeapInit+0xb0>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <prvHeapInit+0xb0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <prvHeapInit+0xb4>)
 8003a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <prvHeapInit+0xb4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <prvHeapInit+0xb4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <prvHeapInit+0xb4>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <prvHeapInit+0xb8>)
 8003a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <prvHeapInit+0xbc>)
 8003a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <prvHeapInit+0xc0>)
 8003a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a6e:	601a      	str	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	200001a4 	.word	0x200001a4
 8003a80:	200191a4 	.word	0x200191a4
 8003a84:	200191ac 	.word	0x200191ac
 8003a88:	200191b4 	.word	0x200191b4
 8003a8c:	200191b0 	.word	0x200191b0
 8003a90:	200191c0 	.word	0x200191c0

08003a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <prvInsertBlockIntoFreeList+0xac>)
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <prvInsertBlockIntoFreeList+0x14>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d8f7      	bhi.n	8003aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d108      	bne.n	8003ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d118      	bne.n	8003b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d00d      	beq.n	8003b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e003      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d002      	beq.n	8003b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	200191a4 	.word	0x200191a4
 8003b44:	200191ac 	.word	0x200191ac

08003b48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b4c:	4803      	ldr	r0, [pc, #12]	; (8003b5c <_cbSendSystemDesc+0x14>)
 8003b4e:	f001 ffc5 	bl	8005adc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <_cbSendSystemDesc+0x18>)
 8003b54:	f001 ffc2 	bl	8005adc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	080066b8 	.word	0x080066b8
 8003b60:	080066fc 	.word	0x080066fc

08003b64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <SEGGER_SYSVIEW_Conf+0x28>)
 8003b74:	f001 fba4 	bl	80052c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b7c:	f001 fbe4 	bl	8005348 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000000 	.word	0x20000000
 8003b88:	08003b49 	.word	0x08003b49
 8003b8c:	08006798 	.word	0x08006798

08003b90 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e033      	b.n	8003c04 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b9c:	491e      	ldr	r1, [pc, #120]	; (8003c18 <_cbSendTaskList+0x88>)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	491a      	ldr	r1, [pc, #104]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3304      	adds	r3, #4
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	4c16      	ldr	r4, [pc, #88]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4423      	add	r3, r4
 8003bcc:	3308      	adds	r3, #8
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	4d11      	ldr	r5, [pc, #68]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	442b      	add	r3, r5
 8003bde:	330c      	adds	r3, #12
 8003be0:	681d      	ldr	r5, [r3, #0]
 8003be2:	4e0d      	ldr	r6, [pc, #52]	; (8003c18 <_cbSendTaskList+0x88>)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4433      	add	r3, r6
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	f000 f979 	bl	8003ef0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3301      	adds	r3, #1
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <_cbSendTaskList+0x8c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3c6      	bcc.n	8003b9c <_cbSendTaskList+0xc>
  }
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c18:	200191c4 	.word	0x200191c4
 8003c1c:	20019264 	.word	0x20019264

08003c20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c28:	f7fe ff5e 	bl	8002ae8 <xTaskGetTickCountFromISR>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2200      	movs	r2, #0
 8003c30:	469a      	mov	sl, r3
 8003c32:	4693      	mov	fp, r2
 8003c34:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	f04f 0a00 	mov.w	sl, #0
 8003c44:	f04f 0b00 	mov.w	fp, #0
 8003c48:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c4c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c50:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c54:	4652      	mov	r2, sl
 8003c56:	465b      	mov	r3, fp
 8003c58:	1a14      	subs	r4, r2, r0
 8003c5a:	eb63 0501 	sbc.w	r5, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	00ab      	lsls	r3, r5, #2
 8003c68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c6c:	00a2      	lsls	r2, r4, #2
 8003c6e:	4614      	mov	r4, r2
 8003c70:	461d      	mov	r5, r3
 8003c72:	eb14 0800 	adds.w	r8, r4, r0
 8003c76:	eb45 0901 	adc.w	r9, r5, r1
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c8e:	4690      	mov	r8, r2
 8003c90:	4699      	mov	r9, r3
 8003c92:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c96:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ca8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	492b      	ldr	r1, [pc, #172]	; (8003d68 <SYSVIEW_AddTask+0xc0>)
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	f002 fc68 	bl	8006590 <memcmp>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04b      	beq.n	8003d5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003cc6:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b07      	cmp	r3, #7
 8003ccc:	d903      	bls.n	8003cd6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <SYSVIEW_AddTask+0xc8>)
 8003cd0:	f002 fa20 	bl	8006114 <SEGGER_SYSVIEW_Warn>
    return;
 8003cd4:	e044      	b.n	8003d60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	491b      	ldr	r1, [pc, #108]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3308      	adds	r3, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4916      	ldr	r1, [pc, #88]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	330c      	adds	r3, #12
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4910      	ldr	r1, [pc, #64]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f8ca 	bl	8003ef0 <SYSVIEW_SendTaskInfo>
 8003d5c:	e000      	b.n	8003d60 <SYSVIEW_AddTask+0xb8>
    return;
 8003d5e:	bf00      	nop

}
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	0800670c 	.word	0x0800670c
 8003d6c:	20019264 	.word	0x20019264
 8003d70:	08006714 	.word	0x08006714
 8003d74:	200191c4 	.word	0x200191c4

08003d78 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80ab 	beq.w	8003ee0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e00d      	b.n	8003dac <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003d90:	4956      	ldr	r1, [pc, #344]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d008      	beq.n	8003db8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3ec      	bcc.n	8003d90 <SYSVIEW_DeleteTask+0x18>
 8003db6:	e000      	b.n	8003dba <SYSVIEW_DeleteTask+0x42>
      break;
 8003db8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d111      	bne.n	8003dea <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4a46      	ldr	r2, [pc, #280]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	2214      	movs	r2, #20
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 fbf7 	bl	80065cc <memset>
    _NumTasks--;
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e07b      	b.n	8003ee2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d276      	bcs.n	8003ee2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	493c      	ldr	r1, [pc, #240]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	4838      	ldr	r0, [pc, #224]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4403      	add	r3, r0
 8003e16:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1e5a      	subs	r2, r3, #1
 8003e1e:	4933      	ldr	r1, [pc, #204]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	482f      	ldr	r0, [pc, #188]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4403      	add	r3, r0
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	4929      	ldr	r1, [pc, #164]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3308      	adds	r3, #8
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	4825      	ldr	r0, [pc, #148]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	3308      	adds	r3, #8
 8003e66:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	491f      	ldr	r1, [pc, #124]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	481b      	ldr	r0, [pc, #108]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4403      	add	r3, r0
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	4915      	ldr	r1, [pc, #84]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	4811      	ldr	r0, [pc, #68]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4403      	add	r3, r0
 8003eb4:	3310      	adds	r3, #16
 8003eb6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <SYSVIEW_DeleteTask+0x174>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	2214      	movs	r2, #20
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 fb7c 	bl	80065cc <memset>
    _NumTasks--;
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <SYSVIEW_DeleteTask+0x170>)
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e000      	b.n	8003ee2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003ee0:	bf00      	nop
  }
}
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20019264 	.word	0x20019264
 8003eec:	200191c4 	.word	0x200191c4

08003ef0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	2218      	movs	r2, #24
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 fb60 	bl	80065cc <memset>
  TaskInfo.TaskID     = TaskID;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f20:	f107 0310 	add.w	r3, r7, #16
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fce1 	bl	80058ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <_DoInit+0xa0>)
 8003f3c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003f3e:	22a8      	movs	r2, #168	; 0xa8
 8003f40:	2100      	movs	r1, #0
 8003f42:	6838      	ldr	r0, [r7, #0]
 8003f44:	f002 fb42 	bl	80065cc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2203      	movs	r2, #3
 8003f52:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <_DoInit+0xa4>)
 8003f58:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <_DoInit+0xa8>)
 8003f5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f66:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2200      	movs	r2, #0
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <_DoInit+0xa4>)
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <_DoInit+0xac>)
 8003f84:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f9e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	e00c      	b.n	8003fc2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1c3 030f 	rsb	r3, r3, #15
 8003fae:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <_DoInit+0xb0>)
 8003fb0:	5cd1      	ldrb	r1, [r2, r3]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	460a      	mov	r2, r1
 8003fba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d9ef      	bls.n	8003fa8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003fc8:	f3bf 8f5f 	dmb	sy
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20019268 	.word	0x20019268
 8003fd8:	08006764 	.word	0x08006764
 8003fdc:	20019310 	.word	0x20019310
 8003fe0:	20019710 	.word	0x20019710
 8003fe4:	080067a0 	.word	0x080067a0

08003fe8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d905      	bls.n	8004018 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e007      	b.n	8004028 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	1acb      	subs	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3b01      	subs	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	4293      	cmp	r3, r2
 8004034:	bf28      	it	cs
 8004036:	4613      	movcs	r3, r2
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4293      	cmp	r3, r2
 8004040:	bf28      	it	cs
 8004042:	4613      	movcs	r3, r2
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f002 faab 	bl	80065b0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	4413      	add	r3, r2
 8004060:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	4413      	add	r3, r2
 8004068:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	4413      	add	r3, r2
 8004078:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	429a      	cmp	r2, r3
 8004082:	d101      	bne.n	8004088 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004088:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1b2      	bne.n	8003ffe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004098:	6a3b      	ldr	r3, [r7, #32]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d911      	bls.n	80040ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6938      	ldr	r0, [r7, #16]
 80040d6:	f002 fa6b 	bl	80065b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80040e8:	e01f      	b.n	800412a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	6938      	ldr	r0, [r7, #16]
 80040fe:	f002 fa57 	bl	80065b0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4619      	mov	r1, r3
 800411a:	6938      	ldr	r0, [r7, #16]
 800411c:	f002 fa48 	bl	80065b0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004120:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	60da      	str	r2, [r3, #12]
}
 800412a:	bf00      	nop
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	429a      	cmp	r2, r3
 800414c:	d808      	bhi.n	8004160 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	3b01      	subs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e004      	b.n	800416a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
  }
  return r;
 800416a:	697b      	ldr	r3, [r7, #20]
}
 800416c:	4618      	mov	r0, r3
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	; 0x30
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b53      	cmp	r3, #83	; 0x53
 8004190:	d001      	beq.n	8004196 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004192:	f7ff fecf 	bl	8003f34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4a37      	ldr	r2, [pc, #220]	; (8004280 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80041a4:	4413      	add	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d92b      	bls.n	800421c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	bf28      	it	cs
 80041d6:	4613      	movcs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	4413      	add	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ea:	f002 f9e1 	bl	80065b0 <memcpy>
    NumBytesRead += NumBytesRem;
 80041ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4413      	add	r3, r2
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	429a      	cmp	r2, r3
 8004216:	d101      	bne.n	800421c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004218:	2300      	movs	r3, #0
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4293      	cmp	r3, r2
 800422a:	bf28      	it	cs
 800422c:	4613      	movcs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	4413      	add	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004246:	f002 f9b3 	bl	80065b0 <memcpy>
    NumBytesRead += NumBytesRem;
 800424a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4413      	add	r3, r2
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004274:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004278:	4618      	mov	r0, r3
 800427a:	3730      	adds	r7, #48	; 0x30
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20019268 	.word	0x20019268

08004284 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	; 0x30
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004290:	4b3e      	ldr	r3, [pc, #248]	; (800438c <SEGGER_RTT_ReadNoLock+0x108>)
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b53      	cmp	r3, #83	; 0x53
 800429c:	d001      	beq.n	80042a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800429e:	f7ff fe49 	bl	8003f34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	3360      	adds	r3, #96	; 0x60
 80042ae:	4a37      	ldr	r2, [pc, #220]	; (800438c <SEGGER_RTT_ReadNoLock+0x108>)
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d92b      	bls.n	8004328 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4293      	cmp	r3, r2
 80042e0:	bf28      	it	cs
 80042e2:	4613      	movcs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	4413      	add	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	6939      	ldr	r1, [r7, #16]
 80042f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f6:	f002 f95b 	bl	80065b0 <memcpy>
    NumBytesRead += NumBytesRem;
 80042fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4413      	add	r3, r2
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4413      	add	r3, r2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004320:	429a      	cmp	r2, r3
 8004322:	d101      	bne.n	8004328 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004324:	2300      	movs	r3, #0
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4293      	cmp	r3, r2
 8004336:	bf28      	it	cs
 8004338:	4613      	movcs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	4413      	add	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004352:	f002 f92d 	bl	80065b0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4413      	add	r3, r2
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004380:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004384:	4618      	mov	r0, r3
 8004386:	3730      	adds	r7, #48	; 0x30
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20019268 	.word	0x20019268

08004390 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	3360      	adds	r3, #96	; 0x60
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80043ae:	4413      	add	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d029      	beq.n	800440e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d82e      	bhi.n	800441c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d013      	beq.n	80043ee <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80043c6:	e029      	b.n	800441c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043c8:	6978      	ldr	r0, [r7, #20]
 80043ca:	f7ff feb2 	bl	8004132 <_GetAvailWriteSpace>
 80043ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d202      	bcs.n	80043de <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80043dc:	e021      	b.n	8004422 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff fe5b 	bl	80040a2 <_WriteNoCheck>
    break;
 80043ec:	e019      	b.n	8004422 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff fe9f 	bl	8004132 <_GetAvailWriteSpace>
 80043f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf28      	it	cs
 80043fe:	4613      	movcs	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff fe4b 	bl	80040a2 <_WriteNoCheck>
    break;
 800440c:	e009      	b.n	8004422 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff fde8 	bl	8003fe8 <_WriteBlocking>
 8004418:	61f8      	str	r0, [r7, #28]
    break;
 800441a:	e002      	b.n	8004422 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
    break;
 8004420:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004422:	69fb      	ldr	r3, [r7, #28]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20019268 	.word	0x20019268

08004430 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b53      	cmp	r3, #83	; 0x53
 8004448:	d001      	beq.n	800444e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800444a:	f7ff fd73 	bl	8003f34 <_DoInit>
  SEGGER_RTT_LOCK();
 800444e:	f3ef 8311 	mrs	r3, BASEPRI
 8004452:	f04f 0120 	mov.w	r1, #32
 8004456:	f381 8811 	msr	BASEPRI, r1
 800445a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff ff95 	bl	8004390 <SEGGER_RTT_WriteDownBufferNoLock>
 8004466:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800446e:	697b      	ldr	r3, [r7, #20]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20019268 	.word	0x20019268

0800447c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b53      	cmp	r3, #83	; 0x53
 8004496:	d001      	beq.n	800449c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004498:	f7ff fd4c 	bl	8003f34 <_DoInit>
  SEGGER_RTT_LOCK();
 800449c:	f3ef 8311 	mrs	r3, BASEPRI
 80044a0:	f04f 0120 	mov.w	r1, #32
 80044a4:	f381 8811 	msr	BASEPRI, r1
 80044a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80044b2:	6939      	ldr	r1, [r7, #16]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	4613      	mov	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3304      	adds	r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	dbeb      	blt.n	80044b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80044da:	e000      	b.n	80044de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80044dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	da3f      	bge.n	8004568 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	440b      	add	r3, r1
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	440b      	add	r3, r1
 800450c:	3304      	adds	r3, #4
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004512:	6939      	ldr	r1, [r7, #16]
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	440b      	add	r3, r1
 8004520:	3320      	adds	r3, #32
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004526:	6939      	ldr	r1, [r7, #16]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	3328      	adds	r3, #40	; 0x28
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800453a:	6939      	ldr	r1, [r7, #16]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	332c      	adds	r3, #44	; 0x2c
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004562:	f3bf 8f5f 	dmb	sy
 8004566:	e002      	b.n	800456e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004574:	69fb      	ldr	r3, [r7, #28]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20019268 	.word	0x20019268

08004584 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b53      	cmp	r3, #83	; 0x53
 800459e:	d001      	beq.n	80045a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80045a0:	f7ff fcc8 	bl	8003f34 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d82c      	bhi.n	8004608 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80045ae:	f3ef 8311 	mrs	r3, BASEPRI
 80045b2:	f04f 0120 	mov.w	r1, #32
 80045b6:	f381 8811 	msr	BASEPRI, r1
 80045ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	3360      	adds	r3, #96	; 0x60
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80045f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e002      	b.n	800460e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004610:	4618      	mov	r0, r3
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20019268 	.word	0x20019268

0800461c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	60fa      	str	r2, [r7, #12]
 8004632:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d90a      	bls.n	8004650 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800463e:	e007      	b.n	8004650 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	1c53      	adds	r3, r2, #1
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	60f9      	str	r1, [r7, #12]
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <_EncodeStr+0x46>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ee      	bne.n	8004640 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	b2da      	uxtb	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3307      	adds	r3, #7
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800469a:	4b35      	ldr	r3, [pc, #212]	; (8004770 <_HandleIncomingPacket+0xdc>)
 800469c:	7e1b      	ldrb	r3, [r3, #24]
 800469e:	4618      	mov	r0, r3
 80046a0:	1cfb      	adds	r3, r7, #3
 80046a2:	2201      	movs	r2, #1
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7ff fded 	bl	8004284 <SEGGER_RTT_ReadNoLock>
 80046aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d052      	beq.n	8004758 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d031      	beq.n	800471c <_HandleIncomingPacket+0x88>
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	dc40      	bgt.n	800473e <_HandleIncomingPacket+0xaa>
 80046bc:	2b07      	cmp	r3, #7
 80046be:	dc15      	bgt.n	80046ec <_HandleIncomingPacket+0x58>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dd3c      	ble.n	800473e <_HandleIncomingPacket+0xaa>
 80046c4:	3b01      	subs	r3, #1
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d839      	bhi.n	800473e <_HandleIncomingPacket+0xaa>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <_HandleIncomingPacket+0x3c>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	080046f3 	.word	0x080046f3
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	080046ff 	.word	0x080046ff
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800470b 	.word	0x0800470b
 80046e4:	08004711 	.word	0x08004711
 80046e8:	08004717 	.word	0x08004717
 80046ec:	2b7f      	cmp	r3, #127	; 0x7f
 80046ee:	d035      	beq.n	800475c <_HandleIncomingPacket+0xc8>
 80046f0:	e025      	b.n	800473e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80046f2:	f000 ff7f 	bl	80055f4 <SEGGER_SYSVIEW_Start>
      break;
 80046f6:	e036      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80046f8:	f001 f838 	bl	800576c <SEGGER_SYSVIEW_Stop>
      break;
 80046fc:	e033      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80046fe:	f001 fa11 	bl	8005b24 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004702:	e030      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004704:	f001 f9d6 	bl	8005ab4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004708:	e02d      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800470a:	f001 f855 	bl	80057b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800470e:	e02a      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004710:	f001 fcae 	bl	8006070 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004714:	e027      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004716:	f001 fc8d 	bl	8006034 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800471a:	e024      	b.n	8004766 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <_HandleIncomingPacket+0xdc>)
 800471e:	7e1b      	ldrb	r3, [r3, #24]
 8004720:	4618      	mov	r0, r3
 8004722:	1cfb      	adds	r3, r7, #3
 8004724:	2201      	movs	r2, #1
 8004726:	4619      	mov	r1, r3
 8004728:	f7ff fdac 	bl	8004284 <SEGGER_RTT_ReadNoLock>
 800472c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fbf2 	bl	8005f20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800473c:	e010      	b.n	8004760 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	b25b      	sxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	da0e      	bge.n	8004764 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <_HandleIncomingPacket+0xdc>)
 8004748:	7e1b      	ldrb	r3, [r3, #24]
 800474a:	4618      	mov	r0, r3
 800474c:	1cfb      	adds	r3, r7, #3
 800474e:	2201      	movs	r2, #1
 8004750:	4619      	mov	r1, r3
 8004752:	f7ff fd97 	bl	8004284 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004756:	e005      	b.n	8004764 <_HandleIncomingPacket+0xd0>
    }
  }
 8004758:	bf00      	nop
 800475a:	e004      	b.n	8004766 <_HandleIncomingPacket+0xd2>
      break;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <_HandleIncomingPacket+0xd2>
      break;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <_HandleIncomingPacket+0xd2>
      break;
 8004764:	bf00      	nop
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	2001a728 	.word	0x2001a728

08004774 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b08c      	sub	sp, #48	; 0x30
 8004778:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800477a:	2301      	movs	r3, #1
 800477c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
 800478e:	e00b      	b.n	80047a8 <_TrySendOverflowPacket+0x34>
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	1c59      	adds	r1, r3, #1
 8004798:	62f9      	str	r1, [r7, #44]	; 0x2c
 800479a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	09db      	lsrs	r3, r3, #7
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	2b7f      	cmp	r3, #127	; 0x7f
 80047ac:	d8f0      	bhi.n	8004790 <_TrySendOverflowPacket+0x1c>
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047be:	4b26      	ldr	r3, [pc, #152]	; (8004858 <_TrySendOverflowPacket+0xe4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047c4:	4b23      	ldr	r3, [pc, #140]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	e00b      	b.n	80047f0 <_TrySendOverflowPacket+0x7c>
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	6279      	str	r1, [r7, #36]	; 0x24
 80047e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b7f      	cmp	r3, #127	; 0x7f
 80047f4:	d8f0      	bhi.n	80047d8 <_TrySendOverflowPacket+0x64>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	627a      	str	r2, [r7, #36]	; 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	4618      	mov	r0, r3
 800480c:	1d3b      	adds	r3, r7, #4
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	461a      	mov	r2, r3
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	4619      	mov	r1, r3
 8004818:	f7fb fcda 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800481c:	4603      	mov	r3, r0
 800481e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004820:	f001 fe08 	bl	8006434 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e004      	b.n	8004848 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <_TrySendOverflowPacket+0xe0>)
 8004846:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004848:	693b      	ldr	r3, [r7, #16]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3730      	adds	r7, #48	; 0x30
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	2001a728 	.word	0x2001a728
 8004858:	e0001004 	.word	0xe0001004

0800485c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <_SendPacket+0x268>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d010      	beq.n	8004892 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004870:	4b94      	ldr	r3, [pc, #592]	; (8004ac4 <_SendPacket+0x268>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8130 	beq.w	8004ada <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800487a:	4b92      	ldr	r3, [pc, #584]	; (8004ac4 <_SendPacket+0x268>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d109      	bne.n	8004896 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004882:	f7ff ff77 	bl	8004774 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004886:	4b8f      	ldr	r3, [pc, #572]	; (8004ac4 <_SendPacket+0x268>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	f040 8127 	bne.w	8004ade <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004890:	e001      	b.n	8004896 <_SendPacket+0x3a>
    goto Send;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <_SendPacket+0x3c>
Send:
 8004896:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b1f      	cmp	r3, #31
 800489c:	d809      	bhi.n	80048b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800489e:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <_SendPacket+0x268>)
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8118 	bne.w	8004ae2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b17      	cmp	r3, #23
 80048b6:	d807      	bhi.n	80048c8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e0c4      	b.n	8004a52 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b7f      	cmp	r3, #127	; 0x7f
 80048d4:	d912      	bls.n	80048fc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	09da      	lsrs	r2, r3, #7
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b01      	subs	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	60fa      	str	r2, [r7, #12]
 80048f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e006      	b.n	800490a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b01      	subs	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b7e      	cmp	r3, #126	; 0x7e
 800490e:	d807      	bhi.n	8004920 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e098      	b.n	8004a52 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004926:	d212      	bcs.n	800494e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	09da      	lsrs	r2, r3, #7
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	3a01      	subs	r2, #1
 8004940:	60fa      	str	r2, [r7, #12]
 8004942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e081      	b.n	8004a52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004954:	d21d      	bcs.n	8004992 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0b9a      	lsrs	r2, r3, #14
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3b01      	subs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	b2db      	uxtb	r3, r3
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	3a01      	subs	r2, #1
 8004970:	60fa      	str	r2, [r7, #12]
 8004972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	3a01      	subs	r2, #1
 8004984:	60fa      	str	r2, [r7, #12]
 8004986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e05f      	b.n	8004a52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004998:	d228      	bcs.n	80049ec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0d5a      	lsrs	r2, r3, #21
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0b9b      	lsrs	r3, r3, #14
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	3a01      	subs	r2, #1
 80049b4:	60fa      	str	r2, [r7, #12]
 80049b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	09db      	lsrs	r3, r3, #7
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	3a01      	subs	r2, #1
 80049ca:	60fa      	str	r2, [r7, #12]
 80049cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	3a01      	subs	r2, #1
 80049de:	60fa      	str	r2, [r7, #12]
 80049e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e032      	b.n	8004a52 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0f1a      	lsrs	r2, r3, #28
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0d5b      	lsrs	r3, r3, #21
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	3a01      	subs	r2, #1
 8004a06:	60fa      	str	r2, [r7, #12]
 8004a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0b9b      	lsrs	r3, r3, #14
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	60fa      	str	r2, [r7, #12]
 8004a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	09db      	lsrs	r3, r3, #7
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	3a01      	subs	r2, #1
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	3a01      	subs	r2, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <_SendPacket+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a58:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <_SendPacket+0x268>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	e00b      	b.n	8004a84 <_SendPacket+0x228>
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6279      	str	r1, [r7, #36]	; 0x24
 8004a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b7f      	cmp	r3, #127	; 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <_SendPacket+0x210>
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <_SendPacket+0x268>)
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	f7fb fb91 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004aae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004ab0:	f001 fcc0 	bl	8006434 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004aba:	4a02      	ldr	r2, [pc, #8]	; (8004ac4 <_SendPacket+0x268>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	60d3      	str	r3, [r2, #12]
 8004ac0:	e010      	b.n	8004ae4 <_SendPacket+0x288>
 8004ac2:	bf00      	nop
 8004ac4:	2001a728 	.word	0x2001a728
 8004ac8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <_SendPacket+0x2d8>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <_SendPacket+0x2d8>)
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e004      	b.n	8004ae4 <_SendPacket+0x288>
    goto SendDone;
 8004ada:	bf00      	nop
 8004adc:	e002      	b.n	8004ae4 <_SendPacket+0x288>
      goto SendDone;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <_SendPacket+0x288>
      goto SendDone;
 8004ae2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <_SendPacket+0x2d8>)
 8004ae6:	7e1b      	ldrb	r3, [r3, #24]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <_SendPacket+0x2dc>)
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	336c      	adds	r3, #108	; 0x6c
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <_SendPacket+0x2d8>)
 8004afc:	7e1b      	ldrb	r3, [r3, #24]
 8004afe:	4618      	mov	r0, r3
 8004b00:	490d      	ldr	r1, [pc, #52]	; (8004b38 <_SendPacket+0x2dc>)
 8004b02:	4603      	mov	r3, r0
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4403      	add	r3, r0
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3370      	adds	r3, #112	; 0x70
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d00b      	beq.n	8004b2c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <_SendPacket+0x2d8>)
 8004b16:	789b      	ldrb	r3, [r3, #2]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <_SendPacket+0x2d8>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b22:	f7ff fdb7 	bl	8004694 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b26:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <_SendPacket+0x2d8>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	; 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	2001a728 	.word	0x2001a728
 8004b38:	20019268 	.word	0x20019268

08004b3c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3301      	adds	r3, #1
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d80a      	bhi.n	8004b6c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6051      	str	r1, [r2, #4]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d15a      	bne.n	8004c2a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	e00b      	b.n	8004bae <_StoreChar+0x72>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	6279      	str	r1, [r7, #36]	; 0x24
 8004ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <_StoreChar+0x5a>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e00b      	b.n	8004be6 <_StoreChar+0xaa>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	61f9      	str	r1, [r7, #28]
 8004bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	09db      	lsrs	r3, r3, #7
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	d8f0      	bhi.n	8004bce <_StoreChar+0x92>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	221a      	movs	r2, #26
 8004c02:	6939      	ldr	r1, [r7, #16]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fe29 	bl	800485c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fd34 	bl	800467c <_PreparePacket>
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c4e:	e007      	b.n	8004c60 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004c50:	6a3a      	ldr	r2, [r7, #32]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	623b      	str	r3, [r7, #32]
    Width++;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d2f3      	bcs.n	8004c50 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d901      	bls.n	8004c74 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11f      	bne.n	8004cbe <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01c      	beq.n	8004cbe <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <_PrintUnsigned+0x66>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <_PrintUnsigned+0x66>
        c = '0';
 8004c94:	2330      	movs	r3, #48	; 0x30
 8004c96:	76fb      	strb	r3, [r7, #27]
 8004c98:	e001      	b.n	8004c9e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c9e:	e007      	b.n	8004cb0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004ca6:	7efb      	ldrb	r3, [r7, #27]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ff46 	bl	8004b3c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <_PrintUnsigned+0x8a>
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3f0      	bcc.n	8004ca0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d903      	bls.n	8004ccc <_PrintUnsigned+0x98>
      NumDigits--;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	e009      	b.n	8004ce0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d200      	bcs.n	8004ce0 <_PrintUnsigned+0xac>
        break;
 8004cde:	e005      	b.n	8004cec <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004cea:	e7e8      	b.n	8004cbe <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004d04:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <_PrintUnsigned+0x128>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff ff14 	bl	8004b3c <_StoreChar>
    Digit /= Base;
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e3      	bne.n	8004cec <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d34:	e006      	b.n	8004d44 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004d3c:	2120      	movs	r1, #32
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fefc 	bl	8004b3c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <_PrintUnsigned+0x11e>
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3f1      	bcc.n	8004d36 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	080067c0 	.word	0x080067c0

08004d60 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bfb8      	it	lt
 8004d74:	425b      	neglt	r3, r3
 8004d76:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d7c:	e007      	b.n	8004d8e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d86:	613b      	str	r3, [r7, #16]
    Width++;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	daf3      	bge.n	8004d7e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d901      	bls.n	8004da2 <_PrintInt+0x42>
    Width = NumDigits;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <_PrintInt+0x5e>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	db04      	blt.n	8004db8 <_PrintInt+0x58>
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <_PrintInt+0x5e>
    FieldWidth--;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <_PrintInt+0x6e>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <_PrintInt+0x9c>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d111      	bne.n	8004dfc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00e      	beq.n	8004dfc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004dde:	e006      	b.n	8004dee <_PrintInt+0x8e>
        FieldWidth--;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004de6:	2120      	movs	r1, #32
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff fea7 	bl	8004b3c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <_PrintInt+0x9c>
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3f1      	bcc.n	8004de0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da07      	bge.n	8004e12 <_PrintInt+0xb2>
    v = -v;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	425b      	negs	r3, r3
 8004e06:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004e08:	212d      	movs	r1, #45	; 0x2d
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7ff fe96 	bl	8004b3c <_StoreChar>
 8004e10:	e008      	b.n	8004e24 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004e1c:	212b      	movs	r1, #43	; 0x2b
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff fe8c 	bl	8004b3c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d019      	beq.n	8004e62 <_PrintInt+0x102>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d114      	bne.n	8004e62 <_PrintInt+0x102>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d111      	bne.n	8004e62 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e44:	e006      	b.n	8004e54 <_PrintInt+0xf4>
        FieldWidth--;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004e4c:	2130      	movs	r1, #48	; 0x30
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fe74 	bl	8004b3c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <_PrintInt+0x102>
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d3f1      	bcc.n	8004e46 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff fedf 	bl	8004c34 <_PrintUnsigned>
}
 8004e76:	bf00      	nop
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b098      	sub	sp, #96	; 0x60
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e90:	f04f 0120 	mov.w	r1, #32
 8004e94:	f381 8811 	msr	BASEPRI, r1
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	48b7      	ldr	r0, [pc, #732]	; (8005178 <_VPrintTarget+0x2f8>)
 8004e9c:	f7ff fbee 	bl	800467c <_PreparePacket>
 8004ea0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004ea2:	4bb5      	ldr	r3, [pc, #724]	; (8005178 <_VPrintTarget+0x2f8>)
 8004ea4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 81a8 	beq.w	8005220 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ed4:	2b25      	cmp	r3, #37	; 0x25
 8004ed6:	f040 8195 	bne.w	8005204 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004eda:	2300      	movs	r3, #0
 8004edc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eee:	3b23      	subs	r3, #35	; 0x23
 8004ef0:	2b0d      	cmp	r3, #13
 8004ef2:	d83f      	bhi.n	8004f74 <_VPrintTarget+0xf4>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <_VPrintTarget+0x7c>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f65 	.word	0x08004f65
 8004f00:	08004f75 	.word	0x08004f75
 8004f04:	08004f75 	.word	0x08004f75
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004f75 	.word	0x08004f75
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f55 	.word	0x08004f55
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f75 	.word	0x08004f75
 8004f2c:	08004f75 	.word	0x08004f75
 8004f30:	08004f45 	.word	0x08004f45
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e01a      	b.n	8004f7a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f46:	f043 0302 	orr.w	r3, r3, #2
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e012      	b.n	8004f7a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e00a      	b.n	8004f7a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f66:	f043 0308 	orr.w	r3, r3, #8
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e002      	b.n	8004f7a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004f74:	2300      	movs	r3, #0
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
 8004f78:	bf00      	nop
        }
      } while (v);
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1b0      	bne.n	8004ee2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004f80:	2300      	movs	r3, #0
 8004f82:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f90:	2b2f      	cmp	r3, #47	; 0x2f
 8004f92:	d912      	bls.n	8004fba <_VPrintTarget+0x13a>
 8004f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f98:	2b39      	cmp	r3, #57	; 0x39
 8004f9a:	d80e      	bhi.n	8004fba <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	461a      	mov	r2, r3
 8004fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b30      	subs	r3, #48	; 0x30
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004fb8:	e7e4      	b.n	8004f84 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fca:	2b2e      	cmp	r3, #46	; 0x2e
 8004fcc:	d11d      	bne.n	800500a <_VPrintTarget+0x18a>
        sFormat++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fe0:	2b2f      	cmp	r3, #47	; 0x2f
 8004fe2:	d912      	bls.n	800500a <_VPrintTarget+0x18a>
 8004fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fe8:	2b39      	cmp	r3, #57	; 0x39
 8004fea:	d80e      	bhi.n	800500a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005002:	4413      	add	r3, r2
 8005004:	3b30      	subs	r3, #48	; 0x30
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005008:	e7e4      	b.n	8004fd4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005016:	2b6c      	cmp	r3, #108	; 0x6c
 8005018:	d003      	beq.n	8005022 <_VPrintTarget+0x1a2>
 800501a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800501e:	2b68      	cmp	r3, #104	; 0x68
 8005020:	d107      	bne.n	8005032 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005030:	e7ef      	b.n	8005012 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005036:	2b25      	cmp	r3, #37	; 0x25
 8005038:	f000 80d8 	beq.w	80051ec <_VPrintTarget+0x36c>
 800503c:	2b25      	cmp	r3, #37	; 0x25
 800503e:	f2c0 80dc 	blt.w	80051fa <_VPrintTarget+0x37a>
 8005042:	2b78      	cmp	r3, #120	; 0x78
 8005044:	f300 80d9 	bgt.w	80051fa <_VPrintTarget+0x37a>
 8005048:	2b58      	cmp	r3, #88	; 0x58
 800504a:	f2c0 80d6 	blt.w	80051fa <_VPrintTarget+0x37a>
 800504e:	3b58      	subs	r3, #88	; 0x58
 8005050:	2b20      	cmp	r3, #32
 8005052:	f200 80d2 	bhi.w	80051fa <_VPrintTarget+0x37a>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <_VPrintTarget+0x1dc>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005153 	.word	0x08005153
 8005060:	080051fb 	.word	0x080051fb
 8005064:	080051fb 	.word	0x080051fb
 8005068:	080051fb 	.word	0x080051fb
 800506c:	080051fb 	.word	0x080051fb
 8005070:	080051fb 	.word	0x080051fb
 8005074:	080051fb 	.word	0x080051fb
 8005078:	080051fb 	.word	0x080051fb
 800507c:	080051fb 	.word	0x080051fb
 8005080:	080051fb 	.word	0x080051fb
 8005084:	080051fb 	.word	0x080051fb
 8005088:	080050e1 	.word	0x080050e1
 800508c:	08005107 	.word	0x08005107
 8005090:	080051fb 	.word	0x080051fb
 8005094:	080051fb 	.word	0x080051fb
 8005098:	080051fb 	.word	0x080051fb
 800509c:	080051fb 	.word	0x080051fb
 80050a0:	080051fb 	.word	0x080051fb
 80050a4:	080051fb 	.word	0x080051fb
 80050a8:	080051fb 	.word	0x080051fb
 80050ac:	080051fb 	.word	0x080051fb
 80050b0:	080051fb 	.word	0x080051fb
 80050b4:	080051fb 	.word	0x080051fb
 80050b8:	080051fb 	.word	0x080051fb
 80050bc:	080051c7 	.word	0x080051c7
 80050c0:	080051fb 	.word	0x080051fb
 80050c4:	080051fb 	.word	0x080051fb
 80050c8:	0800517d 	.word	0x0800517d
 80050cc:	080051fb 	.word	0x080051fb
 80050d0:	0800512d 	.word	0x0800512d
 80050d4:	080051fb 	.word	0x080051fb
 80050d8:	080051fb 	.word	0x080051fb
 80050dc:	08005153 	.word	0x08005153
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1d19      	adds	r1, r3, #4
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80050ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80050f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fd1c 	bl	8004b3c <_StoreChar>
        break;
 8005104:	e07a      	b.n	80051fc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1d19      	adds	r1, r3, #4
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6011      	str	r1, [r2, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005114:	f107 0010 	add.w	r0, r7, #16
 8005118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005122:	220a      	movs	r2, #10
 8005124:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005126:	f7ff fe1b 	bl	8004d60 <_PrintInt>
        break;
 800512a:	e067      	b.n	80051fc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1d19      	adds	r1, r3, #4
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800513a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800513c:	f107 0010 	add.w	r0, r7, #16
 8005140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	220a      	movs	r2, #10
 800514c:	f7ff fd72 	bl	8004c34 <_PrintUnsigned>
        break;
 8005150:	e054      	b.n	80051fc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6011      	str	r1, [r2, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005160:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005162:	f107 0010 	add.w	r0, r7, #16
 8005166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005170:	2210      	movs	r2, #16
 8005172:	f7ff fd5f 	bl	8004c34 <_PrintUnsigned>
        break;
 8005176:	e041      	b.n	80051fc <_VPrintTarget+0x37c>
 8005178:	2001a758 	.word	0x2001a758
      case 's':
        s = va_arg(*pParamList, const char*);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800518a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <_VPrintTarget+0x314>
          s = "(null)";
 8005190:	4b4a      	ldr	r3, [pc, #296]	; (80052bc <_VPrintTarget+0x43c>)
 8005192:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	3301      	adds	r3, #1
 80051a0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80051a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80051aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80051ae:	f107 0310 	add.w	r3, r7, #16
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fcc1 	bl	8004b3c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2b7f      	cmp	r3, #127	; 0x7f
 80051be:	d9e9      	bls.n	8005194 <_VPrintTarget+0x314>
        break;
 80051c0:	e01c      	b.n	80051fc <_VPrintTarget+0x37c>
            break;
 80051c2:	bf00      	nop
        break;
 80051c4:	e01a      	b.n	80051fc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1d19      	adds	r1, r3, #4
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6011      	str	r1, [r2, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80051d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051d6:	f107 0010 	add.w	r0, r7, #16
 80051da:	2300      	movs	r3, #0
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	2308      	movs	r3, #8
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	2308      	movs	r3, #8
 80051e4:	2210      	movs	r2, #16
 80051e6:	f7ff fd25 	bl	8004c34 <_PrintUnsigned>
        break;
 80051ea:	e007      	b.n	80051fc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80051ec:	f107 0310 	add.w	r3, r7, #16
 80051f0:	2125      	movs	r1, #37	; 0x25
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fca2 	bl	8004b3c <_StoreChar>
        break;
 80051f8:	e000      	b.n	80051fc <_VPrintTarget+0x37c>
      default:
        break;
 80051fa:	bf00      	nop
      }
      sFormat++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e007      	b.n	8005214 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005204:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005208:	f107 0310 	add.w	r3, r7, #16
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fc94 	bl	8004b3c <_StoreChar>
    }
  } while (*sFormat);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f ae4d 	bne.w	8004eb8 <_VPrintTarget+0x38>
 800521e:	e000      	b.n	8005222 <_VPrintTarget+0x3a2>
      break;
 8005220:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d041      	beq.n	80052ac <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
 8005238:	e00b      	b.n	8005252 <_VPrintTarget+0x3d2>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	b2da      	uxtb	r2, r3
 800523e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005240:	1c59      	adds	r1, r3, #1
 8005242:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b7f      	cmp	r3, #127	; 0x7f
 8005256:	d8f0      	bhi.n	800523a <_VPrintTarget+0x3ba>
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800525e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
 800526c:	2300      	movs	r3, #0
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
 8005270:	e00b      	b.n	800528a <_VPrintTarget+0x40a>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	b2da      	uxtb	r2, r3
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	6379      	str	r1, [r7, #52]	; 0x34
 800527c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	09db      	lsrs	r3, r3, #7
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b7f      	cmp	r3, #127	; 0x7f
 800528e:	d8f0      	bhi.n	8005272 <_VPrintTarget+0x3f2>
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	637a      	str	r2, [r7, #52]	; 0x34
 8005296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	221a      	movs	r2, #26
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fad8 	bl	800485c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80052b2:	bf00      	nop
 80052b4:	3758      	adds	r7, #88	; 0x58
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	08006770 	.word	0x08006770

080052c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80052ce:	2300      	movs	r3, #0
 80052d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052d4:	4917      	ldr	r1, [pc, #92]	; (8005334 <SEGGER_SYSVIEW_Init+0x74>)
 80052d6:	4818      	ldr	r0, [pc, #96]	; (8005338 <SEGGER_SYSVIEW_Init+0x78>)
 80052d8:	f7ff f8d0 	bl	800447c <SEGGER_RTT_AllocUpBuffer>
 80052dc:	4603      	mov	r3, r0
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b16      	ldr	r3, [pc, #88]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 80052e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 80052e6:	785a      	ldrb	r2, [r3, #1]
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 80052ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80052ec:	4b13      	ldr	r3, [pc, #76]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 80052ee:	7e1b      	ldrb	r3, [r3, #24]
 80052f0:	4618      	mov	r0, r3
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2308      	movs	r3, #8
 80052f8:	4a11      	ldr	r2, [pc, #68]	; (8005340 <SEGGER_SYSVIEW_Init+0x80>)
 80052fa:	490f      	ldr	r1, [pc, #60]	; (8005338 <SEGGER_SYSVIEW_Init+0x78>)
 80052fc:	f7ff f942 	bl	8004584 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 8005302:	2200      	movs	r2, #0
 8005304:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <SEGGER_SYSVIEW_Init+0x84>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a0c      	ldr	r2, [pc, #48]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 800530c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005314:	4a09      	ldr	r2, [pc, #36]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <SEGGER_SYSVIEW_Init+0x7c>)
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20019720 	.word	0x20019720
 8005338:	08006778 	.word	0x08006778
 800533c:	2001a728 	.word	0x2001a728
 8005340:	2001a720 	.word	0x2001a720
 8005344:	e0001004 	.word	0xe0001004

08005348 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6113      	str	r3, [r2, #16]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2001a728 	.word	0x2001a728

08005368 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	f04f 0120 	mov.w	r1, #32
 8005378:	f381 8811 	msr	BASEPRI, r1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	4808      	ldr	r0, [pc, #32]	; (80053a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005380:	f7ff f97c 	bl	800467c <_PreparePacket>
 8005384:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	f7ff fa66 	bl	800485c <_SendPacket>
  RECORD_END();
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f383 8811 	msr	BASEPRI, r3
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2001a758 	.word	0x2001a758

080053a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	4816      	ldr	r0, [pc, #88]	; (8005418 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80053be:	f7ff f95d 	bl	800467c <_PreparePacket>
 80053c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e00b      	b.n	80053ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	61f9      	str	r1, [r7, #28]
 80053dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	09db      	lsrs	r3, r3, #7
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b7f      	cmp	r3, #127	; 0x7f
 80053ee:	d8f0      	bhi.n	80053d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68f9      	ldr	r1, [r7, #12]
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f7ff fa29 	bl	800485c <_SendPacket>
  RECORD_END();
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f383 8811 	msr	BASEPRI, r3
}
 8005410:	bf00      	nop
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	2001a758 	.word	0x2001a758

0800541c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	; 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005428:	f3ef 8311 	mrs	r3, BASEPRI
 800542c:	f04f 0120 	mov.w	r1, #32
 8005430:	f381 8811 	msr	BASEPRI, r1
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	4825      	ldr	r0, [pc, #148]	; (80054cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005438:	f7ff f920 	bl	800467c <_PreparePacket>
 800543c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
 800544a:	e00b      	b.n	8005464 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	b2da      	uxtb	r2, r3
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	09db      	lsrs	r3, r3, #7
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2b7f      	cmp	r3, #127	; 0x7f
 8005468:	d8f0      	bhi.n	800544c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	e00b      	b.n	800549c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6279      	str	r1, [r7, #36]	; 0x24
 800548e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	09db      	lsrs	r3, r3, #7
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b7f      	cmp	r3, #127	; 0x7f
 80054a0:	d8f0      	bhi.n	8005484 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	627a      	str	r2, [r7, #36]	; 0x24
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	69b8      	ldr	r0, [r7, #24]
 80054b8:	f7ff f9d0 	bl	800485c <_SendPacket>
  RECORD_END();
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f383 8811 	msr	BASEPRI, r3
}
 80054c2:	bf00      	nop
 80054c4:	3730      	adds	r7, #48	; 0x30
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	2001a758 	.word	0x2001a758

080054d0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b090      	sub	sp, #64	; 0x40
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054de:	f3ef 8311 	mrs	r3, BASEPRI
 80054e2:	f04f 0120 	mov.w	r1, #32
 80054e6:	f381 8811 	msr	BASEPRI, r1
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	4840      	ldr	r0, [pc, #256]	; (80055f0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80054ee:	f7ff f8c5 	bl	800467c <_PreparePacket>
 80054f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005500:	e00b      	b.n	800551a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	b2da      	uxtb	r2, r3
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	1c59      	adds	r1, r3, #1
 800550a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800550c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	09db      	lsrs	r3, r3, #7
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b7f      	cmp	r3, #127	; 0x7f
 800551e:	d8f0      	bhi.n	8005502 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
 8005538:	e00b      	b.n	8005552 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	b2da      	uxtb	r2, r3
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	1c59      	adds	r1, r3, #1
 8005542:	6379      	str	r1, [r7, #52]	; 0x34
 8005544:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	09db      	lsrs	r3, r3, #7
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b7f      	cmp	r3, #127	; 0x7f
 8005556:	d8f0      	bhi.n	800553a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	637a      	str	r2, [r7, #52]	; 0x34
 800555e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005570:	e00b      	b.n	800558a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	b2da      	uxtb	r2, r3
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800557c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	09db      	lsrs	r3, r3, #7
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	2b7f      	cmp	r3, #127	; 0x7f
 800558e:	d8f0      	bhi.n	8005572 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a6:	623b      	str	r3, [r7, #32]
 80055a8:	e00b      	b.n	80055c2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1c59      	adds	r1, r3, #1
 80055b2:	6279      	str	r1, [r7, #36]	; 0x24
 80055b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	09db      	lsrs	r3, r3, #7
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b7f      	cmp	r3, #127	; 0x7f
 80055c6:	d8f0      	bhi.n	80055aa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	627a      	str	r2, [r7, #36]	; 0x24
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6979      	ldr	r1, [r7, #20]
 80055dc:	69b8      	ldr	r0, [r7, #24]
 80055de:	f7ff f93d 	bl	800485c <_SendPacket>
  RECORD_END();
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f383 8811 	msr	BASEPRI, r3
}
 80055e8:	bf00      	nop
 80055ea:	3740      	adds	r7, #64	; 0x40
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2001a758 	.word	0x2001a758

080055f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	; 0x30
 80055f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80055fa:	4b59      	ldr	r3, [pc, #356]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005600:	f3ef 8311 	mrs	r3, BASEPRI
 8005604:	f04f 0120 	mov.w	r1, #32
 8005608:	f381 8811 	msr	BASEPRI, r1
 800560c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800560e:	4b54      	ldr	r3, [pc, #336]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	220a      	movs	r2, #10
 8005614:	4953      	ldr	r1, [pc, #332]	; (8005764 <SEGGER_SYSVIEW_Start+0x170>)
 8005616:	4618      	mov	r0, r3
 8005618:	f7fa fdda 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005622:	f000 ff07 	bl	8006434 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005626:	200a      	movs	r0, #10
 8005628:	f7ff fe9e 	bl	8005368 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800562c:	f3ef 8311 	mrs	r3, BASEPRI
 8005630:	f04f 0120 	mov.w	r1, #32
 8005634:	f381 8811 	msr	BASEPRI, r1
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	484b      	ldr	r0, [pc, #300]	; (8005768 <SEGGER_SYSVIEW_Start+0x174>)
 800563c:	f7ff f81e 	bl	800467c <_PreparePacket>
 8005640:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564a:	4b45      	ldr	r3, [pc, #276]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005650:	e00b      	b.n	800566a <SEGGER_SYSVIEW_Start+0x76>
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800565c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	09db      	lsrs	r3, r3, #7
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	2b7f      	cmp	r3, #127	; 0x7f
 800566e:	d8f0      	bhi.n	8005652 <SEGGER_SYSVIEW_Start+0x5e>
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
 8005684:	4b36      	ldr	r3, [pc, #216]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	e00b      	b.n	80056a4 <SEGGER_SYSVIEW_Start+0xb0>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	6279      	str	r1, [r7, #36]	; 0x24
 8005696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	09db      	lsrs	r3, r3, #7
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2b7f      	cmp	r3, #127	; 0x7f
 80056a8:	d8f0      	bhi.n	800568c <SEGGER_SYSVIEW_Start+0x98>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	627a      	str	r2, [r7, #36]	; 0x24
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	4b28      	ldr	r3, [pc, #160]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e00b      	b.n	80056de <SEGGER_SYSVIEW_Start+0xea>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	61f9      	str	r1, [r7, #28]
 80056d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	09db      	lsrs	r3, r3, #7
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b7f      	cmp	r3, #127	; 0x7f
 80056e2:	d8f0      	bhi.n	80056c6 <SEGGER_SYSVIEW_Start+0xd2>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e00b      	b.n	8005716 <SEGGER_SYSVIEW_Start+0x122>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1c59      	adds	r1, r3, #1
 8005706:	6179      	str	r1, [r7, #20]
 8005708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	09db      	lsrs	r3, r3, #7
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d8f0      	bhi.n	80056fe <SEGGER_SYSVIEW_Start+0x10a>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	617a      	str	r2, [r7, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800572c:	2218      	movs	r2, #24
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff f893 	bl	800485c <_SendPacket>
      RECORD_END();
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <SEGGER_SYSVIEW_Start+0x16c>)
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800574a:	f000 f9eb 	bl	8005b24 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800574e:	f000 f9b1 	bl	8005ab4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005752:	f000 fc8d 	bl	8006070 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005756:	bf00      	nop
 8005758:	3730      	adds	r7, #48	; 0x30
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2001a728 	.word	0x2001a728
 8005764:	080067b4 	.word	0x080067b4
 8005768:	2001a758 	.word	0x2001a758

0800576c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005772:	f3ef 8311 	mrs	r3, BASEPRI
 8005776:	f04f 0120 	mov.w	r1, #32
 800577a:	f381 8811 	msr	BASEPRI, r1
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	480b      	ldr	r0, [pc, #44]	; (80057b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005782:	f7fe ff7b 	bl	800467c <_PreparePacket>
 8005786:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005790:	220b      	movs	r2, #11
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6838      	ldr	r0, [r7, #0]
 8005796:	f7ff f861 	bl	800485c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f383 8811 	msr	BASEPRI, r3
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	2001a758 	.word	0x2001a758
 80057b4:	2001a728 	.word	0x2001a728

080057b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057be:	f3ef 8311 	mrs	r3, BASEPRI
 80057c2:	f04f 0120 	mov.w	r1, #32
 80057c6:	f381 8811 	msr	BASEPRI, r1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	4845      	ldr	r0, [pc, #276]	; (80058e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80057ce:	f7fe ff55 	bl	800467c <_PreparePacket>
 80057d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	e00b      	b.n	80057fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	09db      	lsrs	r3, r3, #7
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005800:	d8f0      	bhi.n	80057e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	e00b      	b.n	8005836 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1c59      	adds	r1, r3, #1
 8005826:	6279      	str	r1, [r7, #36]	; 0x24
 8005828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	09db      	lsrs	r3, r3, #7
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b7f      	cmp	r3, #127	; 0x7f
 800583a:	d8f0      	bhi.n	800581e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	627a      	str	r2, [r7, #36]	; 0x24
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e00b      	b.n	8005870 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	61f9      	str	r1, [r7, #28]
 8005862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	09db      	lsrs	r3, r3, #7
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b7f      	cmp	r3, #127	; 0x7f
 8005874:	d8f0      	bhi.n	8005858 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	61fa      	str	r2, [r7, #28]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	e00b      	b.n	80058a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1c59      	adds	r1, r3, #1
 8005898:	6179      	str	r1, [r7, #20]
 800589a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	09db      	lsrs	r3, r3, #7
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b7f      	cmp	r3, #127	; 0x7f
 80058ac:	d8f0      	bhi.n	8005890 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	617a      	str	r2, [r7, #20]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058be:	2218      	movs	r2, #24
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	68b8      	ldr	r0, [r7, #8]
 80058c4:	f7fe ffca 	bl	800485c <_SendPacket>
  RECORD_END();
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058ce:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	4798      	blx	r3
  }
}
 80058dc:	bf00      	nop
 80058de:	3730      	adds	r7, #48	; 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2001a758 	.word	0x2001a758
 80058e8:	2001a728 	.word	0x2001a728

080058ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b092      	sub	sp, #72	; 0x48
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80058f4:	f3ef 8311 	mrs	r3, BASEPRI
 80058f8:	f04f 0120 	mov.w	r1, #32
 80058fc:	f381 8811 	msr	BASEPRI, r1
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	486a      	ldr	r0, [pc, #424]	; (8005aac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005904:	f7fe feba 	bl	800467c <_PreparePacket>
 8005908:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b66      	ldr	r3, [pc, #408]	; (8005ab0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	643b      	str	r3, [r7, #64]	; 0x40
 800591e:	e00b      	b.n	8005938 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	6479      	str	r1, [r7, #68]	; 0x44
 800592a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005934:	09db      	lsrs	r3, r3, #7
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	2b7f      	cmp	r3, #127	; 0x7f
 800593c:	d8f0      	bhi.n	8005920 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800593e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	647a      	str	r2, [r7, #68]	; 0x44
 8005944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	63bb      	str	r3, [r7, #56]	; 0x38
 8005958:	e00b      	b.n	8005972 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b7f      	cmp	r3, #127	; 0x7f
 8005976:	d8f0      	bhi.n	800595a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7fe fe43 	bl	800461c <_EncodeStr>
 8005996:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005998:	2209      	movs	r2, #9
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	6938      	ldr	r0, [r7, #16]
 800599e:	f7fe ff5d 	bl	800485c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b40      	ldr	r3, [pc, #256]	; (8005ab0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6379      	str	r1, [r7, #52]	; 0x34
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	633b      	str	r3, [r7, #48]	; 0x30
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	637a      	str	r2, [r7, #52]	; 0x34
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f0:	e00b      	b.n	8005a0a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	09db      	lsrs	r3, r3, #7
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0e:	d8f0      	bhi.n	80059f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e00b      	b.n	8005a44 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	6279      	str	r1, [r7, #36]	; 0x24
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	61f9      	str	r1, [r7, #28]
 8005a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	61fa      	str	r2, [r7, #28]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005a94:	2215      	movs	r2, #21
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	6938      	ldr	r0, [r7, #16]
 8005a9a:	f7fe fedf 	bl	800485c <_SendPacket>
  RECORD_END();
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
}
 8005aa4:	bf00      	nop
 8005aa6:	3748      	adds	r7, #72	; 0x48
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2001a758 	.word	0x2001a758
 8005ab0:	2001a728 	.word	0x2001a728

08005ab4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005aca:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4798      	blx	r3
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	2001a728 	.word	0x2001a728

08005adc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae8:	f04f 0120 	mov.w	r1, #32
 8005aec:	f381 8811 	msr	BASEPRI, r1
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	480b      	ldr	r0, [pc, #44]	; (8005b20 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005af4:	f7fe fdc2 	bl	800467c <_PreparePacket>
 8005af8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f7fe fd8c 	bl	800461c <_EncodeStr>
 8005b04:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005b06:	220e      	movs	r2, #14
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f7fe fea6 	bl	800485c <_SendPacket>
  RECORD_END();
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f383 8811 	msr	BASEPRI, r3
}
 8005b16:	bf00      	nop
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	2001a758 	.word	0x2001a758

08005b24 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01a      	beq.n	8005b68 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005b3c:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4798      	blx	r3
 8005b44:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b48:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	000a      	movs	r2, r1
 8005b58:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	200d      	movs	r0, #13
 8005b62:	f7ff fc5b 	bl	800541c <SEGGER_SYSVIEW_RecordU32x2>
 8005b66:	e006      	b.n	8005b76 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	200c      	movs	r0, #12
 8005b70:	f7ff fc18 	bl	80053a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd90      	pop	{r4, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2001a728 	.word	0x2001a728
 8005b84:	e0001004 	.word	0xe0001004

08005b88 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b92:	f04f 0120 	mov.w	r1, #32
 8005b96:	f381 8811 	msr	BASEPRI, r1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	4819      	ldr	r0, [pc, #100]	; (8005c04 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005b9e:	f7fe fd6d 	bl	800467c <_PreparePacket>
 8005ba2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e00b      	b.n	8005bd4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1c59      	adds	r1, r3, #1
 8005bc4:	6179      	str	r1, [r7, #20]
 8005bc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	09db      	lsrs	r3, r3, #7
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd8:	d8f0      	bhi.n	8005bbc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	617a      	str	r2, [r7, #20]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005bea:	2202      	movs	r2, #2
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f7fe fe34 	bl	800485c <_SendPacket>
  RECORD_END();
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f383 8811 	msr	BASEPRI, r3
}
 8005bfa:	bf00      	nop
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2001a758 	.word	0x2001a758
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	f04f 0120 	mov.w	r1, #32
 8005c1a:	f381 8811 	msr	BASEPRI, r1
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	4807      	ldr	r0, [pc, #28]	; (8005c40 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005c22:	f7fe fd2b 	bl	800467c <_PreparePacket>
 8005c26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005c28:	2203      	movs	r2, #3
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f7fe fe15 	bl	800485c <_SendPacket>
  RECORD_END();
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f383 8811 	msr	BASEPRI, r3
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	2001a758 	.word	0x2001a758

08005c44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4e:	f04f 0120 	mov.w	r1, #32
 8005c52:	f381 8811 	msr	BASEPRI, r1
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	4807      	ldr	r0, [pc, #28]	; (8005c78 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005c5a:	f7fe fd0f 	bl	800467c <_PreparePacket>
 8005c5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005c60:	2212      	movs	r2, #18
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f7fe fdf9 	bl	800485c <_SendPacket>
  RECORD_END();
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	2001a758 	.word	0x2001a758

08005c7c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c82:	f3ef 8311 	mrs	r3, BASEPRI
 8005c86:	f04f 0120 	mov.w	r1, #32
 8005c8a:	f381 8811 	msr	BASEPRI, r1
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	4807      	ldr	r0, [pc, #28]	; (8005cb0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005c92:	f7fe fcf3 	bl	800467c <_PreparePacket>
 8005c96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005c98:	2211      	movs	r2, #17
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6838      	ldr	r0, [r7, #0]
 8005c9e:	f7fe fddd 	bl	800485c <_SendPacket>
  RECORD_END();
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f383 8811 	msr	BASEPRI, r3
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	2001a758 	.word	0x2001a758

08005cb4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc0:	f04f 0120 	mov.w	r1, #32
 8005cc4:	f381 8811 	msr	BASEPRI, r1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	4819      	ldr	r0, [pc, #100]	; (8005d30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ccc:	f7fe fcd6 	bl	800467c <_PreparePacket>
 8005cd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e00b      	b.n	8005d02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	1c59      	adds	r1, r3, #1
 8005cf2:	61f9      	str	r1, [r7, #28]
 8005cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b7f      	cmp	r3, #127	; 0x7f
 8005d06:	d8f0      	bhi.n	8005cea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	61fa      	str	r2, [r7, #28]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005d18:	2208      	movs	r2, #8
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	6938      	ldr	r0, [r7, #16]
 8005d1e:	f7fe fd9d 	bl	800485c <_SendPacket>
  RECORD_END();
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f383 8811 	msr	BASEPRI, r3
}
 8005d28:	bf00      	nop
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	2001a758 	.word	0x2001a758
 8005d34:	2001a728 	.word	0x2001a728

08005d38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d40:	f3ef 8311 	mrs	r3, BASEPRI
 8005d44:	f04f 0120 	mov.w	r1, #32
 8005d48:	f381 8811 	msr	BASEPRI, r1
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	4819      	ldr	r0, [pc, #100]	; (8005db4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005d50:	f7fe fc94 	bl	800467c <_PreparePacket>
 8005d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d5a:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e00b      	b.n	8005d86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	61f9      	str	r1, [r7, #28]
 8005d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	09db      	lsrs	r3, r3, #7
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b7f      	cmp	r3, #127	; 0x7f
 8005d8a:	d8f0      	bhi.n	8005d6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	61fa      	str	r2, [r7, #28]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	6938      	ldr	r0, [r7, #16]
 8005da2:	f7fe fd5b 	bl	800485c <_SendPacket>
  RECORD_END();
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f383 8811 	msr	BASEPRI, r3
}
 8005dac:	bf00      	nop
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	2001a758 	.word	0x2001a758
 8005db8:	2001a728 	.word	0x2001a728

08005dbc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	f04f 0120 	mov.w	r1, #32
 8005dcc:	f381 8811 	msr	BASEPRI, r1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	4819      	ldr	r0, [pc, #100]	; (8005e38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005dd4:	f7fe fc52 	bl	800467c <_PreparePacket>
 8005dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e00b      	b.n	8005e0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	61f9      	str	r1, [r7, #28]
 8005dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0e:	d8f0      	bhi.n	8005df2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005e20:	2206      	movs	r2, #6
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	6938      	ldr	r0, [r7, #16]
 8005e26:	f7fe fd19 	bl	800485c <_SendPacket>
  RECORD_END();
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f383 8811 	msr	BASEPRI, r3
}
 8005e30:	bf00      	nop
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2001a758 	.word	0x2001a758
 8005e3c:	2001a728 	.word	0x2001a728

08005e40 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4e:	f04f 0120 	mov.w	r1, #32
 8005e52:	f381 8811 	msr	BASEPRI, r1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	4827      	ldr	r0, [pc, #156]	; (8005ef8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005e5a:	f7fe fc0f 	bl	800467c <_PreparePacket>
 8005e5e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	623b      	str	r3, [r7, #32]
 8005e76:	e00b      	b.n	8005e90 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	1c59      	adds	r1, r3, #1
 8005e80:	6279      	str	r1, [r7, #36]	; 0x24
 8005e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	09db      	lsrs	r3, r3, #7
 8005e8e:	623b      	str	r3, [r7, #32]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b7f      	cmp	r3, #127	; 0x7f
 8005e94:	d8f0      	bhi.n	8005e78 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e00b      	b.n	8005ec8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	61f9      	str	r1, [r7, #28]
 8005eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	09db      	lsrs	r3, r3, #7
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b7f      	cmp	r3, #127	; 0x7f
 8005ecc:	d8f0      	bhi.n	8005eb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005ede:	2207      	movs	r2, #7
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	6938      	ldr	r0, [r7, #16]
 8005ee4:	f7fe fcba 	bl	800485c <_SendPacket>
  RECORD_END();
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f383 8811 	msr	BASEPRI, r3
}
 8005eee:	bf00      	nop
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2001a758 	.word	0x2001a758
 8005efc:	2001a728 	.word	0x2001a728

08005f00 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	1ad3      	subs	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	2001a728 	.word	0x2001a728

08005f20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d077      	beq.n	8006022 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005f32:	4b3e      	ldr	r3, [pc, #248]	; (800602c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005f38:	2300      	movs	r3, #0
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3c:	e008      	b.n	8005f50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3f2      	bcc.n	8005f3e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005f58:	e000      	b.n	8005f5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005f5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d055      	beq.n	800600e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f62:	f3ef 8311 	mrs	r3, BASEPRI
 8005f66:	f04f 0120 	mov.w	r1, #32
 8005f6a:	f381 8811 	msr	BASEPRI, r1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	482f      	ldr	r0, [pc, #188]	; (8006030 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005f72:	f7fe fb83 	bl	800467c <_PreparePacket>
 8005f76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	e00b      	b.n	8005f9e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	1c59      	adds	r1, r3, #1
 8005f8e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	09db      	lsrs	r3, r3, #7
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa2:	d8f0      	bhi.n	8005f86 <SEGGER_SYSVIEW_SendModule+0x66>
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e00b      	b.n	8005fd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	61f9      	str	r1, [r7, #28]
 8005fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b7f      	cmp	r3, #127	; 0x7f
 8005fdc:	d8f0      	bhi.n	8005fc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	61fa      	str	r2, [r7, #28]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7fe fb10 	bl	800461c <_EncodeStr>
 8005ffc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005ffe:	2216      	movs	r2, #22
 8006000:	68f9      	ldr	r1, [r7, #12]
 8006002:	6938      	ldr	r0, [r7, #16]
 8006004:	f7fe fc2a 	bl	800485c <_SendPacket>
      RECORD_END();
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <SEGGER_SYSVIEW_SendModule+0x102>
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4798      	blx	r3
    }
  }
}
 8006022:	bf00      	nop
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	2001a750 	.word	0x2001a750
 8006030:	2001a758 	.word	0x2001a758

08006034 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f2      	bne.n	8006048 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	2001a750 	.word	0x2001a750

08006070 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006076:	f3ef 8311 	mrs	r3, BASEPRI
 800607a:	f04f 0120 	mov.w	r1, #32
 800607e:	f381 8811 	msr	BASEPRI, r1
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	4817      	ldr	r0, [pc, #92]	; (80060e4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006086:	f7fe faf9 	bl	800467c <_PreparePacket>
 800608a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e00b      	b.n	80060b4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	6179      	str	r1, [r7, #20]
 80060a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b7f      	cmp	r3, #127	; 0x7f
 80060b8:	d8f0      	bhi.n	800609c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80060ca:	221b      	movs	r2, #27
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	f7fe fbc4 	bl	800485c <_SendPacket>
  RECORD_END();
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f383 8811 	msr	BASEPRI, r3
}
 80060da:	bf00      	nop
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2001a758 	.word	0x2001a758
 80060e8:	2001a754 	.word	0x2001a754

080060ec <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80060ec:	b40f      	push	{r0, r1, r2, r3}
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	461a      	mov	r2, r3
 80060fe:	2100      	movs	r1, #0
 8006100:	6938      	ldr	r0, [r7, #16]
 8006102:	f7fe febd 	bl	8004e80 <_VPrintTarget>
  va_end(ParamList);
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006110:	b004      	add	sp, #16
 8006112:	4770      	bx	lr

08006114 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800611c:	f3ef 8311 	mrs	r3, BASEPRI
 8006120:	f04f 0120 	mov.w	r1, #32
 8006124:	f381 8811 	msr	BASEPRI, r1
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	4827      	ldr	r0, [pc, #156]	; (80061c8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800612c:	f7fe faa6 	bl	800467c <_PreparePacket>
 8006130:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	6938      	ldr	r0, [r7, #16]
 8006138:	f7fe fa70 	bl	800461c <_EncodeStr>
 800613c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
 8006142:	2301      	movs	r3, #1
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	e00b      	b.n	8006160 <SEGGER_SYSVIEW_Warn+0x4c>
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	6279      	str	r1, [r7, #36]	; 0x24
 8006152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	09db      	lsrs	r3, r3, #7
 800615e:	623b      	str	r3, [r7, #32]
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b7f      	cmp	r3, #127	; 0x7f
 8006164:	d8f0      	bhi.n	8006148 <SEGGER_SYSVIEW_Warn+0x34>
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	627a      	str	r2, [r7, #36]	; 0x24
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e00b      	b.n	8006198 <SEGGER_SYSVIEW_Warn+0x84>
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	61f9      	str	r1, [r7, #28]
 800618a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b7f      	cmp	r3, #127	; 0x7f
 800619c:	d8f0      	bhi.n	8006180 <SEGGER_SYSVIEW_Warn+0x6c>
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	61fa      	str	r2, [r7, #28]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061ae:	221a      	movs	r2, #26
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	6938      	ldr	r0, [r7, #16]
 80061b4:	f7fe fb52 	bl	800485c <_SendPacket>
  RECORD_END();
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
 80061c0:	3728      	adds	r7, #40	; 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2001a758 	.word	0x2001a758

080061cc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80061d0:	4b13      	ldr	r3, [pc, #76]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80061d2:	7e1b      	ldrb	r3, [r3, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	4a13      	ldr	r2, [pc, #76]	; (8006224 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80061d8:	460b      	mov	r3, r1
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	440b      	add	r3, r1
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	336c      	adds	r3, #108	; 0x6c
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80061e8:	7e1b      	ldrb	r3, [r3, #24]
 80061ea:	4618      	mov	r0, r3
 80061ec:	490d      	ldr	r1, [pc, #52]	; (8006224 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80061ee:	4603      	mov	r3, r0
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4403      	add	r3, r0
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	440b      	add	r3, r1
 80061f8:	3370      	adds	r3, #112	; 0x70
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d00b      	beq.n	8006218 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006202:	789b      	ldrb	r3, [r3, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800620a:	2201      	movs	r2, #1
 800620c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800620e:	f7fe fa41 	bl	8004694 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006212:	4b03      	ldr	r3, [pc, #12]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006214:	2200      	movs	r2, #0
 8006216:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800621a:	781b      	ldrb	r3, [r3, #0]
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}
 8006220:	2001a728 	.word	0x2001a728
 8006224:	20019268 	.word	0x20019268

08006228 <__NVIC_EnableIRQ>:
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	db0b      	blt.n	8006252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	f003 021f 	and.w	r2, r3, #31
 8006240:	4907      	ldr	r1, [pc, #28]	; (8006260 <__NVIC_EnableIRQ+0x38>)
 8006242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	2001      	movs	r0, #1
 800624a:	fa00 f202 	lsl.w	r2, r0, r2
 800624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e100 	.word	0xe000e100

08006264 <__NVIC_SetPriority>:
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	db0a      	blt.n	800628e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	490c      	ldr	r1, [pc, #48]	; (80062b0 <__NVIC_SetPriority+0x4c>)
 800627e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006282:	0112      	lsls	r2, r2, #4
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	440b      	add	r3, r1
 8006288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800628c:	e00a      	b.n	80062a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	4908      	ldr	r1, [pc, #32]	; (80062b4 <__NVIC_SetPriority+0x50>)
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	3b04      	subs	r3, #4
 800629c:	0112      	lsls	r2, r2, #4
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	440b      	add	r3, r1
 80062a2:	761a      	strb	r2, [r3, #24]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	e000e100 	.word	0xe000e100
 80062b4:	e000ed00 	.word	0xe000ed00

080062b8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80062be:	f7ff ff85 	bl	80061cc <SEGGER_SYSVIEW_IsStarted>
 80062c2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80062ca:	f7ff f993 	bl	80055f4 <SEGGER_SYSVIEW_Start>
  }
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80062e2:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <_cbOnUARTRx+0x3c>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d806      	bhi.n	80062f8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <_cbOnUARTRx+0x3c>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	3301      	adds	r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <_cbOnUARTRx+0x3c>)
 80062f4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80062f6:	e009      	b.n	800630c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80062f8:	f7ff ffde 	bl	80062b8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <_cbOnUARTRx+0x3c>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	1dfb      	adds	r3, r7, #7
 8006304:	2201      	movs	r2, #1
 8006306:	4619      	mov	r1, r3
 8006308:	f7fe f892 	bl	8004430 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800630c:	bf00      	nop
}
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000014 	.word	0x20000014

08006318 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8006320:	4b14      	ldr	r3, [pc, #80]	; (8006374 <_cbOnUARTTx+0x5c>)
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d80f      	bhi.n	8006348 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8006328:	4b12      	ldr	r3, [pc, #72]	; (8006374 <_cbOnUARTTx+0x5c>)
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	461a      	mov	r2, r3
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <_cbOnUARTTx+0x60>)
 8006330:	5c9a      	ldrb	r2, [r3, r2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <_cbOnUARTTx+0x5c>)
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	3301      	adds	r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <_cbOnUARTTx+0x5c>)
 8006340:	705a      	strb	r2, [r3, #1]
    r = 1;
 8006342:	2301      	movs	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
    goto Done;
 8006346:	e00f      	b.n	8006368 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <_cbOnUARTTx+0x5c>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd ff11 	bl	8004178 <SEGGER_RTT_ReadUpBufferNoLock>
 8006356:	4603      	mov	r3, r0
 8006358:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da02      	bge.n	8006366 <_cbOnUARTTx+0x4e>
    r = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e000      	b.n	8006368 <_cbOnUARTTx+0x50>
  }
Done:
 8006366:	bf00      	nop
  return r;
 8006368:	68fb      	ldr	r3, [r7, #12]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000014 	.word	0x20000014
 8006378:	080067d0 	.word	0x080067d0

0800637c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <SEGGER_UART_init+0x1c>)
 8006386:	4905      	ldr	r1, [pc, #20]	; (800639c <SEGGER_UART_init+0x20>)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f863 	bl	8006454 <HIF_UART_Init>
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	080062d9 	.word	0x080062d9
 800639c:	08006319 	.word	0x08006319

080063a0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80063a6:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <USART2_IRQHandler+0x80>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d011      	beq.n	80063da <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80063b6:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <USART2_IRQHandler+0x84>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 030b 	and.w	r3, r3, #11
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <USART2_IRQHandler+0x88>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80063d0:	4b15      	ldr	r3, [pc, #84]	; (8006428 <USART2_IRQHandler+0x88>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	79fa      	ldrb	r2, [r7, #7]
 80063d6:	4610      	mov	r0, r2
 80063d8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80063e4:	4b11      	ldr	r3, [pc, #68]	; (800642c <USART2_IRQHandler+0x8c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d015      	beq.n	8006418 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <USART2_IRQHandler+0x8c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1dfa      	adds	r2, r7, #7
 80063f2:	4610      	mov	r0, r2
 80063f4:	4798      	blx	r3
 80063f6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <USART2_IRQHandler+0x90>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a0b      	ldr	r2, [pc, #44]	; (8006430 <USART2_IRQHandler+0x90>)
 8006404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e006      	b.n	800641a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <USART2_IRQHandler+0x80>)
 800640e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8006410:	79fa      	ldrb	r2, [r7, #7]
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <USART2_IRQHandler+0x84>)
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e000      	b.n	800641a <USART2_IRQHandler+0x7a>
      return;
 8006418:	bf00      	nop
    }
  }
}
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40004400 	.word	0x40004400
 8006424:	40004404 	.word	0x40004404
 8006428:	2001a83c 	.word	0x2001a83c
 800642c:	2001a840 	.word	0x2001a840
 8006430:	4000440c 	.word	0x4000440c

08006434 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a04      	ldr	r2, [pc, #16]	; (8006450 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	4000440c 	.word	0x4000440c

08006454 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8006460:	4b2e      	ldr	r3, [pc, #184]	; (800651c <HIF_UART_Init+0xc8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2d      	ldr	r2, [pc, #180]	; (800651c <HIF_UART_Init+0xc8>)
 8006466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800646c:	4b2c      	ldr	r3, [pc, #176]	; (8006520 <HIF_UART_Init+0xcc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2b      	ldr	r2, [pc, #172]	; (8006520 <HIF_UART_Init+0xcc>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <HIF_UART_Init+0xd0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006484:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800648c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800648e:	4a25      	ldr	r2, [pc, #148]	; (8006524 <HIF_UART_Init+0xd0>)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8006494:	4b24      	ldr	r3, [pc, #144]	; (8006528 <HIF_UART_Init+0xd4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80064a8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80064aa:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HIF_UART_Init+0xd4>)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <HIF_UART_Init+0xd8>)
 80064b2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80064b6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <HIF_UART_Init+0xdc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HIF_UART_Init+0xe0>)
 80064c0:	2280      	movs	r2, #128	; 0x80
 80064c2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80064ca:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HIF_UART_Init+0xe4>)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	3301      	adds	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e2:	d302      	bcc.n	80064ea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80064e4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80064e8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <HIF_UART_Init+0xe8>)
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80064fa:	4a11      	ldr	r2, [pc, #68]	; (8006540 <HIF_UART_Init+0xec>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8006500:	4a10      	ldr	r2, [pc, #64]	; (8006544 <HIF_UART_Init+0xf0>)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8006506:	2106      	movs	r1, #6
 8006508:	2026      	movs	r0, #38	; 0x26
 800650a:	f7ff feab 	bl	8006264 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800650e:	2026      	movs	r0, #38	; 0x26
 8006510:	f7ff fe8a 	bl	8006228 <__NVIC_EnableIRQ>
}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40023840 	.word	0x40023840
 8006520:	40023830 	.word	0x40023830
 8006524:	40020020 	.word	0x40020020
 8006528:	40020000 	.word	0x40020000
 800652c:	4000440c 	.word	0x4000440c
 8006530:	40004410 	.word	0x40004410
 8006534:	40004414 	.word	0x40004414
 8006538:	0501bd00 	.word	0x0501bd00
 800653c:	40004408 	.word	0x40004408
 8006540:	2001a83c 	.word	0x2001a83c
 8006544:	2001a840 	.word	0x2001a840

08006548 <__libc_init_array>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	4d0d      	ldr	r5, [pc, #52]	; (8006580 <__libc_init_array+0x38>)
 800654c:	4c0d      	ldr	r4, [pc, #52]	; (8006584 <__libc_init_array+0x3c>)
 800654e:	1b64      	subs	r4, r4, r5
 8006550:	10a4      	asrs	r4, r4, #2
 8006552:	2600      	movs	r6, #0
 8006554:	42a6      	cmp	r6, r4
 8006556:	d109      	bne.n	800656c <__libc_init_array+0x24>
 8006558:	4d0b      	ldr	r5, [pc, #44]	; (8006588 <__libc_init_array+0x40>)
 800655a:	4c0c      	ldr	r4, [pc, #48]	; (800658c <__libc_init_array+0x44>)
 800655c:	f000 f83e 	bl	80065dc <_init>
 8006560:	1b64      	subs	r4, r4, r5
 8006562:	10a4      	asrs	r4, r4, #2
 8006564:	2600      	movs	r6, #0
 8006566:	42a6      	cmp	r6, r4
 8006568:	d105      	bne.n	8006576 <__libc_init_array+0x2e>
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006570:	4798      	blx	r3
 8006572:	3601      	adds	r6, #1
 8006574:	e7ee      	b.n	8006554 <__libc_init_array+0xc>
 8006576:	f855 3b04 	ldr.w	r3, [r5], #4
 800657a:	4798      	blx	r3
 800657c:	3601      	adds	r6, #1
 800657e:	e7f2      	b.n	8006566 <__libc_init_array+0x1e>
 8006580:	080067dc 	.word	0x080067dc
 8006584:	080067dc 	.word	0x080067dc
 8006588:	080067dc 	.word	0x080067dc
 800658c:	080067e0 	.word	0x080067e0

08006590 <memcmp>:
 8006590:	b510      	push	{r4, lr}
 8006592:	3901      	subs	r1, #1
 8006594:	4402      	add	r2, r0
 8006596:	4290      	cmp	r0, r2
 8006598:	d101      	bne.n	800659e <memcmp+0xe>
 800659a:	2000      	movs	r0, #0
 800659c:	e005      	b.n	80065aa <memcmp+0x1a>
 800659e:	7803      	ldrb	r3, [r0, #0]
 80065a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d001      	beq.n	80065ac <memcmp+0x1c>
 80065a8:	1b18      	subs	r0, r3, r4
 80065aa:	bd10      	pop	{r4, pc}
 80065ac:	3001      	adds	r0, #1
 80065ae:	e7f2      	b.n	8006596 <memcmp+0x6>

080065b0 <memcpy>:
 80065b0:	440a      	add	r2, r1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b8:	d100      	bne.n	80065bc <memcpy+0xc>
 80065ba:	4770      	bx	lr
 80065bc:	b510      	push	{r4, lr}
 80065be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c6:	4291      	cmp	r1, r2
 80065c8:	d1f9      	bne.n	80065be <memcpy+0xe>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <memset>:
 80065cc:	4402      	add	r2, r0
 80065ce:	4603      	mov	r3, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
