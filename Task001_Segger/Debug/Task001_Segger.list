
Task001_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea0  08007ea0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea8  08007ea8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea8  08007ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0001a8a4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a924  2001a924  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001548f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003004  00000000  00000000  0003553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  000398f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c53  00000000  00000000  0003ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016066  00000000  00000000  0005e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d810c  00000000  00000000  000747c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c8d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005628  00000000  00000000  0014c928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf4 	.word	0x08007cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007cf4 	.word	0x08007cf4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019334 	.word	0x20019334
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb5d 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  	DWT_CTRL |=(1<<0);// Enable CYCCNT counter.
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  	SEGGER_UART_init(500000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f006 fdac 	bl	8007190 <SEGGER_UART_init>
  	//SEGGER_SYSVIEW_Start();
  	SEGGER_SYSVIEW_Conf();
 8000638:	f004 f9e4 	bl	8004a04 <SEGGER_SYSVIEW_Conf>

   status=xTaskCreate(task_handler1, "Task-1", 200, "Task-1 runs", 2, &task_handle1);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f002 fb61 	bl	8002d14 <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]
   configASSERT(status==pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>
   status=xTaskCreate(task_handler2, "Task-2", 200, "Task-2 runs", 2, &task_handle2);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f002 fb48 	bl	8002d14 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]
   configASSERT(status==pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

	vTaskStartScheduler();//Starts the FreeRTOS Scheduler
 80006a2:	f002 fc8d 	bl	8002fc0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0007a120 	.word	0x0007a120
 80006b0:	08007d0c 	.word	0x08007d0c
 80006b4:	08007d18 	.word	0x08007d18
 80006b8:	08000a59 	.word	0x08000a59
 80006bc:	08007d20 	.word	0x08007d20
 80006c0:	08007d2c 	.word	0x08007d2c
 80006c4:	08000a81 	.word	0x08000a81

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fe82 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fd9d 	bl	800128c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9b8 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fffe 	bl	800177c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9a1 	bl	8000acc <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa1      	ldr	r2, [pc, #644]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a9a      	ldr	r2, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000860:	f000 fcfa 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4877      	ldr	r0, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fcf5 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fcef 	bl	8001258 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486c      	ldr	r0, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fb45 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ae:	f000 fb37 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485e      	ldr	r0, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb27 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb1a 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000908:	f000 fb0a 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 fafa 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000940:	f000 faee 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000962:	f000 fadd 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000980:	f000 face 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 fabd 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 fab0 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009de:	f000 fa9f 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 fa93 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a18:	f000 fa82 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fa75 	bl	8000f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <task_handler1>:

/* USER CODE BEGIN 4 */
static void task_handler1(void* parameter)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char msg[50] ;
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a60:	f107 000c 	add.w	r0, r7, #12
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <task_handler1+0x24>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f006 fcc1 	bl	80073f0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 fa44 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a78:	e7f2      	b.n	8000a60 <task_handler1+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	08007d34 	.word	0x08007d34

08000a80 <task_handler2>:
		//taskYIELD();
	}
}

static void task_handler2(void* parameter)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	; 0x40
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	char msg[50] ;
	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a88:	f107 000c 	add.w	r0, r7, #12
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <task_handler2+0x24>)
 8000a90:	2164      	movs	r1, #100	; 0x64
 8000a92:	f006 fcad 	bl	80073f0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 fa30 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000aa0:	e7f2      	b.n	8000a88 <task_handler2+0x8>
 8000aa2:	bf00      	nop
 8000aa4:	08007d34 	.word	0x08007d34

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f92f 	bl	8000d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001000 	.word	0x40001000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b16:	f003 fbbf 	bl	8004298 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f818 	bl	8001b94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b6e:	f000 fffd 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b72:	6378      	str	r0, [r7, #52]	; 0x34
 8000b74:	e004      	b.n	8000b80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b76:	f000 fff9 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	0c9b      	lsrs	r3, r3, #18
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <HAL_InitTick+0xec>)
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_InitTick+0xf0>)
 8000b92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_InitTick+0xec>)
 8000b96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_InitTick+0xec>)
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_InitTick+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_InitTick+0xec>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_InitTick+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb4:	4817      	ldr	r0, [pc, #92]	; (8000c14 <HAL_InitTick+0xec>)
 8000bb6:	f001 f81f 	bl	8001bf8 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11b      	bne.n	8000c00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_InitTick+0xec>)
 8000bca:	f001 f86f 	bl	8001cac <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bdc:	2036      	movs	r0, #54	; 0x36
 8000bde:	f000 f991 	bl	8000f04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d808      	bhi.n	8000bfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2036      	movs	r0, #54	; 0x36
 8000bee:	f000 f96d 	bl	8000ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0xf4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	2000009c 	.word	0x2000009c
 8000c18:	40001000 	.word	0x40001000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f001 f89b 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000009c 	.word	0x2000009c

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8a:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca0:	4c0b      	ldr	r4, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cae:	f7ff ffd7 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f006 fb53 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fcad 	bl	8000614 <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000cc8:	08007eb0 	.word	0x08007eb0
  ldr r2, =_sbss
 8000ccc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cd0:	2001a924 	.word	0x2001a924

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f8d8 	bl	8000eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff0e 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fee4 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000e4 	.word	0x200000e4

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000e4 	.word	0x200000e4

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4c 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff61 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb1 	bl	8000e50 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff80 	bl	8000dfc <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff54 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e16b      	b.n	8001214 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 815a 	bne.w	800120e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d005      	beq.n	8000f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d130      	bne.n	8000fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 0201 	and.w	r2, r3, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d017      	beq.n	8001010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d123      	bne.n	8001064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	69b9      	ldr	r1, [r7, #24]
 8001060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b60      	ldr	r3, [pc, #384]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a5f      	ldr	r2, [pc, #380]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b5d      	ldr	r3, [pc, #372]	; (800122c <HAL_GPIO_Init+0x30c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	4a5b      	ldr	r2, [pc, #364]	; (8001230 <HAL_GPIO_Init+0x310>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_GPIO_Init+0x314>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <HAL_GPIO_Init+0x226>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a51      	ldr	r2, [pc, #324]	; (8001238 <HAL_GPIO_Init+0x318>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x222>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_GPIO_Init+0x31c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x21e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_Init+0x320>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x21a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x324>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x216>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x328>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x212>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x32c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x20e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_GPIO_Init+0x330>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x20a>
 8001126:	2307      	movs	r3, #7
 8001128:	e00e      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800112a:	2308      	movs	r3, #8
 800112c:	e00c      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800112e:	2306      	movs	r3, #6
 8001130:	e00a      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001132:	2305      	movs	r3, #5
 8001134:	e008      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001136:	2304      	movs	r3, #4
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x228>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x228>
 8001146:	2300      	movs	r3, #0
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4093      	lsls	r3, r2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001158:	4935      	ldr	r1, [pc, #212]	; (8001230 <HAL_GPIO_Init+0x310>)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_GPIO_Init+0x334>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a32      	ldr	r2, [pc, #200]	; (8001254 <HAL_GPIO_Init+0x334>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_GPIO_Init+0x334>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_GPIO_Init+0x334>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_GPIO_Init+0x334>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f ae90 	bls.w	8000f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40013800 	.word	0x40013800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40021400 	.word	0x40021400
 800124c:	40021800 	.word	0x40021800
 8001250:	40021c00 	.word	0x40021c00
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e267      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4b88      	ldr	r3, [pc, #544]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b85      	ldr	r3, [pc, #532]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b82      	ldr	r3, [pc, #520]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e242      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b70      	ldr	r3, [pc, #448]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6f      	ldr	r2, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6c      	ldr	r2, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4b69      	ldr	r3, [pc, #420]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a68      	ldr	r2, [pc, #416]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b66      	ldr	r3, [pc, #408]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a65      	ldr	r2, [pc, #404]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcfe 	bl	8000d44 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fcfa 	bl	8000d44 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e207      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcea 	bl	8000d44 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fce6 	bl	8000d44 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1f3      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1c7      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4937      	ldr	r1, [pc, #220]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x244>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fc9f 	bl	8000d44 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fc9b 	bl	8000d44 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a8      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4925      	ldr	r1, [pc, #148]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCC_OscConfig+0x244>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc7e 	bl	8000d44 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc7a 	bl	8000d44 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e187      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d036      	beq.n	80014e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_RCC_OscConfig+0x248>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fc5e 	bl	8000d44 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc5a 	bl	8000d44 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e167      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_OscConfig+0x240>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e01b      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_OscConfig+0x248>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc47 	bl	8000d44 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e00e      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc43 	bl	8000d44 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d907      	bls.n	80014d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e150      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ea      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8097 	beq.w	8001620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b81      	ldr	r3, [pc, #516]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b7d      	ldr	r3, [pc, #500]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a7c      	ldr	r2, [pc, #496]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b77      	ldr	r3, [pc, #476]	; (8001700 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d118      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b74      	ldr	r3, [pc, #464]	; (8001700 <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a73      	ldr	r2, [pc, #460]	; (8001700 <HAL_RCC_OscConfig+0x474>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fc03 	bl	8000d44 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff fbff 	bl	8000d44 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e10c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <HAL_RCC_OscConfig+0x474>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x2ea>
 8001568:	4b64      	ldr	r3, [pc, #400]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a63      	ldr	r2, [pc, #396]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
 8001574:	e01c      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x30c>
 800157e:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a5e      	ldr	r2, [pc, #376]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a5b      	ldr	r2, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001598:	4b58      	ldr	r3, [pc, #352]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	4b55      	ldr	r3, [pc, #340]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d015      	beq.n	80015e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbc4 	bl	8000d44 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbc0 	bl	8000d44 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0cb      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ee      	beq.n	80015c0 <HAL_RCC_OscConfig+0x334>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbae 	bl	8000d44 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbaa 	bl	8000d44 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0b5      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ee      	bne.n	80015ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a38      	ldr	r2, [pc, #224]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800161a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a1 	beq.w	800176c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d05c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d141      	bne.n	80016c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb7e 	bl	8000d44 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb7a 	bl	8000d44 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e087      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	491b      	ldr	r1, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x478>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb53 	bl	8000d44 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb4f 	bl	8000d44 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e05c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x416>
 80016c0:	e054      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_RCC_OscConfig+0x478>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb3c 	bl	8000d44 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff fb38 	bl	8000d44 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e045      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_OscConfig+0x470>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x444>
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e038      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000
 8001704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d028      	beq.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d121      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d11a      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800173e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	3b01      	subs	r3, #1
 8001752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fa6a 	bl	8000d44 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa66 	bl	8000d44 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f900 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	08007e18 	.word	0x08007e18
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800194c:	b094      	sub	sp, #80	; 0x50
 800194e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001958:	2300      	movs	r3, #0
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001960:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d00d      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x40>
 800196c:	2b08      	cmp	r3, #8
 800196e:	f200 80e1 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x34>
 8001976:	2b04      	cmp	r3, #4
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x3a>
 800197a:	e0db      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001980:	e0db      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001986:	e0d8      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	2200      	movs	r2, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
 80019b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ba:	4622      	mov	r2, r4
 80019bc:	462b      	mov	r3, r5
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4621      	mov	r1, r4
 80019d4:	1a51      	subs	r1, r2, r1
 80019d6:	6139      	str	r1, [r7, #16]
 80019d8:	4629      	mov	r1, r5
 80019da:	eb63 0301 	sbc.w	r3, r3, r1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ec:	4659      	mov	r1, fp
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	4651      	mov	r1, sl
 80019f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f6:	4651      	mov	r1, sl
 80019f8:	018a      	lsls	r2, r1, #6
 80019fa:	4651      	mov	r1, sl
 80019fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001a00:	4659      	mov	r1, fp
 8001a02:	eb63 0901 	sbc.w	r9, r3, r1
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1a:	4690      	mov	r8, r2
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	eb18 0303 	adds.w	r3, r8, r3
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	462b      	mov	r3, r5
 8001a28:	eb49 0303 	adc.w	r3, r9, r3
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	024b      	lsls	r3, r1, #9
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a44:	4621      	mov	r1, r4
 8001a46:	024a      	lsls	r2, r1, #9
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a58:	f7fe fc5a 	bl	8000310 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a64:	e058      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4611      	mov	r1, r2
 8001a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a80:	4642      	mov	r2, r8
 8001a82:	464b      	mov	r3, r9
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0159      	lsls	r1, r3, #5
 8001a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a92:	0150      	lsls	r0, r2, #5
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8001abc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00eb      	lsls	r3, r5, #3
 8001aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	18e3      	adds	r3, r4, r3
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	464b      	mov	r3, r9
 8001adc:	eb45 0303 	adc.w	r3, r5, r3
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b02:	2200      	movs	r2, #0
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	61fa      	str	r2, [r7, #28]
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fc00 	bl	8000310 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3750      	adds	r7, #80	; 0x50
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08007e28 	.word	0x08007e28

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9d8 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04e      	b.n	8001d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d022      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d01d      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d018      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40010400 	.word	0x40010400
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40001800 	.word	0x40001800

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8ee 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8e0 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8f1 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0204 	mvn.w	r2, #4
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8b6 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8c7 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0208 	mvn.w	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f89a 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f88c 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f89d 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f870 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f862 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f873 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0201 	mvn.w	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fdcc 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f902 	bl	8002140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f838 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8cc 	bl	800212c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <TIM_Base_SetConfig+0x124>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_Base_SetConfig+0x128>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_Base_SetConfig+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <TIM_Base_SetConfig+0x13c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40010400 	.word	0x40010400
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	40001800 	.word	0x40001800
 8002124:	40001c00 	.word	0x40001c00
 8002128:	40002000 	.word	0x40002000

0800212c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0208 	add.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 0208 	add.w	r2, r3, #8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0208 	add.w	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d103      	bne.n	8002216 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e00c      	b.n	8002230 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3308      	adds	r3, #8
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e002      	b.n	8002224 <vListInsert+0x2e>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d2f6      	bcs.n	800221e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d103      	bne.n	800229c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1e5a      	subs	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericReset+0x2a>
        __asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60bb      	str	r3, [r7, #8]
    }
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022e6:	f002 f855 	bl	8004394 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	3b01      	subs	r3, #1
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00f      	beq.n	8002364 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f001 f8b3 	bl	80034b4 <xTaskRemoveFromEventList>
 800234e:	e009      	b.n	8002364 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3310      	adds	r3, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fefd 	bl	8002154 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3324      	adds	r3, #36	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fef8 	bl	8002154 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002364:	f002 f846 	bl	80043f4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002372:	b580      	push	{r7, lr}
 8002374:	b08c      	sub	sp, #48	; 0x30
 8002376:	af02      	add	r7, sp, #8
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	4613      	mov	r3, r2
 800237e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <xQueueGenericCreate+0x2a>
        __asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61bb      	str	r3, [r7, #24]
    }
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <xQueueGenericCreate+0x48>
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d101      	bne.n	80023be <xQueueGenericCreate+0x4c>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <xQueueGenericCreate+0x4e>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xQueueGenericCreate+0x68>
        __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	617b      	str	r3, [r7, #20]
    }
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023e0:	d90a      	bls.n	80023f8 <xQueueGenericCreate+0x86>
        __asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	613b      	str	r3, [r7, #16]
    }
 80023f4:	bf00      	nop
 80023f6:	e7fe      	b.n	80023f6 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3350      	adds	r3, #80	; 0x50
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 f8f5 	bl	80045ec <pvPortMalloc>
 8002402:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3350      	adds	r3, #80	; 0x50
 8002412:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f805 	bl	8002430 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002426:	6a3b      	ldr	r3, [r7, #32]
    }
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e002      	b.n	8002452 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800245e:	2101      	movs	r1, #1
 8002460:	69b8      	ldr	r0, [r7, #24]
 8002462:	f7ff ff2b 	bl	80022bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	2073      	movs	r0, #115	; 0x73
 8002476:	f003 febf 	bl	80061f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b090      	sub	sp, #64	; 0x40
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueGenericSend+0x32>
        __asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <xQueueGenericSend+0x40>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <xQueueGenericSend+0x44>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <xQueueGenericSend+0x46>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <xQueueGenericSend+0x60>
        __asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d103      	bne.n	80024f2 <xQueueGenericSend+0x6e>
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <xQueueGenericSend+0x72>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueGenericSend+0x74>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueGenericSend+0x8e>
        __asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	623b      	str	r3, [r7, #32]
    }
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002512:	f001 f969 	bl	80037e8 <xTaskGetSchedulerState>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <xQueueGenericSend+0x9e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <xQueueGenericSend+0xa2>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueGenericSend+0xa4>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <xQueueGenericSend+0xbe>
        __asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	61fb      	str	r3, [r7, #28]
    }
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002542:	f001 ff27 	bl	8004394 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <xQueueGenericSend+0xd4>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d11f      	bne.n	8002598 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fbda 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	4601      	mov	r1, r0
 800256c:	205a      	movs	r0, #90	; 0x5a
 800256e:	f003 feb9 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002578:	f000 fa56 	bl	8002a28 <prvCopyDataToQueue>
 800257c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	3324      	adds	r3, #36	; 0x24
 800258a:	4618      	mov	r0, r3
 800258c:	f000 ff92 	bl	80034b4 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002590:	f001 ff30 	bl	80043f4 <vPortExitCritical>
                return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e07d      	b.n	8002694 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d110      	bne.n	80025c0 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800259e:	f001 ff29 	bl	80043f4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fbb5 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	460b      	mov	r3, r1
 80025b4:	4601      	mov	r1, r0
 80025b6:	205a      	movs	r0, #90	; 0x5a
 80025b8:	f003 fe94 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	e069      	b.n	8002694 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 ffd8 	bl	8003580 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025d4:	f001 ff0e 	bl	80043f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025d8:	f000 fd54 	bl	8003084 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025dc:	f001 feda 	bl	8004394 <vPortEnterCritical>
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSend+0x172>
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d103      	bne.n	800260c <xQueueGenericSend+0x188>
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260c:	f001 fef2 	bl	80043f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002610:	1d3a      	adds	r2, r7, #4
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 ffc7 	bl	80035ac <xTaskCheckForTimeOut>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d124      	bne.n	800266e <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002626:	f000 faf7 	bl	8002c18 <prvIsQueueFull>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	3310      	adds	r3, #16
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fee9 	bl	8003410 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800263e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002640:	f000 fa82 	bl	8002b48 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002644:	f000 fd2c 	bl	80030a0 <xTaskResumeAll>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f af79 	bne.w	8002542 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <xQueueGenericSend+0x218>)
 8002652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	e76f      	b.n	8002542 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002664:	f000 fa70 	bl	8002b48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002668:	f000 fd1a 	bl	80030a0 <xTaskResumeAll>
 800266c:	e769      	b.n	8002542 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800266e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002670:	f000 fa6a 	bl	8002b48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002674:	f000 fd14 	bl	80030a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	4618      	mov	r0, r3
 800267c:	f004 fb4a 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	4601      	mov	r1, r0
 800268c:	205a      	movs	r0, #90	; 0x5a
 800268e:	f003 fe29 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002692:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002694:	4618      	mov	r0, r3
 8002696:	3738      	adds	r7, #56	; 0x38
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b090      	sub	sp, #64	; 0x40
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <xQueueGenericSendFromISR+0x3c>
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <xQueueGenericSendFromISR+0x40>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <xQueueGenericSendFromISR+0x42>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <xQueueGenericSendFromISR+0x6a>
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <xQueueGenericSendFromISR+0x6e>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericSendFromISR+0x70>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	623b      	str	r3, [r7, #32]
    }
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800272a:	f001 ff1f 	bl	800456c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800272e:	f3ef 8211 	mrs	r2, BASEPRI
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	61fa      	str	r2, [r7, #28]
 8002744:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002746:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <xQueueGenericSendFromISR+0xbc>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d148      	bne.n	80027ee <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fad0 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002774:	4601      	mov	r1, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	2060      	movs	r0, #96	; 0x60
 800277c:	f003 fce2 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002786:	f000 f94f 	bl	8002a28 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800278a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d112      	bne.n	80027ba <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d025      	beq.n	80027e8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fe87 	bl	80034b4 <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01d      	beq.n	80027e8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01a      	beq.n	80027e8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e016      	b.n	80027e8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027be:	2b7f      	cmp	r3, #127	; 0x7f
 80027c0:	d10a      	bne.n	80027d8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	617b      	str	r3, [r7, #20]
    }
 80027d4:	bf00      	nop
 80027d6:	e7fe      	b.n	80027d6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027dc:	3301      	adds	r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	b25a      	sxtb	r2, r3
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027e8:	2301      	movs	r3, #1
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027ec:	e00b      	b.n	8002806 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fa8f 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 80027f6:	4601      	mov	r1, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	2060      	movs	r0, #96	; 0x60
 80027fe:	f003 fca1 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002802:	2300      	movs	r3, #0
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002810:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002814:	4618      	mov	r0, r3
 8002816:	3740      	adds	r7, #64	; 0x40
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b08f      	sub	sp, #60	; 0x3c
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <xQueueReceive+0x30>
        __asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	623b      	str	r3, [r7, #32]
    }
 8002848:	bf00      	nop
 800284a:	e7fe      	b.n	800284a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <xQueueReceive+0x3e>
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <xQueueReceive+0x42>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <xQueueReceive+0x44>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueReceive+0x5e>
        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	61fb      	str	r3, [r7, #28]
    }
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287a:	f000 ffb5 	bl	80037e8 <xTaskGetSchedulerState>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <xQueueReceive+0x6e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueReceive+0x72>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueReceive+0x74>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueReceive+0x8e>
        __asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61bb      	str	r3, [r7, #24]
    }
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028aa:	f001 fd73 	bl	8004394 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028be:	f000 f91d 	bl	8002afc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fa25 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 80028ca:	4604      	mov	r4, r0
 80028cc:	2000      	movs	r0, #0
 80028ce:	f004 fa21 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2101      	movs	r1, #1
 80028d8:	9100      	str	r1, [sp, #0]
 80028da:	4621      	mov	r1, r4
 80028dc:	205c      	movs	r0, #92	; 0x5c
 80028de:	f003 fd01 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	3310      	adds	r3, #16
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fddc 	bl	80034b4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80028fc:	f001 fd7a 	bl	80043f4 <vPortExitCritical>
                return pdPASS;
 8002900:	2301      	movs	r3, #1
 8002902:	e08a      	b.n	8002a1a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800290a:	f001 fd73 	bl	80043f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	4618      	mov	r0, r3
 8002912:	f004 f9ff 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002916:	4604      	mov	r4, r0
 8002918:	2000      	movs	r0, #0
 800291a:	f004 f9fb 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2101      	movs	r1, #1
 8002924:	9100      	str	r1, [sp, #0]
 8002926:	4621      	mov	r1, r4
 8002928:	205c      	movs	r0, #92	; 0x5c
 800292a:	f003 fcdb 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800292e:	2300      	movs	r3, #0
 8002930:	e073      	b.n	8002a1a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fe1f 	bl	8003580 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002942:	2301      	movs	r3, #1
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002946:	f001 fd55 	bl	80043f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800294a:	f000 fb9b 	bl	8003084 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800294e:	f001 fd21 	bl	8004394 <vPortEnterCritical>
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002958:	b25b      	sxtb	r3, r3
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d103      	bne.n	8002968 <xQueueReceive+0x14c>
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d103      	bne.n	800297e <xQueueReceive+0x162>
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297e:	f001 fd39 	bl	80043f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002982:	1d3a      	adds	r2, r7, #4
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fe0e 	bl	80035ac <xTaskCheckForTimeOut>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d124      	bne.n	80029e0 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002998:	f000 f928 	bl	8002bec <prvIsQueueEmpty>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	3324      	adds	r3, #36	; 0x24
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fd30 	bl	8003410 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f8c9 	bl	8002b48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029b6:	f000 fb73 	bl	80030a0 <xTaskResumeAll>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af74 	bne.w	80028aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <xQueueReceive+0x208>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	e76a      	b.n	80028aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d6:	f000 f8b7 	bl	8002b48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029da:	f000 fb61 	bl	80030a0 <xTaskResumeAll>
 80029de:	e764      	b.n	80028aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e2:	f000 f8b1 	bl	8002b48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029e6:	f000 fb5b 	bl	80030a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ec:	f000 f8fe 	bl	8002bec <prvIsQueueEmpty>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f43f af59 	beq.w	80028aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 f98a 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002a00:	4604      	mov	r4, r0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f004 f986 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	9100      	str	r1, [sp, #0]
 8002a10:	4621      	mov	r1, r4
 8002a12:	205c      	movs	r0, #92	; 0x5c
 8002a14:	f003 fc66 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a18:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3734      	adds	r7, #52	; 0x34
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d14d      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fee6 	bl	8003824 <xTaskPriorityDisinherit>
 8002a58:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e043      	b.n	8002aea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d119      	bne.n	8002a9c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6858      	ldr	r0, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	f004 fca6 	bl	80073c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	441a      	add	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d32b      	bcc.n	8002aea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e026      	b.n	8002aea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68d8      	ldr	r0, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	f004 fc8c 	bl	80073c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d105      	bne.n	8002aea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d303      	bcc.n	8002b30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68d9      	ldr	r1, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f004 fc42 	bl	80073c4 <memcpy>
    }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b50:	f001 fc20 	bl	8004394 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	e011      	b.n	8002b82 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3324      	adds	r3, #36	; 0x24
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fca2 	bl	80034b4 <xTaskRemoveFromEventList>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b76:	f000 fd7f 	bl	8003678 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dce9      	bgt.n	8002b5e <prvUnlockQueue+0x16>
 8002b8a:	e000      	b.n	8002b8e <prvUnlockQueue+0x46>
                        break;
 8002b8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b96:	f001 fc2d 	bl	80043f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b9a:	f001 fbfb 	bl	8004394 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba6:	e011      	b.n	8002bcc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fc7d 	bl	80034b4 <xTaskRemoveFromEventList>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bc0:	f000 fd5a 	bl	8003678 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dce9      	bgt.n	8002ba8 <prvUnlockQueue+0x60>
 8002bd4:	e000      	b.n	8002bd8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bd6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002be0:	f001 fc08 	bl	80043f4 <vPortExitCritical>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002bf4:	f001 fbce 	bl	8004394 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e001      	b.n	8002c0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c0a:	f001 fbf3 	bl	80043f4 <vPortExitCritical>

    return xReturn;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c20:	f001 fbb8 	bl	8004394 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d102      	bne.n	8002c36 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e001      	b.n	8002c3a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c3a:	f001 fbdb 	bl	80043f4 <vPortExitCritical>

    return xReturn;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e01e      	b.n	8002c96 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c58:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <vQueueAddToRegistry+0x60>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d115      	bne.n	8002c90 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c64:	4910      	ldr	r1, [pc, #64]	; (8002ca8 <vQueueAddToRegistry+0x60>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <vQueueAddToRegistry+0x60>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f849 	bl	8006d14 <SEGGER_SYSVIEW_ShrinkId>
 8002c82:	4601      	mov	r1, r0
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	2071      	movs	r0, #113	; 0x71
 8002c8a:	f003 fa5b 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c8e:	e006      	b.n	8002c9e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b07      	cmp	r3, #7
 8002c9a:	d9dd      	bls.n	8002c58 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200000e8 	.word	0x200000e8

08002cac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cbc:	f001 fb6a 	bl	8004394 <vPortEnterCritical>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d103      	bne.n	8002cd6 <vQueueWaitForMessageRestricted+0x2a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d103      	bne.n	8002cec <vQueueWaitForMessageRestricted+0x40>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cec:	f001 fb82 	bl	80043f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3324      	adds	r3, #36	; 0x24
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fba9 	bl	8003458 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff1e 	bl	8002b48 <prvUnlockQueue>
    }
 8002d0c:	bf00      	nop
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fc5f 	bl	80045ec <pvPortMalloc>
 8002d2e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d36:	2058      	movs	r0, #88	; 0x58
 8002d38:	f001 fc58 	bl	80045ec <pvPortMalloc>
 8002d3c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4a:	e005      	b.n	8002d58 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d4c:	6978      	ldr	r0, [r7, #20]
 8002d4e:	f001 fd2d 	bl	80047ac <vPortFree>
 8002d52:	e001      	b.n	8002d58 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d013      	beq.n	8002d86 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9303      	str	r3, [sp, #12]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f80e 	bl	8002d96 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d7a:	69f8      	ldr	r0, [r7, #28]
 8002d7c:	f000 f8a2 	bl	8002ec4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d80:	2301      	movs	r3, #1
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e002      	b.n	8002d8c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
    }
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b088      	sub	sp, #32
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	21a5      	movs	r1, #165	; 0xa5
 8002db0:	f004 fb16 	bl	80073e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f023 0307 	bic.w	r3, r3, #7
 8002dcc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	617b      	str	r3, [r7, #20]
    }
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01f      	beq.n	8002e34 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	e012      	b.n	8002e20 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	7819      	ldrb	r1, [r3, #0]
 8002e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	3334      	adds	r3, #52	; 0x34
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d9e9      	bls.n	8002dfa <prvInitialiseNewTask+0x64>
 8002e26:	e000      	b.n	8002e2a <prvInitialiseNewTask+0x94>
            {
                break;
 8002e28:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e32:	e003      	b.n	8002e3c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d901      	bls.n	8002e46 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e42:	2304      	movs	r3, #4
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e50:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	2200      	movs	r2, #0
 8002e56:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f999 	bl	8002194 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	3318      	adds	r3, #24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f994 	bl	8002194 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e70:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	f1c3 0205 	rsb	r2, r3, #5
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	3350      	adds	r3, #80	; 0x50
 8002e86:	2204      	movs	r2, #4
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 faa8 	bl	80073e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	3354      	adds	r3, #84	; 0x54
 8002e94:	2201      	movs	r2, #1
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 faa1 	bl	80073e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	69b8      	ldr	r0, [r7, #24]
 8002ea4:	f001 f8c8 	bl	8004038 <pxPortInitialiseStack>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eba:	bf00      	nop
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ec4:	b5b0      	push	{r4, r5, r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ecc:	f001 fa62 	bl	8004394 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <prvAddNewTaskToReadyList+0xe4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <prvAddNewTaskToReadyList+0xe4>)
 8002ed8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <prvAddNewTaskToReadyList+0xe8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ee2:	4a32      	ldr	r2, [pc, #200]	; (8002fac <prvAddNewTaskToReadyList+0xe8>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <prvAddNewTaskToReadyList+0xe4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d110      	bne.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ef0:	f000 fbe0 	bl	80036b4 <prvInitialiseTaskLists>
 8002ef4:	e00d      	b.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <prvAddNewTaskToReadyList+0xec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <prvAddNewTaskToReadyList+0xe8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d802      	bhi.n	8002f12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f0c:	4a27      	ldr	r2, [pc, #156]	; (8002fac <prvAddNewTaskToReadyList+0xe8>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <prvAddNewTaskToReadyList+0xf0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <prvAddNewTaskToReadyList+0xf0>)
 8002f1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <prvAddNewTaskToReadyList+0xf0>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <prvAddNewTaskToReadyList+0x94>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fdcb 	bl	8006ac8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	461d      	mov	r5, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461c      	mov	r4, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	1ae3      	subs	r3, r4, r3
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	462b      	mov	r3, r5
 8002f54:	f001 fdf8 	bl	8004b48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fe38 	bl	8006bd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <prvAddNewTaskToReadyList+0xf4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <prvAddNewTaskToReadyList+0xf4>)
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <prvAddNewTaskToReadyList+0xf8>)
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f7ff f910 	bl	80021ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f8e:	f001 fa31 	bl	80043f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <prvAddNewTaskToReadyList+0xec>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <prvAddNewTaskToReadyList+0xe8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000200 	.word	0x20000200
 8002fac:	20000128 	.word	0x20000128
 8002fb0:	2000020c 	.word	0x2000020c
 8002fb4:	2000021c 	.word	0x2000021c
 8002fb8:	20000208 	.word	0x20000208
 8002fbc:	2000012c 	.word	0x2000012c

08002fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <vTaskStartScheduler+0xa4>)
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2282      	movs	r2, #130	; 0x82
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <vTaskStartScheduler+0xa8>)
 8002fd4:	4825      	ldr	r0, [pc, #148]	; (800306c <vTaskStartScheduler+0xac>)
 8002fd6:	f7ff fe9d 	bl	8002d14 <xTaskCreate>
 8002fda:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002fe2:	f000 fd17 	bl	8003a14 <xTimerCreateTimerTask>
 8002fe6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d124      	bne.n	8003038 <vTaskStartScheduler+0x78>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	60bb      	str	r3, [r7, #8]
    }
 8003000:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <vTaskStartScheduler+0xb0>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <vTaskStartScheduler+0xb4>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <vTaskStartScheduler+0xb8>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <vTaskStartScheduler+0xbc>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <vTaskStartScheduler+0xa4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d102      	bne.n	8003028 <vTaskStartScheduler+0x68>
 8003022:	f003 fd35 	bl	8006a90 <SEGGER_SYSVIEW_OnIdle>
 8003026:	e004      	b.n	8003032 <vTaskStartScheduler+0x72>
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <vTaskStartScheduler+0xbc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fd8d 	bl	8006b4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003032:	f001 f88f 	bl	8004154 <xPortStartScheduler>
 8003036:	e00e      	b.n	8003056 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d10a      	bne.n	8003056 <vTaskStartScheduler+0x96>
        __asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	607b      	str	r3, [r7, #4]
    }
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <vTaskStartScheduler+0xc0>)
 8003058:	681b      	ldr	r3, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000224 	.word	0x20000224
 8003068:	08007d38 	.word	0x08007d38
 800306c:	08003691 	.word	0x08003691
 8003070:	20000220 	.word	0x20000220
 8003074:	2000020c 	.word	0x2000020c
 8003078:	20000204 	.word	0x20000204
 800307c:	20000128 	.word	0x20000128
 8003080:	2000000c 	.word	0x2000000c

08003084 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <vTaskSuspendAll+0x18>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <vTaskSuspendAll+0x18>)
 8003090:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	20000228 	.word	0x20000228

080030a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <xTaskResumeAll+0x104>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <xTaskResumeAll+0x2c>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	603b      	str	r3, [r7, #0]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80030cc:	f001 f962 	bl	8004394 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <xTaskResumeAll+0x104>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <xTaskResumeAll+0x104>)
 80030d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <xTaskResumeAll+0x104>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d159      	bne.n	8003196 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <xTaskResumeAll+0x108>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d055      	beq.n	8003196 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ea:	e032      	b.n	8003152 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <xTaskResumeAll+0x10c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3318      	adds	r3, #24
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff f8b5 	bl	8002268 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f8b0 	bl	8002268 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fd60 	bl	8006bd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <xTaskResumeAll+0x110>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <xTaskResumeAll+0x110>)
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <xTaskResumeAll+0x114>)
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3304      	adds	r3, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f7ff f838 	bl	80021ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <xTaskResumeAll+0x118>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <xTaskResumeAll+0x11c>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <xTaskResumeAll+0x10c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1c8      	bne.n	80030ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003160:	f000 fb26 	bl	80037b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <xTaskResumeAll+0x120>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003170:	f000 f84a 	bl	8003208 <xTaskIncrementTick>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <xTaskResumeAll+0x11c>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3b01      	subs	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f1      	bne.n	8003170 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <xTaskResumeAll+0x120>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <xTaskResumeAll+0x11c>)
 8003194:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003196:	f001 f92d 	bl	80043f4 <vPortExitCritical>

    return xAlreadyYielded;
 800319a:	687b      	ldr	r3, [r7, #4]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000228 	.word	0x20000228
 80031a8:	20000200 	.word	0x20000200
 80031ac:	200001c0 	.word	0x200001c0
 80031b0:	20000208 	.word	0x20000208
 80031b4:	2000012c 	.word	0x2000012c
 80031b8:	20000128 	.word	0x20000128
 80031bc:	20000214 	.word	0x20000214
 80031c0:	20000210 	.word	0x20000210

080031c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <xTaskGetTickCount+0x1c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000204 	.word	0x20000204

080031e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ea:	f001 f9bf 	bl	800456c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <xTaskGetTickCountFromISR+0x20>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031f8:	683b      	ldr	r3, [r7, #0]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000204 	.word	0x20000204

08003208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <xTaskIncrementTick+0x110>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d173      	bne.n	8003302 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <xTaskIncrementTick+0x114>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003222:	4a3e      	ldr	r2, [pc, #248]	; (800331c <xTaskIncrementTick+0x114>)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d120      	bne.n	8003270 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800322e:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <xTaskIncrementTick+0x118>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <xTaskIncrementTick+0x46>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	603b      	str	r3, [r7, #0]
    }
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xTaskIncrementTick+0x44>
 800324e:	4b34      	ldr	r3, [pc, #208]	; (8003320 <xTaskIncrementTick+0x118>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <xTaskIncrementTick+0x11c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <xTaskIncrementTick+0x118>)
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4a31      	ldr	r2, [pc, #196]	; (8003324 <xTaskIncrementTick+0x11c>)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <xTaskIncrementTick+0x120>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <xTaskIncrementTick+0x120>)
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	f000 faa0 	bl	80037b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003270:	4b2e      	ldr	r3, [pc, #184]	; (800332c <xTaskIncrementTick+0x124>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d348      	bcc.n	800330c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <xTaskIncrementTick+0x118>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <xTaskIncrementTick+0x124>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295
 800328a:	601a      	str	r2, [r3, #0]
                    break;
 800328c:	e03e      	b.n	800330c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <xTaskIncrementTick+0x118>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d203      	bcs.n	80032ae <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <xTaskIncrementTick+0x124>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032ac:	e02e      	b.n	800330c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe ffd8 	bl	8002268 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3318      	adds	r3, #24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe ffcf 	bl	8002268 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fc7f 	bl	8006bd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <xTaskIncrementTick+0x128>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <xTaskIncrementTick+0x128>)
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <xTaskIncrementTick+0x12c>)
 80032f2:	441a      	add	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f7fe ff57 	bl	80021ae <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003300:	e7bb      	b.n	800327a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <xTaskIncrementTick+0x130>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <xTaskIncrementTick+0x130>)
 800330a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800330c:	697b      	ldr	r3, [r7, #20]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000228 	.word	0x20000228
 800331c:	20000204 	.word	0x20000204
 8003320:	200001b8 	.word	0x200001b8
 8003324:	200001bc 	.word	0x200001bc
 8003328:	20000218 	.word	0x20000218
 800332c:	20000220 	.word	0x20000220
 8003330:	20000208 	.word	0x20000208
 8003334:	2000012c 	.word	0x2000012c
 8003338:	20000210 	.word	0x20000210

0800333c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003342:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <vTaskSwitchContext+0xbc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <vTaskSwitchContext+0xc0>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003350:	e04d      	b.n	80033ee <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <vTaskSwitchContext+0xc0>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003358:	4b29      	ldr	r3, [pc, #164]	; (8003400 <vTaskSwitchContext+0xc4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	f1c3 031f 	rsb	r3, r3, #31
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	4925      	ldr	r1, [pc, #148]	; (8003404 <vTaskSwitchContext+0xc8>)
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	607b      	str	r3, [r7, #4]
    }
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <vTaskSwitchContext+0x5a>
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <vTaskSwitchContext+0xc8>)
 80033a4:	4413      	add	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	3308      	adds	r3, #8
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d104      	bne.n	80033c8 <vTaskSwitchContext+0x8c>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <vTaskSwitchContext+0xcc>)
 80033d0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <vTaskSwitchContext+0xcc>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <vTaskSwitchContext+0xd0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d102      	bne.n	80033e4 <vTaskSwitchContext+0xa8>
 80033de:	f003 fb57 	bl	8006a90 <SEGGER_SYSVIEW_OnIdle>
}
 80033e2:	e004      	b.n	80033ee <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <vTaskSwitchContext+0xcc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fbaf 	bl	8006b4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000228 	.word	0x20000228
 80033fc:	20000214 	.word	0x20000214
 8003400:	20000208 	.word	0x20000208
 8003404:	2000012c 	.word	0x2000012c
 8003408:	20000128 	.word	0x20000128
 800340c:	20000224 	.word	0x20000224

08003410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	60fb      	str	r3, [r7, #12]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <vTaskPlaceOnEventList+0x44>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3318      	adds	r3, #24
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fed9 	bl	80021f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003444:	2101      	movs	r1, #1
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f000 fa6c 	bl	8003924 <prvAddCurrentTaskToDelayedList>
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000128 	.word	0x20000128

08003458 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	617b      	str	r3, [r7, #20]
    }
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3318      	adds	r3, #24
 8003486:	4619      	mov	r1, r3
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7fe fe90 	bl	80021ae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800349a:	2024      	movs	r0, #36	; 0x24
 800349c:	f002 fdf8 	bl	8006090 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	68b8      	ldr	r0, [r7, #8]
 80034a4:	f000 fa3e 	bl	8003924 <prvAddCurrentTaskToDelayedList>
    }
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000128 	.word	0x20000128

080034b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	60fb      	str	r3, [r7, #12]
    }
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3318      	adds	r3, #24
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe febf 	bl	8002268 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <xTaskRemoveFromEventList+0xb4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d120      	bne.n	8003534 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe feb6 	bl	8002268 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fb66 	bl	8006bd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <xTaskRemoveFromEventList+0xb8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <xTaskRemoveFromEventList+0xb8>)
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <xTaskRemoveFromEventList+0xbc>)
 8003524:	441a      	add	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	3304      	adds	r3, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fe fe3e 	bl	80021ae <vListInsertEnd>
 8003532:	e005      	b.n	8003540 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3318      	adds	r3, #24
 8003538:	4619      	mov	r1, r3
 800353a:	480e      	ldr	r0, [pc, #56]	; (8003574 <xTaskRemoveFromEventList+0xc0>)
 800353c:	f7fe fe37 	bl	80021ae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <xTaskRemoveFromEventList+0xc4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d905      	bls.n	800355a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <xTaskRemoveFromEventList+0xc8>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e001      	b.n	800355e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800355e:	697b      	ldr	r3, [r7, #20]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000228 	.word	0x20000228
 800356c:	20000208 	.word	0x20000208
 8003570:	2000012c 	.word	0x2000012c
 8003574:	200001c0 	.word	0x200001c0
 8003578:	20000128 	.word	0x20000128
 800357c:	20000214 	.word	0x20000214

08003580 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <vTaskInternalSetTimeOutState+0x24>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <vTaskInternalSetTimeOutState+0x28>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	605a      	str	r2, [r3, #4]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	20000218 	.word	0x20000218
 80035a8:	20000204 	.word	0x20000204

080035ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	613b      	str	r3, [r7, #16]
    }
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ee:	f000 fed1 	bl	8004394 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <xTaskCheckForTimeOut+0xc4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d102      	bne.n	8003612 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e026      	b.n	8003660 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <xTaskCheckForTimeOut+0xc8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d00a      	beq.n	8003634 <xTaskCheckForTimeOut+0x88>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d305      	bcc.n	8003634 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e015      	b.n	8003660 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20b      	bcs.n	8003656 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff98 	bl	8003580 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	e004      	b.n	8003660 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003660:	f000 fec8 	bl	80043f4 <vPortExitCritical>

    return xReturn;
 8003664:	69fb      	ldr	r3, [r7, #28]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000204 	.word	0x20000204
 8003674:	20000218 	.word	0x20000218

08003678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <vTaskMissedYield+0x14>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000214 	.word	0x20000214

08003690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003698:	f000 f84c 	bl	8003734 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <prvIdleTask+0x20>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036ac:	e7f4      	b.n	8003698 <prvIdleTask+0x8>
 80036ae:	bf00      	nop
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	e00c      	b.n	80036da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <prvInitialiseTaskLists+0x60>)
 80036cc:	4413      	add	r3, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fd40 	bl	8002154 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3301      	adds	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d9ef      	bls.n	80036c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036e0:	480d      	ldr	r0, [pc, #52]	; (8003718 <prvInitialiseTaskLists+0x64>)
 80036e2:	f7fe fd37 	bl	8002154 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036e6:	480d      	ldr	r0, [pc, #52]	; (800371c <prvInitialiseTaskLists+0x68>)
 80036e8:	f7fe fd34 	bl	8002154 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036ec:	480c      	ldr	r0, [pc, #48]	; (8003720 <prvInitialiseTaskLists+0x6c>)
 80036ee:	f7fe fd31 	bl	8002154 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <prvInitialiseTaskLists+0x70>)
 80036f4:	f7fe fd2e 	bl	8002154 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <prvInitialiseTaskLists+0x74>)
 80036fa:	f7fe fd2b 	bl	8002154 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <prvInitialiseTaskLists+0x78>)
 8003700:	4a05      	ldr	r2, [pc, #20]	; (8003718 <prvInitialiseTaskLists+0x64>)
 8003702:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <prvInitialiseTaskLists+0x7c>)
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <prvInitialiseTaskLists+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000012c 	.word	0x2000012c
 8003718:	20000190 	.word	0x20000190
 800371c:	200001a4 	.word	0x200001a4
 8003720:	200001c0 	.word	0x200001c0
 8003724:	200001d4 	.word	0x200001d4
 8003728:	200001ec 	.word	0x200001ec
 800372c:	200001b8 	.word	0x200001b8
 8003730:	200001bc 	.word	0x200001bc

08003734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373a:	e019      	b.n	8003770 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800373c:	f000 fe2a 	bl	8004394 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <prvCheckTasksWaitingTermination+0x50>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fd8b 	bl	8002268 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <prvCheckTasksWaitingTermination+0x54>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3b01      	subs	r3, #1
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <prvCheckTasksWaitingTermination+0x54>)
 800375a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <prvCheckTasksWaitingTermination+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <prvCheckTasksWaitingTermination+0x58>)
 8003764:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003766:	f000 fe45 	bl	80043f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f810 	bl	8003790 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <prvCheckTasksWaitingTermination+0x58>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e1      	bne.n	800373c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200001d4 	.word	0x200001d4
 8003788:	20000200 	.word	0x20000200
 800378c:	200001e8 	.word	0x200001e8

08003790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4618      	mov	r0, r3
 800379e:	f001 f805 	bl	80047ac <vPortFree>
                vPortFree( pxTCB );
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 f802 	bl	80047ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvResetNextTaskUnblockTime+0x30>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <prvResetNextTaskUnblockTime+0x34>)
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037c6:	e005      	b.n	80037d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <prvResetNextTaskUnblockTime+0x30>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <prvResetNextTaskUnblockTime+0x34>)
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200001b8 	.word	0x200001b8
 80037e4:	20000220 	.word	0x20000220

080037e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <xTaskGetSchedulerState+0x34>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037f6:	2301      	movs	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	e008      	b.n	800380e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <xTaskGetSchedulerState+0x38>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003804:	2302      	movs	r3, #2
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	e001      	b.n	800380e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800380e:	687b      	ldr	r3, [r7, #4]
    }
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	2000020c 	.word	0x2000020c
 8003820:	20000228 	.word	0x20000228

08003824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d068      	beq.n	800390c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <xTaskPriorityDisinherit+0xf4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d00a      	beq.n	800385a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60fb      	str	r3, [r7, #12]
    }
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	60bb      	str	r3, [r7, #8]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	1e5a      	subs	r2, r3, #1
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	429a      	cmp	r2, r3
 800388c:	d03e      	beq.n	800390c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13a      	bne.n	800390c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3304      	adds	r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fce4 	bl	8002268 <uxListRemove>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	2201      	movs	r2, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43da      	mvns	r2, r3
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <xTaskPriorityDisinherit+0xf8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4013      	ands	r3, r2
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <xTaskPriorityDisinherit+0xf8>)
 80038ba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4619      	mov	r1, r3
 80038c0:	204a      	movs	r0, #74	; 0x4a
 80038c2:	f002 fc03 	bl	80060cc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f1c3 0205 	rsb	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <xTaskPriorityDisinherit+0xf8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <xTaskPriorityDisinherit+0xf8>)
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4a09      	ldr	r2, [pc, #36]	; (8003920 <xTaskPriorityDisinherit+0xfc>)
 80038fa:	441a      	add	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7fe fc53 	bl	80021ae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800390c:	697b      	ldr	r3, [r7, #20]
    }
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000128 	.word	0x20000128
 800391c:	20000208 	.word	0x20000208
 8003920:	2000012c 	.word	0x2000012c

08003924 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800392e:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3304      	adds	r3, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fc94 	bl	8002268 <uxListRemove>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	2201      	movs	r2, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4013      	ands	r3, r2
 800395a:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xdc>)
 800395c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d110      	bne.n	8003988 <prvAddCurrentTaskToDelayedList+0x64>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	211b      	movs	r1, #27
 8003972:	4618      	mov	r0, r3
 8003974:	f003 f96e 	bl	8006c54 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3304      	adds	r3, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4820      	ldr	r0, [pc, #128]	; (8003a04 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003982:	f7fe fc14 	bl	80021ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003986:	e032      	b.n	80039ee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d20f      	bcs.n	80039c0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2104      	movs	r1, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 f954 	bl	8006c54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <prvAddCurrentTaskToDelayedList+0xe4>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f7fe fc1c 	bl	80021f6 <vListInsert>
}
 80039be:	e016      	b.n	80039ee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2104      	movs	r1, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 f944 	bl	8006c54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <prvAddCurrentTaskToDelayedList+0xe8>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7fe fc0c 	bl	80021f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <prvAddCurrentTaskToDelayedList+0xec>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d202      	bcs.n	80039ee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <prvAddCurrentTaskToDelayedList+0xec>)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6013      	str	r3, [r2, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000204 	.word	0x20000204
 80039fc:	20000128 	.word	0x20000128
 8003a00:	20000208 	.word	0x20000208
 8003a04:	200001ec 	.word	0x200001ec
 8003a08:	200001bc 	.word	0x200001bc
 8003a0c:	200001b8 	.word	0x200001b8
 8003a10:	20000220 	.word	0x20000220

08003a14 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a1e:	f000 fad5 	bl	8003fcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <xTimerCreateTimerTask+0x54>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <xTimerCreateTimerTask+0x58>)
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2302      	movs	r3, #2
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a38:	490d      	ldr	r1, [pc, #52]	; (8003a70 <xTimerCreateTimerTask+0x5c>)
 8003a3a:	480e      	ldr	r0, [pc, #56]	; (8003a74 <xTimerCreateTimerTask+0x60>)
 8003a3c:	f7ff f96a 	bl	8002d14 <xTaskCreate>
 8003a40:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	603b      	str	r3, [r7, #0]
    }
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a5e:	687b      	ldr	r3, [r7, #4]
    }
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	2000025c 	.word	0x2000025c
 8003a6c:	20000260 	.word	0x20000260
 8003a70:	08007d40 	.word	0x08007d40
 8003a74:	08003bad 	.word	0x08003bad

08003a78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	623b      	str	r3, [r7, #32]
    }
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <xTimerGenericCommand+0x98>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02a      	beq.n	8003b04 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	dc18      	bgt.n	8003af2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ac0:	f7ff fe92 	bl	80037e8 <xTaskGetSchedulerState>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d109      	bne.n	8003ade <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <xTimerGenericCommand+0x98>)
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	f107 0114 	add.w	r1, r7, #20
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad6:	f7fe fcd5 	bl	8002484 <xQueueGenericSend>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24
 8003adc:	e012      	b.n	8003b04 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <xTimerGenericCommand+0x98>)
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f107 0114 	add.w	r1, r7, #20
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f7fe fccb 	bl	8002484 <xQueueGenericSend>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24
 8003af0:	e008      	b.n	8003b04 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <xTimerGenericCommand+0x98>)
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f107 0114 	add.w	r1, r7, #20
 8003afa:	2300      	movs	r3, #0
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	f7fe fdcf 	bl	80026a0 <xQueueGenericSendFromISR>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b06:	4618      	mov	r0, r3
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000025c 	.word	0x2000025c

08003b14 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <prvProcessExpiredTimer+0x94>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fb9b 	bl	8002268 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d022      	beq.n	8003b86 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	18d1      	adds	r1, r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	6978      	ldr	r0, [r7, #20]
 8003b4e:	f000 f8d1 	bl	8003cf4 <prvInsertTimerInActiveList>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01f      	beq.n	8003b98 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	2100      	movs	r1, #0
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7ff ff88 	bl	8003a78 <xTimerGenericCommand>
 8003b68:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
    }
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	6978      	ldr	r0, [r7, #20]
 8003b9e:	4798      	blx	r3
    }
 8003ba0:	bf00      	nop
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000254 	.word	0x20000254

08003bac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f857 	bl	8003c6c <prvGetNextExpireTime>
 8003bbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f803 	bl	8003bd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003bca:	f000 f8d5 	bl	8003d78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bce:	e7f1      	b.n	8003bb4 <prvTimerTask+0x8>

08003bd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bda:	f7ff fa53 	bl	8003084 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f866 	bl	8003cb4 <prvSampleTimeNow>
 8003be8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d130      	bne.n	8003c52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <prvProcessTimerOrBlockTask+0x3c>
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d806      	bhi.n	8003c0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bfe:	f7ff fa4f 	bl	80030a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff85 	bl	8003b14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c0a:	e024      	b.n	8003c56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <prvProcessTimerOrBlockTask+0x90>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <prvProcessTimerOrBlockTask+0x50>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x52>
 8003c20:	2300      	movs	r3, #0
 8003c22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <prvProcessTimerOrBlockTask+0x94>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7ff f83b 	bl	8002cac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c36:	f7ff fa33 	bl	80030a0 <xTaskResumeAll>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <prvProcessTimerOrBlockTask+0x98>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
    }
 8003c50:	e001      	b.n	8003c56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c52:	f7ff fa25 	bl	80030a0 <xTaskResumeAll>
    }
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000258 	.word	0x20000258
 8003c64:	2000025c 	.word	0x2000025c
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <prvGetNextExpireTime+0x44>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <prvGetNextExpireTime+0x16>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	e000      	b.n	8003c84 <prvGetNextExpireTime+0x18>
 8003c82:	2200      	movs	r2, #0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <prvGetNextExpireTime+0x44>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e001      	b.n	8003ca0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000254 	.word	0x20000254

08003cb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003cbc:	f7ff fa82 	bl	80031c4 <xTaskGetTickCount>
 8003cc0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <prvSampleTimeNow+0x3c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d205      	bcs.n	8003cd8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ccc:	f000 f91a 	bl	8003f04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <prvSampleTimeNow+0x3c>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000264 	.word	0x20000264

08003cf4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d812      	bhi.n	8003d40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e01b      	b.n	8003d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <prvInsertTimerInActiveList+0x7c>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7fe fa5c 	bl	80021f6 <vListInsert>
 8003d3e:	e012      	b.n	8003d66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d206      	bcs.n	8003d56 <prvInsertTimerInActiveList+0x62>
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e007      	b.n	8003d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <prvInsertTimerInActiveList+0x80>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f7fe fa48 	bl	80021f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d66:	697b      	ldr	r3, [r7, #20]
    }
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000258 	.word	0x20000258
 8003d74:	20000254 	.word	0x20000254

08003d78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d7e:	e0ae      	b.n	8003ede <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f2c0 80aa 	blt.w	8003edc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fa65 	bl	8002268 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff87 	bl	8003cb4 <prvSampleTimeNow>
 8003da6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	f200 8097 	bhi.w	8003ede <prvProcessReceivedCommands+0x166>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <prvProcessReceivedCommands+0x40>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de1 	.word	0x08003de1
 8003dc4:	08003e55 	.word	0x08003e55
 8003dc8:	08003e69 	.word	0x08003e69
 8003dcc:	08003eb3 	.word	0x08003eb3
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003de1 	.word	0x08003de1
 8003dd8:	08003e55 	.word	0x08003e55
 8003ddc:	08003e69 	.word	0x08003e69
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	18d1      	adds	r1, r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e00:	f7ff ff78 	bl	8003cf4 <prvInsertTimerInActiveList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d069      	beq.n	8003ede <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e10:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05e      	beq.n	8003ede <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	441a      	add	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e32:	f7ff fe21 	bl	8003a78 <xTimerGenericCommand>
 8003e36:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d14f      	bne.n	8003ede <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	61bb      	str	r3, [r7, #24]
    }
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e66:	e03a      	b.n	8003ede <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	617b      	str	r3, [r7, #20]
    }
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	18d1      	adds	r1, r2, r3
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eac:	f7ff ff22 	bl	8003cf4 <prvInsertTimerInActiveList>
                        break;
 8003eb0:	e015      	b.n	8003ede <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec2:	f000 fc73 	bl	80047ac <vPortFree>
 8003ec6:	e00a      	b.n	8003ede <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003eda:	e000      	b.n	8003ede <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003edc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <prvProcessReceivedCommands+0x188>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f107 0108 	add.w	r1, r7, #8
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fc97 	bl	800281c <xQueueReceive>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f af45 	bne.w	8003d80 <prvProcessReceivedCommands+0x8>
        }
    }
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	3728      	adds	r7, #40	; 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000025c 	.word	0x2000025c

08003f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f0a:	e048      	b.n	8003f9e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe f99f 	bl	8002268 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02e      	beq.n	8003f9e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d90e      	bls.n	8003f70 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7fe f944 	bl	80021f6 <vListInsert>
 8003f6e:	e016      	b.n	8003f9e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f70:	2300      	movs	r3, #0
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff fd7c 	bl	8003a78 <xTimerGenericCommand>
 8003f80:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	603b      	str	r3, [r7, #0]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1b1      	bne.n	8003f0c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <prvSwitchTimerLists+0xc4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <prvSwitchTimerLists+0xc0>)
 8003fb4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <prvSwitchTimerLists+0xc4>)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6013      	str	r3, [r2, #0]
    }
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000254 	.word	0x20000254
 8003fc8:	20000258 	.word	0x20000258

08003fcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fd0:	f000 f9e0 	bl	8004394 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <prvCheckForValidListAndQueue+0x54>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11d      	bne.n	8004018 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fdc:	4811      	ldr	r0, [pc, #68]	; (8004024 <prvCheckForValidListAndQueue+0x58>)
 8003fde:	f7fe f8b9 	bl	8002154 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fe2:	4811      	ldr	r0, [pc, #68]	; (8004028 <prvCheckForValidListAndQueue+0x5c>)
 8003fe4:	f7fe f8b6 	bl	8002154 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <prvCheckForValidListAndQueue+0x60>)
 8003fea:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <prvCheckForValidListAndQueue+0x58>)
 8003fec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <prvCheckForValidListAndQueue+0x64>)
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <prvCheckForValidListAndQueue+0x5c>)
 8003ff2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	210c      	movs	r1, #12
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f7fe f9ba 	bl	8002372 <xQueueGenericCreate>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <prvCheckForValidListAndQueue+0x54>)
 8004002:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <prvCheckForValidListAndQueue+0x54>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <prvCheckForValidListAndQueue+0x54>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4908      	ldr	r1, [pc, #32]	; (8004034 <prvCheckForValidListAndQueue+0x68>)
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fe18 	bl	8002c48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004018:	f000 f9ec 	bl	80043f4 <vPortExitCritical>
    }
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000025c 	.word	0x2000025c
 8004024:	2000022c 	.word	0x2000022c
 8004028:	20000240 	.word	0x20000240
 800402c:	20000254 	.word	0x20000254
 8004030:	20000258 	.word	0x20000258
 8004034:	08007d48 	.word	0x08007d48

08004038 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b04      	subs	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004050:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3b04      	subs	r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b04      	subs	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <pxPortInitialiseStack+0x64>)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b14      	subs	r3, #20
 8004072:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b04      	subs	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f06f 0202 	mvn.w	r2, #2
 8004086:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b20      	subs	r3, #32
 800408c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	080040a1 	.word	0x080040a1

080040a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <prvTaskExitError+0x54>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d00a      	beq.n	80040ca <prvTaskExitError+0x2a>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <prvTaskExitError+0x28>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	60bb      	str	r3, [r7, #8]
    }
 80040dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040de:	bf00      	nop
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0fc      	beq.n	80040e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000010 	.word	0x20000010
	...

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004128:	4808      	ldr	r0, [pc, #32]	; (800414c <prvPortStartFirstTask+0x24>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8814 	msr	CONTROL, r0
 800413a:	b662      	cpsie	i
 800413c:	b661      	cpsie	f
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	df00      	svc	0
 8004148:	bf00      	nop
 800414a:	0000      	.short	0x0000
 800414c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop

08004154 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800415a:	4b46      	ldr	r3, [pc, #280]	; (8004274 <xPortStartScheduler+0x120>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a46      	ldr	r2, [pc, #280]	; (8004278 <xPortStartScheduler+0x124>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10a      	bne.n	800417a <xPortStartScheduler+0x26>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	613b      	str	r3, [r7, #16]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800417a:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <xPortStartScheduler+0x120>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3f      	ldr	r2, [pc, #252]	; (800427c <xPortStartScheduler+0x128>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10a      	bne.n	800419a <xPortStartScheduler+0x46>
        __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	60fb      	str	r3, [r7, #12]
    }
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <xPortStartScheduler+0x12c>)
 800419c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <xPortStartScheduler+0x130>)
 80041c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <xPortStartScheduler+0x134>)
 80041c4:	2207      	movs	r2, #7
 80041c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041c8:	e009      	b.n	80041de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <xPortStartScheduler+0x134>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <xPortStartScheduler+0x134>)
 80041d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d0ef      	beq.n	80041ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ea:	4b27      	ldr	r3, [pc, #156]	; (8004288 <xPortStartScheduler+0x134>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1c3 0307 	rsb	r3, r3, #7
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00a      	beq.n	800420c <xPortStartScheduler+0xb8>
        __asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60bb      	str	r3, [r7, #8]
    }
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <xPortStartScheduler+0x134>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <xPortStartScheduler+0x134>)
 8004214:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <xPortStartScheduler+0x134>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800421e:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <xPortStartScheduler+0x134>)
 8004220:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800422a:	4b18      	ldr	r3, [pc, #96]	; (800428c <xPortStartScheduler+0x138>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <xPortStartScheduler+0x138>)
 8004230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004234:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <xPortStartScheduler+0x138>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a14      	ldr	r2, [pc, #80]	; (800428c <xPortStartScheduler+0x138>)
 800423c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004240:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004242:	f000 f963 	bl	800450c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <xPortStartScheduler+0x13c>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800424c:	f000 f982 	bl	8004554 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <xPortStartScheduler+0x140>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <xPortStartScheduler+0x140>)
 8004256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800425a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800425c:	f7ff ff64 	bl	8004128 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004260:	f7ff f86c 	bl	800333c <vTaskSwitchContext>
    prvTaskExitError();
 8004264:	f7ff ff1c 	bl	80040a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000ed00 	.word	0xe000ed00
 8004278:	410fc271 	.word	0x410fc271
 800427c:	410fc270 	.word	0x410fc270
 8004280:	e000e400 	.word	0xe000e400
 8004284:	20000268 	.word	0x20000268
 8004288:	2000026c 	.word	0x2000026c
 800428c:	e000ed20 	.word	0xe000ed20
 8004290:	20000010 	.word	0x20000010
 8004294:	e000ef34 	.word	0xe000ef34

08004298 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800429e:	4b37      	ldr	r3, [pc, #220]	; (800437c <vInitPrioGroupValue+0xe4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <vInitPrioGroupValue+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10a      	bne.n	80042be <vInitPrioGroupValue+0x26>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	613b      	str	r3, [r7, #16]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042be:	4b2f      	ldr	r3, [pc, #188]	; (800437c <vInitPrioGroupValue+0xe4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a30      	ldr	r2, [pc, #192]	; (8004384 <vInitPrioGroupValue+0xec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10a      	bne.n	80042de <vInitPrioGroupValue+0x46>
        __asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
    }
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042de:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <vInitPrioGroupValue+0xf0>)
 80042e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b22      	ldr	r3, [pc, #136]	; (800438c <vInitPrioGroupValue+0xf4>)
 8004304:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430c:	e009      	b.n	8004322 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3b01      	subs	r3, #1
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004316:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d0ef      	beq.n	800430e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	d00a      	beq.n	8004350 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60bb      	str	r3, [r7, #8]
    }
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004358:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <vInitPrioGroupValue+0xf8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004362:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <vInitPrioGroupValue+0xf8>)
 8004364:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000ed00 	.word	0xe000ed00
 8004380:	410fc271 	.word	0x410fc271
 8004384:	410fc270 	.word	0x410fc270
 8004388:	e000e400 	.word	0xe000e400
 800438c:	20000268 	.word	0x20000268
 8004390:	2000026c 	.word	0x2000026c

08004394 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
        __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
    }
 80043ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <vPortEnterCritical+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <vPortEnterCritical+0x58>)
 80043b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <vPortEnterCritical+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10f      	bne.n	80043e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortEnterCritical+0x5c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
    }
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vPortEnterCritical+0x4a>
    }
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000010 	.word	0x20000010
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <vPortExitCritical+0x50>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <vPortExitCritical+0x24>
        __asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
    }
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <vPortExitCritical+0x50>)
 8004420:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <vPortExitCritical+0x42>
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f383 8811 	msr	BASEPRI, r3
    }
 8004434:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000010 	.word	0x20000010
	...

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f01e 0f10 	tst.w	lr, #16
 8004460:	bf08      	it	eq
 8004462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004474:	f380 8811 	msr	BASEPRI, r0
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f7fe ff5c 	bl	800333c <vTaskSwitchContext>
 8004484:	f04f 0000 	mov.w	r0, #0
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	bc09      	pop	{r0, r3}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004496:	f01e 0f10 	tst.w	lr, #16
 800449a:	bf08      	it	eq
 800449c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044a0:	f380 8809 	msr	PSP, r0
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst>:
 80044b0:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
        __asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
    }
 80044d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044d2:	f002 fa63 	bl	800699c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044d6:	f7fe fe97 	bl	8003208 <xTaskIncrementTick>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044e0:	f002 faba 	bl	8006a58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <SysTick_Handler+0x50>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e001      	b.n	80044f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044ee:	f002 fa97 	bl	8006a20 <SEGGER_SYSVIEW_RecordExitISR>
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f383 8811 	msr	BASEPRI, r3
    }
 80044fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <vPortSetupTimerInterrupt+0x34>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <vPortSetupTimerInterrupt+0x38>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vPortSetupTimerInterrupt+0x3c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <vPortSetupTimerInterrupt+0x40>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <vPortSetupTimerInterrupt+0x44>)
 800452a:	3b01      	subs	r3, #1
 800452c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <vPortSetupTimerInterrupt+0x34>)
 8004530:	2207      	movs	r2, #7
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e010 	.word	0xe000e010
 8004544:	e000e018 	.word	0xe000e018
 8004548:	20000000 	.word	0x20000000
 800454c:	10624dd3 	.word	0x10624dd3
 8004550:	e000e014 	.word	0xe000e014

08004554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004564 <vPortEnableVFP+0x10>
 8004558:	6801      	ldr	r1, [r0, #0]
 800455a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800455e:	6001      	str	r1, [r0, #0]
 8004560:	4770      	bx	lr
 8004562:	0000      	.short	0x0000
 8004564:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop

0800456c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004572:	f3ef 8305 	mrs	r3, IPSR
 8004576:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b0f      	cmp	r3, #15
 800457c:	d914      	bls.n	80045a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <vPortValidateInterruptPriority+0x70>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <vPortValidateInterruptPriority+0x74>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	7afa      	ldrb	r2, [r7, #11]
 800458e:	429a      	cmp	r2, r3
 8004590:	d20a      	bcs.n	80045a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	607b      	str	r3, [r7, #4]
    }
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <vPortValidateInterruptPriority+0x78>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <vPortValidateInterruptPriority+0x7c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d90a      	bls.n	80045ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	603b      	str	r3, [r7, #0]
    }
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <vPortValidateInterruptPriority+0x60>
    }
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000e3f0 	.word	0xe000e3f0
 80045e0:	20000268 	.word	0x20000268
 80045e4:	e000ed0c 	.word	0xe000ed0c
 80045e8:	2000026c 	.word	0x2000026c

080045ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045f8:	f7fe fd44 	bl	8003084 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045fc:	4b65      	ldr	r3, [pc, #404]	; (8004794 <pvPortMalloc+0x1a8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004604:	f000 f934 	bl	8004870 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004608:	4b63      	ldr	r3, [pc, #396]	; (8004798 <pvPortMalloc+0x1ac>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 80a7 	bne.w	8004764 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02d      	beq.n	8004678 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800461c:	2208      	movs	r2, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d227      	bcs.n	8004678 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004628:	2208      	movs	r2, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d021      	beq.n	800467e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	3308      	adds	r3, #8
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d214      	bcs.n	8004672 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	3308      	adds	r3, #8
 8004650:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <pvPortMalloc+0x92>
        __asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	617b      	str	r3, [r7, #20]
    }
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004676:	e002      	b.n	800467e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e000      	b.n	8004680 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800467e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d06e      	beq.n	8004764 <pvPortMalloc+0x178>
 8004686:	4b45      	ldr	r3, [pc, #276]	; (800479c <pvPortMalloc+0x1b0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d869      	bhi.n	8004764 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004690:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <pvPortMalloc+0x1b4>)
 8004692:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004694:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <pvPortMalloc+0x1b4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469a:	e004      	b.n	80046a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <pvPortMalloc+0xcc>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f1      	bne.n	800469c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <pvPortMalloc+0x1a8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046be:	429a      	cmp	r2, r3
 80046c0:	d050      	beq.n	8004764 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2208      	movs	r2, #8
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1ad2      	subs	r2, r2, r3
 80046dc:	2308      	movs	r3, #8
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d91f      	bls.n	8004724 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <pvPortMalloc+0x120>
        __asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	613b      	str	r3, [r7, #16]
    }
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800471e:	69b8      	ldr	r0, [r7, #24]
 8004720:	f000 f908 	bl	8004934 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <pvPortMalloc+0x1b0>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	4a1b      	ldr	r2, [pc, #108]	; (800479c <pvPortMalloc+0x1b0>)
 8004730:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <pvPortMalloc+0x1b0>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <pvPortMalloc+0x1b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d203      	bcs.n	8004746 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800473e:	4b17      	ldr	r3, [pc, #92]	; (800479c <pvPortMalloc+0x1b0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <pvPortMalloc+0x1b8>)
 8004744:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <pvPortMalloc+0x1ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	431a      	orrs	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <pvPortMalloc+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <pvPortMalloc+0x1bc>)
 8004762:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004764:	f7fe fc9c 	bl	80030a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <pvPortMalloc+0x19c>
        __asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60fb      	str	r3, [r7, #12]
    }
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <pvPortMalloc+0x19a>
    return pvReturn;
 8004788:	69fb      	ldr	r3, [r7, #28]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20019278 	.word	0x20019278
 8004798:	2001928c 	.word	0x2001928c
 800479c:	2001927c 	.word	0x2001927c
 80047a0:	20019270 	.word	0x20019270
 80047a4:	20019280 	.word	0x20019280
 80047a8:	20019284 	.word	0x20019284

080047ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04d      	beq.n	800485a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047be:	2308      	movs	r3, #8
 80047c0:	425b      	negs	r3, r3
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <vPortFree+0xb8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <vPortFree+0x44>
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60fb      	str	r3, [r7, #12]
    }
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <vPortFree+0x62>
        __asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60bb      	str	r3, [r7, #8]
    }
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <vPortFree+0xb8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01e      	beq.n	800485a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11a      	bne.n	800485a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <vPortFree+0xb8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	43db      	mvns	r3, r3
 800482e:	401a      	ands	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004834:	f7fe fc26 	bl	8003084 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <vPortFree+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4413      	add	r3, r2
 8004842:	4a09      	ldr	r2, [pc, #36]	; (8004868 <vPortFree+0xbc>)
 8004844:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004846:	6938      	ldr	r0, [r7, #16]
 8004848:	f000 f874 	bl	8004934 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <vPortFree+0xc0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a06      	ldr	r2, [pc, #24]	; (800486c <vPortFree+0xc0>)
 8004854:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004856:	f7fe fc23 	bl	80030a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	2001928c 	.word	0x2001928c
 8004868:	2001927c 	.word	0x2001927c
 800486c:	20019288 	.word	0x20019288

08004870 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004876:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800487a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <prvHeapInit+0xac>)
 800487e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3307      	adds	r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <prvHeapInit+0xac>)
 80048a0:	4413      	add	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <prvHeapInit+0xb0>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048ae:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <prvHeapInit+0xb0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048bc:	2208      	movs	r2, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <prvHeapInit+0xb4>)
 80048d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <prvHeapInit+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <prvHeapInit+0xb4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <prvHeapInit+0xb4>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <prvHeapInit+0xb8>)
 80048fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <prvHeapInit+0xbc>)
 8004906:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <prvHeapInit+0xc0>)
 800490a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000270 	.word	0x20000270
 8004920:	20019270 	.word	0x20019270
 8004924:	20019278 	.word	0x20019278
 8004928:	20019280 	.word	0x20019280
 800492c:	2001927c 	.word	0x2001927c
 8004930:	2001928c 	.word	0x2001928c

08004934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <prvInsertBlockIntoFreeList+0xac>)
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <prvInsertBlockIntoFreeList+0x14>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d8f7      	bhi.n	8004942 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d108      	bne.n	8004976 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	441a      	add	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d118      	bne.n	80049bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <prvInsertBlockIntoFreeList+0xb0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d00d      	beq.n	80049b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	e008      	b.n	80049c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <prvInsertBlockIntoFreeList+0xb0>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e003      	b.n	80049c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d002      	beq.n	80049d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20019270 	.word	0x20019270
 80049e4:	20019278 	.word	0x20019278

080049e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049ec:	4803      	ldr	r0, [pc, #12]	; (80049fc <_cbSendSystemDesc+0x14>)
 80049ee:	f001 ff7f 	bl	80068f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049f2:	4803      	ldr	r0, [pc, #12]	; (8004a00 <_cbSendSystemDesc+0x18>)
 80049f4:	f001 ff7c 	bl	80068f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08007d50 	.word	0x08007d50
 8004a00:	08007d94 	.word	0x08007d94

08004a04 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a14:	f001 fae8 	bl	8005fe8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a1c:	f001 fb28 	bl	8006070 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000000 	.word	0x20000000
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08007e30 	.word	0x08007e30

08004a30 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	e033      	b.n	8004aa4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a3c:	491e      	ldr	r1, [pc, #120]	; (8004ab8 <_cbSendTaskList+0x88>)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	491a      	ldr	r1, [pc, #104]	; (8004ab8 <_cbSendTaskList+0x88>)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	4c16      	ldr	r4, [pc, #88]	; (8004ab8 <_cbSendTaskList+0x88>)
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4423      	add	r3, r4
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	681c      	ldr	r4, [r3, #0]
 8004a70:	4d11      	ldr	r5, [pc, #68]	; (8004ab8 <_cbSendTaskList+0x88>)
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	442b      	add	r3, r5
 8004a7e:	330c      	adds	r3, #12
 8004a80:	681d      	ldr	r5, [r3, #0]
 8004a82:	4e0d      	ldr	r6, [pc, #52]	; (8004ab8 <_cbSendTaskList+0x88>)
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4433      	add	r3, r6
 8004a90:	3310      	adds	r3, #16
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	462b      	mov	r3, r5
 8004a98:	4622      	mov	r2, r4
 8004a9a:	f000 f8bd 	bl	8004c18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <_cbSendTaskList+0x8c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3c6      	bcc.n	8004a3c <_cbSendTaskList+0xc>
  }
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab8:	20019290 	.word	0x20019290
 8004abc:	20019330 	.word	0x20019330

08004ac0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ac8:	f7fe fb8c 	bl	80031e4 <xTaskGetTickCountFromISR>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2200      	movs	r2, #0
 8004ad0:	469a      	mov	sl, r3
 8004ad2:	4693      	mov	fp, r2
 8004ad4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	f04f 0a00 	mov.w	sl, #0
 8004ae4:	f04f 0b00 	mov.w	fp, #0
 8004ae8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004aec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004af0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004af4:	4652      	mov	r2, sl
 8004af6:	465b      	mov	r3, fp
 8004af8:	1a14      	subs	r4, r2, r0
 8004afa:	eb63 0501 	sbc.w	r5, r3, r1
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	00ab      	lsls	r3, r5, #2
 8004b08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b0c:	00a2      	lsls	r2, r4, #2
 8004b0e:	4614      	mov	r4, r2
 8004b10:	461d      	mov	r5, r3
 8004b12:	eb14 0800 	adds.w	r8, r4, r0
 8004b16:	eb45 0901 	adc.w	r9, r5, r1
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2e:	4690      	mov	r8, r2
 8004b30:	4699      	mov	r9, r3
 8004b32:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004b36:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004b48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b56:	2205      	movs	r2, #5
 8004b58:	492b      	ldr	r1, [pc, #172]	; (8004c08 <SYSVIEW_AddTask+0xc0>)
 8004b5a:	68b8      	ldr	r0, [r7, #8]
 8004b5c:	f002 fc22 	bl	80073a4 <memcmp>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d04b      	beq.n	8004bfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b07      	cmp	r3, #7
 8004b6c:	d903      	bls.n	8004b76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b6e:	4828      	ldr	r0, [pc, #160]	; (8004c10 <SYSVIEW_AddTask+0xc8>)
 8004b70:	f002 f9da 	bl	8006f28 <SEGGER_SYSVIEW_Warn>
    return;
 8004b74:	e044      	b.n	8004c00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b76:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4926      	ldr	r1, [pc, #152]	; (8004c14 <SYSVIEW_AddTask+0xcc>)
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4921      	ldr	r1, [pc, #132]	; (8004c14 <SYSVIEW_AddTask+0xcc>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	491b      	ldr	r1, [pc, #108]	; (8004c14 <SYSVIEW_AddTask+0xcc>)
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4916      	ldr	r1, [pc, #88]	; (8004c14 <SYSVIEW_AddTask+0xcc>)
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4910      	ldr	r1, [pc, #64]	; (8004c14 <SYSVIEW_AddTask+0xcc>)
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3310      	adds	r3, #16
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <SYSVIEW_AddTask+0xc4>)
 8004bea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f80e 	bl	8004c18 <SYSVIEW_SendTaskInfo>
 8004bfc:	e000      	b.n	8004c00 <SYSVIEW_AddTask+0xb8>
    return;
 8004bfe:	bf00      	nop

}
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08007da4 	.word	0x08007da4
 8004c0c:	20019330 	.word	0x20019330
 8004c10:	08007dac 	.word	0x08007dac
 8004c14:	20019290 	.word	0x20019290

08004c18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c26:	f107 0310 	add.w	r3, r7, #16
 8004c2a:	2218      	movs	r2, #24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fbd6 	bl	80073e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fd57 	bl	8006700 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c52:	bf00      	nop
 8004c54:	3728      	adds	r7, #40	; 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c62:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <_DoInit+0xa0>)
 8004c64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c66:	22a8      	movs	r2, #168	; 0xa8
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6838      	ldr	r0, [r7, #0]
 8004c6c:	f002 fbb8 	bl	80073e0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2203      	movs	r2, #3
 8004c74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <_DoInit+0xa4>)
 8004c80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <_DoInit+0xa8>)
 8004c86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <_DoInit+0xa4>)
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <_DoInit+0xac>)
 8004cac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	e00c      	b.n	8004cea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1c3 030f 	rsb	r3, r3, #15
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <_DoInit+0xb0>)
 8004cd8:	5cd1      	ldrb	r1, [r2, r3]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d9ef      	bls.n	8004cd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cf0:	f3bf 8f5f 	dmb	sy
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20019334 	.word	0x20019334
 8004d00:	08007dfc 	.word	0x08007dfc
 8004d04:	200193dc 	.word	0x200193dc
 8004d08:	200197dc 	.word	0x200197dc
 8004d0c:	08007e38 	.word	0x08007e38

08004d10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d905      	bls.n	8004d40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	e007      	b.n	8004d50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	69b9      	ldr	r1, [r7, #24]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	1acb      	subs	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bf28      	it	cs
 8004d5e:	4613      	movcs	r3, r2
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bf28      	it	cs
 8004d6a:	4613      	movcs	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	6978      	ldr	r0, [r7, #20]
 8004d7e:	f002 fb21 	bl	80073c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	4413      	add	r3, r2
 8004d88:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	4413      	add	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	4413      	add	r3, r2
 8004da0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d101      	bne.n	8004db0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004db0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1b2      	bne.n	8004d26 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d911      	bls.n	8004e12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6938      	ldr	r0, [r7, #16]
 8004dfe:	f002 fae1 	bl	80073c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e10:	e01f      	b.n	8004e52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	6938      	ldr	r0, [r7, #16]
 8004e26:	f002 facd 	bl	80073c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4619      	mov	r1, r3
 8004e42:	6938      	ldr	r0, [r7, #16]
 8004e44:	f002 fabe 	bl	80073c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	60da      	str	r2, [r3, #12]
}
 8004e52:	bf00      	nop
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d808      	bhi.n	8004e88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	3b01      	subs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e004      	b.n	8004e92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e92:	697b      	ldr	r3, [r7, #20]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b53      	cmp	r3, #83	; 0x53
 8004eb8:	d001      	beq.n	8004ebe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004eba:	f7ff fecf 	bl	8004c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4a37      	ldr	r2, [pc, #220]	; (8004fa8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d92b      	bls.n	8004f44 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bf28      	it	cs
 8004efe:	4613      	movcs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	4413      	add	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f12:	f002 fa57 	bl	80073c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4413      	add	r3, r2
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d101      	bne.n	8004f44 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	bf28      	it	cs
 8004f54:	4613      	movcs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6e:	f002 fa29 	bl	80073c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20019334 	.word	0x20019334

08004fac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	; 0x30
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fba:	623b      	str	r3, [r7, #32]
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b53      	cmp	r3, #83	; 0x53
 8004fc4:	d001      	beq.n	8004fca <SEGGER_RTT_ReadNoLock+0x1e>
 8004fc6:	f7ff fe49 	bl	8004c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3360      	adds	r3, #96	; 0x60
 8004fd6:	4a37      	ldr	r2, [pc, #220]	; (80050b4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fec:	2300      	movs	r3, #0
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d92b      	bls.n	8005050 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4293      	cmp	r3, r2
 8005008:	bf28      	it	cs
 800500a:	4613      	movcs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	4413      	add	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800501e:	f002 f9d1 	bl	80073c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	429a      	cmp	r2, r3
 800504a:	d101      	bne.n	8005050 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800504c:	2300      	movs	r3, #0
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4293      	cmp	r3, r2
 800505e:	bf28      	it	cs
 8005060:	4613      	movcs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d019      	beq.n	800509e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	4413      	add	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800507a:	f002 f9a3 	bl	80073c4 <memcpy>
    NumBytesRead += NumBytesRem;
 800507e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3730      	adds	r7, #48	; 0x30
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20019334 	.word	0x20019334

080050b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	3360      	adds	r3, #96	; 0x60
 80050d4:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050d6:	4413      	add	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d029      	beq.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d82e      	bhi.n	8005144 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d013      	beq.n	8005116 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050ee:	e029      	b.n	8005144 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050f0:	6978      	ldr	r0, [r7, #20]
 80050f2:	f7ff feb2 	bl	8004e5a <_GetAvailWriteSpace>
 80050f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d202      	bcs.n	8005106 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005104:	e021      	b.n	800514a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	69b9      	ldr	r1, [r7, #24]
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff fe5b 	bl	8004dca <_WriteNoCheck>
    break;
 8005114:	e019      	b.n	800514a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff fe9f 	bl	8004e5a <_GetAvailWriteSpace>
 800511c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4293      	cmp	r3, r2
 8005124:	bf28      	it	cs
 8005126:	4613      	movcs	r3, r2
 8005128:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	f7ff fe4b 	bl	8004dca <_WriteNoCheck>
    break;
 8005134:	e009      	b.n	800514a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff fde8 	bl	8004d10 <_WriteBlocking>
 8005140:	61f8      	str	r0, [r7, #28]
    break;
 8005142:	e002      	b.n	800514a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
    break;
 8005148:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800514a:	69fb      	ldr	r3, [r7, #28]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20019334 	.word	0x20019334

08005158 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b53      	cmp	r3, #83	; 0x53
 8005170:	d001      	beq.n	8005176 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005172:	f7ff fd73 	bl	8004c5c <_DoInit>
  SEGGER_RTT_LOCK();
 8005176:	f3ef 8311 	mrs	r3, BASEPRI
 800517a:	f04f 0120 	mov.w	r1, #32
 800517e:	f381 8811 	msr	BASEPRI, r1
 8005182:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff95 	bl	80050b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800518e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005196:	697b      	ldr	r3, [r7, #20]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20019334 	.word	0x20019334

080051a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051b2:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b53      	cmp	r3, #83	; 0x53
 80051be:	d001      	beq.n	80051c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051c0:	f7ff fd4c 	bl	8004c5c <_DoInit>
  SEGGER_RTT_LOCK();
 80051c4:	f3ef 8311 	mrs	r3, BASEPRI
 80051c8:	f04f 0120 	mov.w	r1, #32
 80051cc:	f381 8811 	msr	BASEPRI, r1
 80051d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051d2:	4b35      	ldr	r3, [pc, #212]	; (80052a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051da:	6939      	ldr	r1, [r7, #16]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	3304      	adds	r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	dbeb      	blt.n	80051da <SEGGER_RTT_AllocUpBuffer+0x36>
 8005202:	e000      	b.n	8005206 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005204:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	429a      	cmp	r2, r3
 800520e:	da3f      	bge.n	8005290 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005224:	6939      	ldr	r1, [r7, #16]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	3304      	adds	r3, #4
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	440b      	add	r3, r1
 8005248:	3320      	adds	r3, #32
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	3328      	adds	r3, #40	; 0x28
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005276:	6939      	ldr	r1, [r7, #16]
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	332c      	adds	r3, #44	; 0x2c
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800528a:	f3bf 8f5f 	dmb	sy
 800528e:	e002      	b.n	8005296 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
 8005294:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800529c:	69fb      	ldr	r3, [r7, #28]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20019334 	.word	0x20019334

080052ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	; 0x28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b53      	cmp	r3, #83	; 0x53
 80052c6:	d001      	beq.n	80052cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052c8:	f7ff fcc8 	bl	8004c5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d82c      	bhi.n	8005330 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80052d6:	f3ef 8311 	mrs	r3, BASEPRI
 80052da:	f04f 0120 	mov.w	r1, #32
 80052de:	f381 8811 	msr	BASEPRI, r1
 80052e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4613      	mov	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	3360      	adds	r3, #96	; 0x60
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005320:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	e002      	b.n	8005336 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005330:	f04f 33ff 	mov.w	r3, #4294967295
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	; 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20019334 	.word	0x20019334

08005344 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	60fa      	str	r2, [r7, #12]
 800535a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d90a      	bls.n	8005378 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005366:	e007      	b.n	8005378 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	1c53      	adds	r3, r2, #1
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	60f9      	str	r1, [r7, #12]
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1e5a      	subs	r2, r3, #1
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <_EncodeStr+0x46>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ee      	bne.n	8005368 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	b2da      	uxtb	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005396:	68fb      	ldr	r3, [r7, #12]
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3307      	adds	r3, #7
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053c2:	4b35      	ldr	r3, [pc, #212]	; (8005498 <_HandleIncomingPacket+0xdc>)
 80053c4:	7e1b      	ldrb	r3, [r3, #24]
 80053c6:	4618      	mov	r0, r3
 80053c8:	1cfb      	adds	r3, r7, #3
 80053ca:	2201      	movs	r2, #1
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7ff fded 	bl	8004fac <SEGGER_RTT_ReadNoLock>
 80053d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d052      	beq.n	8005480 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d031      	beq.n	8005444 <_HandleIncomingPacket+0x88>
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	dc40      	bgt.n	8005466 <_HandleIncomingPacket+0xaa>
 80053e4:	2b07      	cmp	r3, #7
 80053e6:	dc15      	bgt.n	8005414 <_HandleIncomingPacket+0x58>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	dd3c      	ble.n	8005466 <_HandleIncomingPacket+0xaa>
 80053ec:	3b01      	subs	r3, #1
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d839      	bhi.n	8005466 <_HandleIncomingPacket+0xaa>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <_HandleIncomingPacket+0x3c>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541b 	.word	0x0800541b
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005427 	.word	0x08005427
 8005404:	0800542d 	.word	0x0800542d
 8005408:	08005433 	.word	0x08005433
 800540c:	08005439 	.word	0x08005439
 8005410:	0800543f 	.word	0x0800543f
 8005414:	2b7f      	cmp	r3, #127	; 0x7f
 8005416:	d035      	beq.n	8005484 <_HandleIncomingPacket+0xc8>
 8005418:	e025      	b.n	8005466 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800541a:	f000 fff5 	bl	8006408 <SEGGER_SYSVIEW_Start>
      break;
 800541e:	e036      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005420:	f001 f8ae 	bl	8006580 <SEGGER_SYSVIEW_Stop>
      break;
 8005424:	e033      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005426:	f001 fa87 	bl	8006938 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800542a:	e030      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800542c:	f001 fa4c 	bl	80068c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005430:	e02d      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005432:	f001 f8cb 	bl	80065cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005436:	e02a      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005438:	f001 fd24 	bl	8006e84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800543c:	e027      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800543e:	f001 fd03 	bl	8006e48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005442:	e024      	b.n	800548e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <_HandleIncomingPacket+0xdc>)
 8005446:	7e1b      	ldrb	r3, [r3, #24]
 8005448:	4618      	mov	r0, r3
 800544a:	1cfb      	adds	r3, r7, #3
 800544c:	2201      	movs	r2, #1
 800544e:	4619      	mov	r1, r3
 8005450:	f7ff fdac 	bl	8004fac <SEGGER_RTT_ReadNoLock>
 8005454:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fc68 	bl	8006d34 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005464:	e010      	b.n	8005488 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	b25b      	sxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	da0e      	bge.n	800548c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <_HandleIncomingPacket+0xdc>)
 8005470:	7e1b      	ldrb	r3, [r3, #24]
 8005472:	4618      	mov	r0, r3
 8005474:	1cfb      	adds	r3, r7, #3
 8005476:	2201      	movs	r2, #1
 8005478:	4619      	mov	r1, r3
 800547a:	f7ff fd97 	bl	8004fac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800547e:	e005      	b.n	800548c <_HandleIncomingPacket+0xd0>
    }
  }
 8005480:	bf00      	nop
 8005482:	e004      	b.n	800548e <_HandleIncomingPacket+0xd2>
      break;
 8005484:	bf00      	nop
 8005486:	e002      	b.n	800548e <_HandleIncomingPacket+0xd2>
      break;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <_HandleIncomingPacket+0xd2>
      break;
 800548c:	bf00      	nop
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2001a7f4 	.word	0x2001a7f4

0800549c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054a2:	2301      	movs	r3, #1
 80054a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <_TrySendOverflowPacket+0xe0>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b6:	e00b      	b.n	80054d0 <_TrySendOverflowPacket+0x34>
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	2b7f      	cmp	r3, #127	; 0x7f
 80054d4:	d8f0      	bhi.n	80054b8 <_TrySendOverflowPacket+0x1c>
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <_TrySendOverflowPacket+0xe4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054ec:	4b23      	ldr	r3, [pc, #140]	; (800557c <_TrySendOverflowPacket+0xe0>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	e00b      	b.n	8005518 <_TrySendOverflowPacket+0x7c>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	6279      	str	r1, [r7, #36]	; 0x24
 800550a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b7f      	cmp	r3, #127	; 0x7f
 800551c:	d8f0      	bhi.n	8005500 <_TrySendOverflowPacket+0x64>
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	627a      	str	r2, [r7, #36]	; 0x24
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	4618      	mov	r0, r3
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	461a      	mov	r2, r3
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	4619      	mov	r1, r3
 8005540:	f7fa fe46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005544:	4603      	mov	r3, r0
 8005546:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005548:	f001 fe7e 	bl	8007248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <_TrySendOverflowPacket+0xe0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e004      	b.n	8005570 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <_TrySendOverflowPacket+0xe0>)
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	3301      	adds	r3, #1
 800556c:	4a03      	ldr	r2, [pc, #12]	; (800557c <_TrySendOverflowPacket+0xe0>)
 800556e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005570:	693b      	ldr	r3, [r7, #16]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3730      	adds	r7, #48	; 0x30
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2001a7f4 	.word	0x2001a7f4
 8005580:	e0001004 	.word	0xe0001004

08005584 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005590:	4b96      	ldr	r3, [pc, #600]	; (80057ec <_SendPacket+0x268>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d010      	beq.n	80055ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005598:	4b94      	ldr	r3, [pc, #592]	; (80057ec <_SendPacket+0x268>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8130 	beq.w	8005802 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055a2:	4b92      	ldr	r3, [pc, #584]	; (80057ec <_SendPacket+0x268>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d109      	bne.n	80055be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055aa:	f7ff ff77 	bl	800549c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055ae:	4b8f      	ldr	r3, [pc, #572]	; (80057ec <_SendPacket+0x268>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	f040 8127 	bne.w	8005806 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80055b8:	e001      	b.n	80055be <_SendPacket+0x3a>
    goto Send;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <_SendPacket+0x3c>
Send:
 80055be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b1f      	cmp	r3, #31
 80055c4:	d809      	bhi.n	80055da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <_SendPacket+0x268>)
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 8118 	bne.w	800580a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b17      	cmp	r3, #23
 80055de:	d807      	bhi.n	80055f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e0c4      	b.n	800577a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b7f      	cmp	r3, #127	; 0x7f
 80055fc:	d912      	bls.n	8005624 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	09da      	lsrs	r2, r3, #7
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b01      	subs	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3a01      	subs	r2, #1
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e006      	b.n	8005632 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b7e      	cmp	r3, #126	; 0x7e
 8005636:	d807      	bhi.n	8005648 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e098      	b.n	800577a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564e:	d212      	bcs.n	8005676 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	09da      	lsrs	r2, r3, #7
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	3a01      	subs	r2, #1
 8005668:	60fa      	str	r2, [r7, #12]
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	e081      	b.n	800577a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800567c:	d21d      	bcs.n	80056ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0b9a      	lsrs	r2, r3, #14
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b01      	subs	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	b2db      	uxtb	r3, r3
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	3a01      	subs	r2, #1
 8005698:	60fa      	str	r2, [r7, #12]
 800569a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	3a01      	subs	r2, #1
 80056ac:	60fa      	str	r2, [r7, #12]
 80056ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e05f      	b.n	800577a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c0:	d228      	bcs.n	8005714 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0d5a      	lsrs	r2, r3, #21
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0b9b      	lsrs	r3, r3, #14
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	3a01      	subs	r2, #1
 80056dc:	60fa      	str	r2, [r7, #12]
 80056de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	3a01      	subs	r2, #1
 80056f2:	60fa      	str	r2, [r7, #12]
 80056f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	3a01      	subs	r2, #1
 8005706:	60fa      	str	r2, [r7, #12]
 8005708:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e032      	b.n	800577a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	0f1a      	lsrs	r2, r3, #28
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0d5b      	lsrs	r3, r3, #21
 8005728:	b2db      	uxtb	r3, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	3a01      	subs	r2, #1
 800572e:	60fa      	str	r2, [r7, #12]
 8005730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0b9b      	lsrs	r3, r3, #14
 800573e:	b2db      	uxtb	r3, r3
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	3a01      	subs	r2, #1
 8005744:	60fa      	str	r2, [r7, #12]
 8005746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800574a:	b2da      	uxtb	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	09db      	lsrs	r3, r3, #7
 8005754:	b2db      	uxtb	r3, r3
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	3a01      	subs	r2, #1
 800575a:	60fa      	str	r2, [r7, #12]
 800575c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	3a01      	subs	r2, #1
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <_SendPacket+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005780:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <_SendPacket+0x268>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	e00b      	b.n	80057ac <_SendPacket+0x228>
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	6279      	str	r1, [r7, #36]	; 0x24
 800579e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	09db      	lsrs	r3, r3, #7
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b7f      	cmp	r3, #127	; 0x7f
 80057b0:	d8f0      	bhi.n	8005794 <_SendPacket+0x210>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	627a      	str	r2, [r7, #36]	; 0x24
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <_SendPacket+0x268>)
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	4618      	mov	r0, r3
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	f7fa fcfd 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057d6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80057d8:	f001 fd36 	bl	8007248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057e2:	4a02      	ldr	r2, [pc, #8]	; (80057ec <_SendPacket+0x268>)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	60d3      	str	r3, [r2, #12]
 80057e8:	e010      	b.n	800580c <_SendPacket+0x288>
 80057ea:	bf00      	nop
 80057ec:	2001a7f4 	.word	0x2001a7f4
 80057f0:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057f4:	4b19      	ldr	r3, [pc, #100]	; (800585c <_SendPacket+0x2d8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <_SendPacket+0x2d8>)
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e004      	b.n	800580c <_SendPacket+0x288>
    goto SendDone;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <_SendPacket+0x288>
      goto SendDone;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <_SendPacket+0x288>
      goto SendDone;
 800580a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <_SendPacket+0x2d8>)
 800580e:	7e1b      	ldrb	r3, [r3, #24]
 8005810:	4619      	mov	r1, r3
 8005812:	4a13      	ldr	r2, [pc, #76]	; (8005860 <_SendPacket+0x2dc>)
 8005814:	460b      	mov	r3, r1
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	440b      	add	r3, r1
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	336c      	adds	r3, #108	; 0x6c
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <_SendPacket+0x2d8>)
 8005824:	7e1b      	ldrb	r3, [r3, #24]
 8005826:	4618      	mov	r0, r3
 8005828:	490d      	ldr	r1, [pc, #52]	; (8005860 <_SendPacket+0x2dc>)
 800582a:	4603      	mov	r3, r0
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4403      	add	r3, r0
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	3370      	adds	r3, #112	; 0x70
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d00b      	beq.n	8005854 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <_SendPacket+0x2d8>)
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <_SendPacket+0x2d8>)
 8005846:	2201      	movs	r2, #1
 8005848:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800584a:	f7ff fdb7 	bl	80053bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <_SendPacket+0x2d8>)
 8005850:	2200      	movs	r2, #0
 8005852:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005854:	bf00      	nop
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2001a7f4 	.word	0x2001a7f4
 8005860:	20019334 	.word	0x20019334

08005864 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	3301      	adds	r3, #1
 800587a:	2b80      	cmp	r3, #128	; 0x80
 800587c:	d80a      	bhi.n	8005894 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6051      	str	r1, [r2, #4]
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b80      	cmp	r3, #128	; 0x80
 800589a:	d15a      	bne.n	8005952 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	e00b      	b.n	80058d6 <_StoreChar+0x72>
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	6279      	str	r1, [r7, #36]	; 0x24
 80058c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d8f0      	bhi.n	80058be <_StoreChar+0x5a>
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	627a      	str	r2, [r7, #36]	; 0x24
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e00b      	b.n	800590e <_StoreChar+0xaa>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	61f9      	str	r1, [r7, #28]
 8005900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b7f      	cmp	r3, #127	; 0x7f
 8005912:	d8f0      	bhi.n	80058f6 <_StoreChar+0x92>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	221a      	movs	r2, #26
 800592a:	6939      	ldr	r1, [r7, #16]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fe29 	bl	8005584 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fd34 	bl	80053a4 <_PreparePacket>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]
  }
}
 8005952:	bf00      	nop
 8005954:	3728      	adds	r7, #40	; 0x28
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800596e:	2301      	movs	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005972:	2301      	movs	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005976:	e007      	b.n	8005988 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	623b      	str	r3, [r7, #32]
    Width++;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d2f3      	bcs.n	8005978 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	d901      	bls.n	800599c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11f      	bne.n	80059e6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01c      	beq.n	80059e6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <_PrintUnsigned+0x66>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <_PrintUnsigned+0x66>
        c = '0';
 80059bc:	2330      	movs	r3, #48	; 0x30
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	e001      	b.n	80059c6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80059c2:	2320      	movs	r3, #32
 80059c4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059c6:	e007      	b.n	80059d8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	3b01      	subs	r3, #1
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80059ce:	7efb      	ldrb	r3, [r7, #27]
 80059d0:	4619      	mov	r1, r3
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff ff46 	bl	8005864 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <_PrintUnsigned+0x8a>
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d3f0      	bcc.n	80059c8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d903      	bls.n	80059f4 <_PrintUnsigned+0x98>
      NumDigits--;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	e009      	b.n	8005a08 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d200      	bcs.n	8005a08 <_PrintUnsigned+0xac>
        break;
 8005a06:	e005      	b.n	8005a14 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a12:	e7e8      	b.n	80059e6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a2c:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <_PrintUnsigned+0x128>)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4413      	add	r3, r2
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff ff14 	bl	8005864 <_StoreChar>
    Digit /= Base;
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d011      	beq.n	8005a7a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a5c:	e006      	b.n	8005a6c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	3b01      	subs	r3, #1
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a64:	2120      	movs	r1, #32
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fefc 	bl	8005864 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <_PrintUnsigned+0x11e>
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3f1      	bcc.n	8005a5e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3728      	adds	r7, #40	; 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	08007e58 	.word	0x08007e58

08005a88 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	425b      	neglt	r3, r3
 8005a9e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005aa4:	e007      	b.n	8005ab6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8005aae:	613b      	str	r3, [r7, #16]
    Width++;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	daf3      	bge.n	8005aa6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d901      	bls.n	8005aca <_PrintInt+0x42>
    Width = NumDigits;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <_PrintInt+0x5e>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	db04      	blt.n	8005ae0 <_PrintInt+0x58>
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <_PrintInt+0x5e>
    FieldWidth--;
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <_PrintInt+0x6e>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <_PrintInt+0x9c>
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d111      	bne.n	8005b24 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00e      	beq.n	8005b24 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b06:	e006      	b.n	8005b16 <_PrintInt+0x8e>
        FieldWidth--;
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b0e:	2120      	movs	r1, #32
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff fea7 	bl	8005864 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <_PrintInt+0x9c>
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3f1      	bcc.n	8005b08 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da07      	bge.n	8005b3a <_PrintInt+0xb2>
    v = -v;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b30:	212d      	movs	r1, #45	; 0x2d
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fe96 	bl	8005864 <_StoreChar>
 8005b38:	e008      	b.n	8005b4c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b44:	212b      	movs	r1, #43	; 0x2b
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff fe8c 	bl	8005864 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d019      	beq.n	8005b8a <_PrintInt+0x102>
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d114      	bne.n	8005b8a <_PrintInt+0x102>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d111      	bne.n	8005b8a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b6c:	e006      	b.n	8005b7c <_PrintInt+0xf4>
        FieldWidth--;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b74:	2130      	movs	r1, #48	; 0x30
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff fe74 	bl	8005864 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <_PrintInt+0x102>
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3f1      	bcc.n	8005b6e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff fedf 	bl	800595c <_PrintUnsigned>
}
 8005b9e:	bf00      	nop
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b098      	sub	sp, #96	; 0x60
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb8:	f04f 0120 	mov.w	r1, #32
 8005bbc:	f381 8811 	msr	BASEPRI, r1
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc2:	48b7      	ldr	r0, [pc, #732]	; (8005ea0 <_VPrintTarget+0x2f8>)
 8005bc4:	f7ff fbee 	bl	80053a4 <_PreparePacket>
 8005bc8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005bca:	4bb5      	ldr	r3, [pc, #724]	; (8005ea0 <_VPrintTarget+0x2f8>)
 8005bcc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 81a8 	beq.w	8005f48 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bfc:	2b25      	cmp	r3, #37	; 0x25
 8005bfe:	f040 8195 	bne.w	8005f2c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c02:	2300      	movs	r3, #0
 8005c04:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005c06:	2301      	movs	r3, #1
 8005c08:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c16:	3b23      	subs	r3, #35	; 0x23
 8005c18:	2b0d      	cmp	r3, #13
 8005c1a:	d83f      	bhi.n	8005c9c <_VPrintTarget+0xf4>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <_VPrintTarget+0x7c>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c8d 	.word	0x08005c8d
 8005c28:	08005c9d 	.word	0x08005c9d
 8005c2c:	08005c9d 	.word	0x08005c9d
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005c9d 	.word	0x08005c9d
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005c9d 	.word	0x08005c9d
 8005c44:	08005c7d 	.word	0x08005c7d
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c9d 	.word	0x08005c9d
 8005c54:	08005c9d 	.word	0x08005c9d
 8005c58:	08005c6d 	.word	0x08005c6d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e01a      	b.n	8005ca2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6e:	f043 0302 	orr.w	r3, r3, #2
 8005c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	e012      	b.n	8005ca2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7e:	f043 0304 	orr.w	r3, r3, #4
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e00a      	b.n	8005ca2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8e:	f043 0308 	orr.w	r3, r3, #8
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e002      	b.n	8005ca2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca0:	bf00      	nop
        }
      } while (v);
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1b0      	bne.n	8005c0a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8005cba:	d912      	bls.n	8005ce2 <_VPrintTarget+0x13a>
 8005cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc0:	2b39      	cmp	r3, #57	; 0x39
 8005cc2:	d80e      	bhi.n	8005ce2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cda:	4413      	add	r3, r2
 8005cdc:	3b30      	subs	r3, #48	; 0x30
 8005cde:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005ce0:	e7e4      	b.n	8005cac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf4:	d11d      	bne.n	8005d32 <_VPrintTarget+0x18a>
        sFormat++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d08:	2b2f      	cmp	r3, #47	; 0x2f
 8005d0a:	d912      	bls.n	8005d32 <_VPrintTarget+0x18a>
 8005d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d10:	2b39      	cmp	r3, #57	; 0x39
 8005d12:	d80e      	bhi.n	8005d32 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	461a      	mov	r2, r3
 8005d26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3b30      	subs	r3, #48	; 0x30
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005d30:	e7e4      	b.n	8005cfc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d3e:	2b6c      	cmp	r3, #108	; 0x6c
 8005d40:	d003      	beq.n	8005d4a <_VPrintTarget+0x1a2>
 8005d42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d46:	2b68      	cmp	r3, #104	; 0x68
 8005d48:	d107      	bne.n	8005d5a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d58:	e7ef      	b.n	8005d3a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d5e:	2b25      	cmp	r3, #37	; 0x25
 8005d60:	f000 80d8 	beq.w	8005f14 <_VPrintTarget+0x36c>
 8005d64:	2b25      	cmp	r3, #37	; 0x25
 8005d66:	f2c0 80dc 	blt.w	8005f22 <_VPrintTarget+0x37a>
 8005d6a:	2b78      	cmp	r3, #120	; 0x78
 8005d6c:	f300 80d9 	bgt.w	8005f22 <_VPrintTarget+0x37a>
 8005d70:	2b58      	cmp	r3, #88	; 0x58
 8005d72:	f2c0 80d6 	blt.w	8005f22 <_VPrintTarget+0x37a>
 8005d76:	3b58      	subs	r3, #88	; 0x58
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	f200 80d2 	bhi.w	8005f22 <_VPrintTarget+0x37a>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <_VPrintTarget+0x1dc>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005e7b 	.word	0x08005e7b
 8005d88:	08005f23 	.word	0x08005f23
 8005d8c:	08005f23 	.word	0x08005f23
 8005d90:	08005f23 	.word	0x08005f23
 8005d94:	08005f23 	.word	0x08005f23
 8005d98:	08005f23 	.word	0x08005f23
 8005d9c:	08005f23 	.word	0x08005f23
 8005da0:	08005f23 	.word	0x08005f23
 8005da4:	08005f23 	.word	0x08005f23
 8005da8:	08005f23 	.word	0x08005f23
 8005dac:	08005f23 	.word	0x08005f23
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e2f 	.word	0x08005e2f
 8005db8:	08005f23 	.word	0x08005f23
 8005dbc:	08005f23 	.word	0x08005f23
 8005dc0:	08005f23 	.word	0x08005f23
 8005dc4:	08005f23 	.word	0x08005f23
 8005dc8:	08005f23 	.word	0x08005f23
 8005dcc:	08005f23 	.word	0x08005f23
 8005dd0:	08005f23 	.word	0x08005f23
 8005dd4:	08005f23 	.word	0x08005f23
 8005dd8:	08005f23 	.word	0x08005f23
 8005ddc:	08005f23 	.word	0x08005f23
 8005de0:	08005f23 	.word	0x08005f23
 8005de4:	08005eef 	.word	0x08005eef
 8005de8:	08005f23 	.word	0x08005f23
 8005dec:	08005f23 	.word	0x08005f23
 8005df0:	08005ea5 	.word	0x08005ea5
 8005df4:	08005f23 	.word	0x08005f23
 8005df8:	08005e55 	.word	0x08005e55
 8005dfc:	08005f23 	.word	0x08005f23
 8005e00:	08005f23 	.word	0x08005f23
 8005e04:	08005e7b 	.word	0x08005e7b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	1d19      	adds	r1, r3, #4
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6011      	str	r1, [r2, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005e1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e20:	f107 0310 	add.w	r3, r7, #16
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd1c 	bl	8005864 <_StoreChar>
        break;
 8005e2c:	e07a      	b.n	8005f24 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1d19      	adds	r1, r3, #4
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6011      	str	r1, [r2, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e3c:	f107 0010 	add.w	r0, r7, #16
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4a:	220a      	movs	r2, #10
 8005e4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e4e:	f7ff fe1b 	bl	8005a88 <_PrintInt>
        break;
 8005e52:	e067      	b.n	8005f24 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	1d19      	adds	r1, r3, #4
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6011      	str	r1, [r2, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e64:	f107 0010 	add.w	r0, r7, #16
 8005e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e72:	220a      	movs	r2, #10
 8005e74:	f7ff fd72 	bl	800595c <_PrintUnsigned>
        break;
 8005e78:	e054      	b.n	8005f24 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	1d19      	adds	r1, r3, #4
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6011      	str	r1, [r2, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e8a:	f107 0010 	add.w	r0, r7, #16
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	2210      	movs	r2, #16
 8005e9a:	f7ff fd5f 	bl	800595c <_PrintUnsigned>
        break;
 8005e9e:	e041      	b.n	8005f24 <_VPrintTarget+0x37c>
 8005ea0:	2001a824 	.word	0x2001a824
      case 's':
        s = va_arg(*pParamList, const char*);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1d19      	adds	r1, r3, #4
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6011      	str	r1, [r2, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <_VPrintTarget+0x314>
          s = "(null)";
 8005eb8:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <_VPrintTarget+0x43c>)
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005ed2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ed6:	f107 0310 	add.w	r3, r7, #16
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fcc1 	bl	8005864 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d9e9      	bls.n	8005ebc <_VPrintTarget+0x314>
        break;
 8005ee8:	e01c      	b.n	8005f24 <_VPrintTarget+0x37c>
            break;
 8005eea:	bf00      	nop
        break;
 8005eec:	e01a      	b.n	8005f24 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	1d19      	adds	r1, r3, #4
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6011      	str	r1, [r2, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005efc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005efe:	f107 0010 	add.w	r0, r7, #16
 8005f02:	2300      	movs	r3, #0
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2308      	movs	r3, #8
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	f7ff fd25 	bl	800595c <_PrintUnsigned>
        break;
 8005f12:	e007      	b.n	8005f24 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f14:	f107 0310 	add.w	r3, r7, #16
 8005f18:	2125      	movs	r1, #37	; 0x25
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fca2 	bl	8005864 <_StoreChar>
        break;
 8005f20:	e000      	b.n	8005f24 <_VPrintTarget+0x37c>
      default:
        break;
 8005f22:	bf00      	nop
      }
      sFormat++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e007      	b.n	8005f3c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f2c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fc94 	bl	8005864 <_StoreChar>
    }
  } while (*sFormat);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f ae4d 	bne.w	8005be0 <_VPrintTarget+0x38>
 8005f46:	e000      	b.n	8005f4a <_VPrintTarget+0x3a2>
      break;
 8005f48:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d041      	beq.n	8005fd4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f60:	e00b      	b.n	8005f7a <_VPrintTarget+0x3d2>
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7e:	d8f0      	bhi.n	8005f62 <_VPrintTarget+0x3ba>
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
 8005f94:	2300      	movs	r3, #0
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30
 8005f98:	e00b      	b.n	8005fb2 <_VPrintTarget+0x40a>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	6379      	str	r1, [r7, #52]	; 0x34
 8005fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb6:	d8f0      	bhi.n	8005f9a <_VPrintTarget+0x3f2>
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	221a      	movs	r2, #26
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fad8 	bl	8005584 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005fda:	bf00      	nop
 8005fdc:	3758      	adds	r7, #88	; 0x58
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08007e08 	.word	0x08007e08

08005fe8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ffc:	4917      	ldr	r1, [pc, #92]	; (800605c <SEGGER_SYSVIEW_Init+0x74>)
 8005ffe:	4818      	ldr	r0, [pc, #96]	; (8006060 <SEGGER_SYSVIEW_Init+0x78>)
 8006000:	f7ff f8d0 	bl	80051a4 <SEGGER_RTT_AllocUpBuffer>
 8006004:	4603      	mov	r3, r0
 8006006:	b2da      	uxtb	r2, r3
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 800600a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800600c:	4b15      	ldr	r3, [pc, #84]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 800600e:	785a      	ldrb	r2, [r3, #1]
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006012:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006016:	7e1b      	ldrb	r3, [r3, #24]
 8006018:	4618      	mov	r0, r3
 800601a:	2300      	movs	r3, #0
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2308      	movs	r3, #8
 8006020:	4a11      	ldr	r2, [pc, #68]	; (8006068 <SEGGER_SYSVIEW_Init+0x80>)
 8006022:	490f      	ldr	r1, [pc, #60]	; (8006060 <SEGGER_SYSVIEW_Init+0x78>)
 8006024:	f7ff f942 	bl	80052ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 800602a:	2200      	movs	r2, #0
 800602c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <SEGGER_SYSVIEW_Init+0x84>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006034:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006036:	4a0b      	ldr	r2, [pc, #44]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006048:	4a06      	ldr	r2, [pc, #24]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <SEGGER_SYSVIEW_Init+0x7c>)
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200197ec 	.word	0x200197ec
 8006060:	08007e10 	.word	0x08007e10
 8006064:	2001a7f4 	.word	0x2001a7f4
 8006068:	2001a7ec 	.word	0x2001a7ec
 800606c:	e0001004 	.word	0xe0001004

08006070 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6113      	str	r3, [r2, #16]
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	2001a7f4 	.word	0x2001a7f4

08006090 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006098:	f3ef 8311 	mrs	r3, BASEPRI
 800609c:	f04f 0120 	mov.w	r1, #32
 80060a0:	f381 8811 	msr	BASEPRI, r1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	4808      	ldr	r0, [pc, #32]	; (80060c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060a8:	f7ff f97c 	bl	80053a4 <_PreparePacket>
 80060ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68b8      	ldr	r0, [r7, #8]
 80060b4:	f7ff fa66 	bl	8005584 <_SendPacket>
  RECORD_END();
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2001a824 	.word	0x2001a824

080060cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060d6:	f3ef 8311 	mrs	r3, BASEPRI
 80060da:	f04f 0120 	mov.w	r1, #32
 80060de:	f381 8811 	msr	BASEPRI, r1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	4816      	ldr	r0, [pc, #88]	; (8006140 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80060e6:	f7ff f95d 	bl	80053a4 <_PreparePacket>
 80060ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_RecordU32+0x46>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	61f9      	str	r1, [r7, #28]
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	61fa      	str	r2, [r7, #28]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6938      	ldr	r0, [r7, #16]
 800612e:	f7ff fa29 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f383 8811 	msr	BASEPRI, r3
}
 8006138:	bf00      	nop
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	2001a824 	.word	0x2001a824

08006144 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006150:	f3ef 8311 	mrs	r3, BASEPRI
 8006154:	f04f 0120 	mov.w	r1, #32
 8006158:	f381 8811 	msr	BASEPRI, r1
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	4825      	ldr	r0, [pc, #148]	; (80061f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006160:	f7ff f920 	bl	80053a4 <_PreparePacket>
 8006164:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
 8006172:	e00b      	b.n	800618c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	b2da      	uxtb	r2, r3
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800617e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	09db      	lsrs	r3, r3, #7
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b7f      	cmp	r3, #127	; 0x7f
 8006190:	d8f0      	bhi.n	8006174 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	e00b      	b.n	80061c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	6279      	str	r1, [r7, #36]	; 0x24
 80061b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	09db      	lsrs	r3, r3, #7
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2b7f      	cmp	r3, #127	; 0x7f
 80061c8:	d8f0      	bhi.n	80061ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	627a      	str	r2, [r7, #36]	; 0x24
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	6979      	ldr	r1, [r7, #20]
 80061de:	69b8      	ldr	r0, [r7, #24]
 80061e0:	f7ff f9d0 	bl	8005584 <_SendPacket>
  RECORD_END();
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f383 8811 	msr	BASEPRI, r3
}
 80061ea:	bf00      	nop
 80061ec:	3730      	adds	r7, #48	; 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2001a824 	.word	0x2001a824

080061f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08e      	sub	sp, #56	; 0x38
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006206:	f3ef 8311 	mrs	r3, BASEPRI
 800620a:	f04f 0120 	mov.w	r1, #32
 800620e:	f381 8811 	msr	BASEPRI, r1
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	4832      	ldr	r0, [pc, #200]	; (80062e0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006216:	f7ff f8c5 	bl	80053a4 <_PreparePacket>
 800621a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
 8006228:	e00b      	b.n	8006242 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	b2da      	uxtb	r2, r3
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	6379      	str	r1, [r7, #52]	; 0x34
 8006234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	09db      	lsrs	r3, r3, #7
 8006240:	633b      	str	r3, [r7, #48]	; 0x30
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d8f0      	bhi.n	800622a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	637a      	str	r2, [r7, #52]	; 0x34
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	e00b      	b.n	800627a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b7f      	cmp	r3, #127	; 0x7f
 800627e:	d8f0      	bhi.n	8006262 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	e00b      	b.n	80062b2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	6279      	str	r1, [r7, #36]	; 0x24
 80062a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b7f      	cmp	r3, #127	; 0x7f
 80062b6:	d8f0      	bhi.n	800629a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	627a      	str	r2, [r7, #36]	; 0x24
 80062be:	6a3a      	ldr	r2, [r7, #32]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	69b8      	ldr	r0, [r7, #24]
 80062ce:	f7ff f959 	bl	8005584 <_SendPacket>
  RECORD_END();
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f383 8811 	msr	BASEPRI, r3
}
 80062d8:	bf00      	nop
 80062da:	3738      	adds	r7, #56	; 0x38
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	2001a824 	.word	0x2001a824

080062e4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b090      	sub	sp, #64	; 0x40
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062f2:	f3ef 8311 	mrs	r3, BASEPRI
 80062f6:	f04f 0120 	mov.w	r1, #32
 80062fa:	f381 8811 	msr	BASEPRI, r1
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	4840      	ldr	r0, [pc, #256]	; (8006404 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006302:	f7ff f84f 	bl	80053a4 <_PreparePacket>
 8006306:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
 8006314:	e00b      	b.n	800632e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	09db      	lsrs	r3, r3, #7
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	2b7f      	cmp	r3, #127	; 0x7f
 8006332:	d8f0      	bhi.n	8006316 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
 800634c:	e00b      	b.n	8006366 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	6379      	str	r1, [r7, #52]	; 0x34
 8006358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	633b      	str	r3, [r7, #48]	; 0x30
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b7f      	cmp	r3, #127	; 0x7f
 800636a:	d8f0      	bhi.n	800634e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	637a      	str	r2, [r7, #52]	; 0x34
 8006372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
 8006384:	e00b      	b.n	800639e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	b2da      	uxtb	r2, r3
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	09db      	lsrs	r3, r3, #7
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	2b7f      	cmp	r3, #127	; 0x7f
 80063a2:	d8f0      	bhi.n	8006386 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	e00b      	b.n	80063d6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6279      	str	r1, [r7, #36]	; 0x24
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	627a      	str	r2, [r7, #36]	; 0x24
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	69b8      	ldr	r0, [r7, #24]
 80063f2:	f7ff f8c7 	bl	8005584 <_SendPacket>
  RECORD_END();
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f383 8811 	msr	BASEPRI, r3
}
 80063fc:	bf00      	nop
 80063fe:	3740      	adds	r7, #64	; 0x40
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	2001a824 	.word	0x2001a824

08006408 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b08c      	sub	sp, #48	; 0x30
 800640c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800640e:	4b59      	ldr	r3, [pc, #356]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006414:	f3ef 8311 	mrs	r3, BASEPRI
 8006418:	f04f 0120 	mov.w	r1, #32
 800641c:	f381 8811 	msr	BASEPRI, r1
 8006420:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006422:	4b54      	ldr	r3, [pc, #336]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	220a      	movs	r2, #10
 8006428:	4953      	ldr	r1, [pc, #332]	; (8006578 <SEGGER_SYSVIEW_Start+0x170>)
 800642a:	4618      	mov	r0, r3
 800642c:	f7f9 fed0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006436:	f000 ff07 	bl	8007248 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800643a:	200a      	movs	r0, #10
 800643c:	f7ff fe28 	bl	8006090 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006440:	f3ef 8311 	mrs	r3, BASEPRI
 8006444:	f04f 0120 	mov.w	r1, #32
 8006448:	f381 8811 	msr	BASEPRI, r1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	484b      	ldr	r0, [pc, #300]	; (800657c <SEGGER_SYSVIEW_Start+0x174>)
 8006450:	f7fe ffa8 	bl	80053a4 <_PreparePacket>
 8006454:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800645e:	4b45      	ldr	r3, [pc, #276]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_Start+0x76>
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2b7f      	cmp	r3, #127	; 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_Start+0x5e>
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800648a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
 8006498:	4b36      	ldr	r3, [pc, #216]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	e00b      	b.n	80064b8 <SEGGER_SYSVIEW_Start+0xb0>
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6279      	str	r1, [r7, #36]	; 0x24
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <SEGGER_SYSVIEW_Start+0x98>
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	627a      	str	r2, [r7, #36]	; 0x24
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	4b28      	ldr	r3, [pc, #160]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e00b      	b.n	80064f2 <SEGGER_SYSVIEW_Start+0xea>
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	61f9      	str	r1, [r7, #28]
 80064e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	09db      	lsrs	r3, r3, #7
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b7f      	cmp	r3, #127	; 0x7f
 80064f6:	d8f0      	bhi.n	80064da <SEGGER_SYSVIEW_Start+0xd2>
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	61fa      	str	r2, [r7, #28]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e00b      	b.n	800652a <SEGGER_SYSVIEW_Start+0x122>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	6179      	str	r1, [r7, #20]
 800651c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	09db      	lsrs	r3, r3, #7
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b7f      	cmp	r3, #127	; 0x7f
 800652e:	d8f0      	bhi.n	8006512 <SEGGER_SYSVIEW_Start+0x10a>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	617a      	str	r2, [r7, #20]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006540:	2218      	movs	r2, #24
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff f81d 	bl	8005584 <_SendPacket>
      RECORD_END();
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <SEGGER_SYSVIEW_Start+0x16c>)
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800655e:	f000 f9eb 	bl	8006938 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006562:	f000 f9b1 	bl	80068c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006566:	f000 fc8d 	bl	8006e84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800656a:	bf00      	nop
 800656c:	3730      	adds	r7, #48	; 0x30
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2001a7f4 	.word	0x2001a7f4
 8006578:	08007e4c 	.word	0x08007e4c
 800657c:	2001a824 	.word	0x2001a824

08006580 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	f04f 0120 	mov.w	r1, #32
 800658e:	f381 8811 	msr	BASEPRI, r1
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	480b      	ldr	r0, [pc, #44]	; (80065c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006596:	f7fe ff05 	bl	80053a4 <_PreparePacket>
 800659a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80065a4:	220b      	movs	r2, #11
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6838      	ldr	r0, [r7, #0]
 80065aa:	f7fe ffeb 	bl	8005584 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	2001a824 	.word	0x2001a824
 80065c8:	2001a7f4 	.word	0x2001a7f4

080065cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08c      	sub	sp, #48	; 0x30
 80065d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d2:	f3ef 8311 	mrs	r3, BASEPRI
 80065d6:	f04f 0120 	mov.w	r1, #32
 80065da:	f381 8811 	msr	BASEPRI, r1
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	4845      	ldr	r0, [pc, #276]	; (80066f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80065e2:	f7fe fedf 	bl	80053a4 <_PreparePacket>
 80065e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f0:	4b42      	ldr	r3, [pc, #264]	; (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	e00b      	b.n	8006610 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	09db      	lsrs	r3, r3, #7
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b7f      	cmp	r3, #127	; 0x7f
 8006614:	d8f0      	bhi.n	80065f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800661c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	6279      	str	r1, [r7, #36]	; 0x24
 800663c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	2b7f      	cmp	r3, #127	; 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	627a      	str	r2, [r7, #36]	; 0x24
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e00b      	b.n	8006684 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	61f9      	str	r1, [r7, #28]
 8006676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	09db      	lsrs	r3, r3, #7
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b7f      	cmp	r3, #127	; 0x7f
 8006688:	d8f0      	bhi.n	800666c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	61fa      	str	r2, [r7, #28]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6179      	str	r1, [r7, #20]
 80066ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b7f      	cmp	r3, #127	; 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	617a      	str	r2, [r7, #20]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d2:	2218      	movs	r2, #24
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	68b8      	ldr	r0, [r7, #8]
 80066d8:	f7fe ff54 	bl	8005584 <_SendPacket>
  RECORD_END();
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	4798      	blx	r3
  }
}
 80066f0:	bf00      	nop
 80066f2:	3730      	adds	r7, #48	; 0x30
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	2001a824 	.word	0x2001a824
 80066fc:	2001a7f4 	.word	0x2001a7f4

08006700 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b092      	sub	sp, #72	; 0x48
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	486a      	ldr	r0, [pc, #424]	; (80068c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006718:	f7fe fe44 	bl	80053a4 <_PreparePacket>
 800671c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b66      	ldr	r3, [pc, #408]	; (80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	643b      	str	r3, [r7, #64]	; 0x40
 8006732:	e00b      	b.n	800674c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	6479      	str	r1, [r7, #68]	; 0x44
 800673e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006748:	09db      	lsrs	r3, r3, #7
 800674a:	643b      	str	r3, [r7, #64]	; 0x40
 800674c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674e:	2b7f      	cmp	r3, #127	; 0x7f
 8006750:	d8f0      	bhi.n	8006734 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	647a      	str	r2, [r7, #68]	; 0x44
 8006758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
 800676c:	e00b      	b.n	8006786 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	09db      	lsrs	r3, r3, #7
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b7f      	cmp	r3, #127	; 0x7f
 800678a:	d8f0      	bhi.n	800676e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7fe fdcd 	bl	8005344 <_EncodeStr>
 80067aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067ac:	2209      	movs	r2, #9
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	6938      	ldr	r0, [r7, #16]
 80067b2:	f7fe fee7 	bl	8005584 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b40      	ldr	r3, [pc, #256]	; (80068c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ca:	e00b      	b.n	80067e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	6379      	str	r1, [r7, #52]	; 0x34
 80067d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	2b7f      	cmp	r3, #127	; 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	637a      	str	r2, [r7, #52]	; 0x34
 80067f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	e00b      	b.n	800681e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	1c59      	adds	r1, r3, #1
 800680e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	2b7f      	cmp	r3, #127	; 0x7f
 8006822:	d8f0      	bhi.n	8006806 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	e00b      	b.n	8006858 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	6279      	str	r1, [r7, #36]	; 0x24
 800684a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	09db      	lsrs	r3, r3, #7
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	2b7f      	cmp	r3, #127	; 0x7f
 800685c:	d8f0      	bhi.n	8006840 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	627a      	str	r2, [r7, #36]	; 0x24
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e00b      	b.n	8006892 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	61f9      	str	r1, [r7, #28]
 8006884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d8f0      	bhi.n	800687a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	61fa      	str	r2, [r7, #28]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80068a8:	2215      	movs	r2, #21
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6938      	ldr	r0, [r7, #16]
 80068ae:	f7fe fe69 	bl	8005584 <_SendPacket>
  RECORD_END();
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f383 8811 	msr	BASEPRI, r3
}
 80068b8:	bf00      	nop
 80068ba:	3748      	adds	r7, #72	; 0x48
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	2001a824 	.word	0x2001a824
 80068c4:	2001a7f4 	.word	0x2001a7f4

080068c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80068de:	4b03      	ldr	r3, [pc, #12]	; (80068ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4798      	blx	r3
  }
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2001a7f4 	.word	0x2001a7f4

080068f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068f8:	f3ef 8311 	mrs	r3, BASEPRI
 80068fc:	f04f 0120 	mov.w	r1, #32
 8006900:	f381 8811 	msr	BASEPRI, r1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	480b      	ldr	r0, [pc, #44]	; (8006934 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006908:	f7fe fd4c 	bl	80053a4 <_PreparePacket>
 800690c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800690e:	2280      	movs	r2, #128	; 0x80
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7fe fd16 	bl	8005344 <_EncodeStr>
 8006918:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800691a:	220e      	movs	r2, #14
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	6938      	ldr	r0, [r7, #16]
 8006920:	f7fe fe30 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f383 8811 	msr	BASEPRI, r3
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	2001a824 	.word	0x2001a824

08006938 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800693e:	4b15      	ldr	r3, [pc, #84]	; (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01a      	beq.n	800697c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006950:	4b10      	ldr	r3, [pc, #64]	; (8006994 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4798      	blx	r3
 8006958:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800695c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800695e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	000a      	movs	r2, r1
 800696c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800696e:	4613      	mov	r3, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4621      	mov	r1, r4
 8006974:	200d      	movs	r0, #13
 8006976:	f7ff fbe5 	bl	8006144 <SEGGER_SYSVIEW_RecordU32x2>
 800697a:	e006      	b.n	800698a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	200c      	movs	r0, #12
 8006984:	f7ff fba2 	bl	80060cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}
 8006992:	bf00      	nop
 8006994:	2001a7f4 	.word	0x2001a7f4
 8006998:	e0001004 	.word	0xe0001004

0800699c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a2:	f3ef 8311 	mrs	r3, BASEPRI
 80069a6:	f04f 0120 	mov.w	r1, #32
 80069aa:	f381 8811 	msr	BASEPRI, r1
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	4819      	ldr	r0, [pc, #100]	; (8006a18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069b2:	f7fe fcf7 	bl	80053a4 <_PreparePacket>
 80069b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80069bc:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e00b      	b.n	80069e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	6179      	str	r1, [r7, #20]
 80069da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b7f      	cmp	r3, #127	; 0x7f
 80069ec:	d8f0      	bhi.n	80069d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	617a      	str	r2, [r7, #20]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80069fe:	2202      	movs	r2, #2
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7fe fdbe 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	2001a824 	.word	0x2001a824
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a26:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2a:	f04f 0120 	mov.w	r1, #32
 8006a2e:	f381 8811 	msr	BASEPRI, r1
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	4807      	ldr	r0, [pc, #28]	; (8006a54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a36:	f7fe fcb5 	bl	80053a4 <_PreparePacket>
 8006a3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6838      	ldr	r0, [r7, #0]
 8006a42:	f7fe fd9f 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f383 8811 	msr	BASEPRI, r3
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	2001a824 	.word	0x2001a824

08006a58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a62:	f04f 0120 	mov.w	r1, #32
 8006a66:	f381 8811 	msr	BASEPRI, r1
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	4807      	ldr	r0, [pc, #28]	; (8006a8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a6e:	f7fe fc99 	bl	80053a4 <_PreparePacket>
 8006a72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a74:	2212      	movs	r2, #18
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6838      	ldr	r0, [r7, #0]
 8006a7a:	f7fe fd83 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f383 8811 	msr	BASEPRI, r3
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2001a824 	.word	0x2001a824

08006a90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a96:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9a:	f04f 0120 	mov.w	r1, #32
 8006a9e:	f381 8811 	msr	BASEPRI, r1
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	4807      	ldr	r0, [pc, #28]	; (8006ac4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006aa6:	f7fe fc7d 	bl	80053a4 <_PreparePacket>
 8006aaa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006aac:	2211      	movs	r2, #17
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6838      	ldr	r0, [r7, #0]
 8006ab2:	f7fe fd67 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f383 8811 	msr	BASEPRI, r3
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	2001a824 	.word	0x2001a824

08006ac8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad4:	f04f 0120 	mov.w	r1, #32
 8006ad8:	f381 8811 	msr	BASEPRI, r1
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	4819      	ldr	r0, [pc, #100]	; (8006b44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ae0:	f7fe fc60 	bl	80053a4 <_PreparePacket>
 8006ae4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aea:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	e00b      	b.n	8006b16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	61f9      	str	r1, [r7, #28]
 8006b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	09db      	lsrs	r3, r3, #7
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1a:	d8f0      	bhi.n	8006afe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	61fa      	str	r2, [r7, #28]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	6938      	ldr	r0, [r7, #16]
 8006b32:	f7fe fd27 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f383 8811 	msr	BASEPRI, r3
}
 8006b3c:	bf00      	nop
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	2001a824 	.word	0x2001a824
 8006b48:	2001a7f4 	.word	0x2001a7f4

08006b4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b54:	f3ef 8311 	mrs	r3, BASEPRI
 8006b58:	f04f 0120 	mov.w	r1, #32
 8006b5c:	f381 8811 	msr	BASEPRI, r1
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	4819      	ldr	r0, [pc, #100]	; (8006bc8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b64:	f7fe fc1e 	bl	80053a4 <_PreparePacket>
 8006b68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b6e:	4b17      	ldr	r3, [pc, #92]	; (8006bcc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e00b      	b.n	8006b9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	61f9      	str	r1, [r7, #28]
 8006b8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	09db      	lsrs	r3, r3, #7
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9e:	d8f0      	bhi.n	8006b82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	6938      	ldr	r0, [r7, #16]
 8006bb6:	f7fe fce5 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f383 8811 	msr	BASEPRI, r3
}
 8006bc0:	bf00      	nop
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	2001a824 	.word	0x2001a824
 8006bcc:	2001a7f4 	.word	0x2001a7f4

08006bd0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bdc:	f04f 0120 	mov.w	r1, #32
 8006be0:	f381 8811 	msr	BASEPRI, r1
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	4819      	ldr	r0, [pc, #100]	; (8006c4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006be8:	f7fe fbdc 	bl	80053a4 <_PreparePacket>
 8006bec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bf2:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e00b      	b.n	8006c1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	1c59      	adds	r1, r3, #1
 8006c0e:	61f9      	str	r1, [r7, #28]
 8006c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	09db      	lsrs	r3, r3, #7
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b7f      	cmp	r3, #127	; 0x7f
 8006c22:	d8f0      	bhi.n	8006c06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	61fa      	str	r2, [r7, #28]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c34:	2206      	movs	r2, #6
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	6938      	ldr	r0, [r7, #16]
 8006c3a:	f7fe fca3 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f383 8811 	msr	BASEPRI, r3
}
 8006c44:	bf00      	nop
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	2001a824 	.word	0x2001a824
 8006c50:	2001a7f4 	.word	0x2001a7f4

08006c54 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c62:	f04f 0120 	mov.w	r1, #32
 8006c66:	f381 8811 	msr	BASEPRI, r1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	4827      	ldr	r0, [pc, #156]	; (8006d0c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006c6e:	f7fe fb99 	bl	80053a4 <_PreparePacket>
 8006c72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	e00b      	b.n	8006ca4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	6279      	str	r1, [r7, #36]	; 0x24
 8006c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	09db      	lsrs	r3, r3, #7
 8006ca2:	623b      	str	r3, [r7, #32]
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca8:	d8f0      	bhi.n	8006c8c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	627a      	str	r2, [r7, #36]	; 0x24
 8006cb0:	6a3a      	ldr	r2, [r7, #32]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e00b      	b.n	8006cdc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	61f9      	str	r1, [r7, #28]
 8006cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	09db      	lsrs	r3, r3, #7
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce0:	d8f0      	bhi.n	8006cc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006cf2:	2207      	movs	r2, #7
 8006cf4:	68f9      	ldr	r1, [r7, #12]
 8006cf6:	6938      	ldr	r0, [r7, #16]
 8006cf8:	f7fe fc44 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f383 8811 	msr	BASEPRI, r3
}
 8006d02:	bf00      	nop
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	2001a824 	.word	0x2001a824
 8006d10:	2001a7f4 	.word	0x2001a7f4

08006d14 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	1ad3      	subs	r3, r2, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	2001a7f4 	.word	0x2001a7f4

08006d34 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d3e:	4b40      	ldr	r3, [pc, #256]	; (8006e40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d077      	beq.n	8006e36 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d50:	e008      	b.n	8006d64 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	3301      	adds	r3, #1
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d3f2      	bcc.n	8006d52 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d6c:	e000      	b.n	8006d70 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d6e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d055      	beq.n	8006e22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d76:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7a:	f04f 0120 	mov.w	r1, #32
 8006d7e:	f381 8811 	msr	BASEPRI, r1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	482f      	ldr	r0, [pc, #188]	; (8006e44 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006d86:	f7fe fb0d 	bl	80053a4 <_PreparePacket>
 8006d8a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	e00b      	b.n	8006db2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	6279      	str	r1, [r7, #36]	; 0x24
 8006da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	09db      	lsrs	r3, r3, #7
 8006db0:	623b      	str	r3, [r7, #32]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	2b7f      	cmp	r3, #127	; 0x7f
 8006db6:	d8f0      	bhi.n	8006d9a <SEGGER_SYSVIEW_SendModule+0x66>
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e00b      	b.n	8006dec <SEGGER_SYSVIEW_SendModule+0xb8>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	61f9      	str	r1, [r7, #28]
 8006dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	09db      	lsrs	r3, r3, #7
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b7f      	cmp	r3, #127	; 0x7f
 8006df0:	d8f0      	bhi.n	8006dd4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	61fa      	str	r2, [r7, #28]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7fe fa9a 	bl	8005344 <_EncodeStr>
 8006e10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e12:	2216      	movs	r2, #22
 8006e14:	68f9      	ldr	r1, [r7, #12]
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f7fe fbb4 	bl	8005584 <_SendPacket>
      RECORD_END();
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <SEGGER_SYSVIEW_SendModule+0x102>
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4798      	blx	r3
    }
  }
}
 8006e36:	bf00      	nop
 8006e38:	3730      	adds	r7, #48	; 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2001a81c 	.word	0x2001a81c
 8006e44:	2001a824 	.word	0x2001a824

08006e48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00f      	beq.n	8006e76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	2001a81c 	.word	0x2001a81c

08006e84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8e:	f04f 0120 	mov.w	r1, #32
 8006e92:	f381 8811 	msr	BASEPRI, r1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	4817      	ldr	r0, [pc, #92]	; (8006ef8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006e9a:	f7fe fa83 	bl	80053a4 <_PreparePacket>
 8006e9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	4b14      	ldr	r3, [pc, #80]	; (8006efc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	e00b      	b.n	8006ec8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	6179      	str	r1, [r7, #20]
 8006eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	09db      	lsrs	r3, r3, #7
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ecc:	d8f0      	bhi.n	8006eb0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	617a      	str	r2, [r7, #20]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ede:	221b      	movs	r2, #27
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	68b8      	ldr	r0, [r7, #8]
 8006ee4:	f7fe fb4e 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f383 8811 	msr	BASEPRI, r3
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	2001a824 	.word	0x2001a824
 8006efc:	2001a820 	.word	0x2001a820

08006f00 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f00:	b40f      	push	{r0, r1, r2, r3}
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	461a      	mov	r2, r3
 8006f12:	2100      	movs	r1, #0
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f7fe fe47 	bl	8005ba8 <_VPrintTarget>
  va_end(ParamList);
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f24:	b004      	add	sp, #16
 8006f26:	4770      	bx	lr

08006f28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f30:	f3ef 8311 	mrs	r3, BASEPRI
 8006f34:	f04f 0120 	mov.w	r1, #32
 8006f38:	f381 8811 	msr	BASEPRI, r1
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	4827      	ldr	r0, [pc, #156]	; (8006fdc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f40:	f7fe fa30 	bl	80053a4 <_PreparePacket>
 8006f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f7fe f9fa 	bl	8005344 <_EncodeStr>
 8006f50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	2301      	movs	r3, #1
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	e00b      	b.n	8006f74 <SEGGER_SYSVIEW_Warn+0x4c>
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	6279      	str	r1, [r7, #36]	; 0x24
 8006f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	09db      	lsrs	r3, r3, #7
 8006f72:	623b      	str	r3, [r7, #32]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b7f      	cmp	r3, #127	; 0x7f
 8006f78:	d8f0      	bhi.n	8006f5c <SEGGER_SYSVIEW_Warn+0x34>
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f80:	6a3a      	ldr	r2, [r7, #32]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e00b      	b.n	8006fac <SEGGER_SYSVIEW_Warn+0x84>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	61f9      	str	r1, [r7, #28]
 8006f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb0:	d8f0      	bhi.n	8006f94 <SEGGER_SYSVIEW_Warn+0x6c>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	61fa      	str	r2, [r7, #28]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fc2:	221a      	movs	r2, #26
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f7fe fadc 	bl	8005584 <_SendPacket>
  RECORD_END();
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f383 8811 	msr	BASEPRI, r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3728      	adds	r7, #40	; 0x28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2001a824 	.word	0x2001a824

08006fe0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006fe4:	4b13      	ldr	r3, [pc, #76]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006fe6:	7e1b      	ldrb	r3, [r3, #24]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4a13      	ldr	r2, [pc, #76]	; (8007038 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006fec:	460b      	mov	r3, r1
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	440b      	add	r3, r1
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	336c      	adds	r3, #108	; 0x6c
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ffc:	7e1b      	ldrb	r3, [r3, #24]
 8006ffe:	4618      	mov	r0, r3
 8007000:	490d      	ldr	r1, [pc, #52]	; (8007038 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007002:	4603      	mov	r3, r0
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4403      	add	r3, r0
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	440b      	add	r3, r1
 800700c:	3370      	adds	r3, #112	; 0x70
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d00b      	beq.n	800702c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007016:	789b      	ldrb	r3, [r3, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800701e:	2201      	movs	r2, #1
 8007020:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007022:	f7fe f9cb 	bl	80053bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007028:	2200      	movs	r2, #0
 800702a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800702c:	4b01      	ldr	r3, [pc, #4]	; (8007034 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800702e:	781b      	ldrb	r3, [r3, #0]
}
 8007030:	4618      	mov	r0, r3
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2001a7f4 	.word	0x2001a7f4
 8007038:	20019334 	.word	0x20019334

0800703c <__NVIC_EnableIRQ>:
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	db0b      	blt.n	8007066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	f003 021f 	and.w	r2, r3, #31
 8007054:	4907      	ldr	r1, [pc, #28]	; (8007074 <__NVIC_EnableIRQ+0x38>)
 8007056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	2001      	movs	r0, #1
 800705e:	fa00 f202 	lsl.w	r2, r0, r2
 8007062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	e000e100 	.word	0xe000e100

08007078 <__NVIC_SetPriority>:
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007088:	2b00      	cmp	r3, #0
 800708a:	db0a      	blt.n	80070a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	490c      	ldr	r1, [pc, #48]	; (80070c4 <__NVIC_SetPriority+0x4c>)
 8007092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007096:	0112      	lsls	r2, r2, #4
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	440b      	add	r3, r1
 800709c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070a0:	e00a      	b.n	80070b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	4908      	ldr	r1, [pc, #32]	; (80070c8 <__NVIC_SetPriority+0x50>)
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	3b04      	subs	r3, #4
 80070b0:	0112      	lsls	r2, r2, #4
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	440b      	add	r3, r1
 80070b6:	761a      	strb	r2, [r3, #24]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	e000e100 	.word	0xe000e100
 80070c8:	e000ed00 	.word	0xe000ed00

080070cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80070d2:	f7ff ff85 	bl	8006fe0 <SEGGER_SYSVIEW_IsStarted>
 80070d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80070de:	f7ff f993 	bl	8006408 <SEGGER_SYSVIEW_Start>
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <_cbOnUARTRx+0x3c>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d806      	bhi.n	800710c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <_cbOnUARTRx+0x3c>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <_cbOnUARTRx+0x3c>)
 8007108:	701a      	strb	r2, [r3, #0]
    goto Done;
 800710a:	e009      	b.n	8007120 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800710c:	f7ff ffde 	bl	80070cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <_cbOnUARTRx+0x3c>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	1dfb      	adds	r3, r7, #7
 8007118:	2201      	movs	r2, #1
 800711a:	4619      	mov	r1, r3
 800711c:	f7fe f81c 	bl	8005158 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007120:	bf00      	nop
}
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000014 	.word	0x20000014

0800712c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007134:	4b14      	ldr	r3, [pc, #80]	; (8007188 <_cbOnUARTTx+0x5c>)
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d80f      	bhi.n	800715c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800713c:	4b12      	ldr	r3, [pc, #72]	; (8007188 <_cbOnUARTTx+0x5c>)
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	461a      	mov	r2, r3
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <_cbOnUARTTx+0x60>)
 8007144:	5c9a      	ldrb	r2, [r3, r2]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <_cbOnUARTTx+0x5c>)
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	3301      	adds	r3, #1
 8007150:	b2da      	uxtb	r2, r3
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <_cbOnUARTTx+0x5c>)
 8007154:	705a      	strb	r2, [r3, #1]
    r = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
    goto Done;
 800715a:	e00f      	b.n	800717c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <_cbOnUARTTx+0x5c>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd fe9b 	bl	8004ea0 <SEGGER_RTT_ReadUpBufferNoLock>
 800716a:	4603      	mov	r3, r0
 800716c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	da02      	bge.n	800717a <_cbOnUARTTx+0x4e>
    r = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e000      	b.n	800717c <_cbOnUARTTx+0x50>
  }
Done:
 800717a:	bf00      	nop
  return r;
 800717c:	68fb      	ldr	r3, [r7, #12]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000014 	.word	0x20000014
 800718c:	08007e68 	.word	0x08007e68

08007190 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8007198:	4a04      	ldr	r2, [pc, #16]	; (80071ac <SEGGER_UART_init+0x1c>)
 800719a:	4905      	ldr	r1, [pc, #20]	; (80071b0 <SEGGER_UART_init+0x20>)
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f863 	bl	8007268 <HIF_UART_Init>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	080070ed 	.word	0x080070ed
 80071b0:	0800712d 	.word	0x0800712d

080071b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <USART2_IRQHandler+0x80>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <USART2_IRQHandler+0x84>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f003 030b 	and.w	r3, r3, #11
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d108      	bne.n	80071ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80071dc:	4b17      	ldr	r3, [pc, #92]	; (800723c <USART2_IRQHandler+0x88>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <USART2_IRQHandler+0x88>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	79fa      	ldrb	r2, [r7, #7]
 80071ea:	4610      	mov	r0, r2
 80071ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80071f8:	4b11      	ldr	r3, [pc, #68]	; (8007240 <USART2_IRQHandler+0x8c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <USART2_IRQHandler+0x8c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	1dfa      	adds	r2, r7, #7
 8007206:	4610      	mov	r0, r2
 8007208:	4798      	blx	r3
 800720a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007212:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <USART2_IRQHandler+0x90>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a0b      	ldr	r2, [pc, #44]	; (8007244 <USART2_IRQHandler+0x90>)
 8007218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e006      	b.n	800722e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <USART2_IRQHandler+0x80>)
 8007222:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007224:	79fa      	ldrb	r2, [r7, #7]
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <USART2_IRQHandler+0x84>)
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e000      	b.n	800722e <USART2_IRQHandler+0x7a>
      return;
 800722c:	bf00      	nop
    }
  }
}
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40004400 	.word	0x40004400
 8007238:	40004404 	.word	0x40004404
 800723c:	2001a908 	.word	0x2001a908
 8007240:	2001a90c 	.word	0x2001a90c
 8007244:	4000440c 	.word	0x4000440c

08007248 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007256:	6013      	str	r3, [r2, #0]
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	4000440c 	.word	0x4000440c

08007268 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007274:	4b2e      	ldr	r3, [pc, #184]	; (8007330 <HIF_UART_Init+0xc8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2d      	ldr	r2, [pc, #180]	; (8007330 <HIF_UART_Init+0xc8>)
 800727a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8007280:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <HIF_UART_Init+0xcc>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <HIF_UART_Init+0xcc>)
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800728c:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <HIF_UART_Init+0xd0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007298:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80072a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80072a2:	4a25      	ldr	r2, [pc, #148]	; (8007338 <HIF_UART_Init+0xd0>)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80072a8:	4b24      	ldr	r3, [pc, #144]	; (800733c <HIF_UART_Init+0xd4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80072bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80072be:	4a1f      	ldr	r2, [pc, #124]	; (800733c <HIF_UART_Init+0xd4>)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HIF_UART_Init+0xd8>)
 80072c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80072ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80072cc:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <HIF_UART_Init+0xdc>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80072d2:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <HIF_UART_Init+0xe0>)
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80072de:	4a1b      	ldr	r2, [pc, #108]	; (800734c <HIF_UART_Init+0xe4>)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	3301      	adds	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d302      	bcc.n	80072fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80072f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80072fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4a11      	ldr	r2, [pc, #68]	; (8007350 <HIF_UART_Init+0xe8>)
 800730a:	b29b      	uxth	r3, r3
 800730c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800730e:	4a11      	ldr	r2, [pc, #68]	; (8007354 <HIF_UART_Init+0xec>)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8007314:	4a10      	ldr	r2, [pc, #64]	; (8007358 <HIF_UART_Init+0xf0>)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800731a:	2106      	movs	r1, #6
 800731c:	2026      	movs	r0, #38	; 0x26
 800731e:	f7ff feab 	bl	8007078 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007322:	2026      	movs	r0, #38	; 0x26
 8007324:	f7ff fe8a 	bl	800703c <__NVIC_EnableIRQ>
}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40023840 	.word	0x40023840
 8007334:	40023830 	.word	0x40023830
 8007338:	40020020 	.word	0x40020020
 800733c:	40020000 	.word	0x40020000
 8007340:	4000440c 	.word	0x4000440c
 8007344:	40004410 	.word	0x40004410
 8007348:	40004414 	.word	0x40004414
 800734c:	0501bd00 	.word	0x0501bd00
 8007350:	40004408 	.word	0x40004408
 8007354:	2001a908 	.word	0x2001a908
 8007358:	2001a90c 	.word	0x2001a90c

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	; (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	; (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	; (80073a0 <__libc_init_array+0x44>)
 8007370:	f000 fcc0 	bl	8007cf4 <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	08007ea8 	.word	0x08007ea8
 8007398:	08007ea8 	.word	0x08007ea8
 800739c:	08007ea8 	.word	0x08007ea8
 80073a0:	08007eac 	.word	0x08007eac

080073a4 <memcmp>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	3901      	subs	r1, #1
 80073a8:	4402      	add	r2, r0
 80073aa:	4290      	cmp	r0, r2
 80073ac:	d101      	bne.n	80073b2 <memcmp+0xe>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e005      	b.n	80073be <memcmp+0x1a>
 80073b2:	7803      	ldrb	r3, [r0, #0]
 80073b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d001      	beq.n	80073c0 <memcmp+0x1c>
 80073bc:	1b18      	subs	r0, r3, r4
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	3001      	adds	r0, #1
 80073c2:	e7f2      	b.n	80073aa <memcmp+0x6>

080073c4 <memcpy>:
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073cc:	d100      	bne.n	80073d0 <memcpy+0xc>
 80073ce:	4770      	bx	lr
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073da:	4291      	cmp	r1, r2
 80073dc:	d1f9      	bne.n	80073d2 <memcpy+0xe>
 80073de:	bd10      	pop	{r4, pc}

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <sniprintf>:
 80073f0:	b40c      	push	{r2, r3}
 80073f2:	b530      	push	{r4, r5, lr}
 80073f4:	4b17      	ldr	r3, [pc, #92]	; (8007454 <sniprintf+0x64>)
 80073f6:	1e0c      	subs	r4, r1, #0
 80073f8:	681d      	ldr	r5, [r3, #0]
 80073fa:	b09d      	sub	sp, #116	; 0x74
 80073fc:	da08      	bge.n	8007410 <sniprintf+0x20>
 80073fe:	238b      	movs	r3, #139	; 0x8b
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	b01d      	add	sp, #116	; 0x74
 8007408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800740c:	b002      	add	sp, #8
 800740e:	4770      	bx	lr
 8007410:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007418:	bf14      	ite	ne
 800741a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800741e:	4623      	moveq	r3, r4
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007428:	9002      	str	r0, [sp, #8]
 800742a:	9006      	str	r0, [sp, #24]
 800742c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007430:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007432:	ab21      	add	r3, sp, #132	; 0x84
 8007434:	a902      	add	r1, sp, #8
 8007436:	4628      	mov	r0, r5
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	f000 f869 	bl	8007510 <_svfiprintf_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	bfbc      	itt	lt
 8007442:	238b      	movlt	r3, #139	; 0x8b
 8007444:	602b      	strlt	r3, [r5, #0]
 8007446:	2c00      	cmp	r4, #0
 8007448:	d0dd      	beq.n	8007406 <sniprintf+0x16>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	e7d9      	b.n	8007406 <sniprintf+0x16>
 8007452:	bf00      	nop
 8007454:	2000001c 	.word	0x2000001c

08007458 <__ssputs_r>:
 8007458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	688e      	ldr	r6, [r1, #8]
 800745e:	429e      	cmp	r6, r3
 8007460:	4682      	mov	sl, r0
 8007462:	460c      	mov	r4, r1
 8007464:	4690      	mov	r8, r2
 8007466:	461f      	mov	r7, r3
 8007468:	d838      	bhi.n	80074dc <__ssputs_r+0x84>
 800746a:	898a      	ldrh	r2, [r1, #12]
 800746c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007470:	d032      	beq.n	80074d8 <__ssputs_r+0x80>
 8007472:	6825      	ldr	r5, [r4, #0]
 8007474:	6909      	ldr	r1, [r1, #16]
 8007476:	eba5 0901 	sub.w	r9, r5, r1
 800747a:	6965      	ldr	r5, [r4, #20]
 800747c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007484:	3301      	adds	r3, #1
 8007486:	444b      	add	r3, r9
 8007488:	106d      	asrs	r5, r5, #1
 800748a:	429d      	cmp	r5, r3
 800748c:	bf38      	it	cc
 800748e:	461d      	movcc	r5, r3
 8007490:	0553      	lsls	r3, r2, #21
 8007492:	d531      	bpl.n	80074f8 <__ssputs_r+0xa0>
 8007494:	4629      	mov	r1, r5
 8007496:	f000 fb55 	bl	8007b44 <_malloc_r>
 800749a:	4606      	mov	r6, r0
 800749c:	b950      	cbnz	r0, 80074b4 <__ssputs_r+0x5c>
 800749e:	230c      	movs	r3, #12
 80074a0:	f8ca 3000 	str.w	r3, [sl]
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074aa:	81a3      	strh	r3, [r4, #12]
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b4:	6921      	ldr	r1, [r4, #16]
 80074b6:	464a      	mov	r2, r9
 80074b8:	f7ff ff84 	bl	80073c4 <memcpy>
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	6126      	str	r6, [r4, #16]
 80074ca:	6165      	str	r5, [r4, #20]
 80074cc:	444e      	add	r6, r9
 80074ce:	eba5 0509 	sub.w	r5, r5, r9
 80074d2:	6026      	str	r6, [r4, #0]
 80074d4:	60a5      	str	r5, [r4, #8]
 80074d6:	463e      	mov	r6, r7
 80074d8:	42be      	cmp	r6, r7
 80074da:	d900      	bls.n	80074de <__ssputs_r+0x86>
 80074dc:	463e      	mov	r6, r7
 80074de:	6820      	ldr	r0, [r4, #0]
 80074e0:	4632      	mov	r2, r6
 80074e2:	4641      	mov	r1, r8
 80074e4:	f000 faa8 	bl	8007a38 <memmove>
 80074e8:	68a3      	ldr	r3, [r4, #8]
 80074ea:	1b9b      	subs	r3, r3, r6
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	4433      	add	r3, r6
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	2000      	movs	r0, #0
 80074f6:	e7db      	b.n	80074b0 <__ssputs_r+0x58>
 80074f8:	462a      	mov	r2, r5
 80074fa:	f000 fb97 	bl	8007c2c <_realloc_r>
 80074fe:	4606      	mov	r6, r0
 8007500:	2800      	cmp	r0, #0
 8007502:	d1e1      	bne.n	80074c8 <__ssputs_r+0x70>
 8007504:	6921      	ldr	r1, [r4, #16]
 8007506:	4650      	mov	r0, sl
 8007508:	f000 fab0 	bl	8007a6c <_free_r>
 800750c:	e7c7      	b.n	800749e <__ssputs_r+0x46>
	...

08007510 <_svfiprintf_r>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	4698      	mov	r8, r3
 8007516:	898b      	ldrh	r3, [r1, #12]
 8007518:	061b      	lsls	r3, r3, #24
 800751a:	b09d      	sub	sp, #116	; 0x74
 800751c:	4607      	mov	r7, r0
 800751e:	460d      	mov	r5, r1
 8007520:	4614      	mov	r4, r2
 8007522:	d50e      	bpl.n	8007542 <_svfiprintf_r+0x32>
 8007524:	690b      	ldr	r3, [r1, #16]
 8007526:	b963      	cbnz	r3, 8007542 <_svfiprintf_r+0x32>
 8007528:	2140      	movs	r1, #64	; 0x40
 800752a:	f000 fb0b 	bl	8007b44 <_malloc_r>
 800752e:	6028      	str	r0, [r5, #0]
 8007530:	6128      	str	r0, [r5, #16]
 8007532:	b920      	cbnz	r0, 800753e <_svfiprintf_r+0x2e>
 8007534:	230c      	movs	r3, #12
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e0d1      	b.n	80076e2 <_svfiprintf_r+0x1d2>
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	616b      	str	r3, [r5, #20]
 8007542:	2300      	movs	r3, #0
 8007544:	9309      	str	r3, [sp, #36]	; 0x24
 8007546:	2320      	movs	r3, #32
 8007548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800754c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007550:	2330      	movs	r3, #48	; 0x30
 8007552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076fc <_svfiprintf_r+0x1ec>
 8007556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800755a:	f04f 0901 	mov.w	r9, #1
 800755e:	4623      	mov	r3, r4
 8007560:	469a      	mov	sl, r3
 8007562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007566:	b10a      	cbz	r2, 800756c <_svfiprintf_r+0x5c>
 8007568:	2a25      	cmp	r2, #37	; 0x25
 800756a:	d1f9      	bne.n	8007560 <_svfiprintf_r+0x50>
 800756c:	ebba 0b04 	subs.w	fp, sl, r4
 8007570:	d00b      	beq.n	800758a <_svfiprintf_r+0x7a>
 8007572:	465b      	mov	r3, fp
 8007574:	4622      	mov	r2, r4
 8007576:	4629      	mov	r1, r5
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff ff6d 	bl	8007458 <__ssputs_r>
 800757e:	3001      	adds	r0, #1
 8007580:	f000 80aa 	beq.w	80076d8 <_svfiprintf_r+0x1c8>
 8007584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007586:	445a      	add	r2, fp
 8007588:	9209      	str	r2, [sp, #36]	; 0x24
 800758a:	f89a 3000 	ldrb.w	r3, [sl]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80a2 	beq.w	80076d8 <_svfiprintf_r+0x1c8>
 8007594:	2300      	movs	r3, #0
 8007596:	f04f 32ff 	mov.w	r2, #4294967295
 800759a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800759e:	f10a 0a01 	add.w	sl, sl, #1
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	9307      	str	r3, [sp, #28]
 80075a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075aa:	931a      	str	r3, [sp, #104]	; 0x68
 80075ac:	4654      	mov	r4, sl
 80075ae:	2205      	movs	r2, #5
 80075b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b4:	4851      	ldr	r0, [pc, #324]	; (80076fc <_svfiprintf_r+0x1ec>)
 80075b6:	f7f8 fe5b 	bl	8000270 <memchr>
 80075ba:	9a04      	ldr	r2, [sp, #16]
 80075bc:	b9d8      	cbnz	r0, 80075f6 <_svfiprintf_r+0xe6>
 80075be:	06d0      	lsls	r0, r2, #27
 80075c0:	bf44      	itt	mi
 80075c2:	2320      	movmi	r3, #32
 80075c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c8:	0711      	lsls	r1, r2, #28
 80075ca:	bf44      	itt	mi
 80075cc:	232b      	movmi	r3, #43	; 0x2b
 80075ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d2:	f89a 3000 	ldrb.w	r3, [sl]
 80075d6:	2b2a      	cmp	r3, #42	; 0x2a
 80075d8:	d015      	beq.n	8007606 <_svfiprintf_r+0xf6>
 80075da:	9a07      	ldr	r2, [sp, #28]
 80075dc:	4654      	mov	r4, sl
 80075de:	2000      	movs	r0, #0
 80075e0:	f04f 0c0a 	mov.w	ip, #10
 80075e4:	4621      	mov	r1, r4
 80075e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ea:	3b30      	subs	r3, #48	; 0x30
 80075ec:	2b09      	cmp	r3, #9
 80075ee:	d94e      	bls.n	800768e <_svfiprintf_r+0x17e>
 80075f0:	b1b0      	cbz	r0, 8007620 <_svfiprintf_r+0x110>
 80075f2:	9207      	str	r2, [sp, #28]
 80075f4:	e014      	b.n	8007620 <_svfiprintf_r+0x110>
 80075f6:	eba0 0308 	sub.w	r3, r0, r8
 80075fa:	fa09 f303 	lsl.w	r3, r9, r3
 80075fe:	4313      	orrs	r3, r2
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	46a2      	mov	sl, r4
 8007604:	e7d2      	b.n	80075ac <_svfiprintf_r+0x9c>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	1d19      	adds	r1, r3, #4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	9103      	str	r1, [sp, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	bfbb      	ittet	lt
 8007612:	425b      	neglt	r3, r3
 8007614:	f042 0202 	orrlt.w	r2, r2, #2
 8007618:	9307      	strge	r3, [sp, #28]
 800761a:	9307      	strlt	r3, [sp, #28]
 800761c:	bfb8      	it	lt
 800761e:	9204      	strlt	r2, [sp, #16]
 8007620:	7823      	ldrb	r3, [r4, #0]
 8007622:	2b2e      	cmp	r3, #46	; 0x2e
 8007624:	d10c      	bne.n	8007640 <_svfiprintf_r+0x130>
 8007626:	7863      	ldrb	r3, [r4, #1]
 8007628:	2b2a      	cmp	r3, #42	; 0x2a
 800762a:	d135      	bne.n	8007698 <_svfiprintf_r+0x188>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9203      	str	r2, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfb8      	it	lt
 8007638:	f04f 33ff 	movlt.w	r3, #4294967295
 800763c:	3402      	adds	r4, #2
 800763e:	9305      	str	r3, [sp, #20]
 8007640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800770c <_svfiprintf_r+0x1fc>
 8007644:	7821      	ldrb	r1, [r4, #0]
 8007646:	2203      	movs	r2, #3
 8007648:	4650      	mov	r0, sl
 800764a:	f7f8 fe11 	bl	8000270 <memchr>
 800764e:	b140      	cbz	r0, 8007662 <_svfiprintf_r+0x152>
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	eba0 000a 	sub.w	r0, r0, sl
 8007656:	fa03 f000 	lsl.w	r0, r3, r0
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	4303      	orrs	r3, r0
 800765e:	3401      	adds	r4, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007666:	4826      	ldr	r0, [pc, #152]	; (8007700 <_svfiprintf_r+0x1f0>)
 8007668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800766c:	2206      	movs	r2, #6
 800766e:	f7f8 fdff 	bl	8000270 <memchr>
 8007672:	2800      	cmp	r0, #0
 8007674:	d038      	beq.n	80076e8 <_svfiprintf_r+0x1d8>
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <_svfiprintf_r+0x1f4>)
 8007678:	bb1b      	cbnz	r3, 80076c2 <_svfiprintf_r+0x1b2>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	3307      	adds	r3, #7
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	3308      	adds	r3, #8
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	4433      	add	r3, r6
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
 800768c:	e767      	b.n	800755e <_svfiprintf_r+0x4e>
 800768e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007692:	460c      	mov	r4, r1
 8007694:	2001      	movs	r0, #1
 8007696:	e7a5      	b.n	80075e4 <_svfiprintf_r+0xd4>
 8007698:	2300      	movs	r3, #0
 800769a:	3401      	adds	r4, #1
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	4619      	mov	r1, r3
 80076a0:	f04f 0c0a 	mov.w	ip, #10
 80076a4:	4620      	mov	r0, r4
 80076a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076aa:	3a30      	subs	r2, #48	; 0x30
 80076ac:	2a09      	cmp	r2, #9
 80076ae:	d903      	bls.n	80076b8 <_svfiprintf_r+0x1a8>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0c5      	beq.n	8007640 <_svfiprintf_r+0x130>
 80076b4:	9105      	str	r1, [sp, #20]
 80076b6:	e7c3      	b.n	8007640 <_svfiprintf_r+0x130>
 80076b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076bc:	4604      	mov	r4, r0
 80076be:	2301      	movs	r3, #1
 80076c0:	e7f0      	b.n	80076a4 <_svfiprintf_r+0x194>
 80076c2:	ab03      	add	r3, sp, #12
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	462a      	mov	r2, r5
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <_svfiprintf_r+0x1f8>)
 80076ca:	a904      	add	r1, sp, #16
 80076cc:	4638      	mov	r0, r7
 80076ce:	f3af 8000 	nop.w
 80076d2:	1c42      	adds	r2, r0, #1
 80076d4:	4606      	mov	r6, r0
 80076d6:	d1d6      	bne.n	8007686 <_svfiprintf_r+0x176>
 80076d8:	89ab      	ldrh	r3, [r5, #12]
 80076da:	065b      	lsls	r3, r3, #25
 80076dc:	f53f af2c 	bmi.w	8007538 <_svfiprintf_r+0x28>
 80076e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076e2:	b01d      	add	sp, #116	; 0x74
 80076e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e8:	ab03      	add	r3, sp, #12
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	462a      	mov	r2, r5
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <_svfiprintf_r+0x1f8>)
 80076f0:	a904      	add	r1, sp, #16
 80076f2:	4638      	mov	r0, r7
 80076f4:	f000 f87a 	bl	80077ec <_printf_i>
 80076f8:	e7eb      	b.n	80076d2 <_svfiprintf_r+0x1c2>
 80076fa:	bf00      	nop
 80076fc:	08007e6c 	.word	0x08007e6c
 8007700:	08007e76 	.word	0x08007e76
 8007704:	00000000 	.word	0x00000000
 8007708:	08007459 	.word	0x08007459
 800770c:	08007e72 	.word	0x08007e72

08007710 <_printf_common>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	4616      	mov	r6, r2
 8007716:	4699      	mov	r9, r3
 8007718:	688a      	ldr	r2, [r1, #8]
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007720:	4293      	cmp	r3, r2
 8007722:	bfb8      	it	lt
 8007724:	4613      	movlt	r3, r2
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800772c:	4607      	mov	r7, r0
 800772e:	460c      	mov	r4, r1
 8007730:	b10a      	cbz	r2, 8007736 <_printf_common+0x26>
 8007732:	3301      	adds	r3, #1
 8007734:	6033      	str	r3, [r6, #0]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	0699      	lsls	r1, r3, #26
 800773a:	bf42      	ittt	mi
 800773c:	6833      	ldrmi	r3, [r6, #0]
 800773e:	3302      	addmi	r3, #2
 8007740:	6033      	strmi	r3, [r6, #0]
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	f015 0506 	ands.w	r5, r5, #6
 8007748:	d106      	bne.n	8007758 <_printf_common+0x48>
 800774a:	f104 0a19 	add.w	sl, r4, #25
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	6832      	ldr	r2, [r6, #0]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	42ab      	cmp	r3, r5
 8007756:	dc26      	bgt.n	80077a6 <_printf_common+0x96>
 8007758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800775c:	1e13      	subs	r3, r2, #0
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	bf18      	it	ne
 8007762:	2301      	movne	r3, #1
 8007764:	0692      	lsls	r2, r2, #26
 8007766:	d42b      	bmi.n	80077c0 <_printf_common+0xb0>
 8007768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800776c:	4649      	mov	r1, r9
 800776e:	4638      	mov	r0, r7
 8007770:	47c0      	blx	r8
 8007772:	3001      	adds	r0, #1
 8007774:	d01e      	beq.n	80077b4 <_printf_common+0xa4>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	68e5      	ldr	r5, [r4, #12]
 800777a:	6832      	ldr	r2, [r6, #0]
 800777c:	f003 0306 	and.w	r3, r3, #6
 8007780:	2b04      	cmp	r3, #4
 8007782:	bf08      	it	eq
 8007784:	1aad      	subeq	r5, r5, r2
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	bf0c      	ite	eq
 800778c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007790:	2500      	movne	r5, #0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfc4      	itt	gt
 8007796:	1a9b      	subgt	r3, r3, r2
 8007798:	18ed      	addgt	r5, r5, r3
 800779a:	2600      	movs	r6, #0
 800779c:	341a      	adds	r4, #26
 800779e:	42b5      	cmp	r5, r6
 80077a0:	d11a      	bne.n	80077d8 <_printf_common+0xc8>
 80077a2:	2000      	movs	r0, #0
 80077a4:	e008      	b.n	80077b8 <_printf_common+0xa8>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4652      	mov	r2, sl
 80077aa:	4649      	mov	r1, r9
 80077ac:	4638      	mov	r0, r7
 80077ae:	47c0      	blx	r8
 80077b0:	3001      	adds	r0, #1
 80077b2:	d103      	bne.n	80077bc <_printf_common+0xac>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	3501      	adds	r5, #1
 80077be:	e7c6      	b.n	800774e <_printf_common+0x3e>
 80077c0:	18e1      	adds	r1, r4, r3
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	2030      	movs	r0, #48	; 0x30
 80077c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ca:	4422      	add	r2, r4
 80077cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d4:	3302      	adds	r3, #2
 80077d6:	e7c7      	b.n	8007768 <_printf_common+0x58>
 80077d8:	2301      	movs	r3, #1
 80077da:	4622      	mov	r2, r4
 80077dc:	4649      	mov	r1, r9
 80077de:	4638      	mov	r0, r7
 80077e0:	47c0      	blx	r8
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0e6      	beq.n	80077b4 <_printf_common+0xa4>
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7d9      	b.n	800779e <_printf_common+0x8e>
	...

080077ec <_printf_i>:
 80077ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	7e0f      	ldrb	r7, [r1, #24]
 80077f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f4:	2f78      	cmp	r7, #120	; 0x78
 80077f6:	4691      	mov	r9, r2
 80077f8:	4680      	mov	r8, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	469a      	mov	sl, r3
 80077fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007802:	d807      	bhi.n	8007814 <_printf_i+0x28>
 8007804:	2f62      	cmp	r7, #98	; 0x62
 8007806:	d80a      	bhi.n	800781e <_printf_i+0x32>
 8007808:	2f00      	cmp	r7, #0
 800780a:	f000 80d8 	beq.w	80079be <_printf_i+0x1d2>
 800780e:	2f58      	cmp	r7, #88	; 0x58
 8007810:	f000 80a3 	beq.w	800795a <_printf_i+0x16e>
 8007814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800781c:	e03a      	b.n	8007894 <_printf_i+0xa8>
 800781e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007822:	2b15      	cmp	r3, #21
 8007824:	d8f6      	bhi.n	8007814 <_printf_i+0x28>
 8007826:	a101      	add	r1, pc, #4	; (adr r1, 800782c <_printf_i+0x40>)
 8007828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800782c:	08007885 	.word	0x08007885
 8007830:	08007899 	.word	0x08007899
 8007834:	08007815 	.word	0x08007815
 8007838:	08007815 	.word	0x08007815
 800783c:	08007815 	.word	0x08007815
 8007840:	08007815 	.word	0x08007815
 8007844:	08007899 	.word	0x08007899
 8007848:	08007815 	.word	0x08007815
 800784c:	08007815 	.word	0x08007815
 8007850:	08007815 	.word	0x08007815
 8007854:	08007815 	.word	0x08007815
 8007858:	080079a5 	.word	0x080079a5
 800785c:	080078c9 	.word	0x080078c9
 8007860:	08007987 	.word	0x08007987
 8007864:	08007815 	.word	0x08007815
 8007868:	08007815 	.word	0x08007815
 800786c:	080079c7 	.word	0x080079c7
 8007870:	08007815 	.word	0x08007815
 8007874:	080078c9 	.word	0x080078c9
 8007878:	08007815 	.word	0x08007815
 800787c:	08007815 	.word	0x08007815
 8007880:	0800798f 	.word	0x0800798f
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	602a      	str	r2, [r5, #0]
 800788c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007894:	2301      	movs	r3, #1
 8007896:	e0a3      	b.n	80079e0 <_printf_i+0x1f4>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	6829      	ldr	r1, [r5, #0]
 800789c:	0606      	lsls	r6, r0, #24
 800789e:	f101 0304 	add.w	r3, r1, #4
 80078a2:	d50a      	bpl.n	80078ba <_printf_i+0xce>
 80078a4:	680e      	ldr	r6, [r1, #0]
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	da03      	bge.n	80078b4 <_printf_i+0xc8>
 80078ac:	232d      	movs	r3, #45	; 0x2d
 80078ae:	4276      	negs	r6, r6
 80078b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b4:	485e      	ldr	r0, [pc, #376]	; (8007a30 <_printf_i+0x244>)
 80078b6:	230a      	movs	r3, #10
 80078b8:	e019      	b.n	80078ee <_printf_i+0x102>
 80078ba:	680e      	ldr	r6, [r1, #0]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078c2:	bf18      	it	ne
 80078c4:	b236      	sxthne	r6, r6
 80078c6:	e7ef      	b.n	80078a8 <_printf_i+0xbc>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1d19      	adds	r1, r3, #4
 80078ce:	6029      	str	r1, [r5, #0]
 80078d0:	0601      	lsls	r1, r0, #24
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0xec>
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	e002      	b.n	80078de <_printf_i+0xf2>
 80078d8:	0646      	lsls	r6, r0, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0xe8>
 80078dc:	881e      	ldrh	r6, [r3, #0]
 80078de:	4854      	ldr	r0, [pc, #336]	; (8007a30 <_printf_i+0x244>)
 80078e0:	2f6f      	cmp	r7, #111	; 0x6f
 80078e2:	bf0c      	ite	eq
 80078e4:	2308      	moveq	r3, #8
 80078e6:	230a      	movne	r3, #10
 80078e8:	2100      	movs	r1, #0
 80078ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ee:	6865      	ldr	r5, [r4, #4]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	bfa2      	ittt	ge
 80078f6:	6821      	ldrge	r1, [r4, #0]
 80078f8:	f021 0104 	bicge.w	r1, r1, #4
 80078fc:	6021      	strge	r1, [r4, #0]
 80078fe:	b90e      	cbnz	r6, 8007904 <_printf_i+0x118>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d04d      	beq.n	80079a0 <_printf_i+0x1b4>
 8007904:	4615      	mov	r5, r2
 8007906:	fbb6 f1f3 	udiv	r1, r6, r3
 800790a:	fb03 6711 	mls	r7, r3, r1, r6
 800790e:	5dc7      	ldrb	r7, [r0, r7]
 8007910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007914:	4637      	mov	r7, r6
 8007916:	42bb      	cmp	r3, r7
 8007918:	460e      	mov	r6, r1
 800791a:	d9f4      	bls.n	8007906 <_printf_i+0x11a>
 800791c:	2b08      	cmp	r3, #8
 800791e:	d10b      	bne.n	8007938 <_printf_i+0x14c>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07de      	lsls	r6, r3, #31
 8007924:	d508      	bpl.n	8007938 <_printf_i+0x14c>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfde      	ittt	le
 800792e:	2330      	movle	r3, #48	; 0x30
 8007930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007938:	1b52      	subs	r2, r2, r5
 800793a:	6122      	str	r2, [r4, #16]
 800793c:	f8cd a000 	str.w	sl, [sp]
 8007940:	464b      	mov	r3, r9
 8007942:	aa03      	add	r2, sp, #12
 8007944:	4621      	mov	r1, r4
 8007946:	4640      	mov	r0, r8
 8007948:	f7ff fee2 	bl	8007710 <_printf_common>
 800794c:	3001      	adds	r0, #1
 800794e:	d14c      	bne.n	80079ea <_printf_i+0x1fe>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	b004      	add	sp, #16
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	4835      	ldr	r0, [pc, #212]	; (8007a30 <_printf_i+0x244>)
 800795c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007960:	6829      	ldr	r1, [r5, #0]
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f851 6b04 	ldr.w	r6, [r1], #4
 8007968:	6029      	str	r1, [r5, #0]
 800796a:	061d      	lsls	r5, r3, #24
 800796c:	d514      	bpl.n	8007998 <_printf_i+0x1ac>
 800796e:	07df      	lsls	r7, r3, #31
 8007970:	bf44      	itt	mi
 8007972:	f043 0320 	orrmi.w	r3, r3, #32
 8007976:	6023      	strmi	r3, [r4, #0]
 8007978:	b91e      	cbnz	r6, 8007982 <_printf_i+0x196>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f023 0320 	bic.w	r3, r3, #32
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	2310      	movs	r3, #16
 8007984:	e7b0      	b.n	80078e8 <_printf_i+0xfc>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f043 0320 	orr.w	r3, r3, #32
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	2378      	movs	r3, #120	; 0x78
 8007990:	4828      	ldr	r0, [pc, #160]	; (8007a34 <_printf_i+0x248>)
 8007992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007996:	e7e3      	b.n	8007960 <_printf_i+0x174>
 8007998:	0659      	lsls	r1, r3, #25
 800799a:	bf48      	it	mi
 800799c:	b2b6      	uxthmi	r6, r6
 800799e:	e7e6      	b.n	800796e <_printf_i+0x182>
 80079a0:	4615      	mov	r5, r2
 80079a2:	e7bb      	b.n	800791c <_printf_i+0x130>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	6826      	ldr	r6, [r4, #0]
 80079a8:	6961      	ldr	r1, [r4, #20]
 80079aa:	1d18      	adds	r0, r3, #4
 80079ac:	6028      	str	r0, [r5, #0]
 80079ae:	0635      	lsls	r5, r6, #24
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0x1cc>
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	e002      	b.n	80079be <_printf_i+0x1d2>
 80079b8:	0670      	lsls	r0, r6, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0x1c8>
 80079bc:	8019      	strh	r1, [r3, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	6123      	str	r3, [r4, #16]
 80079c2:	4615      	mov	r5, r2
 80079c4:	e7ba      	b.n	800793c <_printf_i+0x150>
 80079c6:	682b      	ldr	r3, [r5, #0]
 80079c8:	1d1a      	adds	r2, r3, #4
 80079ca:	602a      	str	r2, [r5, #0]
 80079cc:	681d      	ldr	r5, [r3, #0]
 80079ce:	6862      	ldr	r2, [r4, #4]
 80079d0:	2100      	movs	r1, #0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7f8 fc4c 	bl	8000270 <memchr>
 80079d8:	b108      	cbz	r0, 80079de <_printf_i+0x1f2>
 80079da:	1b40      	subs	r0, r0, r5
 80079dc:	6060      	str	r0, [r4, #4]
 80079de:	6863      	ldr	r3, [r4, #4]
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	2300      	movs	r3, #0
 80079e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e8:	e7a8      	b.n	800793c <_printf_i+0x150>
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	462a      	mov	r2, r5
 80079ee:	4649      	mov	r1, r9
 80079f0:	4640      	mov	r0, r8
 80079f2:	47d0      	blx	sl
 80079f4:	3001      	adds	r0, #1
 80079f6:	d0ab      	beq.n	8007950 <_printf_i+0x164>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	079b      	lsls	r3, r3, #30
 80079fc:	d413      	bmi.n	8007a26 <_printf_i+0x23a>
 80079fe:	68e0      	ldr	r0, [r4, #12]
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	4298      	cmp	r0, r3
 8007a04:	bfb8      	it	lt
 8007a06:	4618      	movlt	r0, r3
 8007a08:	e7a4      	b.n	8007954 <_printf_i+0x168>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	47d0      	blx	sl
 8007a14:	3001      	adds	r0, #1
 8007a16:	d09b      	beq.n	8007950 <_printf_i+0x164>
 8007a18:	3501      	adds	r5, #1
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	9903      	ldr	r1, [sp, #12]
 8007a1e:	1a5b      	subs	r3, r3, r1
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	dcf2      	bgt.n	8007a0a <_printf_i+0x21e>
 8007a24:	e7eb      	b.n	80079fe <_printf_i+0x212>
 8007a26:	2500      	movs	r5, #0
 8007a28:	f104 0619 	add.w	r6, r4, #25
 8007a2c:	e7f5      	b.n	8007a1a <_printf_i+0x22e>
 8007a2e:	bf00      	nop
 8007a30:	08007e7d 	.word	0x08007e7d
 8007a34:	08007e8e 	.word	0x08007e8e

08007a38 <memmove>:
 8007a38:	4288      	cmp	r0, r1
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	eb01 0402 	add.w	r4, r1, r2
 8007a40:	d902      	bls.n	8007a48 <memmove+0x10>
 8007a42:	4284      	cmp	r4, r0
 8007a44:	4623      	mov	r3, r4
 8007a46:	d807      	bhi.n	8007a58 <memmove+0x20>
 8007a48:	1e43      	subs	r3, r0, #1
 8007a4a:	42a1      	cmp	r1, r4
 8007a4c:	d008      	beq.n	8007a60 <memmove+0x28>
 8007a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a56:	e7f8      	b.n	8007a4a <memmove+0x12>
 8007a58:	4402      	add	r2, r0
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	428a      	cmp	r2, r1
 8007a5e:	d100      	bne.n	8007a62 <memmove+0x2a>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a6a:	e7f7      	b.n	8007a5c <memmove+0x24>

08007a6c <_free_r>:
 8007a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d044      	beq.n	8007afc <_free_r+0x90>
 8007a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a7e:	bfb8      	it	lt
 8007a80:	18e4      	addlt	r4, r4, r3
 8007a82:	f000 f913 	bl	8007cac <__malloc_lock>
 8007a86:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <_free_r+0x94>)
 8007a88:	9801      	ldr	r0, [sp, #4]
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	b933      	cbnz	r3, 8007a9c <_free_r+0x30>
 8007a8e:	6063      	str	r3, [r4, #4]
 8007a90:	6014      	str	r4, [r2, #0]
 8007a92:	b003      	add	sp, #12
 8007a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a98:	f000 b90e 	b.w	8007cb8 <__malloc_unlock>
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d908      	bls.n	8007ab2 <_free_r+0x46>
 8007aa0:	6825      	ldr	r5, [r4, #0]
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	bf01      	itttt	eq
 8007aa8:	6819      	ldreq	r1, [r3, #0]
 8007aaa:	685b      	ldreq	r3, [r3, #4]
 8007aac:	1949      	addeq	r1, r1, r5
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	e7ed      	b.n	8007a8e <_free_r+0x22>
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	b10b      	cbz	r3, 8007abc <_free_r+0x50>
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d9fa      	bls.n	8007ab2 <_free_r+0x46>
 8007abc:	6811      	ldr	r1, [r2, #0]
 8007abe:	1855      	adds	r5, r2, r1
 8007ac0:	42a5      	cmp	r5, r4
 8007ac2:	d10b      	bne.n	8007adc <_free_r+0x70>
 8007ac4:	6824      	ldr	r4, [r4, #0]
 8007ac6:	4421      	add	r1, r4
 8007ac8:	1854      	adds	r4, r2, r1
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	d1e0      	bne.n	8007a92 <_free_r+0x26>
 8007ad0:	681c      	ldr	r4, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	6053      	str	r3, [r2, #4]
 8007ad6:	4421      	add	r1, r4
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	e7da      	b.n	8007a92 <_free_r+0x26>
 8007adc:	d902      	bls.n	8007ae4 <_free_r+0x78>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	e7d6      	b.n	8007a92 <_free_r+0x26>
 8007ae4:	6825      	ldr	r5, [r4, #0]
 8007ae6:	1961      	adds	r1, r4, r5
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	bf04      	itt	eq
 8007aec:	6819      	ldreq	r1, [r3, #0]
 8007aee:	685b      	ldreq	r3, [r3, #4]
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	bf04      	itt	eq
 8007af4:	1949      	addeq	r1, r1, r5
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	6054      	str	r4, [r2, #4]
 8007afa:	e7ca      	b.n	8007a92 <_free_r+0x26>
 8007afc:	b003      	add	sp, #12
 8007afe:	bd30      	pop	{r4, r5, pc}
 8007b00:	2001a910 	.word	0x2001a910

08007b04 <sbrk_aligned>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4e0e      	ldr	r6, [pc, #56]	; (8007b40 <sbrk_aligned+0x3c>)
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6831      	ldr	r1, [r6, #0]
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	b911      	cbnz	r1, 8007b16 <sbrk_aligned+0x12>
 8007b10:	f000 f8bc 	bl	8007c8c <_sbrk_r>
 8007b14:	6030      	str	r0, [r6, #0]
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 f8b7 	bl	8007c8c <_sbrk_r>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	d00a      	beq.n	8007b38 <sbrk_aligned+0x34>
 8007b22:	1cc4      	adds	r4, r0, #3
 8007b24:	f024 0403 	bic.w	r4, r4, #3
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d007      	beq.n	8007b3c <sbrk_aligned+0x38>
 8007b2c:	1a21      	subs	r1, r4, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 f8ac 	bl	8007c8c <_sbrk_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d101      	bne.n	8007b3c <sbrk_aligned+0x38>
 8007b38:	f04f 34ff 	mov.w	r4, #4294967295
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	2001a914 	.word	0x2001a914

08007b44 <_malloc_r>:
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	1ccd      	adds	r5, r1, #3
 8007b4a:	f025 0503 	bic.w	r5, r5, #3
 8007b4e:	3508      	adds	r5, #8
 8007b50:	2d0c      	cmp	r5, #12
 8007b52:	bf38      	it	cc
 8007b54:	250c      	movcc	r5, #12
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	4607      	mov	r7, r0
 8007b5a:	db01      	blt.n	8007b60 <_malloc_r+0x1c>
 8007b5c:	42a9      	cmp	r1, r5
 8007b5e:	d905      	bls.n	8007b6c <_malloc_r+0x28>
 8007b60:	230c      	movs	r3, #12
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	2600      	movs	r6, #0
 8007b66:	4630      	mov	r0, r6
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	4e2e      	ldr	r6, [pc, #184]	; (8007c28 <_malloc_r+0xe4>)
 8007b6e:	f000 f89d 	bl	8007cac <__malloc_lock>
 8007b72:	6833      	ldr	r3, [r6, #0]
 8007b74:	461c      	mov	r4, r3
 8007b76:	bb34      	cbnz	r4, 8007bc6 <_malloc_r+0x82>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f7ff ffc2 	bl	8007b04 <sbrk_aligned>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	4604      	mov	r4, r0
 8007b84:	d14d      	bne.n	8007c22 <_malloc_r+0xde>
 8007b86:	6834      	ldr	r4, [r6, #0]
 8007b88:	4626      	mov	r6, r4
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d140      	bne.n	8007c10 <_malloc_r+0xcc>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	4631      	mov	r1, r6
 8007b92:	4638      	mov	r0, r7
 8007b94:	eb04 0803 	add.w	r8, r4, r3
 8007b98:	f000 f878 	bl	8007c8c <_sbrk_r>
 8007b9c:	4580      	cmp	r8, r0
 8007b9e:	d13a      	bne.n	8007c16 <_malloc_r+0xd2>
 8007ba0:	6821      	ldr	r1, [r4, #0]
 8007ba2:	3503      	adds	r5, #3
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	f025 0503 	bic.w	r5, r5, #3
 8007baa:	3508      	adds	r5, #8
 8007bac:	2d0c      	cmp	r5, #12
 8007bae:	bf38      	it	cc
 8007bb0:	250c      	movcc	r5, #12
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ffa5 	bl	8007b04 <sbrk_aligned>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d02b      	beq.n	8007c16 <_malloc_r+0xd2>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	442b      	add	r3, r5
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	e00e      	b.n	8007be4 <_malloc_r+0xa0>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	1b52      	subs	r2, r2, r5
 8007bca:	d41e      	bmi.n	8007c0a <_malloc_r+0xc6>
 8007bcc:	2a0b      	cmp	r2, #11
 8007bce:	d916      	bls.n	8007bfe <_malloc_r+0xba>
 8007bd0:	1961      	adds	r1, r4, r5
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	6025      	str	r5, [r4, #0]
 8007bd6:	bf18      	it	ne
 8007bd8:	6059      	strne	r1, [r3, #4]
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	bf08      	it	eq
 8007bde:	6031      	streq	r1, [r6, #0]
 8007be0:	5162      	str	r2, [r4, r5]
 8007be2:	604b      	str	r3, [r1, #4]
 8007be4:	4638      	mov	r0, r7
 8007be6:	f104 060b 	add.w	r6, r4, #11
 8007bea:	f000 f865 	bl	8007cb8 <__malloc_unlock>
 8007bee:	f026 0607 	bic.w	r6, r6, #7
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	1af2      	subs	r2, r6, r3
 8007bf6:	d0b6      	beq.n	8007b66 <_malloc_r+0x22>
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	50a3      	str	r3, [r4, r2]
 8007bfc:	e7b3      	b.n	8007b66 <_malloc_r+0x22>
 8007bfe:	6862      	ldr	r2, [r4, #4]
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	bf0c      	ite	eq
 8007c04:	6032      	streq	r2, [r6, #0]
 8007c06:	605a      	strne	r2, [r3, #4]
 8007c08:	e7ec      	b.n	8007be4 <_malloc_r+0xa0>
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	6864      	ldr	r4, [r4, #4]
 8007c0e:	e7b2      	b.n	8007b76 <_malloc_r+0x32>
 8007c10:	4634      	mov	r4, r6
 8007c12:	6876      	ldr	r6, [r6, #4]
 8007c14:	e7b9      	b.n	8007b8a <_malloc_r+0x46>
 8007c16:	230c      	movs	r3, #12
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f000 f84c 	bl	8007cb8 <__malloc_unlock>
 8007c20:	e7a1      	b.n	8007b66 <_malloc_r+0x22>
 8007c22:	6025      	str	r5, [r4, #0]
 8007c24:	e7de      	b.n	8007be4 <_malloc_r+0xa0>
 8007c26:	bf00      	nop
 8007c28:	2001a910 	.word	0x2001a910

08007c2c <_realloc_r>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4680      	mov	r8, r0
 8007c32:	4614      	mov	r4, r2
 8007c34:	460e      	mov	r6, r1
 8007c36:	b921      	cbnz	r1, 8007c42 <_realloc_r+0x16>
 8007c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	f7ff bf81 	b.w	8007b44 <_malloc_r>
 8007c42:	b92a      	cbnz	r2, 8007c50 <_realloc_r+0x24>
 8007c44:	f7ff ff12 	bl	8007a6c <_free_r>
 8007c48:	4625      	mov	r5, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	f000 f838 	bl	8007cc4 <_malloc_usable_size_r>
 8007c54:	4284      	cmp	r4, r0
 8007c56:	4607      	mov	r7, r0
 8007c58:	d802      	bhi.n	8007c60 <_realloc_r+0x34>
 8007c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c5e:	d812      	bhi.n	8007c86 <_realloc_r+0x5a>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff ff6e 	bl	8007b44 <_malloc_r>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0ed      	beq.n	8007c4a <_realloc_r+0x1e>
 8007c6e:	42bc      	cmp	r4, r7
 8007c70:	4622      	mov	r2, r4
 8007c72:	4631      	mov	r1, r6
 8007c74:	bf28      	it	cs
 8007c76:	463a      	movcs	r2, r7
 8007c78:	f7ff fba4 	bl	80073c4 <memcpy>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff fef4 	bl	8007a6c <_free_r>
 8007c84:	e7e1      	b.n	8007c4a <_realloc_r+0x1e>
 8007c86:	4635      	mov	r5, r6
 8007c88:	e7df      	b.n	8007c4a <_realloc_r+0x1e>
	...

08007c8c <_sbrk_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d06      	ldr	r5, [pc, #24]	; (8007ca8 <_sbrk_r+0x1c>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f000 f81e 	bl	8007cd8 <_sbrk>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_sbrk_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_sbrk_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	2001a918 	.word	0x2001a918

08007cac <__malloc_lock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__malloc_lock+0x8>)
 8007cae:	f000 b811 	b.w	8007cd4 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	2001a91c 	.word	0x2001a91c

08007cb8 <__malloc_unlock>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	; (8007cc0 <__malloc_unlock+0x8>)
 8007cba:	f000 b80c 	b.w	8007cd6 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	2001a91c 	.word	0x2001a91c

08007cc4 <_malloc_usable_size_r>:
 8007cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc8:	1f18      	subs	r0, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbc      	itt	lt
 8007cce:	580b      	ldrlt	r3, [r1, r0]
 8007cd0:	18c0      	addlt	r0, r0, r3
 8007cd2:	4770      	bx	lr

08007cd4 <__retarget_lock_acquire_recursive>:
 8007cd4:	4770      	bx	lr

08007cd6 <__retarget_lock_release_recursive>:
 8007cd6:	4770      	bx	lr

08007cd8 <_sbrk>:
 8007cd8:	4a04      	ldr	r2, [pc, #16]	; (8007cec <_sbrk+0x14>)
 8007cda:	6811      	ldr	r1, [r2, #0]
 8007cdc:	4603      	mov	r3, r0
 8007cde:	b909      	cbnz	r1, 8007ce4 <_sbrk+0xc>
 8007ce0:	4903      	ldr	r1, [pc, #12]	; (8007cf0 <_sbrk+0x18>)
 8007ce2:	6011      	str	r1, [r2, #0]
 8007ce4:	6810      	ldr	r0, [r2, #0]
 8007ce6:	4403      	add	r3, r0
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	4770      	bx	lr
 8007cec:	2001a920 	.word	0x2001a920
 8007cf0:	2001a928 	.word	0x2001a928

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
