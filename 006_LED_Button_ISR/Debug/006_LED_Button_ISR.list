
006_LED_Button_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001a824  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a840  2001a840  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f69  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fb  00000000  00000000  00032fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022956  00000000  00000000  00037b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001332e  00000000  00000000  0005a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d600f  00000000  00000000  0006d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014382b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000497c  00000000  00000000  0014387c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006718 	.word	0x08006718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006718 	.word	0x08006718

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019264 	.word	0x20019264

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc3f 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f877 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8df 	bl	8000738 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	482e      	ldr	r0, [pc, #184]	; (8000634 <main+0xcc>)
 800057c:	f005 ff9c 	bl	80064b8 <SEGGER_UART_init>

  //CYCLCNT enable for SEGGER view
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <main+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <main+0xd0>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f003 fada 	bl	8003b44 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <main+0xd4>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4928      	ldr	r1, [pc, #160]	; (8000640 <main+0xd8>)
 800059e:	4829      	ldr	r0, [pc, #164]	; (8000644 <main+0xdc>)
 80005a0:	f001 ff56 	bl	8002450 <xTaskCreate>
 80005a4:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>
  next_task_handle =task1_handle;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <main+0xd4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <main+0xe0>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <main+0xe4>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	491e      	ldr	r1, [pc, #120]	; (8000650 <main+0xe8>)
 80005d8:	481e      	ldr	r0, [pc, #120]	; (8000654 <main+0xec>)
 80005da:	f001 ff39 	bl	8002450 <xTaskCreate>
 80005de:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	607b      	str	r3, [r7, #4]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <main+0xf0>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	4914      	ldr	r1, [pc, #80]	; (800065c <main+0xf4>)
 800060a:	4815      	ldr	r0, [pc, #84]	; (8000660 <main+0xf8>)
 800060c:	f001 ff20 	bl	8002450 <xTaskCreate>
 8000610:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	603b      	str	r3, [r7, #0]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062e:	f002 f91d 	bl	800286c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0xca>
 8000634:	0007a120 	.word	0x0007a120
 8000638:	e0001000 	.word	0xe0001000
 800063c:	20000038 	.word	0x20000038
 8000640:	08006730 	.word	0x08006730
 8000644:	08000a5d 	.word	0x08000a5d
 8000648:	20000044 	.word	0x20000044
 800064c:	2000003c 	.word	0x2000003c
 8000650:	08006740 	.word	0x08006740
 8000654:	08000b39 	.word	0x08000b39
 8000658:	20000040 	.word	0x20000040
 800065c:	08006750 	.word	0x08006750
 8000660:	08000acd 	.word	0x08000acd

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f848 	bl	8006708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d8:	23a8      	movs	r3, #168	; 0xa8
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fe99 	bl	8001420 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 fa6a 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f8fa 	bl	8001910 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 fa53 	bl	8000bcc <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4ba6      	ldr	r3, [pc, #664]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4aa5      	ldr	r2, [pc, #660]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4ba3      	ldr	r3, [pc, #652]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b9f      	ldr	r3, [pc, #636]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a9e      	ldr	r2, [pc, #632]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b9c      	ldr	r3, [pc, #624]	; (80009ec <MX_GPIO_Init+0x2b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b98      	ldr	r3, [pc, #608]	; (80009ec <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a97      	ldr	r2, [pc, #604]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b95      	ldr	r3, [pc, #596]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b91      	ldr	r3, [pc, #580]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a90      	ldr	r2, [pc, #576]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b8e      	ldr	r3, [pc, #568]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b8a      	ldr	r3, [pc, #552]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a89      	ldr	r2, [pc, #548]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b87      	ldr	r3, [pc, #540]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b83      	ldr	r3, [pc, #524]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a82      	ldr	r2, [pc, #520]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b80      	ldr	r3, [pc, #512]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	487d      	ldr	r0, [pc, #500]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 80007fc:	f000 fdb8 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	487b      	ldr	r0, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x2bc>)
 8000806:	f000 fdb3 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080a:	2200      	movs	r2, #0
 800080c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000810:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2c0>)
 8000812:	f000 fdad 	bl	8001370 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000816:	2308      	movs	r3, #8
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4870      	ldr	r0, [pc, #448]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 800082e:	f000 fc03 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	486a      	ldr	r0, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x2bc>)
 800084a:	f000 fbf5 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085e:	2305      	movs	r3, #5
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4862      	ldr	r0, [pc, #392]	; (80009f4 <MX_GPIO_Init+0x2bc>)
 800086a:	f000 fbe5 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	485e      	ldr	r0, [pc, #376]	; (80009fc <MX_GPIO_Init+0x2c4>)
 8000884:	f000 fbd8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000888:	2310      	movs	r3, #16
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000898:	2306      	movs	r3, #6
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4856      	ldr	r0, [pc, #344]	; (80009fc <MX_GPIO_Init+0x2c4>)
 80008a4:	f000 fbc8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a8:	23e0      	movs	r3, #224	; 0xe0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b8:	2305      	movs	r3, #5
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	484e      	ldr	r0, [pc, #312]	; (80009fc <MX_GPIO_Init+0x2c4>)
 80008c4:	f000 fbb8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4849      	ldr	r0, [pc, #292]	; (8000a00 <MX_GPIO_Init+0x2c8>)
 80008dc:	f000 fbac 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4840      	ldr	r0, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x2c8>)
 80008fe:	f000 fb9b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000906:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4837      	ldr	r0, [pc, #220]	; (80009f8 <MX_GPIO_Init+0x2c0>)
 800091c:	f000 fb8c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000920:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000932:	2306      	movs	r3, #6
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x2bc>)
 800093e:	f000 fb7b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x2c4>)
 8000958:	f000 fb6e 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800095c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096e:	230a      	movs	r3, #10
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x2c4>)
 800097a:	f000 fb5d 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097e:	2320      	movs	r3, #32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <MX_GPIO_Init+0x2c0>)
 8000992:	f000 fb51 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000996:	f44f 7310 	mov.w	r3, #576	; 0x240
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a8:	2304      	movs	r3, #4
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x2c8>)
 80009b4:	f000 fb40 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 80009ce:	f000 fb33 	bl	8001038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2106      	movs	r1, #6
 80009d6:	2006      	movs	r0, #6
 80009d8:	f000 fb04 	bl	8000fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009dc:	2006      	movs	r0, #6
 80009de:	f000 fb1d 	bl	800101c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400

08000a04 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken =pdFALSE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();//to inform segger system view about the ISR
 8000a0e:	f005 f959 	bl	8005cc4 <SEGGER_SYSVIEW_RecordEnterISR>
	//If a higher priority task is woken pxHigherPriorityTaskWoken gets equal to pdTRUE
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <button_interrupt_handler+0x50>)
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 fa9e 	bl	8002f64 <xTaskGenericNotifyFromISR>
	//When ISR finishes below macro lets the higher priority task which got unblocked to resume on the CPU
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <button_interrupt_handler+0x40>
 8000a2e:	f005 f9a7 	bl	8005d80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <button_interrupt_handler+0x54>)
 8000a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	f3bf 8f6f 	isb	sy
 8000a42:	e001      	b.n	8000a48 <button_interrupt_handler+0x44>
 8000a44:	f005 f980 	bl	8005d48 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000a48:	f005 f97e 	bl	8005d48 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000044 	.word	0x20000044
 8000a58:	e000ed04 	.word	0xe000ed04

08000a5c <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <led_green_handler+0x5c>)
 8000a66:	f005 fbdf 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <led_green_handler+0x60>)
 8000a70:	f000 fc97 	bl	80013a2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2000      	movs	r0, #0
 8000a82:	f002 f9e7 	bl	8002e54 <xTaskGenericNotifyWait>
 8000a86:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1ea      	bne.n	8000a64 <led_green_handler+0x8>
			 * so instead portEnter_CRITICAL(); should be used.
			 *
			 * portEnter_CRITICAL(); does not block all interrupts it only blocks interrupts which have less priority then
			 * its declared in configMAX_SYSCALL_INTERRUPT_PRIORITY macro.
			 */
			portENTER_CRITICAL();
 8000a8e:	f002 fd23 	bl	80034d8 <vPortEnterCritical>
			next_task_handle=task2_handle;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <led_green_handler+0x64>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <led_green_handler+0x68>)
 8000a98:	6013      	str	r3, [r2, #0]
			portEXIT_CRITICAL();
 8000a9a:	f002 fd4d 	bl	8003538 <vPortExitCritical>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <led_green_handler+0x60>)
 8000aa6:	f000 fc63 	bl	8001370 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Green LED Task");
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <led_green_handler+0x6c>)
 8000aac:	f005 fbbc 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f001 fe31 	bl	8002718 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000ab6:	e7d5      	b.n	8000a64 <led_green_handler+0x8>
 8000ab8:	08006760 	.word	0x08006760
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	20000044 	.word	0x20000044
 8000ac8:	08006774 	.word	0x08006774

08000acc <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <led_orange_handler+0x5c>)
 8000ad6:	f005 fba7 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <led_orange_handler+0x60>)
 8000ae0:	f000 fc5f 	bl	80013a2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000ae4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f002 f9af 	bl	8002e54 <xTaskGenericNotifyWait>
 8000af6:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1ea      	bne.n	8000ad4 <led_orange_handler+0x8>
		{
			portENTER_CRITICAL();
 8000afe:	f002 fceb 	bl	80034d8 <vPortEnterCritical>
			next_task_handle=NULL;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <led_orange_handler+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
			portEXIT_CRITICAL();
 8000b08:	f002 fd16 	bl	8003538 <vPortExitCritical>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <led_orange_handler+0x60>)
 8000b14:	f000 fc2c 	bl	8001370 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Orange LED Task");
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <led_orange_handler+0x68>)
 8000b1a:	f005 fb85 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f001 fdfa 	bl	8002718 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b24:	e7d6      	b.n	8000ad4 <led_orange_handler+0x8>
 8000b26:	bf00      	nop
 8000b28:	0800678c 	.word	0x0800678c
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	20000044 	.word	0x20000044
 8000b34:	080067a0 	.word	0x080067a0

08000b38 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <led_red_handler+0x5c>)
 8000b42:	f005 fb71 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <led_red_handler+0x60>)
 8000b4c:	f000 fc29 	bl	80013a2 <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000b50:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f002 f979 	bl	8002e54 <xTaskGenericNotifyWait>
 8000b62:	60f8      	str	r0, [r7, #12]
		if(status==pdTRUE)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d1ea      	bne.n	8000b40 <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000b6a:	f002 fcb5 	bl	80034d8 <vPortEnterCritical>
			next_task_handle=task3_handle;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <led_red_handler+0x64>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <led_red_handler+0x68>)
 8000b74:	6013      	str	r3, [r2, #0]
			portEXIT_CRITICAL();
 8000b76:	f002 fcdf 	bl	8003538 <vPortExitCritical>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <led_red_handler+0x60>)
 8000b82:	f000 fbf5 	bl	8001370 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete RED LED Task");
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <led_red_handler+0x6c>)
 8000b88:	f005 fb4e 	bl	8006228 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);//When null is given as the parameter,function deletes the task it's in.
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f001 fdc3 	bl	8002718 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling RED LED");
 8000b92:	e7d5      	b.n	8000b40 <led_red_handler+0x8>
 8000b94:	080067b8 	.word	0x080067b8
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	20000040 	.word	0x20000040
 8000ba0:	20000044 	.word	0x20000044
 8000ba4:	080067cc 	.word	0x080067cc

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 f93b 	bl	8000e34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f860 	bl	8001d28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c72:	f001 f845 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8000c76:	6378      	str	r0, [r7, #52]	; 0x34
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7a:	f001 f841 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_InitTick+0xe8>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	0c9b      	lsrs	r3, r3, #18
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_InitTick+0xec>)
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <HAL_InitTick+0xf0>)
 8000c96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <HAL_InitTick+0xec>)
 8000c9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_InitTick+0xec>)
 8000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_InitTick+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_InitTick+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_InitTick+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <HAL_InitTick+0xec>)
 8000cba:	f001 f867 	bl	8001d8c <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <HAL_InitTick+0xec>)
 8000cce:	f001 f8b7 	bl	8001e40 <HAL_TIM_Base_Start_IT>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d111      	bne.n	8000d04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce0:	2036      	movs	r0, #54	; 0x36
 8000ce2:	f000 f99b 	bl	800101c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d808      	bhi.n	8000cfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	2036      	movs	r0, #54	; 0x36
 8000cf2:	f000 f977 	bl	8000fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_InitTick+0xf4>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	e002      	b.n	8000d04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3738      	adds	r7, #56	; 0x38
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	431bde83 	.word	0x431bde83
 8000d18:	20000048 	.word	0x20000048
 8000d1c:	40001000 	.word	0x40001000
 8000d20:	20000004 	.word	0x20000004

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d54:	f7ff fe56 	bl	8000a04 <button_interrupt_handler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f000 fb3d 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */

  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM6_DAC_IRQHandler+0x10>)
 8000d6a:	f001 f8d9 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000048 	.word	0x20000048

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff ffd7 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f005 fc5b 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fbcb 	bl	8000568 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000de0:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 8000de4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000de8:	2001a840 	.word	0x2001a840

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f8d8 	bl	8000fce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff04 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff feda 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000090 	.word	0x20000090

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000090 	.word	0x20000090

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff4c 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff6:	f7ff ff61 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8000ffa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6978      	ldr	r0, [r7, #20]
 8001002:	f7ff ffb1 	bl	8000f68 <NVIC_EncodePriority>
 8001006:	4602      	mov	r2, r0
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff80 	bl	8000f14 <__NVIC_SetPriority>
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff54 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e16b      	b.n	800132c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 815a 	bne.w	8001326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	2b02      	cmp	r3, #2
 8001088:	d130      	bne.n	80010ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 0201 	and.w	r2, r3, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d017      	beq.n	8001128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	69b9      	ldr	r1, [r7, #24]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80b4 	beq.w	8001326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <HAL_GPIO_Init+0x310>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_GPIO_Init+0x314>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x318>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x31c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x320>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x324>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x328>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x20e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x20a>
 800123e:	2307      	movs	r3, #7
 8001240:	e00e      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001242:	2308      	movs	r3, #8
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001246:	2306      	movs	r3, #6
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x228>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x228>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x310>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_GPIO_Init+0x334>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_GPIO_Init+0x334>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_GPIO_Init+0x334>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <HAL_GPIO_Init+0x334>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_GPIO_Init+0x334>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_GPIO_Init+0x334>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_GPIO_Init+0x334>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_GPIO_Init+0x334>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae90 	bls.w	8001054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	041a      	lsls	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43d9      	mvns	r1, r3
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	400b      	ands	r3, r1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f806 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e267      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d00c      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b85      	ldr	r3, [pc, #532]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05b      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d157      	bne.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e242      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x74>
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6f      	ldr	r2, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6c      	ldr	r2, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 80014b8:	4b69      	ldr	r3, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a68      	ldr	r2, [pc, #416]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcc0 	bl	8000e5c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcbc 	bl	8000e5c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e207      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcac 	bl	8000e5c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fca8 	bl	8000e5c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1f3      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b51      	ldr	r3, [pc, #324]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0xe8>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c7      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x244>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fc61 	bl	8000e5c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc5d 	bl	8000e5c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a8      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4925      	ldr	r1, [pc, #148]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_OscConfig+0x244>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc40 	bl	8000e5c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc3c 	bl	8000e5c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e187      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d036      	beq.n	8001678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d016      	beq.n	8001640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x248>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fc20 	bl	8000e5c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc1c 	bl	8000e5c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e167      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x200>
 800163e:	e01b      	b.n	8001678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x248>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fc09 	bl	8000e5c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e00e      	b.n	800166c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fc05 	bl	8000e5c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d907      	bls.n	800166c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e150      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
 8001668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ea      	bne.n	800164e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8097 	beq.w	80017b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b7d      	ldr	r3, [pc, #500]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a7c      	ldr	r2, [pc, #496]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b77      	ldr	r3, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b74      	ldr	r3, [pc, #464]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a73      	ldr	r2, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fbc5 	bl	8000e5c <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fbc1 	bl	8000e5c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e10c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x2ea>
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a63      	ldr	r2, [pc, #396]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x30c>
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a5b      	ldr	r2, [pc, #364]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a54      	ldr	r2, [pc, #336]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d015      	beq.n	8001778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fb86 	bl	8000e5c <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb82 	bl	8000e5c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0cb      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ee      	beq.n	8001754 <HAL_RCC_OscConfig+0x334>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fb70 	bl	8000e5c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fb6c 	bl	8000e5c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0b5      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ee      	bne.n	8001780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a8:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a38      	ldr	r2, [pc, #224]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a1 	beq.w	8001900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d05c      	beq.n	8001884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d141      	bne.n	8001856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb40 	bl	8000e5c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb3c 	bl	8000e5c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e087      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	491b      	ldr	r1, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb15 	bl	8000e5c <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb11 	bl	8000e5c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e05c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x416>
 8001854:	e054      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fafe 	bl	8000e5c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fafa 	bl	8000e5c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e045      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x444>
 8001882:	e03d      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e038      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000
 8001898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d028      	beq.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d121      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d11a      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa2c 	bl	8000e5c <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa28 	bl	8000e5c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8b8 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080068b0 	.word	0x080068b0
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b094      	sub	sp, #80	; 0x50
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aec:	2300      	movs	r3, #0
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af4:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d00d      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x40>
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f200 80e1 	bhi.w	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0e:	e0db      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b14:	e0db      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1a:	e0d8      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4e:	4622      	mov	r2, r4
 8001b50:	462b      	mov	r3, r5
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	0159      	lsls	r1, r3, #5
 8001b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b60:	0150      	lsls	r0, r2, #5
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4621      	mov	r1, r4
 8001b68:	1a51      	subs	r1, r2, r1
 8001b6a:	6139      	str	r1, [r7, #16]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b80:	4659      	mov	r1, fp
 8001b82:	018b      	lsls	r3, r1, #6
 8001b84:	4651      	mov	r1, sl
 8001b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	018a      	lsls	r2, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	ebb2 0801 	subs.w	r8, r2, r1
 8001b94:	4659      	mov	r1, fp
 8001b96:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bae:	4690      	mov	r8, r2
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	eb18 0303 	adds.w	r3, r8, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	eb49 0303 	adc.w	r3, r9, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	024b      	lsls	r3, r1, #9
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd8:	4621      	mov	r1, r4
 8001bda:	024a      	lsls	r2, r1, #9
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be2:	2200      	movs	r2, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bec:	f7fe fb3a 	bl	8000264 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf8:	e058      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	2200      	movs	r2, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	4611      	mov	r1, r2
 8001c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c14:	4642      	mov	r2, r8
 8001c16:	464b      	mov	r3, r9
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	0159      	lsls	r1, r3, #5
 8001c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c26:	0150      	lsls	r0, r2, #5
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c32:	4649      	mov	r1, r9
 8001c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c50:	eb63 050b 	sbc.w	r5, r3, fp
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	00eb      	lsls	r3, r5, #3
 8001c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c62:	00e2      	lsls	r2, r4, #3
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	18e3      	adds	r3, r4, r3
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	464b      	mov	r3, r9
 8001c70:	eb45 0303 	adc.w	r3, r5, r3
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c82:	4629      	mov	r1, r5
 8001c84:	028b      	lsls	r3, r1, #10
 8001c86:	4621      	mov	r1, r4
 8001c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	028a      	lsls	r2, r1, #10
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	2200      	movs	r2, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	61fa      	str	r2, [r7, #28]
 8001c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca0:	f7fe fae0 	bl	8000264 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3750      	adds	r7, #80	; 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	080068c0 	.word	0x080068c0

08001d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	220f      	movs	r2, #15
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCC_GetClockConfig+0x60>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f839 	bl	8001e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f9d8 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04e      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d01d      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d010      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e007      	b.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ee 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e0 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8f1 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8c4 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b6 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c7 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f89a 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88c 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f89d 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b10      	cmp	r3, #16
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f870 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f862 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f873 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fd82 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f902 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f838 	bl	800216c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8cc 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <TIM_Base_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d00f      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <TIM_Base_SetConfig+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d027      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d023      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a29      	ldr	r2, [pc, #164]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <TIM_Base_SetConfig+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0xf8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40014400 	.word	0x40014400
 80022b0:	40014800 	.word	0x40014800
 80022b4:	40001800 	.word	0x40001800
 80022b8:	40001c00 	.word	0x40001c00
 80022bc:	40002000 	.word	0x40002000

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f103 0208 	add.w	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0208 	add.w	r2, r3, #8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0208 	add.w	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d103      	bne.n	80023aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00c      	b.n	80023c4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3308      	adds	r3, #8
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e002      	b.n	80023b8 <vListInsert+0x2e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d2f6      	bcs.n	80023b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6892      	ldr	r2, [r2, #8]
 8002412:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6852      	ldr	r2, [r2, #4]
 800241c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d103      	bne.n	8002430 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af04      	add	r7, sp, #16
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f961 	bl	800372c <pvPortMalloc>
 800246a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002472:	2058      	movs	r0, #88	; 0x58
 8002474:	f001 f95a 	bl	800372c <pvPortMalloc>
 8002478:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
 8002486:	e005      	b.n	8002494 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002488:	6978      	ldr	r0, [r7, #20]
 800248a:	f001 fa2f 	bl	80038ec <vPortFree>
 800248e:	e001      	b.n	8002494 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	2300      	movs	r3, #0
 800249e:	9303      	str	r3, [sp, #12]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f80e 	bl	80024d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024b6:	69f8      	ldr	r0, [r7, #28]
 80024b8:	f000 f8a2 	bl	8002600 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e002      	b.n	80024c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024c8:	69bb      	ldr	r3, [r7, #24]
    }
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b088      	sub	sp, #32
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	21a5      	movs	r1, #165	; 0xa5
 80024ec:	f004 f90c 	bl	8006708 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024fa:	3b01      	subs	r3, #1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f023 0307 	bic.w	r3, r3, #7
 8002508:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	617b      	str	r3, [r7, #20]
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01f      	beq.n	8002570 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	e012      	b.n	800255c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	7819      	ldrb	r1, [r3, #0]
 800253e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	3334      	adds	r3, #52	; 0x34
 8002546:	460a      	mov	r2, r1
 8002548:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b09      	cmp	r3, #9
 8002560:	d9e9      	bls.n	8002536 <prvInitialiseNewTask+0x64>
 8002562:	e000      	b.n	8002566 <prvInitialiseNewTask+0x94>
            {
                break;
 8002564:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800256e:	e003      	b.n	8002578 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	2b04      	cmp	r3, #4
 800257c:	d901      	bls.n	8002582 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800257e:	2304      	movs	r3, #4
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	3304      	adds	r3, #4
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fec5 	bl	8002328 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	3318      	adds	r3, #24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fec0 	bl	8002328 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	f1c3 0205 	rsb	r2, r3, #5
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	3350      	adds	r3, #80	; 0x50
 80025c2:	2204      	movs	r2, #4
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 f89e 	bl	8006708 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	3354      	adds	r3, #84	; 0x54
 80025d0:	2201      	movs	r2, #1
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 f897 	bl	8006708 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	69b8      	ldr	r0, [r7, #24]
 80025e0:	f000 fe4e 	bl	8003280 <pxPortInitialiseStack>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002600:	b5b0      	push	{r4, r5, r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af02      	add	r7, sp, #8
 8002606:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002608:	f000 ff66 	bl	80034d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <prvAddNewTaskToReadyList+0xfc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <prvAddNewTaskToReadyList+0xfc>)
 8002614:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <prvAddNewTaskToReadyList+0x100>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800261e:	4a38      	ldr	r2, [pc, #224]	; (8002700 <prvAddNewTaskToReadyList+0x100>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <prvAddNewTaskToReadyList+0xfc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d110      	bne.n	800264e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800262c:	f000 fb78 	bl	8002d20 <prvInitialiseTaskLists>
 8002630:	e00d      	b.n	800264e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002632:	4b34      	ldr	r3, [pc, #208]	; (8002704 <prvAddNewTaskToReadyList+0x104>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <prvAddNewTaskToReadyList+0x100>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	429a      	cmp	r2, r3
 8002646:	d802      	bhi.n	800264e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002648:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <prvAddNewTaskToReadyList+0x100>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <prvAddNewTaskToReadyList+0x108>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	4a2c      	ldr	r2, [pc, #176]	; (8002708 <prvAddNewTaskToReadyList+0x108>)
 8002656:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <prvAddNewTaskToReadyList+0x108>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <prvAddNewTaskToReadyList+0x94>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fbc1 	bl	8005df0 <SEGGER_SYSVIEW_OnTaskCreate>
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	461d      	mov	r5, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461c      	mov	r4, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	1ae3      	subs	r3, r4, r3
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	462b      	mov	r3, r5
 8002690:	f001 fafa 	bl	8003c88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fc2e 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2201      	movs	r2, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <prvAddNewTaskToReadyList+0x10c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	4a18      	ldr	r2, [pc, #96]	; (800270c <prvAddNewTaskToReadyList+0x10c>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <prvAddNewTaskToReadyList+0x110>)
 80026bc:	441a      	add	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7ff fe3c 	bl	8002342 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026ca:	f000 ff35 	bl	8003538 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <prvAddNewTaskToReadyList+0x104>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00e      	beq.n	80026f4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <prvAddNewTaskToReadyList+0x100>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d207      	bcs.n	80026f4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <prvAddNewTaskToReadyList+0x114>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bdb0      	pop	{r4, r5, r7, pc}
 80026fc:	2000016c 	.word	0x2000016c
 8002700:	20000094 	.word	0x20000094
 8002704:	20000178 	.word	0x20000178
 8002708:	20000188 	.word	0x20000188
 800270c:	20000174 	.word	0x20000174
 8002710:	20000098 	.word	0x20000098
 8002714:	e000ed04 	.word	0xe000ed04

08002718 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002720:	f000 feda 	bl	80034d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <vTaskDelete+0x18>
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <vTaskDelete+0x12c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e000      	b.n	8002732 <vTaskDelete+0x1a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3304      	adds	r3, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe5f 	bl	80023fc <uxListRemove>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d115      	bne.n	8002770 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	493f      	ldr	r1, [pc, #252]	; (8002848 <vTaskDelete+0x130>)
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <vTaskDelete+0x58>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	2201      	movs	r2, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <vTaskDelete+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4013      	ands	r3, r2
 800276c:	4a37      	ldr	r2, [pc, #220]	; (800284c <vTaskDelete+0x134>)
 800276e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3318      	adds	r3, #24
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fe3d 	bl	80023fc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <vTaskDelete+0x138>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a31      	ldr	r2, [pc, #196]	; (8002850 <vTaskDelete+0x138>)
 800278a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <vTaskDelete+0x12c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	d118      	bne.n	80027c8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	4619      	mov	r1, r3
 800279c:	482d      	ldr	r0, [pc, #180]	; (8002854 <vTaskDelete+0x13c>)
 800279e:	f7ff fdd0 	bl	8002342 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <vTaskDelete+0x140>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <vTaskDelete+0x140>)
 80027aa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fc44 	bl	800603c <SEGGER_SYSVIEW_ShrinkId>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	2022      	movs	r0, #34	; 0x22
 80027ba:	f002 fde3 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fac9 	bl	8003d58 <SYSVIEW_DeleteTask>
 80027c6:	e016      	b.n	80027f6 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <vTaskDelete+0x144>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	4a23      	ldr	r2, [pc, #140]	; (800285c <vTaskDelete+0x144>)
 80027d0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fc31 	bl	800603c <SEGGER_SYSVIEW_ShrinkId>
 80027da:	4603      	mov	r3, r0
 80027dc:	4619      	mov	r1, r3
 80027de:	2022      	movs	r0, #34	; 0x22
 80027e0:	f002 fdd0 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fab6 	bl	8003d58 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb05 	bl	8002dfc <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80027f2:	f000 fb13 	bl	8002e1c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80027f6:	f000 fe9f 	bl	8003538 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <vTaskDelete+0x148>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01b      	beq.n	800283a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <vTaskDelete+0x12c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d116      	bne.n	800283a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <vTaskDelete+0x14c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <vTaskDelete+0x112>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	60bb      	str	r3, [r7, #8]
    }
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <vTaskDelete+0x150>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000094 	.word	0x20000094
 8002848:	20000098 	.word	0x20000098
 800284c:	20000174 	.word	0x20000174
 8002850:	20000188 	.word	0x20000188
 8002854:	20000140 	.word	0x20000140
 8002858:	20000154 	.word	0x20000154
 800285c:	2000016c 	.word	0x2000016c
 8002860:	20000178 	.word	0x20000178
 8002864:	20000194 	.word	0x20000194
 8002868:	e000ed04 	.word	0xe000ed04

0800286c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <vTaskStartScheduler+0x98>)
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2300      	movs	r3, #0
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2300      	movs	r3, #0
 800287c:	2282      	movs	r2, #130	; 0x82
 800287e:	4922      	ldr	r1, [pc, #136]	; (8002908 <vTaskStartScheduler+0x9c>)
 8002880:	4822      	ldr	r0, [pc, #136]	; (800290c <vTaskStartScheduler+0xa0>)
 8002882:	f7ff fde5 	bl	8002450 <xTaskCreate>
 8002886:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d124      	bne.n	80028d8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	60bb      	str	r3, [r7, #8]
    }
 80028a0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <vTaskStartScheduler+0xa4>)
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <vTaskStartScheduler+0xa8>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <vTaskStartScheduler+0xac>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <vTaskStartScheduler+0xb0>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <vTaskStartScheduler+0x98>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d102      	bne.n	80028c8 <vTaskStartScheduler+0x5c>
 80028c2:	f003 fa79 	bl	8005db8 <SEGGER_SYSVIEW_OnIdle>
 80028c6:	e004      	b.n	80028d2 <vTaskStartScheduler+0x66>
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <vTaskStartScheduler+0xb0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fad1 	bl	8005e74 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028d2:	f000 fd5f 	bl	8003394 <xPortStartScheduler>
 80028d6:	e00e      	b.n	80028f6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d10a      	bne.n	80028f6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	607b      	str	r3, [r7, #4]
    }
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <vTaskStartScheduler+0xb4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000190 	.word	0x20000190
 8002908:	080067e0 	.word	0x080067e0
 800290c:	08002cf1 	.word	0x08002cf1
 8002910:	2000018c 	.word	0x2000018c
 8002914:	20000178 	.word	0x20000178
 8002918:	20000170 	.word	0x20000170
 800291c:	20000094 	.word	0x20000094
 8002920:	2000000c 	.word	0x2000000c

08002924 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <vTaskSuspendAll+0x18>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <vTaskSuspendAll+0x18>)
 8002930:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	20000194 	.word	0x20000194

08002940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <xTaskResumeAll+0x11c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <xTaskResumeAll+0x2c>
        __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	603b      	str	r3, [r7, #0]
    }
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800296c:	f000 fdb4 	bl	80034d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <xTaskResumeAll+0x11c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <xTaskResumeAll+0x11c>)
 8002978:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <xTaskResumeAll+0x11c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d165      	bne.n	8002a4e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002982:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <xTaskResumeAll+0x120>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d061      	beq.n	8002a4e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800298a:	e032      	b.n	80029f2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <xTaskResumeAll+0x124>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3318      	adds	r3, #24
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fd2f 	bl	80023fc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fd2a 	bl	80023fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 faa4 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <xTaskResumeAll+0x128>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <xTaskResumeAll+0x128>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <xTaskResumeAll+0x12c>)
 80029d0:	441a      	add	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f7ff fcb2 	bl	8002342 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <xTaskResumeAll+0x130>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <xTaskResumeAll+0x134>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <xTaskResumeAll+0x124>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1c8      	bne.n	800298c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a00:	f000 fa0c 	bl	8002e1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <xTaskResumeAll+0x138>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a10:	f000 f848 	bl	8002aa4 <xTaskIncrementTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <xTaskResumeAll+0x134>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f1      	bne.n	8002a10 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <xTaskResumeAll+0x138>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <xTaskResumeAll+0x134>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <xTaskResumeAll+0x13c>)
 8002a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a4e:	f000 fd73 	bl	8003538 <vPortExitCritical>

    return xAlreadyYielded;
 8002a52:	68bb      	ldr	r3, [r7, #8]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000194 	.word	0x20000194
 8002a60:	2000016c 	.word	0x2000016c
 8002a64:	2000012c 	.word	0x2000012c
 8002a68:	20000174 	.word	0x20000174
 8002a6c:	20000098 	.word	0x20000098
 8002a70:	20000094 	.word	0x20000094
 8002a74:	20000180 	.word	0x20000180
 8002a78:	2000017c 	.word	0x2000017c
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a86:	f000 fe11 	bl	80036ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <xTaskGetTickCountFromISR+0x20>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a94:	683b      	ldr	r3, [r7, #0]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000170 	.word	0x20000170

08002aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aae:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <xTaskIncrementTick+0x14c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8092 	bne.w	8002bdc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <xTaskIncrementTick+0x150>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	; (8002bf4 <xTaskIncrementTick+0x150>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d120      	bne.n	8002b0e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <xTaskIncrementTick+0x154>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <xTaskIncrementTick+0x48>
        __asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	603b      	str	r3, [r7, #0]
    }
 8002ae8:	bf00      	nop
 8002aea:	e7fe      	b.n	8002aea <xTaskIncrementTick+0x46>
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <xTaskIncrementTick+0x154>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <xTaskIncrementTick+0x158>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <xTaskIncrementTick+0x154>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <xTaskIncrementTick+0x158>)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <xTaskIncrementTick+0x15c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <xTaskIncrementTick+0x15c>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	f000 f987 	bl	8002e1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <xTaskIncrementTick+0x160>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d34c      	bcc.n	8002bb2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <xTaskIncrementTick+0x154>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <xTaskIncrementTick+0x160>)
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	601a      	str	r2, [r3, #0]
                    break;
 8002b2a:	e042      	b.n	8002bb2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <xTaskIncrementTick+0x154>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d203      	bcs.n	8002b4c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b44:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <xTaskIncrementTick+0x160>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b4a:	e032      	b.n	8002bb2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fc53 	bl	80023fc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3318      	adds	r3, #24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fc4a 	bl	80023fc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 f9c4 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <xTaskIncrementTick+0x164>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <xTaskIncrementTick+0x164>)
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <xTaskIncrementTick+0x168>)
 8002b90:	441a      	add	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3304      	adds	r3, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f7ff fbd2 	bl	8002342 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <xTaskIncrementTick+0x16c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3b5      	bcc.n	8002b18 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb0:	e7b2      	b.n	8002b18 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <xTaskIncrementTick+0x16c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	4914      	ldr	r1, [pc, #80]	; (8002c0c <xTaskIncrementTick+0x168>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d901      	bls.n	8002bce <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <xTaskIncrementTick+0x170>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e004      	b.n	8002be6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <xTaskIncrementTick+0x174>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <xTaskIncrementTick+0x174>)
 8002be4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002be6:	697b      	ldr	r3, [r7, #20]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000194 	.word	0x20000194
 8002bf4:	20000170 	.word	0x20000170
 8002bf8:	20000124 	.word	0x20000124
 8002bfc:	20000128 	.word	0x20000128
 8002c00:	20000184 	.word	0x20000184
 8002c04:	2000018c 	.word	0x2000018c
 8002c08:	20000174 	.word	0x20000174
 8002c0c:	20000098 	.word	0x20000098
 8002c10:	20000094 	.word	0x20000094
 8002c14:	20000180 	.word	0x20000180
 8002c18:	2000017c 	.word	0x2000017c

08002c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <vTaskSwitchContext+0xbc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <vTaskSwitchContext+0xc0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c30:	e04d      	b.n	8002cce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <vTaskSwitchContext+0xc0>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <vTaskSwitchContext+0xc4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	f1c3 031f 	rsb	r3, r3, #31
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <vTaskSwitchContext+0xc8>)
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	607b      	str	r3, [r7, #4]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <vTaskSwitchContext+0x5a>
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <vTaskSwitchContext+0xc8>)
 8002c84:	4413      	add	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d104      	bne.n	8002ca8 <vTaskSwitchContext+0x8c>
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <vTaskSwitchContext+0xcc>)
 8002cb0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <vTaskSwitchContext+0xcc>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <vTaskSwitchContext+0xd0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d102      	bne.n	8002cc4 <vTaskSwitchContext+0xa8>
 8002cbe:	f003 f87b 	bl	8005db8 <SEGGER_SYSVIEW_OnIdle>
}
 8002cc2:	e004      	b.n	8002cce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <vTaskSwitchContext+0xcc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f8d3 	bl	8005e74 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000194 	.word	0x20000194
 8002cdc:	20000180 	.word	0x20000180
 8002ce0:	20000174 	.word	0x20000174
 8002ce4:	20000098 	.word	0x20000098
 8002ce8:	20000094 	.word	0x20000094
 8002cec:	20000190 	.word	0x20000190

08002cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cf8:	f000 f852 	bl	8002da0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <prvIdleTask+0x28>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d9f9      	bls.n	8002cf8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <prvIdleTask+0x2c>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d14:	e7f0      	b.n	8002cf8 <prvIdleTask+0x8>
 8002d16:	bf00      	nop
 8002d18:	20000098 	.word	0x20000098
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e00c      	b.n	8002d46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <prvInitialiseTaskLists+0x60>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fad4 	bl	80022e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d9ef      	bls.n	8002d2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <prvInitialiseTaskLists+0x64>)
 8002d4e:	f7ff facb 	bl	80022e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <prvInitialiseTaskLists+0x68>)
 8002d54:	f7ff fac8 	bl	80022e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <prvInitialiseTaskLists+0x6c>)
 8002d5a:	f7ff fac5 	bl	80022e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <prvInitialiseTaskLists+0x70>)
 8002d60:	f7ff fac2 	bl	80022e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d64:	480b      	ldr	r0, [pc, #44]	; (8002d94 <prvInitialiseTaskLists+0x74>)
 8002d66:	f7ff fabf 	bl	80022e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <prvInitialiseTaskLists+0x78>)
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <prvInitialiseTaskLists+0x64>)
 8002d6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <prvInitialiseTaskLists+0x7c>)
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <prvInitialiseTaskLists+0x68>)
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000098 	.word	0x20000098
 8002d84:	200000fc 	.word	0x200000fc
 8002d88:	20000110 	.word	0x20000110
 8002d8c:	2000012c 	.word	0x2000012c
 8002d90:	20000140 	.word	0x20000140
 8002d94:	20000158 	.word	0x20000158
 8002d98:	20000124 	.word	0x20000124
 8002d9c:	20000128 	.word	0x20000128

08002da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da6:	e019      	b.n	8002ddc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002da8:	f000 fb96 	bl	80034d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <prvCheckTasksWaitingTermination+0x50>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb1f 	bl	80023fc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <prvCheckTasksWaitingTermination+0x54>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <prvCheckTasksWaitingTermination+0x54>)
 8002dc6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dd0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002dd2:	f000 fbb1 	bl	8003538 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f810 	bl	8002dfc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e1      	bne.n	8002da8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000140 	.word	0x20000140
 8002df4:	2000016c 	.word	0x2000016c
 8002df8:	20000154 	.word	0x20000154

08002dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fd6f 	bl	80038ec <vPortFree>
                vPortFree( pxTCB );
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd6c 	bl	80038ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <prvResetNextTaskUnblockTime+0x30>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <prvResetNextTaskUnblockTime+0x34>)
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e32:	e005      	b.n	8002e40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <prvResetNextTaskUnblockTime+0x30>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <prvResetNextTaskUnblockTime+0x34>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000124 	.word	0x20000124
 8002e50:	2000018c 	.word	0x2000018c

08002e54 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	613b      	str	r3, [r7, #16]
    }
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002e7e:	f000 fb2b 	bl	80034d8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3354      	adds	r3, #84	; 0x54
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d022      	beq.n	8002eda <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	3214      	adds	r2, #20
 8002e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	43d2      	mvns	r2, r2
 8002ea4:	4011      	ands	r1, r2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	3214      	adds	r2, #20
 8002eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3354      	adds	r3, #84	; 0x54
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	6a38      	ldr	r0, [r7, #32]
 8002ec6:	f000 f963 	bl	8003190 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <xTaskGenericNotifyWait+0x10c>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002eda:	f000 fb2d 	bl	8003538 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002ede:	f000 fafb 	bl	80034d8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	2040      	movs	r0, #64	; 0x40
 8002ef0:	f002 fade 	bl	80054b0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	3214      	adds	r2, #20
 8002f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	3354      	adds	r3, #84	; 0x54
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d002      	beq.n	8002f22 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e00e      	b.n	8002f40 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	3214      	adds	r2, #20
 8002f2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	43d2      	mvns	r2, r2
 8002f32:	4011      	ands	r1, r2
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	3214      	adds	r2, #20
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <xTaskGenericNotifyWait+0x108>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	3354      	adds	r3, #84	; 0x54
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002f4e:	f000 faf3 	bl	8003538 <vPortExitCritical>

        return xReturn;
 8002f52:	697b      	ldr	r3, [r7, #20]
    }
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000094 	.word	0x20000094
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002f72:	2301      	movs	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fae:	f000 fb7d 	bl	80036ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	627a      	str	r2, [r7, #36]	; 0x24
 8002fcc:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	3214      	adds	r2, #20
 8002fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	3354      	adds	r3, #84	; 0x54
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3354      	adds	r3, #84	; 0x54
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d83b      	bhi.n	800307e <xTaskGenericNotifyFromISR+0x11a>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <xTaskGenericNotifyFromISR+0xa8>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800309d 	.word	0x0800309d
 8003010:	08003021 	.word	0x08003021
 8003014:	0800303d 	.word	0x0800303d
 8003018:	08003055 	.word	0x08003055
 800301c:	08003063 	.word	0x08003063
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	3214      	adds	r2, #20
 8003026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	3214      	adds	r2, #20
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800303a:	e032      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	3214      	adds	r2, #20
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	1c59      	adds	r1, r3, #1
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	3214      	adds	r2, #20
 800304e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003052:	e026      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	3214      	adds	r2, #20
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003060:	e01f      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003066:	2b02      	cmp	r3, #2
 8003068:	d006      	beq.n	8003078 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	3214      	adds	r2, #20
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003076:	e014      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003078:	2300      	movs	r3, #0
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800307c:	e011      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <xTaskGenericNotifyFromISR+0x210>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61fb      	str	r3, [r7, #28]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80030a0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 ffc9 	bl	800603c <SEGGER_SYSVIEW_ShrinkId>
 80030aa:	78f9      	ldrb	r1, [r7, #3]
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b0:	9201      	str	r2, [sp, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	460b      	mov	r3, r1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4601      	mov	r1, r0
 80030ba:	203f      	movs	r0, #63	; 0x3f
 80030bc:	f002 fa8a 	bl	80055d4 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80030c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d149      	bne.n	800315c <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61bb      	str	r3, [r7, #24]
    }
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <xTaskGenericNotifyFromISR+0x214>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d120      	bne.n	8003130 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	3304      	adds	r3, #4
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f982 	bl	80023fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fefc 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2201      	movs	r2, #1
 8003106:	409a      	lsls	r2, r3
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <xTaskGenericNotifyFromISR+0x218>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <xTaskGenericNotifyFromISR+0x218>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <xTaskGenericNotifyFromISR+0x21c>)
 8003120:	441a      	add	r2, r3
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	3304      	adds	r3, #4
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7ff f90a 	bl	8002342 <vListInsertEnd>
 800312e:	e005      	b.n	800313c <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	3318      	adds	r3, #24
 8003134:	4619      	mov	r1, r3
 8003136:	4813      	ldr	r0, [pc, #76]	; (8003184 <xTaskGenericNotifyFromISR+0x220>)
 8003138:	f7ff f903 	bl	8002342 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <xTaskGenericNotifyFromISR+0x224>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	429a      	cmp	r2, r3
 8003148:	d908      	bls.n	800315c <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <xTaskGenericNotifyFromISR+0x228>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003166:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3740      	adds	r7, #64	; 0x40
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000170 	.word	0x20000170
 8003178:	20000194 	.word	0x20000194
 800317c:	20000174 	.word	0x20000174
 8003180:	20000098 	.word	0x20000098
 8003184:	2000012c 	.word	0x2000012c
 8003188:	20000094 	.word	0x20000094
 800318c:	20000180 	.word	0x20000180

08003190 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800319a:	4b32      	ldr	r3, [pc, #200]	; (8003264 <prvAddCurrentTaskToDelayedList+0xd4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f928 	bl	80023fc <uxListRemove>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <prvAddCurrentTaskToDelayedList+0xdc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4013      	ands	r3, r2
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <prvAddCurrentTaskToDelayedList+0xdc>)
 80031c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d110      	bne.n	80031f4 <prvAddCurrentTaskToDelayedList+0x64>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00d      	beq.n	80031f4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80031d8:	4b23      	ldr	r3, [pc, #140]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	211b      	movs	r1, #27
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fecc 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4820      	ldr	r0, [pc, #128]	; (8003270 <prvAddCurrentTaskToDelayedList+0xe0>)
 80031ee:	f7ff f8a8 	bl	8002342 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80031f2:	e032      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d20f      	bcs.n	800322c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2104      	movs	r1, #4
 8003212:	4618      	mov	r0, r3
 8003214:	f002 feb2 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <prvAddCurrentTaskToDelayedList+0xe4>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f7ff f8b0 	bl	800238a <vListInsert>
}
 800322a:	e016      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2104      	movs	r1, #4
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fea2 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <prvAddCurrentTaskToDelayedList+0xe8>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvAddCurrentTaskToDelayedList+0xd8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff f8a0 	bl	800238a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <prvAddCurrentTaskToDelayedList+0xec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d202      	bcs.n	800325a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <prvAddCurrentTaskToDelayedList+0xec>)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000170 	.word	0x20000170
 8003268:	20000094 	.word	0x20000094
 800326c:	20000174 	.word	0x20000174
 8003270:	20000158 	.word	0x20000158
 8003274:	20000128 	.word	0x20000128
 8003278:	20000124 	.word	0x20000124
 800327c:	2000018c 	.word	0x2000018c

08003280 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b04      	subs	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003298:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3b04      	subs	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 0201 	bic.w	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b04      	subs	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <pxPortInitialiseStack+0x64>)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3b14      	subs	r3, #20
 80032ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b04      	subs	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f06f 0202 	mvn.w	r2, #2
 80032ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b20      	subs	r3, #32
 80032d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	080032e9 	.word	0x080032e9

080032e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <prvTaskExitError+0x54>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d00a      	beq.n	8003312 <prvTaskExitError+0x2a>
        __asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	60fb      	str	r3, [r7, #12]
    }
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <prvTaskExitError+0x28>
        __asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	60bb      	str	r3, [r7, #8]
    }
 8003324:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003326:	bf00      	nop
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0fc      	beq.n	8003328 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20000010 	.word	0x20000010

08003340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <pxCurrentTCBConst2>)
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334a:	f380 8809 	msr	PSP, r0
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f380 8811 	msr	BASEPRI, r0
 800335a:	4770      	bx	lr
 800335c:	f3af 8000 	nop.w

08003360 <pxCurrentTCBConst2>:
 8003360:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <prvPortStartFirstTask+0x24>)
 800336a:	6800      	ldr	r0, [r0, #0]
 800336c:	6800      	ldr	r0, [r0, #0]
 800336e:	f380 8808 	msr	MSP, r0
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8814 	msr	CONTROL, r0
 800337a:	b662      	cpsie	i
 800337c:	b661      	cpsie	f
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	df00      	svc	0
 8003388:	bf00      	nop
 800338a:	0000      	.short	0x0000
 800338c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop

08003394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800339a:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <xPortStartScheduler+0x120>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <xPortStartScheduler+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10a      	bne.n	80033ba <xPortStartScheduler+0x26>
        __asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	613b      	str	r3, [r7, #16]
    }
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033ba:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <xPortStartScheduler+0x120>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <xPortStartScheduler+0x128>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10a      	bne.n	80033da <xPortStartScheduler+0x46>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60fb      	str	r3, [r7, #12]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <xPortStartScheduler+0x12c>)
 80033dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	22ff      	movs	r2, #255	; 0xff
 80033ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <xPortStartScheduler+0x130>)
 8003400:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <xPortStartScheduler+0x134>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003408:	e009      	b.n	800341e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <xPortStartScheduler+0x134>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3b01      	subs	r3, #1
 8003410:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <xPortStartScheduler+0x134>)
 8003412:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d0ef      	beq.n	800340a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <xPortStartScheduler+0x134>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	d00a      	beq.n	800344c <xPortStartScheduler+0xb8>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60bb      	str	r3, [r7, #8]
    }
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <xPortStartScheduler+0x134>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <xPortStartScheduler+0x134>)
 8003454:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <xPortStartScheduler+0x134>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800345e:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <xPortStartScheduler+0x134>)
 8003460:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <xPortStartScheduler+0x138>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <xPortStartScheduler+0x138>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003474:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <xPortStartScheduler+0x138>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <xPortStartScheduler+0x138>)
 800347c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003480:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003482:	f000 f8e3 	bl	800364c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <xPortStartScheduler+0x13c>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800348c:	f000 f902 	bl	8003694 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <xPortStartScheduler+0x140>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <xPortStartScheduler+0x140>)
 8003496:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800349a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800349c:	f7ff ff64 	bl	8003368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034a0:	f7ff fbbc 	bl	8002c1c <vTaskSwitchContext>
    prvTaskExitError();
 80034a4:	f7ff ff20 	bl	80032e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00
 80034b8:	410fc271 	.word	0x410fc271
 80034bc:	410fc270 	.word	0x410fc270
 80034c0:	e000e400 	.word	0xe000e400
 80034c4:	20000198 	.word	0x20000198
 80034c8:	2000019c 	.word	0x2000019c
 80034cc:	e000ed20 	.word	0xe000ed20
 80034d0:	20000010 	.word	0x20000010
 80034d4:	e000ef34 	.word	0xe000ef34

080034d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
        __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	607b      	str	r3, [r7, #4]
    }
 80034f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <vPortEnterCritical+0x58>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <vPortEnterCritical+0x58>)
 80034fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <vPortEnterCritical+0x58>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10f      	bne.n	8003524 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <vPortEnterCritical+0x5c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <vPortEnterCritical+0x4c>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	603b      	str	r3, [r7, #0]
    }
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <vPortEnterCritical+0x4a>
    }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000010 	.word	0x20000010
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <vPortExitCritical+0x50>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <vPortExitCritical+0x24>
        __asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	607b      	str	r3, [r7, #4]
    }
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <vPortExitCritical+0x50>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <vPortExitCritical+0x50>)
 8003564:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <vPortExitCritical+0x50>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <vPortExitCritical+0x42>
 800356e:	2300      	movs	r3, #0
 8003570:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f383 8811 	msr	BASEPRI, r3
    }
 8003578:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000010 	.word	0x20000010
 800358c:	00000000 	.word	0x00000000

08003590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003590:	f3ef 8009 	mrs	r0, PSP
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <pxCurrentTCBConst>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f01e 0f10 	tst.w	lr, #16
 80035a0:	bf08      	it	eq
 80035a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035aa:	6010      	str	r0, [r2, #0]
 80035ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035b4:	f380 8811 	msr	BASEPRI, r0
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f7ff fb2c 	bl	8002c1c <vTaskSwitchContext>
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f380 8811 	msr	BASEPRI, r0
 80035cc:	bc09      	pop	{r0, r3}
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	6808      	ldr	r0, [r1, #0]
 80035d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d6:	f01e 0f10 	tst.w	lr, #16
 80035da:	bf08      	it	eq
 80035dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035e0:	f380 8809 	msr	PSP, r0
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	f3af 8000 	nop.w

080035f0 <pxCurrentTCBConst>:
 80035f0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop

080035f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
        __asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	607b      	str	r3, [r7, #4]
    }
 8003610:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003612:	f002 fb57 	bl	8005cc4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003616:	f7ff fa45 	bl	8002aa4 <xTaskIncrementTick>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003620:	f002 fbae 	bl	8005d80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <SysTick_Handler+0x50>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e001      	b.n	8003632 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800362e:	f002 fb8b 	bl	8005d48 <SEGGER_SYSVIEW_RecordExitISR>
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f383 8811 	msr	BASEPRI, r3
    }
 800363c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <vPortSetupTimerInterrupt+0x34>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <vPortSetupTimerInterrupt+0x38>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <vPortSetupTimerInterrupt+0x3c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <vPortSetupTimerInterrupt+0x40>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	4a09      	ldr	r2, [pc, #36]	; (8003690 <vPortSetupTimerInterrupt+0x44>)
 800366a:	3b01      	subs	r3, #1
 800366c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <vPortSetupTimerInterrupt+0x34>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010
 8003684:	e000e018 	.word	0xe000e018
 8003688:	20000000 	.word	0x20000000
 800368c:	10624dd3 	.word	0x10624dd3
 8003690:	e000e014 	.word	0xe000e014

08003694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036a4 <vPortEnableVFP+0x10>
 8003698:	6801      	ldr	r1, [r0, #0]
 800369a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800369e:	6001      	str	r1, [r0, #0]
 80036a0:	4770      	bx	lr
 80036a2:	0000      	.short	0x0000
 80036a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop

080036ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80036b2:	f3ef 8305 	mrs	r3, IPSR
 80036b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	d914      	bls.n	80036e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <vPortValidateInterruptPriority+0x70>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <vPortValidateInterruptPriority+0x74>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	7afa      	ldrb	r2, [r7, #11]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20a      	bcs.n	80036e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <vPortValidateInterruptPriority+0x78>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <vPortValidateInterruptPriority+0x7c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d90a      	bls.n	800370e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	603b      	str	r3, [r7, #0]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <vPortValidateInterruptPriority+0x60>
    }
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e3f0 	.word	0xe000e3f0
 8003720:	20000198 	.word	0x20000198
 8003724:	e000ed0c 	.word	0xe000ed0c
 8003728:	2000019c 	.word	0x2000019c

0800372c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003738:	f7ff f8f4 	bl	8002924 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800373c:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <pvPortMalloc+0x1a8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003744:	f000 f934 	bl	80039b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <pvPortMalloc+0x1ac>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 80a7 	bne.w	80038a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02d      	beq.n	80037b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800375c:	2208      	movs	r2, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d227      	bcs.n	80037b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003768:	2208      	movs	r2, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	2b00      	cmp	r3, #0
 8003778:	d021      	beq.n	80037be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f023 0307 	bic.w	r3, r3, #7
 8003780:	3308      	adds	r3, #8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d214      	bcs.n	80037b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	3308      	adds	r3, #8
 8003790:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <pvPortMalloc+0x92>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	617b      	str	r3, [r7, #20]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037b6:	e002      	b.n	80037be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e000      	b.n	80037c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d06e      	beq.n	80038a4 <pvPortMalloc+0x178>
 80037c6:	4b45      	ldr	r3, [pc, #276]	; (80038dc <pvPortMalloc+0x1b0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d869      	bhi.n	80038a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <pvPortMalloc+0x1b4>)
 80037d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <pvPortMalloc+0x1b4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037da:	e004      	b.n	80037e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d903      	bls.n	80037f8 <pvPortMalloc+0xcc>
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f1      	bne.n	80037dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <pvPortMalloc+0x1a8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	429a      	cmp	r2, r3
 8003800:	d050      	beq.n	80038a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	4413      	add	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad2      	subs	r2, r2, r3
 800381c:	2308      	movs	r3, #8
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	429a      	cmp	r2, r3
 8003822:	d91f      	bls.n	8003864 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <pvPortMalloc+0x120>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	613b      	str	r3, [r7, #16]
    }
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f000 f908 	bl	8003a74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <pvPortMalloc+0x1b0>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <pvPortMalloc+0x1b0>)
 8003870:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <pvPortMalloc+0x1b0>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <pvPortMalloc+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d203      	bcs.n	8003886 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <pvPortMalloc+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <pvPortMalloc+0x1b8>)
 8003884:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <pvPortMalloc+0x1ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	431a      	orrs	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <pvPortMalloc+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <pvPortMalloc+0x1bc>)
 80038a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038a4:	f7ff f84c 	bl	8002940 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <pvPortMalloc+0x19c>
        __asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60fb      	str	r3, [r7, #12]
    }
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80038c8:	69fb      	ldr	r3, [r7, #28]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200191a8 	.word	0x200191a8
 80038d8:	200191bc 	.word	0x200191bc
 80038dc:	200191ac 	.word	0x200191ac
 80038e0:	200191a0 	.word	0x200191a0
 80038e4:	200191b0 	.word	0x200191b0
 80038e8:	200191b4 	.word	0x200191b4

080038ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d04d      	beq.n	800399a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038fe:	2308      	movs	r3, #8
 8003900:	425b      	negs	r3, r3
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <vPortFree+0xb8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <vPortFree+0x44>
        __asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60fb      	str	r3, [r7, #12]
    }
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <vPortFree+0x62>
        __asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60bb      	str	r3, [r7, #8]
    }
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <vPortFree+0xb8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01e      	beq.n	800399a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11a      	bne.n	800399a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <vPortFree+0xb8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003974:	f7fe ffd6 	bl	8002924 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <vPortFree+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4413      	add	r3, r2
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <vPortFree+0xbc>)
 8003984:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f000 f874 	bl	8003a74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <vPortFree+0xc0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a06      	ldr	r2, [pc, #24]	; (80039ac <vPortFree+0xc0>)
 8003994:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003996:	f7fe ffd3 	bl	8002940 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200191bc 	.word	0x200191bc
 80039a8:	200191ac 	.word	0x200191ac
 80039ac:	200191b8 	.word	0x200191b8

080039b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039b6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80039ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <prvHeapInit+0xac>)
 80039be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3307      	adds	r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0307 	bic.w	r3, r3, #7
 80039d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <prvHeapInit+0xac>)
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039e8:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <prvHeapInit+0xb0>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <prvHeapInit+0xb0>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	4413      	add	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039fc:	2208      	movs	r2, #8
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <prvHeapInit+0xb4>)
 8003a10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <prvHeapInit+0xb4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <prvHeapInit+0xb4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <prvHeapInit+0xb4>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <prvHeapInit+0xb8>)
 8003a3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <prvHeapInit+0xbc>)
 8003a46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <prvHeapInit+0xc0>)
 8003a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a4e:	601a      	str	r2, [r3, #0]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	200001a0 	.word	0x200001a0
 8003a60:	200191a0 	.word	0x200191a0
 8003a64:	200191a8 	.word	0x200191a8
 8003a68:	200191b0 	.word	0x200191b0
 8003a6c:	200191ac 	.word	0x200191ac
 8003a70:	200191bc 	.word	0x200191bc

08003a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <prvInsertBlockIntoFreeList+0xac>)
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e002      	b.n	8003a88 <prvInsertBlockIntoFreeList+0x14>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d8f7      	bhi.n	8003a82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d108      	bne.n	8003ab6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	441a      	add	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d118      	bne.n	8003afc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <prvInsertBlockIntoFreeList+0xb0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d00d      	beq.n	8003af2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e008      	b.n	8003b04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <prvInsertBlockIntoFreeList+0xb0>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e003      	b.n	8003b04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d002      	beq.n	8003b12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	200191a0 	.word	0x200191a0
 8003b24:	200191a8 	.word	0x200191a8

08003b28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b2c:	4803      	ldr	r0, [pc, #12]	; (8003b3c <_cbSendSystemDesc+0x14>)
 8003b2e:	f002 f873 	bl	8005c18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b32:	4803      	ldr	r0, [pc, #12]	; (8003b40 <_cbSendSystemDesc+0x18>)
 8003b34:	f002 f870 	bl	8005c18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	080067e8 	.word	0x080067e8
 8003b40:	0800682c 	.word	0x0800682c

08003b44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b52:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <SEGGER_SYSVIEW_Conf+0x28>)
 8003b54:	f001 fba4 	bl	80052a0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b5c:	f001 fbe4 	bl	8005328 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000000 	.word	0x20000000
 8003b68:	08003b29 	.word	0x08003b29
 8003b6c:	080068c8 	.word	0x080068c8

08003b70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	e033      	b.n	8003be4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b7c:	491e      	ldr	r1, [pc, #120]	; (8003bf8 <_cbSendTaskList+0x88>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	491a      	ldr	r1, [pc, #104]	; (8003bf8 <_cbSendTaskList+0x88>)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	6819      	ldr	r1, [r3, #0]
 8003b9e:	4c16      	ldr	r4, [pc, #88]	; (8003bf8 <_cbSendTaskList+0x88>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4423      	add	r3, r4
 8003bac:	3308      	adds	r3, #8
 8003bae:	681c      	ldr	r4, [r3, #0]
 8003bb0:	4d11      	ldr	r5, [pc, #68]	; (8003bf8 <_cbSendTaskList+0x88>)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	442b      	add	r3, r5
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	681d      	ldr	r5, [r3, #0]
 8003bc2:	4e0d      	ldr	r6, [pc, #52]	; (8003bf8 <_cbSendTaskList+0x88>)
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4433      	add	r3, r6
 8003bd0:	3310      	adds	r3, #16
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	4622      	mov	r2, r4
 8003bda:	f000 f979 	bl	8003ed0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3301      	adds	r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <_cbSendTaskList+0x8c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3c6      	bcc.n	8003b7c <_cbSendTaskList+0xc>
  }
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf8:	200191c0 	.word	0x200191c0
 8003bfc:	20019260 	.word	0x20019260

08003c00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c08:	f7fe ff3a 	bl	8002a80 <xTaskGetTickCountFromISR>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2200      	movs	r2, #0
 8003c10:	469a      	mov	sl, r3
 8003c12:	4693      	mov	fp, r2
 8003c14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	f04f 0a00 	mov.w	sl, #0
 8003c24:	f04f 0b00 	mov.w	fp, #0
 8003c28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c34:	4652      	mov	r2, sl
 8003c36:	465b      	mov	r3, fp
 8003c38:	1a14      	subs	r4, r2, r0
 8003c3a:	eb63 0501 	sbc.w	r5, r3, r1
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	00ab      	lsls	r3, r5, #2
 8003c48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c4c:	00a2      	lsls	r2, r4, #2
 8003c4e:	4614      	mov	r4, r2
 8003c50:	461d      	mov	r5, r3
 8003c52:	eb14 0800 	adds.w	r8, r4, r0
 8003c56:	eb45 0901 	adc.w	r9, r5, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003c88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c96:	2205      	movs	r2, #5
 8003c98:	492b      	ldr	r1, [pc, #172]	; (8003d48 <SYSVIEW_AddTask+0xc0>)
 8003c9a:	68b8      	ldr	r0, [r7, #8]
 8003c9c:	f002 fd16 	bl	80066cc <memcmp>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04b      	beq.n	8003d3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b07      	cmp	r3, #7
 8003cac:	d903      	bls.n	8003cb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cae:	4828      	ldr	r0, [pc, #160]	; (8003d50 <SYSVIEW_AddTask+0xc8>)
 8003cb0:	f002 face 	bl	8006250 <SEGGER_SYSVIEW_Warn>
    return;
 8003cb4:	e044      	b.n	8003d40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cb6:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4926      	ldr	r1, [pc, #152]	; (8003d54 <SYSVIEW_AddTask+0xcc>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <SYSVIEW_AddTask+0xcc>)
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3304      	adds	r3, #4
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	491b      	ldr	r1, [pc, #108]	; (8003d54 <SYSVIEW_AddTask+0xcc>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4916      	ldr	r1, [pc, #88]	; (8003d54 <SYSVIEW_AddTask+0xcc>)
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	330c      	adds	r3, #12
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4910      	ldr	r1, [pc, #64]	; (8003d54 <SYSVIEW_AddTask+0xcc>)
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <SYSVIEW_AddTask+0xc4>)
 8003d2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8ca 	bl	8003ed0 <SYSVIEW_SendTaskInfo>
 8003d3c:	e000      	b.n	8003d40 <SYSVIEW_AddTask+0xb8>
    return;
 8003d3e:	bf00      	nop

}
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	0800683c 	.word	0x0800683c
 8003d4c:	20019260 	.word	0x20019260
 8003d50:	08006844 	.word	0x08006844
 8003d54:	200191c0 	.word	0x200191c0

08003d58 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80ab 	beq.w	8003ec0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e00d      	b.n	8003d8c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003d70:	4956      	ldr	r1, [pc, #344]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d008      	beq.n	8003d98 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	4b4e      	ldr	r3, [pc, #312]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3ec      	bcc.n	8003d70 <SYSVIEW_DeleteTask+0x18>
 8003d96:	e000      	b.n	8003d9a <SYSVIEW_DeleteTask+0x42>
      break;
 8003d98:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d111      	bne.n	8003dca <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003db2:	4413      	add	r3, r2
 8003db4:	2214      	movs	r2, #20
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 fca5 	bl	8006708 <memset>
    _NumTasks--;
 8003dbe:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e07b      	b.n	8003ec2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003dca:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d276      	bcs.n	8003ec2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	493c      	ldr	r1, [pc, #240]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	4838      	ldr	r0, [pc, #224]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4403      	add	r3, r0
 8003df6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	4933      	ldr	r1, [pc, #204]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	482f      	ldr	r0, [pc, #188]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4403      	add	r3, r0
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	4929      	ldr	r1, [pc, #164]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3308      	adds	r3, #8
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	4825      	ldr	r0, [pc, #148]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4403      	add	r3, r0
 8003e44:	3308      	adds	r3, #8
 8003e46:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	491f      	ldr	r1, [pc, #124]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	481b      	ldr	r0, [pc, #108]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4403      	add	r3, r0
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	4915      	ldr	r1, [pc, #84]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3310      	adds	r3, #16
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	4811      	ldr	r0, [pc, #68]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4403      	add	r3, r0
 8003e94:	3310      	adds	r3, #16
 8003e96:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <SYSVIEW_DeleteTask+0x174>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2214      	movs	r2, #20
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 fc2a 	bl	8006708 <memset>
    _NumTasks--;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <SYSVIEW_DeleteTask+0x170>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e000      	b.n	8003ec2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003ec0:	bf00      	nop
  }
}
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20019260 	.word	0x20019260
 8003ecc:	200191c0 	.word	0x200191c0

08003ed0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ede:	f107 0310 	add.w	r3, r7, #16
 8003ee2:	2218      	movs	r2, #24
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 fc0e 	bl	8006708 <memset>
  TaskInfo.TaskID     = TaskID;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fd8f 	bl	8005a28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f0a:	bf00      	nop
 8003f0c:	3728      	adds	r7, #40	; 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <_DoInit+0xa0>)
 8003f1c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003f1e:	22a8      	movs	r2, #168	; 0xa8
 8003f20:	2100      	movs	r1, #0
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f002 fbf0 	bl	8006708 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2203      	movs	r2, #3
 8003f32:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <_DoInit+0xa4>)
 8003f38:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <_DoInit+0xa8>)
 8003f3e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f46:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <_DoInit+0xa4>)
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <_DoInit+0xac>)
 8003f64:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2210      	movs	r2, #16
 8003f6a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f7e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	e00c      	b.n	8003fa2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1c3 030f 	rsb	r3, r3, #15
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <_DoInit+0xb0>)
 8003f90:	5cd1      	ldrb	r1, [r2, r3]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	460a      	mov	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b0f      	cmp	r3, #15
 8003fa6:	d9ef      	bls.n	8003f88 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003fa8:	f3bf 8f5f 	dmb	sy
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20019264 	.word	0x20019264
 8003fb8:	08006894 	.word	0x08006894
 8003fbc:	2001930c 	.word	0x2001930c
 8003fc0:	2001970c 	.word	0x2001970c
 8003fc4:	080068d0 	.word	0x080068d0

08003fc8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d905      	bls.n	8003ff8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	e007      	b.n	8004008 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	1acb      	subs	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	3b01      	subs	r3, #1
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	4293      	cmp	r3, r2
 8004014:	bf28      	it	cs
 8004016:	4613      	movcs	r3, r2
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4293      	cmp	r3, r2
 8004020:	bf28      	it	cs
 8004022:	4613      	movcs	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f002 fb59 	bl	80066ec <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	4413      	add	r3, r2
 8004040:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	4413      	add	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	4413      	add	r3, r2
 8004058:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d101      	bne.n	8004068 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004068:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1b2      	bne.n	8003fde <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004078:	6a3b      	ldr	r3, [r7, #32]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d911      	bls.n	80040ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	6938      	ldr	r0, [r7, #16]
 80040b6:	f002 fb19 	bl	80066ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80040c8:	e01f      	b.n	800410a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	6938      	ldr	r0, [r7, #16]
 80040de:	f002 fb05 	bl	80066ec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4413      	add	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4619      	mov	r1, r3
 80040fa:	6938      	ldr	r0, [r7, #16]
 80040fc:	f002 faf6 	bl	80066ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004100:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	60da      	str	r2, [r3, #12]
}
 800410a:	bf00      	nop
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	429a      	cmp	r2, r3
 800412c:	d808      	bhi.n	8004140 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad2      	subs	r2, r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	3b01      	subs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e004      	b.n	800414a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
  }
  return r;
 800414a:	697b      	ldr	r3, [r7, #20]
}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	; 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b53      	cmp	r3, #83	; 0x53
 8004170:	d001      	beq.n	8004176 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004172:	f7ff fecf 	bl	8003f14 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4a37      	ldr	r2, [pc, #220]	; (8004260 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004184:	4413      	add	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d92b      	bls.n	80041fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bf28      	it	cs
 80041b6:	4613      	movcs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	4413      	add	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	6939      	ldr	r1, [r7, #16]
 80041c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ca:	f002 fa8f 	bl	80066ec <memcpy>
    NumBytesRead += NumBytesRem;
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	4413      	add	r3, r2
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4413      	add	r3, r2
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d101      	bne.n	80041fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4293      	cmp	r3, r2
 800420a:	bf28      	it	cs
 800420c:	4613      	movcs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d019      	beq.n	800424a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	4413      	add	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	6939      	ldr	r1, [r7, #16]
 8004224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004226:	f002 fa61 	bl	80066ec <memcpy>
    NumBytesRead += NumBytesRem;
 800422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4413      	add	r3, r2
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004254:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004258:	4618      	mov	r0, r3
 800425a:	3730      	adds	r7, #48	; 0x30
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20019264 	.word	0x20019264

08004264 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004270:	4b3e      	ldr	r3, [pc, #248]	; (800436c <SEGGER_RTT_ReadNoLock+0x108>)
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b53      	cmp	r3, #83	; 0x53
 800427c:	d001      	beq.n	8004282 <SEGGER_RTT_ReadNoLock+0x1e>
 800427e:	f7ff fe49 	bl	8003f14 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	4a37      	ldr	r2, [pc, #220]	; (800436c <SEGGER_RTT_ReadNoLock+0x108>)
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d92b      	bls.n	8004308 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4293      	cmp	r3, r2
 80042c0:	bf28      	it	cs
 80042c2:	4613      	movcs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	4413      	add	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6939      	ldr	r1, [r7, #16]
 80042d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d6:	f002 fa09 	bl	80066ec <memcpy>
    NumBytesRead += NumBytesRem;
 80042da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4413      	add	r3, r2
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80042f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4413      	add	r3, r2
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004300:	429a      	cmp	r2, r3
 8004302:	d101      	bne.n	8004308 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4293      	cmp	r3, r2
 8004316:	bf28      	it	cs
 8004318:	4613      	movcs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d019      	beq.n	8004356 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	4413      	add	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004332:	f002 f9db 	bl	80066ec <memcpy>
    NumBytesRead += NumBytesRem;
 8004336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800434e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004360:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004364:	4618      	mov	r0, r3
 8004366:	3730      	adds	r7, #48	; 0x30
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20019264 	.word	0x20019264

08004370 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	3360      	adds	r3, #96	; 0x60
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800438e:	4413      	add	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d029      	beq.n	80043ee <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800439a:	2b02      	cmp	r3, #2
 800439c:	d82e      	bhi.n	80043fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d013      	beq.n	80043ce <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80043a6:	e029      	b.n	80043fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff feb2 	bl	8004112 <_GetAvailWriteSpace>
 80043ae:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d202      	bcs.n	80043be <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80043bc:	e021      	b.n	8004402 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff fe5b 	bl	8004082 <_WriteNoCheck>
    break;
 80043cc:	e019      	b.n	8004402 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7ff fe9f 	bl	8004112 <_GetAvailWriteSpace>
 80043d4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4293      	cmp	r3, r2
 80043dc:	bf28      	it	cs
 80043de:	4613      	movcs	r3, r2
 80043e0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff fe4b 	bl	8004082 <_WriteNoCheck>
    break;
 80043ec:	e009      	b.n	8004402 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff fde8 	bl	8003fc8 <_WriteBlocking>
 80043f8:	61f8      	str	r0, [r7, #28]
    break;
 80043fa:	e002      	b.n	8004402 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
    break;
 8004400:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004402:	69fb      	ldr	r3, [r7, #28]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20019264 	.word	0x20019264

08004410 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b53      	cmp	r3, #83	; 0x53
 8004428:	d001      	beq.n	800442e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800442a:	f7ff fd73 	bl	8003f14 <_DoInit>
  SEGGER_RTT_LOCK();
 800442e:	f3ef 8311 	mrs	r3, BASEPRI
 8004432:	f04f 0120 	mov.w	r1, #32
 8004436:	f381 8811 	msr	BASEPRI, r1
 800443a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ff95 	bl	8004370 <SEGGER_RTT_WriteDownBufferNoLock>
 8004446:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800444e:	697b      	ldr	r3, [r7, #20]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20019264 	.word	0x20019264

0800445c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800446a:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b53      	cmp	r3, #83	; 0x53
 8004476:	d001      	beq.n	800447c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004478:	f7ff fd4c 	bl	8003f14 <_DoInit>
  SEGGER_RTT_LOCK();
 800447c:	f3ef 8311 	mrs	r3, BASEPRI
 8004480:	f04f 0120 	mov.w	r1, #32
 8004484:	f381 8811 	msr	BASEPRI, r1
 8004488:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800448c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004492:	6939      	ldr	r1, [r7, #16]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	440b      	add	r3, r1
 80044a2:	3304      	adds	r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	dbeb      	blt.n	8004492 <SEGGER_RTT_AllocUpBuffer+0x36>
 80044ba:	e000      	b.n	80044be <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80044bc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	da3f      	bge.n	8004548 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	3304      	adds	r3, #4
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80044f2:	6939      	ldr	r1, [r7, #16]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	3320      	adds	r3, #32
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	440b      	add	r3, r1
 8004514:	3328      	adds	r3, #40	; 0x28
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	3324      	adds	r3, #36	; 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	332c      	adds	r3, #44	; 0x2c
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004542:	f3bf 8f5f 	dmb	sy
 8004546:	e002      	b.n	800454e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004554:	69fb      	ldr	r3, [r7, #28]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20019264 	.word	0x20019264

08004564 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b53      	cmp	r3, #83	; 0x53
 800457e:	d001      	beq.n	8004584 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004580:	f7ff fcc8 	bl	8003f14 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004586:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d82c      	bhi.n	80045e8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800458e:	f3ef 8311 	mrs	r3, BASEPRI
 8004592:	f04f 0120 	mov.w	r1, #32
 8004596:	f381 8811 	msr	BASEPRI, r1
 800459a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80045d8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	e002      	b.n	80045ee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20019264 	.word	0x20019264

080045fc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	60fa      	str	r2, [r7, #12]
 8004612:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d90a      	bls.n	8004630 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800461e:	e007      	b.n	8004630 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	1c53      	adds	r3, r2, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	60f9      	str	r1, [r7, #12]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1e5a      	subs	r2, r3, #1
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <_EncodeStr+0x46>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3307      	adds	r3, #7
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800467a:	4b35      	ldr	r3, [pc, #212]	; (8004750 <_HandleIncomingPacket+0xdc>)
 800467c:	7e1b      	ldrb	r3, [r3, #24]
 800467e:	4618      	mov	r0, r3
 8004680:	1cfb      	adds	r3, r7, #3
 8004682:	2201      	movs	r2, #1
 8004684:	4619      	mov	r1, r3
 8004686:	f7ff fded 	bl	8004264 <SEGGER_RTT_ReadNoLock>
 800468a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d052      	beq.n	8004738 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d031      	beq.n	80046fc <_HandleIncomingPacket+0x88>
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	dc40      	bgt.n	800471e <_HandleIncomingPacket+0xaa>
 800469c:	2b07      	cmp	r3, #7
 800469e:	dc15      	bgt.n	80046cc <_HandleIncomingPacket+0x58>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	dd3c      	ble.n	800471e <_HandleIncomingPacket+0xaa>
 80046a4:	3b01      	subs	r3, #1
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d839      	bhi.n	800471e <_HandleIncomingPacket+0xaa>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <_HandleIncomingPacket+0x3c>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046d3 	.word	0x080046d3
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046df 	.word	0x080046df
 80046bc:	080046e5 	.word	0x080046e5
 80046c0:	080046eb 	.word	0x080046eb
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	080046f7 	.word	0x080046f7
 80046cc:	2b7f      	cmp	r3, #127	; 0x7f
 80046ce:	d035      	beq.n	800473c <_HandleIncomingPacket+0xc8>
 80046d0:	e025      	b.n	800471e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80046d2:	f001 f82d 	bl	8005730 <SEGGER_SYSVIEW_Start>
      break;
 80046d6:	e036      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80046d8:	f001 f8e6 	bl	80058a8 <SEGGER_SYSVIEW_Stop>
      break;
 80046dc:	e033      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80046de:	f001 fabf 	bl	8005c60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80046e2:	e030      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80046e4:	f001 fa84 	bl	8005bf0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80046e8:	e02d      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80046ea:	f001 f903 	bl	80058f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80046ee:	e02a      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80046f0:	f001 fd5c 	bl	80061ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 80046f4:	e027      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80046f6:	f001 fd3b 	bl	8006170 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80046fa:	e024      	b.n	8004746 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <_HandleIncomingPacket+0xdc>)
 80046fe:	7e1b      	ldrb	r3, [r3, #24]
 8004700:	4618      	mov	r0, r3
 8004702:	1cfb      	adds	r3, r7, #3
 8004704:	2201      	movs	r2, #1
 8004706:	4619      	mov	r1, r3
 8004708:	f7ff fdac 	bl	8004264 <SEGGER_RTT_ReadNoLock>
 800470c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fca0 	bl	800605c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800471c:	e010      	b.n	8004740 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	da0e      	bge.n	8004744 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <_HandleIncomingPacket+0xdc>)
 8004728:	7e1b      	ldrb	r3, [r3, #24]
 800472a:	4618      	mov	r0, r3
 800472c:	1cfb      	adds	r3, r7, #3
 800472e:	2201      	movs	r2, #1
 8004730:	4619      	mov	r1, r3
 8004732:	f7ff fd97 	bl	8004264 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004736:	e005      	b.n	8004744 <_HandleIncomingPacket+0xd0>
    }
  }
 8004738:	bf00      	nop
 800473a:	e004      	b.n	8004746 <_HandleIncomingPacket+0xd2>
      break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <_HandleIncomingPacket+0xd2>
      break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <_HandleIncomingPacket+0xd2>
      break;
 8004744:	bf00      	nop
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	2001a724 	.word	0x2001a724

08004754 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b08c      	sub	sp, #48	; 0x30
 8004758:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800475a:	2301      	movs	r3, #1
 800475c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004768:	4b32      	ldr	r3, [pc, #200]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
 800476e:	e00b      	b.n	8004788 <_TrySendOverflowPacket+0x34>
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	62f9      	str	r1, [r7, #44]	; 0x2c
 800477a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	2b7f      	cmp	r3, #127	; 0x7f
 800478c:	d8f0      	bhi.n	8004770 <_TrySendOverflowPacket+0x1c>
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800479e:	4b26      	ldr	r3, [pc, #152]	; (8004838 <_TrySendOverflowPacket+0xe4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	e00b      	b.n	80047d0 <_TrySendOverflowPacket+0x7c>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	6279      	str	r1, [r7, #36]	; 0x24
 80047c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	09db      	lsrs	r3, r3, #7
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b7f      	cmp	r3, #127	; 0x7f
 80047d4:	d8f0      	bhi.n	80047b8 <_TrySendOverflowPacket+0x64>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	627a      	str	r2, [r7, #36]	; 0x24
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	4618      	mov	r0, r3
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	f7fb fcea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047fc:	4603      	mov	r3, r0
 80047fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004800:	f001 feb6 	bl	8006570 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e004      	b.n	8004828 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	3301      	adds	r3, #1
 8004824:	4a03      	ldr	r2, [pc, #12]	; (8004834 <_TrySendOverflowPacket+0xe0>)
 8004826:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004828:	693b      	ldr	r3, [r7, #16]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	2001a724 	.word	0x2001a724
 8004838:	e0001004 	.word	0xe0001004

0800483c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004848:	4b96      	ldr	r3, [pc, #600]	; (8004aa4 <_SendPacket+0x268>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d010      	beq.n	8004872 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004850:	4b94      	ldr	r3, [pc, #592]	; (8004aa4 <_SendPacket+0x268>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8130 	beq.w	8004aba <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800485a:	4b92      	ldr	r3, [pc, #584]	; (8004aa4 <_SendPacket+0x268>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d109      	bne.n	8004876 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004862:	f7ff ff77 	bl	8004754 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004866:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <_SendPacket+0x268>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 8127 	bne.w	8004abe <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004870:	e001      	b.n	8004876 <_SendPacket+0x3a>
    goto Send;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <_SendPacket+0x3c>
Send:
 8004876:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b1f      	cmp	r3, #31
 800487c:	d809      	bhi.n	8004892 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800487e:	4b89      	ldr	r3, [pc, #548]	; (8004aa4 <_SendPacket+0x268>)
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8118 	bne.w	8004ac2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b17      	cmp	r3, #23
 8004896:	d807      	bhi.n	80048a8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b01      	subs	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e0c4      	b.n	8004a32 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	d912      	bls.n	80048dc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	09da      	lsrs	r2, r3, #7
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	60fa      	str	r2, [r7, #12]
 80048d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e006      	b.n	80048ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b7e      	cmp	r3, #126	; 0x7e
 80048ee:	d807      	bhi.n	8004900 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e098      	b.n	8004a32 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d212      	bcs.n	800492e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	09da      	lsrs	r2, r3, #7
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b01      	subs	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	3a01      	subs	r2, #1
 8004920:	60fa      	str	r2, [r7, #12]
 8004922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e081      	b.n	8004a32 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004934:	d21d      	bcs.n	8004972 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0b9a      	lsrs	r2, r3, #14
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b01      	subs	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	b2db      	uxtb	r3, r3
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	3a01      	subs	r2, #1
 8004950:	60fa      	str	r2, [r7, #12]
 8004952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	3a01      	subs	r2, #1
 8004964:	60fa      	str	r2, [r7, #12]
 8004966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e05f      	b.n	8004a32 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004978:	d228      	bcs.n	80049cc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0d5a      	lsrs	r2, r3, #21
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b01      	subs	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0b9b      	lsrs	r3, r3, #14
 800498e:	b2db      	uxtb	r3, r3
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	3a01      	subs	r2, #1
 8004994:	60fa      	str	r2, [r7, #12]
 8004996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	3a01      	subs	r2, #1
 80049aa:	60fa      	str	r2, [r7, #12]
 80049ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	3a01      	subs	r2, #1
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e032      	b.n	8004a32 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0f1a      	lsrs	r2, r3, #28
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0d5b      	lsrs	r3, r3, #21
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	3a01      	subs	r2, #1
 80049e6:	60fa      	str	r2, [r7, #12]
 80049e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0b9b      	lsrs	r3, r3, #14
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	3a01      	subs	r2, #1
 80049fc:	60fa      	str	r2, [r7, #12]
 80049fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	3a01      	subs	r2, #1
 8004a12:	60fa      	str	r2, [r7, #12]
 8004a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	60fa      	str	r2, [r7, #12]
 8004a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <_SendPacket+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <_SendPacket+0x268>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	e00b      	b.n	8004a64 <_SendPacket+0x228>
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	6279      	str	r1, [r7, #36]	; 0x24
 8004a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	09db      	lsrs	r3, r3, #7
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2b7f      	cmp	r3, #127	; 0x7f
 8004a68:	d8f0      	bhi.n	8004a4c <_SendPacket+0x210>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <_SendPacket+0x268>)
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68f9      	ldr	r1, [r7, #12]
 8004a8a:	f7fb fba1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a8e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004a90:	f001 fd6e 	bl	8006570 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a9a:	4a02      	ldr	r2, [pc, #8]	; (8004aa4 <_SendPacket+0x268>)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	60d3      	str	r3, [r2, #12]
 8004aa0:	e010      	b.n	8004ac4 <_SendPacket+0x288>
 8004aa2:	bf00      	nop
 8004aa4:	2001a724 	.word	0x2001a724
 8004aa8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <_SendPacket+0x2d8>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <_SendPacket+0x2d8>)
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e004      	b.n	8004ac4 <_SendPacket+0x288>
    goto SendDone;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <_SendPacket+0x288>
      goto SendDone;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <_SendPacket+0x288>
      goto SendDone;
 8004ac2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ac4:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <_SendPacket+0x2d8>)
 8004ac6:	7e1b      	ldrb	r3, [r3, #24]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <_SendPacket+0x2dc>)
 8004acc:	460b      	mov	r3, r1
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	440b      	add	r3, r1
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	336c      	adds	r3, #108	; 0x6c
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <_SendPacket+0x2d8>)
 8004adc:	7e1b      	ldrb	r3, [r3, #24]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	490d      	ldr	r1, [pc, #52]	; (8004b18 <_SendPacket+0x2dc>)
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4403      	add	r3, r0
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	3370      	adds	r3, #112	; 0x70
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d00b      	beq.n	8004b0c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <_SendPacket+0x2d8>)
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_SendPacket+0x2d8>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b02:	f7ff fdb7 	bl	8004674 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <_SendPacket+0x2d8>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b0c:	bf00      	nop
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	2001a724 	.word	0x2001a724
 8004b18:	20019264 	.word	0x20019264

08004b1c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	d80a      	bhi.n	8004b4c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6051      	str	r1, [r2, #4]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b80      	cmp	r3, #128	; 0x80
 8004b52:	d15a      	bne.n	8004c0a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	e00b      	b.n	8004b8e <_StoreChar+0x72>
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	6279      	str	r1, [r7, #36]	; 0x24
 8004b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d8f0      	bhi.n	8004b76 <_StoreChar+0x5a>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	627a      	str	r2, [r7, #36]	; 0x24
 8004b9a:	6a3a      	ldr	r2, [r7, #32]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e00b      	b.n	8004bc6 <_StoreChar+0xaa>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	1c59      	adds	r1, r3, #1
 8004bb6:	61f9      	str	r1, [r7, #28]
 8004bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	09db      	lsrs	r3, r3, #7
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bca:	d8f0      	bhi.n	8004bae <_StoreChar+0x92>
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	221a      	movs	r2, #26
 8004be2:	6939      	ldr	r1, [r7, #16]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fe29 	bl	800483c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fd34 	bl	800465c <_PreparePacket>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004c26:	2301      	movs	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c2e:	e007      	b.n	8004c40 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	623b      	str	r3, [r7, #32]
    Width++;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d2f3      	bcs.n	8004c30 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d901      	bls.n	8004c54 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11f      	bne.n	8004c9e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01c      	beq.n	8004c9e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <_PrintUnsigned+0x66>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <_PrintUnsigned+0x66>
        c = '0';
 8004c74:	2330      	movs	r3, #48	; 0x30
 8004c76:	76fb      	strb	r3, [r7, #27]
 8004c78:	e001      	b.n	8004c7e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c7e:	e007      	b.n	8004c90 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	3b01      	subs	r3, #1
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004c86:	7efb      	ldrb	r3, [r7, #27]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff ff46 	bl	8004b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <_PrintUnsigned+0x8a>
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d3f0      	bcc.n	8004c80 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d903      	bls.n	8004cac <_PrintUnsigned+0x98>
      NumDigits--;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	e009      	b.n	8004cc0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d200      	bcs.n	8004cc0 <_PrintUnsigned+0xac>
        break;
 8004cbe:	e005      	b.n	8004ccc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004cca:	e7e8      	b.n	8004c9e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <_PrintUnsigned+0x128>)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ff14 	bl	8004b1c <_StoreChar>
    Digit /= Base;
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e3      	bne.n	8004ccc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d011      	beq.n	8004d32 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00e      	beq.n	8004d32 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d14:	e006      	b.n	8004d24 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004d1c:	2120      	movs	r1, #32
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fefc 	bl	8004b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <_PrintUnsigned+0x11e>
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d3f1      	bcc.n	8004d16 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004d32:	bf00      	nop
 8004d34:	3728      	adds	r7, #40	; 0x28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	080068f0 	.word	0x080068f0

08004d40 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bfb8      	it	lt
 8004d54:	425b      	neglt	r3, r3
 8004d56:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d5c:	e007      	b.n	8004d6e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d66:	613b      	str	r3, [r7, #16]
    Width++;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	daf3      	bge.n	8004d5e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d901      	bls.n	8004d82 <_PrintInt+0x42>
    Width = NumDigits;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <_PrintInt+0x5e>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db04      	blt.n	8004d98 <_PrintInt+0x58>
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <_PrintInt+0x5e>
    FieldWidth--;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <_PrintInt+0x6e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <_PrintInt+0x9c>
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004dbe:	e006      	b.n	8004dce <_PrintInt+0x8e>
        FieldWidth--;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004dc6:	2120      	movs	r1, #32
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff fea7 	bl	8004b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <_PrintInt+0x9c>
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d3f1      	bcc.n	8004dc0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	da07      	bge.n	8004df2 <_PrintInt+0xb2>
    v = -v;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	425b      	negs	r3, r3
 8004de6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004de8:	212d      	movs	r1, #45	; 0x2d
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff fe96 	bl	8004b1c <_StoreChar>
 8004df0:	e008      	b.n	8004e04 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004dfc:	212b      	movs	r1, #43	; 0x2b
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fe8c 	bl	8004b1c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d019      	beq.n	8004e42 <_PrintInt+0x102>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d114      	bne.n	8004e42 <_PrintInt+0x102>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d111      	bne.n	8004e42 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e24:	e006      	b.n	8004e34 <_PrintInt+0xf4>
        FieldWidth--;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004e2c:	2130      	movs	r1, #48	; 0x30
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff fe74 	bl	8004b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <_PrintInt+0x102>
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3f1      	bcc.n	8004e26 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff fedf 	bl	8004c14 <_PrintUnsigned>
}
 8004e56:	bf00      	nop
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b098      	sub	sp, #96	; 0x60
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e70:	f04f 0120 	mov.w	r1, #32
 8004e74:	f381 8811 	msr	BASEPRI, r1
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	48b7      	ldr	r0, [pc, #732]	; (8005158 <_VPrintTarget+0x2f8>)
 8004e7c:	f7ff fbee 	bl	800465c <_PreparePacket>
 8004e80:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004e82:	4bb5      	ldr	r3, [pc, #724]	; (8005158 <_VPrintTarget+0x2f8>)
 8004e84:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 81a8 	beq.w	8005200 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eb4:	2b25      	cmp	r3, #37	; 0x25
 8004eb6:	f040 8195 	bne.w	80051e4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ece:	3b23      	subs	r3, #35	; 0x23
 8004ed0:	2b0d      	cmp	r3, #13
 8004ed2:	d83f      	bhi.n	8004f54 <_VPrintTarget+0xf4>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <_VPrintTarget+0x7c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004f55 	.word	0x08004f55
 8004ee4:	08004f55 	.word	0x08004f55
 8004ee8:	08004f55 	.word	0x08004f55
 8004eec:	08004f55 	.word	0x08004f55
 8004ef0:	08004f55 	.word	0x08004f55
 8004ef4:	08004f55 	.word	0x08004f55
 8004ef8:	08004f55 	.word	0x08004f55
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f55 	.word	0x08004f55
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f55 	.word	0x08004f55
 8004f0c:	08004f55 	.word	0x08004f55
 8004f10:	08004f25 	.word	0x08004f25
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e01a      	b.n	8004f5a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e012      	b.n	8004f5a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e00a      	b.n	8004f5a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f46:	f043 0308 	orr.w	r3, r3, #8
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e002      	b.n	8004f5a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004f54:	2300      	movs	r3, #0
 8004f56:	653b      	str	r3, [r7, #80]	; 0x50
 8004f58:	bf00      	nop
        }
      } while (v);
 8004f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1b0      	bne.n	8004ec2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004f60:	2300      	movs	r3, #0
 8004f62:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f70:	2b2f      	cmp	r3, #47	; 0x2f
 8004f72:	d912      	bls.n	8004f9a <_VPrintTarget+0x13a>
 8004f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f78:	2b39      	cmp	r3, #57	; 0x39
 8004f7a:	d80e      	bhi.n	8004f9a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f92:	4413      	add	r3, r2
 8004f94:	3b30      	subs	r3, #48	; 0x30
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004f98:	e7e4      	b.n	8004f64 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004faa:	2b2e      	cmp	r3, #46	; 0x2e
 8004fac:	d11d      	bne.n	8004fea <_VPrintTarget+0x18a>
        sFormat++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8004fc2:	d912      	bls.n	8004fea <_VPrintTarget+0x18a>
 8004fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fc8:	2b39      	cmp	r3, #57	; 0x39
 8004fca:	d80e      	bhi.n	8004fea <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b30      	subs	r3, #48	; 0x30
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004fe8:	e7e4      	b.n	8004fb4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ff6:	2b6c      	cmp	r3, #108	; 0x6c
 8004ff8:	d003      	beq.n	8005002 <_VPrintTarget+0x1a2>
 8004ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ffe:	2b68      	cmp	r3, #104	; 0x68
 8005000:	d107      	bne.n	8005012 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005010:	e7ef      	b.n	8004ff2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005016:	2b25      	cmp	r3, #37	; 0x25
 8005018:	f000 80d8 	beq.w	80051cc <_VPrintTarget+0x36c>
 800501c:	2b25      	cmp	r3, #37	; 0x25
 800501e:	f2c0 80dc 	blt.w	80051da <_VPrintTarget+0x37a>
 8005022:	2b78      	cmp	r3, #120	; 0x78
 8005024:	f300 80d9 	bgt.w	80051da <_VPrintTarget+0x37a>
 8005028:	2b58      	cmp	r3, #88	; 0x58
 800502a:	f2c0 80d6 	blt.w	80051da <_VPrintTarget+0x37a>
 800502e:	3b58      	subs	r3, #88	; 0x58
 8005030:	2b20      	cmp	r3, #32
 8005032:	f200 80d2 	bhi.w	80051da <_VPrintTarget+0x37a>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <_VPrintTarget+0x1dc>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005133 	.word	0x08005133
 8005040:	080051db 	.word	0x080051db
 8005044:	080051db 	.word	0x080051db
 8005048:	080051db 	.word	0x080051db
 800504c:	080051db 	.word	0x080051db
 8005050:	080051db 	.word	0x080051db
 8005054:	080051db 	.word	0x080051db
 8005058:	080051db 	.word	0x080051db
 800505c:	080051db 	.word	0x080051db
 8005060:	080051db 	.word	0x080051db
 8005064:	080051db 	.word	0x080051db
 8005068:	080050c1 	.word	0x080050c1
 800506c:	080050e7 	.word	0x080050e7
 8005070:	080051db 	.word	0x080051db
 8005074:	080051db 	.word	0x080051db
 8005078:	080051db 	.word	0x080051db
 800507c:	080051db 	.word	0x080051db
 8005080:	080051db 	.word	0x080051db
 8005084:	080051db 	.word	0x080051db
 8005088:	080051db 	.word	0x080051db
 800508c:	080051db 	.word	0x080051db
 8005090:	080051db 	.word	0x080051db
 8005094:	080051db 	.word	0x080051db
 8005098:	080051db 	.word	0x080051db
 800509c:	080051a7 	.word	0x080051a7
 80050a0:	080051db 	.word	0x080051db
 80050a4:	080051db 	.word	0x080051db
 80050a8:	0800515d 	.word	0x0800515d
 80050ac:	080051db 	.word	0x080051db
 80050b0:	0800510d 	.word	0x0800510d
 80050b4:	080051db 	.word	0x080051db
 80050b8:	080051db 	.word	0x080051db
 80050bc:	08005133 	.word	0x08005133
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1d19      	adds	r1, r3, #4
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6011      	str	r1, [r2, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80050ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80050d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fd1c 	bl	8004b1c <_StoreChar>
        break;
 80050e4:	e07a      	b.n	80051dc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	1d19      	adds	r1, r3, #4
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6011      	str	r1, [r2, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80050f4:	f107 0010 	add.w	r0, r7, #16
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005102:	220a      	movs	r2, #10
 8005104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005106:	f7ff fe1b 	bl	8004d40 <_PrintInt>
        break;
 800510a:	e067      	b.n	80051dc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1d19      	adds	r1, r3, #4
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800511a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800511c:	f107 0010 	add.w	r0, r7, #16
 8005120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	220a      	movs	r2, #10
 800512c:	f7ff fd72 	bl	8004c14 <_PrintUnsigned>
        break;
 8005130:	e054      	b.n	80051dc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1d19      	adds	r1, r3, #4
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6011      	str	r1, [r2, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005140:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005142:	f107 0010 	add.w	r0, r7, #16
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	2210      	movs	r2, #16
 8005152:	f7ff fd5f 	bl	8004c14 <_PrintUnsigned>
        break;
 8005156:	e041      	b.n	80051dc <_VPrintTarget+0x37c>
 8005158:	2001a754 	.word	0x2001a754
      case 's':
        s = va_arg(*pParamList, const char*);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	1d19      	adds	r1, r3, #4
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <_VPrintTarget+0x314>
          s = "(null)";
 8005170:	4b4a      	ldr	r3, [pc, #296]	; (800529c <_VPrintTarget+0x43c>)
 8005172:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	3301      	adds	r3, #1
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800518a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800518e:	f107 0310 	add.w	r3, r7, #16
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fcc1 	bl	8004b1c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b7f      	cmp	r3, #127	; 0x7f
 800519e:	d9e9      	bls.n	8005174 <_VPrintTarget+0x314>
        break;
 80051a0:	e01c      	b.n	80051dc <_VPrintTarget+0x37c>
            break;
 80051a2:	bf00      	nop
        break;
 80051a4:	e01a      	b.n	80051dc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1d19      	adds	r1, r3, #4
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6011      	str	r1, [r2, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80051b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051b6:	f107 0010 	add.w	r0, r7, #16
 80051ba:	2300      	movs	r3, #0
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	2308      	movs	r3, #8
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2308      	movs	r3, #8
 80051c4:	2210      	movs	r2, #16
 80051c6:	f7ff fd25 	bl	8004c14 <_PrintUnsigned>
        break;
 80051ca:	e007      	b.n	80051dc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	2125      	movs	r1, #37	; 0x25
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fca2 	bl	8004b1c <_StoreChar>
        break;
 80051d8:	e000      	b.n	80051dc <_VPrintTarget+0x37c>
      default:
        break;
 80051da:	bf00      	nop
      }
      sFormat++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e007      	b.n	80051f4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80051e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80051e8:	f107 0310 	add.w	r3, r7, #16
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fc94 	bl	8004b1c <_StoreChar>
    }
  } while (*sFormat);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f ae4d 	bne.w	8004e98 <_VPrintTarget+0x38>
 80051fe:	e000      	b.n	8005202 <_VPrintTarget+0x3a2>
      break;
 8005200:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d041      	beq.n	800528c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
 8005218:	e00b      	b.n	8005232 <_VPrintTarget+0x3d2>
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	b2da      	uxtb	r2, r3
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	09db      	lsrs	r3, r3, #7
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	2b7f      	cmp	r3, #127	; 0x7f
 8005236:	d8f0      	bhi.n	800521a <_VPrintTarget+0x3ba>
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800523e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	2300      	movs	r3, #0
 800524e:	633b      	str	r3, [r7, #48]	; 0x30
 8005250:	e00b      	b.n	800526a <_VPrintTarget+0x40a>
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	6379      	str	r1, [r7, #52]	; 0x34
 800525c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b7f      	cmp	r3, #127	; 0x7f
 800526e:	d8f0      	bhi.n	8005252 <_VPrintTarget+0x3f2>
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	637a      	str	r2, [r7, #52]	; 0x34
 8005276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	221a      	movs	r2, #26
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fad8 	bl	800483c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005292:	bf00      	nop
 8005294:	3758      	adds	r7, #88	; 0x58
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	080068a0 	.word	0x080068a0

080052a0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80052ae:	2300      	movs	r3, #0
 80052b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052b4:	4917      	ldr	r1, [pc, #92]	; (8005314 <SEGGER_SYSVIEW_Init+0x74>)
 80052b6:	4818      	ldr	r0, [pc, #96]	; (8005318 <SEGGER_SYSVIEW_Init+0x78>)
 80052b8:	f7ff f8d0 	bl	800445c <SEGGER_RTT_AllocUpBuffer>
 80052bc:	4603      	mov	r3, r0
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052c2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052c6:	785a      	ldrb	r2, [r3, #1]
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052ca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052ce:	7e1b      	ldrb	r3, [r3, #24]
 80052d0:	4618      	mov	r0, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2308      	movs	r3, #8
 80052d8:	4a11      	ldr	r2, [pc, #68]	; (8005320 <SEGGER_SYSVIEW_Init+0x80>)
 80052da:	490f      	ldr	r1, [pc, #60]	; (8005318 <SEGGER_SYSVIEW_Init+0x78>)
 80052dc:	f7ff f942 	bl	8004564 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <SEGGER_SYSVIEW_Init+0x84>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052ec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80052ee:	4a0b      	ldr	r2, [pc, #44]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80052f4:	4a09      	ldr	r2, [pc, #36]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <SEGGER_SYSVIEW_Init+0x7c>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	2001971c 	.word	0x2001971c
 8005318:	080068a8 	.word	0x080068a8
 800531c:	2001a724 	.word	0x2001a724
 8005320:	2001a71c 	.word	0x2001a71c
 8005324:	e0001004 	.word	0xe0001004

08005328 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6113      	str	r3, [r2, #16]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2001a724 	.word	0x2001a724

08005348 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005350:	f3ef 8311 	mrs	r3, BASEPRI
 8005354:	f04f 0120 	mov.w	r1, #32
 8005358:	f381 8811 	msr	BASEPRI, r1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4808      	ldr	r0, [pc, #32]	; (8005380 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005360:	f7ff f97c 	bl	800465c <_PreparePacket>
 8005364:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7ff fa66 	bl	800483c <_SendPacket>
  RECORD_END();
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f383 8811 	msr	BASEPRI, r3
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2001a754 	.word	0x2001a754

08005384 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800538e:	f3ef 8311 	mrs	r3, BASEPRI
 8005392:	f04f 0120 	mov.w	r1, #32
 8005396:	f381 8811 	msr	BASEPRI, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	4816      	ldr	r0, [pc, #88]	; (80053f8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800539e:	f7ff f95d 	bl	800465c <_PreparePacket>
 80053a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e00b      	b.n	80053ca <SEGGER_SYSVIEW_RecordU32+0x46>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	61f9      	str	r1, [r7, #28]
 80053bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	09db      	lsrs	r3, r3, #7
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b7f      	cmp	r3, #127	; 0x7f
 80053ce:	d8f0      	bhi.n	80053b2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	61fa      	str	r2, [r7, #28]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6938      	ldr	r0, [r7, #16]
 80053e6:	f7ff fa29 	bl	800483c <_SendPacket>
  RECORD_END();
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	bf00      	nop
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	2001a754 	.word	0x2001a754

080053fc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	; 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005408:	f3ef 8311 	mrs	r3, BASEPRI
 800540c:	f04f 0120 	mov.w	r1, #32
 8005410:	f381 8811 	msr	BASEPRI, r1
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005418:	f7ff f920 	bl	800465c <_PreparePacket>
 800541c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
 800542a:	e00b      	b.n	8005444 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b7f      	cmp	r3, #127	; 0x7f
 8005448:	d8f0      	bhi.n	800542c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e00b      	b.n	800547c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	6279      	str	r1, [r7, #36]	; 0x24
 800546e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b7f      	cmp	r3, #127	; 0x7f
 8005480:	d8f0      	bhi.n	8005464 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	627a      	str	r2, [r7, #36]	; 0x24
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	69b8      	ldr	r0, [r7, #24]
 8005498:	f7ff f9d0 	bl	800483c <_SendPacket>
  RECORD_END();
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f383 8811 	msr	BASEPRI, r3
}
 80054a2:	bf00      	nop
 80054a4:	3730      	adds	r7, #48	; 0x30
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2001a754 	.word	0x2001a754

080054b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b090      	sub	sp, #64	; 0x40
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054be:	f3ef 8311 	mrs	r3, BASEPRI
 80054c2:	f04f 0120 	mov.w	r1, #32
 80054c6:	f381 8811 	msr	BASEPRI, r1
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	4840      	ldr	r0, [pc, #256]	; (80055d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80054ce:	f7ff f8c5 	bl	800465c <_PreparePacket>
 80054d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
 8005518:	e00b      	b.n	8005532 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	6379      	str	r1, [r7, #52]	; 0x34
 8005524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	633b      	str	r3, [r7, #48]	; 0x30
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	d8f0      	bhi.n	800551a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	637a      	str	r2, [r7, #52]	; 0x34
 800553e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005550:	e00b      	b.n	800556a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800555c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	d8f0      	bhi.n	8005552 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	e00b      	b.n	80055a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1c59      	adds	r1, r3, #1
 8005592:	6279      	str	r1, [r7, #36]	; 0x24
 8005594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	09db      	lsrs	r3, r3, #7
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2b7f      	cmp	r3, #127	; 0x7f
 80055a6:	d8f0      	bhi.n	800558a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	627a      	str	r2, [r7, #36]	; 0x24
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	69b8      	ldr	r0, [r7, #24]
 80055be:	f7ff f93d 	bl	800483c <_SendPacket>
  RECORD_END();
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f383 8811 	msr	BASEPRI, r3
}
 80055c8:	bf00      	nop
 80055ca:	3740      	adds	r7, #64	; 0x40
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	2001a754 	.word	0x2001a754

080055d4 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b092      	sub	sp, #72	; 0x48
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	f04f 0120 	mov.w	r1, #32
 80055ea:	f381 8811 	msr	BASEPRI, r1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	484e      	ldr	r0, [pc, #312]	; (800572c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80055f2:	f7ff f833 	bl	800465c <_PreparePacket>
 80055f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	643b      	str	r3, [r7, #64]	; 0x40
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8005606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	6479      	str	r1, [r7, #68]	; 0x44
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
 800561e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	647a      	str	r2, [r7, #68]	; 0x44
 800562a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
 8005674:	e00b      	b.n	800568e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	6379      	str	r1, [r7, #52]	; 0x34
 8005680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	633b      	str	r3, [r7, #48]	; 0x30
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d8f0      	bhi.n	8005676 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	637a      	str	r2, [r7, #52]	; 0x34
 800569a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ac:	e00b      	b.n	80056c6 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	1c59      	adds	r1, r3, #1
 80056b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	09db      	lsrs	r3, r3, #7
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ca:	d8f0      	bhi.n	80056ae <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	e00b      	b.n	80056fe <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	6279      	str	r1, [r7, #36]	; 0x24
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	627a      	str	r2, [r7, #36]	; 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	6979      	ldr	r1, [r7, #20]
 8005718:	69b8      	ldr	r0, [r7, #24]
 800571a:	f7ff f88f 	bl	800483c <_SendPacket>
  RECORD_END();
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	f383 8811 	msr	BASEPRI, r3
}
 8005724:	bf00      	nop
 8005726:	3748      	adds	r7, #72	; 0x48
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	2001a754 	.word	0x2001a754

08005730 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005736:	4b59      	ldr	r3, [pc, #356]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800573c:	f3ef 8311 	mrs	r3, BASEPRI
 8005740:	f04f 0120 	mov.w	r1, #32
 8005744:	f381 8811 	msr	BASEPRI, r1
 8005748:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800574a:	4b54      	ldr	r3, [pc, #336]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	220a      	movs	r2, #10
 8005750:	4953      	ldr	r1, [pc, #332]	; (80058a0 <SEGGER_SYSVIEW_Start+0x170>)
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa fd3c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800575e:	f000 ff07 	bl	8006570 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005762:	200a      	movs	r0, #10
 8005764:	f7ff fdf0 	bl	8005348 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005768:	f3ef 8311 	mrs	r3, BASEPRI
 800576c:	f04f 0120 	mov.w	r1, #32
 8005770:	f381 8811 	msr	BASEPRI, r1
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	484b      	ldr	r0, [pc, #300]	; (80058a4 <SEGGER_SYSVIEW_Start+0x174>)
 8005778:	f7fe ff70 	bl	800465c <_PreparePacket>
 800577c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005786:	4b45      	ldr	r3, [pc, #276]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
 800578c:	e00b      	b.n	80057a6 <SEGGER_SYSVIEW_Start+0x76>
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	b2da      	uxtb	r2, r3
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	2b7f      	cmp	r3, #127	; 0x7f
 80057aa:	d8f0      	bhi.n	800578e <SEGGER_SYSVIEW_Start+0x5e>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	e00b      	b.n	80057e0 <SEGGER_SYSVIEW_Start+0xb0>
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	6279      	str	r1, [r7, #36]	; 0x24
 80057d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	09db      	lsrs	r3, r3, #7
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2b7f      	cmp	r3, #127	; 0x7f
 80057e4:	d8f0      	bhi.n	80057c8 <SEGGER_SYSVIEW_Start+0x98>
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	627a      	str	r2, [r7, #36]	; 0x24
 80057ec:	6a3a      	ldr	r2, [r7, #32]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	4b28      	ldr	r3, [pc, #160]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e00b      	b.n	800581a <SEGGER_SYSVIEW_Start+0xea>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	1c59      	adds	r1, r3, #1
 800580a:	61f9      	str	r1, [r7, #28]
 800580c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b7f      	cmp	r3, #127	; 0x7f
 800581e:	d8f0      	bhi.n	8005802 <SEGGER_SYSVIEW_Start+0xd2>
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	61fa      	str	r2, [r7, #28]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	2300      	movs	r3, #0
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	e00b      	b.n	8005852 <SEGGER_SYSVIEW_Start+0x122>
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	6179      	str	r1, [r7, #20]
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <SEGGER_SYSVIEW_Start+0x10a>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	617a      	str	r2, [r7, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005868:	2218      	movs	r2, #24
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fe ffe5 	bl	800483c <_SendPacket>
      RECORD_END();
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <SEGGER_SYSVIEW_Start+0x16c>)
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005886:	f000 f9eb 	bl	8005c60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800588a:	f000 f9b1 	bl	8005bf0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800588e:	f000 fc8d 	bl	80061ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005892:	bf00      	nop
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	2001a724 	.word	0x2001a724
 80058a0:	080068e4 	.word	0x080068e4
 80058a4:	2001a754 	.word	0x2001a754

080058a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058ae:	f3ef 8311 	mrs	r3, BASEPRI
 80058b2:	f04f 0120 	mov.w	r1, #32
 80058b6:	f381 8811 	msr	BASEPRI, r1
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	480b      	ldr	r0, [pc, #44]	; (80058ec <SEGGER_SYSVIEW_Stop+0x44>)
 80058be:	f7fe fecd 	bl	800465c <_PreparePacket>
 80058c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80058cc:	220b      	movs	r2, #11
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f7fe ffb3 	bl	800483c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f383 8811 	msr	BASEPRI, r3
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	2001a754 	.word	0x2001a754
 80058f0:	2001a724 	.word	0x2001a724

080058f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058fa:	f3ef 8311 	mrs	r3, BASEPRI
 80058fe:	f04f 0120 	mov.w	r1, #32
 8005902:	f381 8811 	msr	BASEPRI, r1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	4845      	ldr	r0, [pc, #276]	; (8005a20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800590a:	f7fe fea7 	bl	800465c <_PreparePacket>
 800590e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
 800591e:	e00b      	b.n	8005938 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	62f9      	str	r1, [r7, #44]	; 0x2c
 800592a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	09db      	lsrs	r3, r3, #7
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	2b7f      	cmp	r3, #127	; 0x7f
 800593c:	d8f0      	bhi.n	8005920 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	4b34      	ldr	r3, [pc, #208]	; (8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	e00b      	b.n	8005972 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	6279      	str	r1, [r7, #36]	; 0x24
 8005964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b7f      	cmp	r3, #127	; 0x7f
 8005976:	d8f0      	bhi.n	800595a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	627a      	str	r2, [r7, #36]	; 0x24
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e00b      	b.n	80059ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	61f9      	str	r1, [r7, #28]
 800599e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b7f      	cmp	r3, #127	; 0x7f
 80059b0:	d8f0      	bhi.n	8005994 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	61fa      	str	r2, [r7, #28]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e00b      	b.n	80059e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	6179      	str	r1, [r7, #20]
 80059d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	09db      	lsrs	r3, r3, #7
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b7f      	cmp	r3, #127	; 0x7f
 80059e8:	d8f0      	bhi.n	80059cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	617a      	str	r2, [r7, #20]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80059fa:	2218      	movs	r2, #24
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	68b8      	ldr	r0, [r7, #8]
 8005a00:	f7fe ff1c 	bl	800483c <_SendPacket>
  RECORD_END();
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a12:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	4798      	blx	r3
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2001a754 	.word	0x2001a754
 8005a24:	2001a724 	.word	0x2001a724

08005a28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b092      	sub	sp, #72	; 0x48
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a30:	f3ef 8311 	mrs	r3, BASEPRI
 8005a34:	f04f 0120 	mov.w	r1, #32
 8005a38:	f381 8811 	msr	BASEPRI, r1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	486a      	ldr	r0, [pc, #424]	; (8005be8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a40:	f7fe fe0c 	bl	800465c <_PreparePacket>
 8005a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b66      	ldr	r3, [pc, #408]	; (8005bec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5a:	e00b      	b.n	8005a74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	6479      	str	r1, [r7, #68]	; 0x44
 8005a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	09db      	lsrs	r3, r3, #7
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	2b7f      	cmp	r3, #127	; 0x7f
 8005a78:	d8f0      	bhi.n	8005a5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a94:	e00b      	b.n	8005aae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9c:	1c59      	adds	r1, r3, #1
 8005a9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005aa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	09db      	lsrs	r3, r3, #7
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab2:	d8f0      	bhi.n	8005a96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7fe fd95 	bl	80045fc <_EncodeStr>
 8005ad2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ad4:	2209      	movs	r2, #9
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	6938      	ldr	r0, [r7, #16]
 8005ada:	f7fe feaf 	bl	800483c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b40      	ldr	r3, [pc, #256]	; (8005bec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
 8005af2:	e00b      	b.n	8005b0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	6379      	str	r1, [r7, #52]	; 0x34
 8005afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	09db      	lsrs	r3, r3, #7
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b10:	d8f0      	bhi.n	8005af4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	637a      	str	r2, [r7, #52]	; 0x34
 8005b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2c:	e00b      	b.n	8005b46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4a:	d8f0      	bhi.n	8005b2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e00b      	b.n	8005b80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	1c59      	adds	r1, r3, #1
 8005b70:	6279      	str	r1, [r7, #36]	; 0x24
 8005b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	09db      	lsrs	r3, r3, #7
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	2b7f      	cmp	r3, #127	; 0x7f
 8005b84:	d8f0      	bhi.n	8005b68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b8c:	6a3a      	ldr	r2, [r7, #32]
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e00b      	b.n	8005bba <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	1c59      	adds	r1, r3, #1
 8005baa:	61f9      	str	r1, [r7, #28]
 8005bac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	09db      	lsrs	r3, r3, #7
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bbe:	d8f0      	bhi.n	8005ba2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	61fa      	str	r2, [r7, #28]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005bd0:	2215      	movs	r2, #21
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6938      	ldr	r0, [r7, #16]
 8005bd6:	f7fe fe31 	bl	800483c <_SendPacket>
  RECORD_END();
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f383 8811 	msr	BASEPRI, r3
}
 8005be0:	bf00      	nop
 8005be2:	3748      	adds	r7, #72	; 0x48
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	2001a754 	.word	0x2001a754
 8005bec:	2001a724 	.word	0x2001a724

08005bf0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4798      	blx	r3
  }
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2001a724 	.word	0x2001a724

08005c18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c20:	f3ef 8311 	mrs	r3, BASEPRI
 8005c24:	f04f 0120 	mov.w	r1, #32
 8005c28:	f381 8811 	msr	BASEPRI, r1
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	480b      	ldr	r0, [pc, #44]	; (8005c5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c30:	f7fe fd14 	bl	800465c <_PreparePacket>
 8005c34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f7fe fcde 	bl	80045fc <_EncodeStr>
 8005c40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c42:	220e      	movs	r2, #14
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f7fe fdf8 	bl	800483c <_SendPacket>
  RECORD_END();
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f383 8811 	msr	BASEPRI, r3
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2001a754 	.word	0x2001a754

08005c60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01a      	beq.n	8005ca4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005c78:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4798      	blx	r3
 8005c80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c84:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	000a      	movs	r2, r1
 8005c94:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c96:	4613      	mov	r3, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	200d      	movs	r0, #13
 8005c9e:	f7ff fbad 	bl	80053fc <SEGGER_SYSVIEW_RecordU32x2>
 8005ca2:	e006      	b.n	8005cb2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	200c      	movs	r0, #12
 8005cac:	f7ff fb6a 	bl	8005384 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	2001a724 	.word	0x2001a724
 8005cc0:	e0001004 	.word	0xe0001004

08005cc4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cca:	f3ef 8311 	mrs	r3, BASEPRI
 8005cce:	f04f 0120 	mov.w	r1, #32
 8005cd2:	f381 8811 	msr	BASEPRI, r1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	4819      	ldr	r0, [pc, #100]	; (8005d40 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005cda:	f7fe fcbf 	bl	800465c <_PreparePacket>
 8005cde:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e00b      	b.n	8005d10 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	6179      	str	r1, [r7, #20]
 8005d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b7f      	cmp	r3, #127	; 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	617a      	str	r2, [r7, #20]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d26:	2202      	movs	r2, #2
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	68b8      	ldr	r0, [r7, #8]
 8005d2c:	f7fe fd86 	bl	800483c <_SendPacket>
  RECORD_END();
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f383 8811 	msr	BASEPRI, r3
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2001a754 	.word	0x2001a754
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d52:	f04f 0120 	mov.w	r1, #32
 8005d56:	f381 8811 	msr	BASEPRI, r1
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	4807      	ldr	r0, [pc, #28]	; (8005d7c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d5e:	f7fe fc7d 	bl	800465c <_PreparePacket>
 8005d62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d64:	2203      	movs	r2, #3
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f7fe fd67 	bl	800483c <_SendPacket>
  RECORD_END();
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f383 8811 	msr	BASEPRI, r3
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2001a754 	.word	0x2001a754

08005d80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	f04f 0120 	mov.w	r1, #32
 8005d8e:	f381 8811 	msr	BASEPRI, r1
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	4807      	ldr	r0, [pc, #28]	; (8005db4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005d96:	f7fe fc61 	bl	800465c <_PreparePacket>
 8005d9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005d9c:	2212      	movs	r2, #18
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f7fe fd4b 	bl	800483c <_SendPacket>
  RECORD_END();
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f383 8811 	msr	BASEPRI, r3
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	2001a754 	.word	0x2001a754

08005db8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc2:	f04f 0120 	mov.w	r1, #32
 8005dc6:	f381 8811 	msr	BASEPRI, r1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	4807      	ldr	r0, [pc, #28]	; (8005dec <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005dce:	f7fe fc45 	bl	800465c <_PreparePacket>
 8005dd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005dd4:	2211      	movs	r2, #17
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6838      	ldr	r0, [r7, #0]
 8005dda:	f7fe fd2f 	bl	800483c <_SendPacket>
  RECORD_END();
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f383 8811 	msr	BASEPRI, r3
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	2001a754 	.word	0x2001a754

08005df0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005df8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfc:	f04f 0120 	mov.w	r1, #32
 8005e00:	f381 8811 	msr	BASEPRI, r1
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	4819      	ldr	r0, [pc, #100]	; (8005e6c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e08:	f7fe fc28 	bl	800465c <_PreparePacket>
 8005e0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e00b      	b.n	8005e3e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	61f9      	str	r1, [r7, #28]
 8005e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	09db      	lsrs	r3, r3, #7
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b7f      	cmp	r3, #127	; 0x7f
 8005e42:	d8f0      	bhi.n	8005e26 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	61fa      	str	r2, [r7, #28]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005e54:	2208      	movs	r2, #8
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f7fe fcef 	bl	800483c <_SendPacket>
  RECORD_END();
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f383 8811 	msr	BASEPRI, r3
}
 8005e64:	bf00      	nop
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2001a754 	.word	0x2001a754
 8005e70:	2001a724 	.word	0x2001a724

08005e74 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e80:	f04f 0120 	mov.w	r1, #32
 8005e84:	f381 8811 	msr	BASEPRI, r1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	4819      	ldr	r0, [pc, #100]	; (8005ef0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005e8c:	f7fe fbe6 	bl	800465c <_PreparePacket>
 8005e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e96:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e00b      	b.n	8005ec2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	61f9      	str	r1, [r7, #28]
 8005eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	09db      	lsrs	r3, r3, #7
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec6:	d8f0      	bhi.n	8005eaa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	61fa      	str	r2, [r7, #28]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ed8:	2204      	movs	r2, #4
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6938      	ldr	r0, [r7, #16]
 8005ede:	f7fe fcad 	bl	800483c <_SendPacket>
  RECORD_END();
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f383 8811 	msr	BASEPRI, r3
}
 8005ee8:	bf00      	nop
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	2001a754 	.word	0x2001a754
 8005ef4:	2001a724 	.word	0x2001a724

08005ef8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f00:	f3ef 8311 	mrs	r3, BASEPRI
 8005f04:	f04f 0120 	mov.w	r1, #32
 8005f08:	f381 8811 	msr	BASEPRI, r1
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	4819      	ldr	r0, [pc, #100]	; (8005f74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f10:	f7fe fba4 	bl	800465c <_PreparePacket>
 8005f14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	61f9      	str	r1, [r7, #28]
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	61fa      	str	r2, [r7, #28]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005f5c:	2206      	movs	r2, #6
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	6938      	ldr	r0, [r7, #16]
 8005f62:	f7fe fc6b 	bl	800483c <_SendPacket>
  RECORD_END();
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2001a754 	.word	0x2001a754
 8005f78:	2001a724 	.word	0x2001a724

08005f7c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	; 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f86:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8a:	f04f 0120 	mov.w	r1, #32
 8005f8e:	f381 8811 	msr	BASEPRI, r1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	4827      	ldr	r0, [pc, #156]	; (8006034 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005f96:	f7fe fb61 	bl	800465c <_PreparePacket>
 8005f9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fa0:	4b25      	ldr	r3, [pc, #148]	; (8006038 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	e00b      	b.n	8005fcc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8005fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	09db      	lsrs	r3, r3, #7
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd0:	d8f0      	bhi.n	8005fb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8005fd8:	6a3a      	ldr	r2, [r7, #32]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e00b      	b.n	8006004 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	61f9      	str	r1, [r7, #28]
 8005ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b7f      	cmp	r3, #127	; 0x7f
 8006008:	d8f0      	bhi.n	8005fec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	61fa      	str	r2, [r7, #28]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800601a:	2207      	movs	r2, #7
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	6938      	ldr	r0, [r7, #16]
 8006020:	f7fe fc0c 	bl	800483c <_SendPacket>
  RECORD_END();
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f383 8811 	msr	BASEPRI, r3
}
 800602a:	bf00      	nop
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	2001a754 	.word	0x2001a754
 8006038:	2001a724 	.word	0x2001a724

0800603c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006044:	4b04      	ldr	r3, [pc, #16]	; (8006058 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	1ad3      	subs	r3, r2, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2001a724 	.word	0x2001a724

0800605c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d077      	beq.n	800615e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800606e:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006074:	2300      	movs	r3, #0
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
 8006078:	e008      	b.n	800608c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	3301      	adds	r3, #1
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006090:	429a      	cmp	r2, r3
 8006092:	d3f2      	bcc.n	800607a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006094:	e000      	b.n	8006098 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006096:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d055      	beq.n	800614a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800609e:	f3ef 8311 	mrs	r3, BASEPRI
 80060a2:	f04f 0120 	mov.w	r1, #32
 80060a6:	f381 8811 	msr	BASEPRI, r1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	482f      	ldr	r0, [pc, #188]	; (800616c <SEGGER_SYSVIEW_SendModule+0x110>)
 80060ae:	f7fe fad5 	bl	800465c <_PreparePacket>
 80060b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_SendModule+0x7e>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	6279      	str	r1, [r7, #36]	; 0x24
 80060cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	2b7f      	cmp	r3, #127	; 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	627a      	str	r2, [r7, #36]	; 0x24
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e00b      	b.n	8006114 <SEGGER_SYSVIEW_SendModule+0xb8>
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	61f9      	str	r1, [r7, #28]
 8006106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b7f      	cmp	r3, #127	; 0x7f
 8006118:	d8f0      	bhi.n	80060fc <SEGGER_SYSVIEW_SendModule+0xa0>
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	61fa      	str	r2, [r7, #28]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	4619      	mov	r1, r3
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7fe fa62 	bl	80045fc <_EncodeStr>
 8006138:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800613a:	2216      	movs	r2, #22
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	6938      	ldr	r0, [r7, #16]
 8006140:	f7fe fb7c 	bl	800483c <_SendPacket>
      RECORD_END();
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <SEGGER_SYSVIEW_SendModule+0x102>
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4798      	blx	r3
    }
  }
}
 800615e:	bf00      	nop
 8006160:	3730      	adds	r7, #48	; 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2001a74c 	.word	0x2001a74c
 800616c:	2001a754 	.word	0x2001a754

08006170 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00f      	beq.n	800619e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f2      	bne.n	8006184 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	2001a74c 	.word	0x2001a74c

080061ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80061b2:	f3ef 8311 	mrs	r3, BASEPRI
 80061b6:	f04f 0120 	mov.w	r1, #32
 80061ba:	f381 8811 	msr	BASEPRI, r1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	4817      	ldr	r0, [pc, #92]	; (8006220 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80061c2:	f7fe fa4b 	bl	800465c <_PreparePacket>
 80061c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	4b14      	ldr	r3, [pc, #80]	; (8006224 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e00b      	b.n	80061f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	6179      	str	r1, [r7, #20]
 80061e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	09db      	lsrs	r3, r3, #7
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b7f      	cmp	r3, #127	; 0x7f
 80061f4:	d8f0      	bhi.n	80061d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	617a      	str	r2, [r7, #20]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006206:	221b      	movs	r2, #27
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	68b8      	ldr	r0, [r7, #8]
 800620c:	f7fe fb16 	bl	800483c <_SendPacket>
  RECORD_END();
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f383 8811 	msr	BASEPRI, r3
}
 8006216:	bf00      	nop
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	2001a754 	.word	0x2001a754
 8006224:	2001a750 	.word	0x2001a750

08006228 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006228:	b40f      	push	{r0, r1, r2, r3}
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	461a      	mov	r2, r3
 800623a:	2100      	movs	r1, #0
 800623c:	6938      	ldr	r0, [r7, #16]
 800623e:	f7fe fe0f 	bl	8004e60 <_VPrintTarget>
  va_end(ParamList);
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800624c:	b004      	add	sp, #16
 800624e:	4770      	bx	lr

08006250 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006258:	f3ef 8311 	mrs	r3, BASEPRI
 800625c:	f04f 0120 	mov.w	r1, #32
 8006260:	f381 8811 	msr	BASEPRI, r1
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	4827      	ldr	r0, [pc, #156]	; (8006304 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006268:	f7fe f9f8 	bl	800465c <_PreparePacket>
 800626c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800626e:	2280      	movs	r2, #128	; 0x80
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f7fe f9c2 	bl	80045fc <_EncodeStr>
 8006278:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	2301      	movs	r3, #1
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	e00b      	b.n	800629c <SEGGER_SYSVIEW_Warn+0x4c>
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	6279      	str	r1, [r7, #36]	; 0x24
 800628e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	09db      	lsrs	r3, r3, #7
 800629a:	623b      	str	r3, [r7, #32]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b7f      	cmp	r3, #127	; 0x7f
 80062a0:	d8f0      	bhi.n	8006284 <SEGGER_SYSVIEW_Warn+0x34>
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	627a      	str	r2, [r7, #36]	; 0x24
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e00b      	b.n	80062d4 <SEGGER_SYSVIEW_Warn+0x84>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	1c59      	adds	r1, r3, #1
 80062c4:	61f9      	str	r1, [r7, #28]
 80062c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	09db      	lsrs	r3, r3, #7
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b7f      	cmp	r3, #127	; 0x7f
 80062d8:	d8f0      	bhi.n	80062bc <SEGGER_SYSVIEW_Warn+0x6c>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	61fa      	str	r2, [r7, #28]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062ea:	221a      	movs	r2, #26
 80062ec:	68f9      	ldr	r1, [r7, #12]
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f7fe faa4 	bl	800483c <_SendPacket>
  RECORD_END();
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f383 8811 	msr	BASEPRI, r3
}
 80062fa:	bf00      	nop
 80062fc:	3728      	adds	r7, #40	; 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2001a754 	.word	0x2001a754

08006308 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800630c:	4b13      	ldr	r3, [pc, #76]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800630e:	7e1b      	ldrb	r3, [r3, #24]
 8006310:	4619      	mov	r1, r3
 8006312:	4a13      	ldr	r2, [pc, #76]	; (8006360 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006314:	460b      	mov	r3, r1
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	440b      	add	r3, r1
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	4413      	add	r3, r2
 800631e:	336c      	adds	r3, #108	; 0x6c
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006324:	7e1b      	ldrb	r3, [r3, #24]
 8006326:	4618      	mov	r0, r3
 8006328:	490d      	ldr	r1, [pc, #52]	; (8006360 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800632a:	4603      	mov	r3, r0
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	4403      	add	r3, r0
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	440b      	add	r3, r1
 8006334:	3370      	adds	r3, #112	; 0x70
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d00b      	beq.n	8006354 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006346:	2201      	movs	r2, #1
 8006348:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800634a:	f7fe f993 	bl	8004674 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006350:	2200      	movs	r2, #0
 8006352:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006354:	4b01      	ldr	r3, [pc, #4]	; (800635c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006356:	781b      	ldrb	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}
 800635c:	2001a724 	.word	0x2001a724
 8006360:	20019264 	.word	0x20019264

08006364 <__NVIC_EnableIRQ>:
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800636e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006372:	2b00      	cmp	r3, #0
 8006374:	db0b      	blt.n	800638e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	f003 021f 	and.w	r2, r3, #31
 800637c:	4907      	ldr	r1, [pc, #28]	; (800639c <__NVIC_EnableIRQ+0x38>)
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	2001      	movs	r0, #1
 8006386:	fa00 f202 	lsl.w	r2, r0, r2
 800638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	e000e100 	.word	0xe000e100

080063a0 <__NVIC_SetPriority>:
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	6039      	str	r1, [r7, #0]
 80063aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db0a      	blt.n	80063ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	490c      	ldr	r1, [pc, #48]	; (80063ec <__NVIC_SetPriority+0x4c>)
 80063ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063be:	0112      	lsls	r2, r2, #4
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	440b      	add	r3, r1
 80063c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063c8:	e00a      	b.n	80063e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4908      	ldr	r1, [pc, #32]	; (80063f0 <__NVIC_SetPriority+0x50>)
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	3b04      	subs	r3, #4
 80063d8:	0112      	lsls	r2, r2, #4
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	440b      	add	r3, r1
 80063de:	761a      	strb	r2, [r3, #24]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	e000e100 	.word	0xe000e100
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80063fa:	f7ff ff85 	bl	8006308 <SEGGER_SYSVIEW_IsStarted>
 80063fe:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8006406:	f7ff f993 	bl	8005730 <SEGGER_SYSVIEW_Start>
  }
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <_cbOnUARTRx+0x3c>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d806      	bhi.n	8006434 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <_cbOnUARTRx+0x3c>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <_cbOnUARTRx+0x3c>)
 8006430:	701a      	strb	r2, [r3, #0]
    goto Done;
 8006432:	e009      	b.n	8006448 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8006434:	f7ff ffde 	bl	80063f4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <_cbOnUARTRx+0x3c>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	1dfb      	adds	r3, r7, #7
 8006440:	2201      	movs	r2, #1
 8006442:	4619      	mov	r1, r3
 8006444:	f7fd ffe4 	bl	8004410 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8006448:	bf00      	nop
}
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000014 	.word	0x20000014

08006454 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <_cbOnUARTTx+0x5c>)
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d80f      	bhi.n	8006484 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8006464:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <_cbOnUARTTx+0x5c>)
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	461a      	mov	r2, r3
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <_cbOnUARTTx+0x60>)
 800646c:	5c9a      	ldrb	r2, [r3, r2]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8006472:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <_cbOnUARTTx+0x5c>)
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	3301      	adds	r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <_cbOnUARTTx+0x5c>)
 800647c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
    goto Done;
 8006482:	e00f      	b.n	80064a4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <_cbOnUARTTx+0x5c>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd fe63 	bl	8004158 <SEGGER_RTT_ReadUpBufferNoLock>
 8006492:	4603      	mov	r3, r0
 8006494:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da02      	bge.n	80064a2 <_cbOnUARTTx+0x4e>
    r = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e000      	b.n	80064a4 <_cbOnUARTTx+0x50>
  }
Done:
 80064a2:	bf00      	nop
  return r;
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000014 	.word	0x20000014
 80064b4:	08006900 	.word	0x08006900

080064b8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <SEGGER_UART_init+0x1c>)
 80064c2:	4905      	ldr	r1, [pc, #20]	; (80064d8 <SEGGER_UART_init+0x20>)
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f863 	bl	8006590 <HIF_UART_Init>
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	08006415 	.word	0x08006415
 80064d8:	08006455 	.word	0x08006455

080064dc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80064e2:	4b1e      	ldr	r3, [pc, #120]	; (800655c <USART2_IRQHandler+0x80>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d011      	beq.n	8006516 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80064f2:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <USART2_IRQHandler+0x84>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 030b 	and.w	r3, r3, #11
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <USART2_IRQHandler+0x88>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800650c:	4b15      	ldr	r3, [pc, #84]	; (8006564 <USART2_IRQHandler+0x88>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	79fa      	ldrb	r2, [r7, #7]
 8006512:	4610      	mov	r0, r2
 8006514:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01a      	beq.n	8006556 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006520:	4b11      	ldr	r3, [pc, #68]	; (8006568 <USART2_IRQHandler+0x8c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d015      	beq.n	8006554 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <USART2_IRQHandler+0x8c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	1dfa      	adds	r2, r7, #7
 800652e:	4610      	mov	r0, r2
 8006530:	4798      	blx	r3
 8006532:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <USART2_IRQHandler+0x90>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a0b      	ldr	r2, [pc, #44]	; (800656c <USART2_IRQHandler+0x90>)
 8006540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e006      	b.n	8006556 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <USART2_IRQHandler+0x80>)
 800654a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800654c:	79fa      	ldrb	r2, [r7, #7]
 800654e:	4b04      	ldr	r3, [pc, #16]	; (8006560 <USART2_IRQHandler+0x84>)
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e000      	b.n	8006556 <USART2_IRQHandler+0x7a>
      return;
 8006554:	bf00      	nop
    }
  }
}
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40004400 	.word	0x40004400
 8006560:	40004404 	.word	0x40004404
 8006564:	2001a838 	.word	0x2001a838
 8006568:	2001a83c 	.word	0x2001a83c
 800656c:	4000440c 	.word	0x4000440c

08006570 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657e:	6013      	str	r3, [r2, #0]
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	4000440c 	.word	0x4000440c

08006590 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800659c:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <HIF_UART_Init+0xc8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2d      	ldr	r2, [pc, #180]	; (8006658 <HIF_UART_Init+0xc8>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HIF_UART_Init+0xcc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2b      	ldr	r2, [pc, #172]	; (800665c <HIF_UART_Init+0xcc>)
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80065b4:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <HIF_UART_Init+0xd0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80065c8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80065ca:	4a25      	ldr	r2, [pc, #148]	; (8006660 <HIF_UART_Init+0xd0>)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <HIF_UART_Init+0xd4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065dc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80065e4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80065e6:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <HIF_UART_Init+0xd4>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80065ec:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <HIF_UART_Init+0xd8>)
 80065ee:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80065f2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80065f4:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HIF_UART_Init+0xdc>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HIF_UART_Init+0xe0>)
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8006606:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <HIF_UART_Init+0xe4>)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d302      	bcc.n	8006626 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8006620:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006624:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	4a11      	ldr	r2, [pc, #68]	; (8006678 <HIF_UART_Init+0xe8>)
 8006632:	b29b      	uxth	r3, r3
 8006634:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8006636:	4a11      	ldr	r2, [pc, #68]	; (800667c <HIF_UART_Init+0xec>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800663c:	4a10      	ldr	r2, [pc, #64]	; (8006680 <HIF_UART_Init+0xf0>)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8006642:	2106      	movs	r1, #6
 8006644:	2026      	movs	r0, #38	; 0x26
 8006646:	f7ff feab 	bl	80063a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800664a:	2026      	movs	r0, #38	; 0x26
 800664c:	f7ff fe8a 	bl	8006364 <__NVIC_EnableIRQ>
}
 8006650:	bf00      	nop
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40023840 	.word	0x40023840
 800665c:	40023830 	.word	0x40023830
 8006660:	40020020 	.word	0x40020020
 8006664:	40020000 	.word	0x40020000
 8006668:	4000440c 	.word	0x4000440c
 800666c:	40004410 	.word	0x40004410
 8006670:	40004414 	.word	0x40004414
 8006674:	0501bd00 	.word	0x0501bd00
 8006678:	40004408 	.word	0x40004408
 800667c:	2001a838 	.word	0x2001a838
 8006680:	2001a83c 	.word	0x2001a83c

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 f83e 	bl	8006718 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	0800690c 	.word	0x0800690c
 80066c0:	0800690c 	.word	0x0800690c
 80066c4:	0800690c 	.word	0x0800690c
 80066c8:	08006910 	.word	0x08006910

080066cc <memcmp>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	3901      	subs	r1, #1
 80066d0:	4402      	add	r2, r0
 80066d2:	4290      	cmp	r0, r2
 80066d4:	d101      	bne.n	80066da <memcmp+0xe>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e005      	b.n	80066e6 <memcmp+0x1a>
 80066da:	7803      	ldrb	r3, [r0, #0]
 80066dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d001      	beq.n	80066e8 <memcmp+0x1c>
 80066e4:	1b18      	subs	r0, r3, r4
 80066e6:	bd10      	pop	{r4, pc}
 80066e8:	3001      	adds	r0, #1
 80066ea:	e7f2      	b.n	80066d2 <memcmp+0x6>

080066ec <memcpy>:
 80066ec:	440a      	add	r2, r1
 80066ee:	4291      	cmp	r1, r2
 80066f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f4:	d100      	bne.n	80066f8 <memcpy+0xc>
 80066f6:	4770      	bx	lr
 80066f8:	b510      	push	{r4, lr}
 80066fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006702:	4291      	cmp	r1, r2
 8006704:	d1f9      	bne.n	80066fa <memcpy+0xe>
 8006706:	bd10      	pop	{r4, pc}

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
